/*
    Blastzone (c) 2017 bluehexagons, all rights reserved
*/

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.3.2
 */
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if (typeof define === 'function' && define.amd)
        define([], factory);
    else {
        var a = factory();
        for (var i in a)
            (typeof exports === 'object' ? exports : root)[i] = a[i];
    }
})(this, function () {
    return (function (modules) {
        /******/ // The module cache
        /******/ var installedModules = {};
        /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/ // Check if module is in cache
            /******/ if (installedModules[moduleId])
                /******/ return installedModules[moduleId].exports;
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = installedModules[moduleId] = {
                /******/ exports: {},
                /******/ id: moduleId,
                /******/ loaded: false
            };
            /******/ // Execute the module function
            /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/ // Flag the module as loaded
            /******/ module.loaded = true;
            /******/ // Return the exports of the module
            /******/ return module.exports;
            /******/ }
        /******/ // expose the modules object (__webpack_modules__)
        /******/ __webpack_require__.m = modules;
        /******/ // expose the module cache
        /******/ __webpack_require__.c = installedModules;
        /******/ // __webpack_public_path__
        /******/ __webpack_require__.p = "";
        /******/ // Load entry module and return exports
        /******/ return __webpack_require__(0);
        /******/ })([
        /* 0 */
        /***/ function (module, exports, __webpack_require__) {
            /**
             * @fileoverview gl-matrix - High performance matrix and vector operations
             * @author Brandon Jones
             * @author Colin MacKenzie IV
             * @version 2.3.2
             */
            /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE. */
            // END HEADER
            exports.glMatrix = __webpack_require__(1);
            exports.mat2 = __webpack_require__(2);
            exports.mat2d = __webpack_require__(3);
            exports.mat3 = __webpack_require__(4);
            exports.mat4 = __webpack_require__(5);
            exports.quat = __webpack_require__(6);
            exports.vec2 = __webpack_require__(9);
            exports.vec3 = __webpack_require__(7);
            exports.vec4 = __webpack_require__(8);
            /***/ },
        /* 1 */
        /***/ function (module, exports) {
            /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE. */
            /**
             * @class Common utilities
             * @name glMatrix
             */
            var glMatrix = {};
            // Configuration Constants
            glMatrix.EPSILON = 0.000001;
            glMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
            glMatrix.RANDOM = Math.random;
            glMatrix.ENABLE_SIMD = false;
            // Capability detection
            glMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === this.Float32Array) && ('SIMD' in this);
            glMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;
            /**
             * Sets the type of array used when creating new vectors and matrices
             *
             * @param {Type} type Array type, such as Float32Array or Array
             */
            glMatrix.setMatrixArrayType = function (type) {
                glMatrix.ARRAY_TYPE = type;
            };
            var degree = Math.PI / 180;
            /**
            * Convert Degree To Radian
            *
            * @param {Number} a Angle in Degrees
            */
            glMatrix.toRadian = function (a) {
                return a * degree;
            };
            /**
             * Tests whether or not the arguments have approximately the same value, within an absolute
             * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
             * than or equal to 1.0, and a relative tolerance is used for larger values)
             *
             * @param {Number} a The first number to test.
             * @param {Number} b The second number to test.
             * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
             */
            glMatrix.equals = function (a, b) {
                return Math.abs(a - b) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
            };
            module.exports = glMatrix;
            /***/ },
        /* 2 */
        /***/ function (module, exports, __webpack_require__) {
            /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE. */
            var glMatrix = __webpack_require__(1);
            /**
             * @class 2x2 Matrix
             * @name mat2
             */
            var mat2 = {};
            /**
             * Creates a new identity mat2
             *
             * @returns {mat2} a new 2x2 matrix
             */
            mat2.create = function () {
                var out = new glMatrix.ARRAY_TYPE(4);
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 1;
                return out;
            };
            /**
             * Creates a new mat2 initialized with values from an existing matrix
             *
             * @param {mat2} a matrix to clone
             * @returns {mat2} a new 2x2 matrix
             */
            mat2.clone = function (a) {
                var out = new glMatrix.ARRAY_TYPE(4);
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                return out;
            };
            /**
             * Copy the values from one mat2 to another
             *
             * @param {mat2} out the receiving matrix
             * @param {mat2} a the source matrix
             * @returns {mat2} out
             */
            mat2.copy = function (out, a) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                return out;
            };
            /**
             * Set a mat2 to the identity matrix
             *
             * @param {mat2} out the receiving matrix
             * @returns {mat2} out
             */
            mat2.identity = function (out) {
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 1;
                return out;
            };
            /**
             * Create a new mat2 with the given values
             *
             * @param {Number} m00 Component in column 0, row 0 position (index 0)
             * @param {Number} m01 Component in column 0, row 1 position (index 1)
             * @param {Number} m10 Component in column 1, row 0 position (index 2)
             * @param {Number} m11 Component in column 1, row 1 position (index 3)
             * @returns {mat2} out A new 2x2 matrix
             */
            mat2.fromValues = function (m00, m01, m10, m11) {
                var out = new glMatrix.ARRAY_TYPE(4);
                out[0] = m00;
                out[1] = m01;
                out[2] = m10;
                out[3] = m11;
                return out;
            };
            /**
             * Set the components of a mat2 to the given values
             *
             * @param {mat2} out the receiving matrix
             * @param {Number} m00 Component in column 0, row 0 position (index 0)
             * @param {Number} m01 Component in column 0, row 1 position (index 1)
             * @param {Number} m10 Component in column 1, row 0 position (index 2)
             * @param {Number} m11 Component in column 1, row 1 position (index 3)
             * @returns {mat2} out
             */
            mat2.set = function (out, m00, m01, m10, m11) {
                out[0] = m00;
                out[1] = m01;
                out[2] = m10;
                out[3] = m11;
                return out;
            };
            /**
             * Transpose the values of a mat2
             *
             * @param {mat2} out the receiving matrix
             * @param {mat2} a the source matrix
             * @returns {mat2} out
             */
            mat2.transpose = function (out, a) {
                // If we are transposing ourselves we can skip a few steps but have to cache some values
                if (out === a) {
                    var a1 = a[1];
                    out[1] = a[2];
                    out[2] = a1;
                }
                else {
                    out[0] = a[0];
                    out[1] = a[2];
                    out[2] = a[1];
                    out[3] = a[3];
                }
                return out;
            };
            /**
             * Inverts a mat2
             *
             * @param {mat2} out the receiving matrix
             * @param {mat2} a the source matrix
             * @returns {mat2} out
             */
            mat2.invert = function (out, a) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
                // Calculate the determinant
                det = a0 * a3 - a2 * a1;
                if (!det) {
                    return null;
                }
                det = 1.0 / det;
                out[0] = a3 * det;
                out[1] = -a1 * det;
                out[2] = -a2 * det;
                out[3] = a0 * det;
                return out;
            };
            /**
             * Calculates the adjugate of a mat2
             *
             * @param {mat2} out the receiving matrix
             * @param {mat2} a the source matrix
             * @returns {mat2} out
             */
            mat2.adjoint = function (out, a) {
                // Caching this value is nessecary if out == a
                var a0 = a[0];
                out[0] = a[3];
                out[1] = -a[1];
                out[2] = -a[2];
                out[3] = a0;
                return out;
            };
            /**
             * Calculates the determinant of a mat2
             *
             * @param {mat2} a the source matrix
             * @returns {Number} determinant of a
             */
            mat2.determinant = function (a) {
                return a[0] * a[3] - a[2] * a[1];
            };
            /**
             * Multiplies two mat2's
             *
             * @param {mat2} out the receiving matrix
             * @param {mat2} a the first operand
             * @param {mat2} b the second operand
             * @returns {mat2} out
             */
            mat2.multiply = function (out, a, b) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
                var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
                out[0] = a0 * b0 + a2 * b1;
                out[1] = a1 * b0 + a3 * b1;
                out[2] = a0 * b2 + a2 * b3;
                out[3] = a1 * b2 + a3 * b3;
                return out;
            };
            /**
             * Alias for {@link mat2.multiply}
             * @function
             */
            mat2.mul = mat2.multiply;
            /**
             * Rotates a mat2 by the given angle
             *
             * @param {mat2} out the receiving matrix
             * @param {mat2} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat2} out
             */
            mat2.rotate = function (out, a, rad) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], s = Math.sin(rad), c = Math.cos(rad);
                out[0] = a0 * c + a2 * s;
                out[1] = a1 * c + a3 * s;
                out[2] = a0 * -s + a2 * c;
                out[3] = a1 * -s + a3 * c;
                return out;
            };
            /**
             * Scales the mat2 by the dimensions in the given vec2
             *
             * @param {mat2} out the receiving matrix
             * @param {mat2} a the matrix to rotate
             * @param {vec2} v the vec2 to scale the matrix by
             * @returns {mat2} out
             **/
            mat2.scale = function (out, a, v) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], v0 = v[0], v1 = v[1];
                out[0] = a0 * v0;
                out[1] = a1 * v0;
                out[2] = a2 * v1;
                out[3] = a3 * v1;
                return out;
            };
            /**
             * Creates a matrix from a given angle
             * This is equivalent to (but much faster than):
             *
             *     mat2.identity(dest);
             *     mat2.rotate(dest, dest, rad);
             *
             * @param {mat2} out mat2 receiving operation result
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat2} out
             */
            mat2.fromRotation = function (out, rad) {
                var s = Math.sin(rad), c = Math.cos(rad);
                out[0] = c;
                out[1] = s;
                out[2] = -s;
                out[3] = c;
                return out;
            };
            /**
             * Creates a matrix from a vector scaling
             * This is equivalent to (but much faster than):
             *
             *     mat2.identity(dest);
             *     mat2.scale(dest, dest, vec);
             *
             * @param {mat2} out mat2 receiving operation result
             * @param {vec2} v Scaling vector
             * @returns {mat2} out
             */
            mat2.fromScaling = function (out, v) {
                out[0] = v[0];
                out[1] = 0;
                out[2] = 0;
                out[3] = v[1];
                return out;
            };
            /**
             * Returns a string representation of a mat2
             *
             * @param {mat2} a matrix to represent as a string
             * @returns {String} string representation of the matrix
             */
            mat2.str = function (a) {
                return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
            };
            /**
             * Returns Frobenius norm of a mat2
             *
             * @param {mat2} a the matrix to calculate Frobenius norm of
             * @returns {Number} Frobenius norm
             */
            mat2.frob = function (a) {
                return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)));
            };
            /**
             * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
             * @param {mat2} L the lower triangular matrix
             * @param {mat2} D the diagonal matrix
             * @param {mat2} U the upper triangular matrix
             * @param {mat2} a the input matrix to factorize
             */
            mat2.LDU = function (L, D, U, a) {
                L[2] = a[2] / a[0];
                U[0] = a[0];
                U[1] = a[1];
                U[3] = a[3] - L[2] * U[1];
                return [L, D, U];
            };
            /**
             * Adds two mat2's
             *
             * @param {mat2} out the receiving matrix
             * @param {mat2} a the first operand
             * @param {mat2} b the second operand
             * @returns {mat2} out
             */
            mat2.add = function (out, a, b) {
                out[0] = a[0] + b[0];
                out[1] = a[1] + b[1];
                out[2] = a[2] + b[2];
                out[3] = a[3] + b[3];
                return out;
            };
            /**
             * Subtracts matrix b from matrix a
             *
             * @param {mat2} out the receiving matrix
             * @param {mat2} a the first operand
             * @param {mat2} b the second operand
             * @returns {mat2} out
             */
            mat2.subtract = function (out, a, b) {
                out[0] = a[0] - b[0];
                out[1] = a[1] - b[1];
                out[2] = a[2] - b[2];
                out[3] = a[3] - b[3];
                return out;
            };
            /**
             * Alias for {@link mat2.subtract}
             * @function
             */
            mat2.sub = mat2.subtract;
            /**
             * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
             *
             * @param {mat2} a The first matrix.
             * @param {mat2} b The second matrix.
             * @returns {Boolean} True if the matrices are equal, false otherwise.
             */
            mat2.exactEquals = function (a, b) {
                return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
            };
            /**
             * Returns whether or not the matrices have approximately the same elements in the same position.
             *
             * @param {mat2} a The first matrix.
             * @param {mat2} b The second matrix.
             * @returns {Boolean} True if the matrices are equal, false otherwise.
             */
            mat2.equals = function (a, b) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
                var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
                return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
                    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)));
            };
            /**
             * Multiply each element of the matrix by a scalar.
             *
             * @param {mat2} out the receiving matrix
             * @param {mat2} a the matrix to scale
             * @param {Number} b amount to scale the matrix's elements by
             * @returns {mat2} out
             */
            mat2.multiplyScalar = function (out, a, b) {
                out[0] = a[0] * b;
                out[1] = a[1] * b;
                out[2] = a[2] * b;
                out[3] = a[3] * b;
                return out;
            };
            /**
             * Adds two mat2's after multiplying each element of the second operand by a scalar value.
             *
             * @param {mat2} out the receiving vector
             * @param {mat2} a the first operand
             * @param {mat2} b the second operand
             * @param {Number} scale the amount to scale b's elements by before adding
             * @returns {mat2} out
             */
            mat2.multiplyScalarAndAdd = function (out, a, b, scale) {
                out[0] = a[0] + (b[0] * scale);
                out[1] = a[1] + (b[1] * scale);
                out[2] = a[2] + (b[2] * scale);
                out[3] = a[3] + (b[3] * scale);
                return out;
            };
            module.exports = mat2;
            /***/ },
        /* 3 */
        /***/ function (module, exports, __webpack_require__) {
            /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE. */
            var glMatrix = __webpack_require__(1);
            /**
             * @class 2x3 Matrix
             * @name mat2d
             *
             * @description
             * A mat2d contains six elements defined as:
             * <pre>
             * [a, c, tx,
             *  b, d, ty]
             * </pre>
             * This is a short form for the 3x3 matrix:
             * <pre>
             * [a, c, tx,
             *  b, d, ty,
             *  0, 0, 1]
             * </pre>
             * The last row is ignored so the array is shorter and operations are faster.
             */
            var mat2d = {};
            /**
             * Creates a new identity mat2d
             *
             * @returns {mat2d} a new 2x3 matrix
             */
            mat2d.create = function () {
                var out = new glMatrix.ARRAY_TYPE(6);
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 1;
                out[4] = 0;
                out[5] = 0;
                return out;
            };
            /**
             * Creates a new mat2d initialized with values from an existing matrix
             *
             * @param {mat2d} a matrix to clone
             * @returns {mat2d} a new 2x3 matrix
             */
            mat2d.clone = function (a) {
                var out = new glMatrix.ARRAY_TYPE(6);
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                out[4] = a[4];
                out[5] = a[5];
                return out;
            };
            /**
             * Copy the values from one mat2d to another
             *
             * @param {mat2d} out the receiving matrix
             * @param {mat2d} a the source matrix
             * @returns {mat2d} out
             */
            mat2d.copy = function (out, a) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                out[4] = a[4];
                out[5] = a[5];
                return out;
            };
            /**
             * Set a mat2d to the identity matrix
             *
             * @param {mat2d} out the receiving matrix
             * @returns {mat2d} out
             */
            mat2d.identity = function (out) {
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 1;
                out[4] = 0;
                out[5] = 0;
                return out;
            };
            /**
             * Create a new mat2d with the given values
             *
             * @param {Number} a Component A (index 0)
             * @param {Number} b Component B (index 1)
             * @param {Number} c Component C (index 2)
             * @param {Number} d Component D (index 3)
             * @param {Number} tx Component TX (index 4)
             * @param {Number} ty Component TY (index 5)
             * @returns {mat2d} A new mat2d
             */
            mat2d.fromValues = function (a, b, c, d, tx, ty) {
                var out = new glMatrix.ARRAY_TYPE(6);
                out[0] = a;
                out[1] = b;
                out[2] = c;
                out[3] = d;
                out[4] = tx;
                out[5] = ty;
                return out;
            };
            /**
             * Set the components of a mat2d to the given values
             *
             * @param {mat2d} out the receiving matrix
             * @param {Number} a Component A (index 0)
             * @param {Number} b Component B (index 1)
             * @param {Number} c Component C (index 2)
             * @param {Number} d Component D (index 3)
             * @param {Number} tx Component TX (index 4)
             * @param {Number} ty Component TY (index 5)
             * @returns {mat2d} out
             */
            mat2d.set = function (out, a, b, c, d, tx, ty) {
                out[0] = a;
                out[1] = b;
                out[2] = c;
                out[3] = d;
                out[4] = tx;
                out[5] = ty;
                return out;
            };
            /**
             * Inverts a mat2d
             *
             * @param {mat2d} out the receiving matrix
             * @param {mat2d} a the source matrix
             * @returns {mat2d} out
             */
            mat2d.invert = function (out, a) {
                var aa = a[0], ab = a[1], ac = a[2], ad = a[3], atx = a[4], aty = a[5];
                var det = aa * ad - ab * ac;
                if (!det) {
                    return null;
                }
                det = 1.0 / det;
                out[0] = ad * det;
                out[1] = -ab * det;
                out[2] = -ac * det;
                out[3] = aa * det;
                out[4] = (ac * aty - ad * atx) * det;
                out[5] = (ab * atx - aa * aty) * det;
                return out;
            };
            /**
             * Calculates the determinant of a mat2d
             *
             * @param {mat2d} a the source matrix
             * @returns {Number} determinant of a
             */
            mat2d.determinant = function (a) {
                return a[0] * a[3] - a[1] * a[2];
            };
            /**
             * Multiplies two mat2d's
             *
             * @param {mat2d} out the receiving matrix
             * @param {mat2d} a the first operand
             * @param {mat2d} b the second operand
             * @returns {mat2d} out
             */
            mat2d.multiply = function (out, a, b) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
                out[0] = a0 * b0 + a2 * b1;
                out[1] = a1 * b0 + a3 * b1;
                out[2] = a0 * b2 + a2 * b3;
                out[3] = a1 * b2 + a3 * b3;
                out[4] = a0 * b4 + a2 * b5 + a4;
                out[5] = a1 * b4 + a3 * b5 + a5;
                return out;
            };
            /**
             * Alias for {@link mat2d.multiply}
             * @function
             */
            mat2d.mul = mat2d.multiply;
            /**
             * Rotates a mat2d by the given angle
             *
             * @param {mat2d} out the receiving matrix
             * @param {mat2d} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat2d} out
             */
            mat2d.rotate = function (out, a, rad) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], s = Math.sin(rad), c = Math.cos(rad);
                out[0] = a0 * c + a2 * s;
                out[1] = a1 * c + a3 * s;
                out[2] = a0 * -s + a2 * c;
                out[3] = a1 * -s + a3 * c;
                out[4] = a4;
                out[5] = a5;
                return out;
            };
            /**
             * Scales the mat2d by the dimensions in the given vec2
             *
             * @param {mat2d} out the receiving matrix
             * @param {mat2d} a the matrix to translate
             * @param {vec2} v the vec2 to scale the matrix by
             * @returns {mat2d} out
             **/
            mat2d.scale = function (out, a, v) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], v0 = v[0], v1 = v[1];
                out[0] = a0 * v0;
                out[1] = a1 * v0;
                out[2] = a2 * v1;
                out[3] = a3 * v1;
                out[4] = a4;
                out[5] = a5;
                return out;
            };
            /**
             * Translates the mat2d by the dimensions in the given vec2
             *
             * @param {mat2d} out the receiving matrix
             * @param {mat2d} a the matrix to translate
             * @param {vec2} v the vec2 to translate the matrix by
             * @returns {mat2d} out
             **/
            mat2d.translate = function (out, a, v) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], v0 = v[0], v1 = v[1];
                out[0] = a0;
                out[1] = a1;
                out[2] = a2;
                out[3] = a3;
                out[4] = a0 * v0 + a2 * v1 + a4;
                out[5] = a1 * v0 + a3 * v1 + a5;
                return out;
            };
            /**
             * Creates a matrix from a given angle
             * This is equivalent to (but much faster than):
             *
             *     mat2d.identity(dest);
             *     mat2d.rotate(dest, dest, rad);
             *
             * @param {mat2d} out mat2d receiving operation result
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat2d} out
             */
            mat2d.fromRotation = function (out, rad) {
                var s = Math.sin(rad), c = Math.cos(rad);
                out[0] = c;
                out[1] = s;
                out[2] = -s;
                out[3] = c;
                out[4] = 0;
                out[5] = 0;
                return out;
            };
            /**
             * Creates a matrix from a vector scaling
             * This is equivalent to (but much faster than):
             *
             *     mat2d.identity(dest);
             *     mat2d.scale(dest, dest, vec);
             *
             * @param {mat2d} out mat2d receiving operation result
             * @param {vec2} v Scaling vector
             * @returns {mat2d} out
             */
            mat2d.fromScaling = function (out, v) {
                out[0] = v[0];
                out[1] = 0;
                out[2] = 0;
                out[3] = v[1];
                out[4] = 0;
                out[5] = 0;
                return out;
            };
            /**
             * Creates a matrix from a vector translation
             * This is equivalent to (but much faster than):
             *
             *     mat2d.identity(dest);
             *     mat2d.translate(dest, dest, vec);
             *
             * @param {mat2d} out mat2d receiving operation result
             * @param {vec2} v Translation vector
             * @returns {mat2d} out
             */
            mat2d.fromTranslation = function (out, v) {
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 1;
                out[4] = v[0];
                out[5] = v[1];
                return out;
            };
            /**
             * Returns a string representation of a mat2d
             *
             * @param {mat2d} a matrix to represent as a string
             * @returns {String} string representation of the matrix
             */
            mat2d.str = function (a) {
                return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
            };
            /**
             * Returns Frobenius norm of a mat2d
             *
             * @param {mat2d} a the matrix to calculate Frobenius norm of
             * @returns {Number} Frobenius norm
             */
            mat2d.frob = function (a) {
                return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1));
            };
            /**
             * Adds two mat2d's
             *
             * @param {mat2d} out the receiving matrix
             * @param {mat2d} a the first operand
             * @param {mat2d} b the second operand
             * @returns {mat2d} out
             */
            mat2d.add = function (out, a, b) {
                out[0] = a[0] + b[0];
                out[1] = a[1] + b[1];
                out[2] = a[2] + b[2];
                out[3] = a[3] + b[3];
                out[4] = a[4] + b[4];
                out[5] = a[5] + b[5];
                return out;
            };
            /**
             * Subtracts matrix b from matrix a
             *
             * @param {mat2d} out the receiving matrix
             * @param {mat2d} a the first operand
             * @param {mat2d} b the second operand
             * @returns {mat2d} out
             */
            mat2d.subtract = function (out, a, b) {
                out[0] = a[0] - b[0];
                out[1] = a[1] - b[1];
                out[2] = a[2] - b[2];
                out[3] = a[3] - b[3];
                out[4] = a[4] - b[4];
                out[5] = a[5] - b[5];
                return out;
            };
            /**
             * Alias for {@link mat2d.subtract}
             * @function
             */
            mat2d.sub = mat2d.subtract;
            /**
             * Multiply each element of the matrix by a scalar.
             *
             * @param {mat2d} out the receiving matrix
             * @param {mat2d} a the matrix to scale
             * @param {Number} b amount to scale the matrix's elements by
             * @returns {mat2d} out
             */
            mat2d.multiplyScalar = function (out, a, b) {
                out[0] = a[0] * b;
                out[1] = a[1] * b;
                out[2] = a[2] * b;
                out[3] = a[3] * b;
                out[4] = a[4] * b;
                out[5] = a[5] * b;
                return out;
            };
            /**
             * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
             *
             * @param {mat2d} out the receiving vector
             * @param {mat2d} a the first operand
             * @param {mat2d} b the second operand
             * @param {Number} scale the amount to scale b's elements by before adding
             * @returns {mat2d} out
             */
            mat2d.multiplyScalarAndAdd = function (out, a, b, scale) {
                out[0] = a[0] + (b[0] * scale);
                out[1] = a[1] + (b[1] * scale);
                out[2] = a[2] + (b[2] * scale);
                out[3] = a[3] + (b[3] * scale);
                out[4] = a[4] + (b[4] * scale);
                out[5] = a[5] + (b[5] * scale);
                return out;
            };
            /**
             * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
             *
             * @param {mat2d} a The first matrix.
             * @param {mat2d} b The second matrix.
             * @returns {Boolean} True if the matrices are equal, false otherwise.
             */
            mat2d.exactEquals = function (a, b) {
                return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
            };
            /**
             * Returns whether or not the matrices have approximately the same elements in the same position.
             *
             * @param {mat2d} a The first matrix.
             * @param {mat2d} b The second matrix.
             * @returns {Boolean} True if the matrices are equal, false otherwise.
             */
            mat2d.equals = function (a, b) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
                var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
                return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
                    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
                    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
                    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)));
            };
            module.exports = mat2d;
            /***/ },
        /* 4 */
        /***/ function (module, exports, __webpack_require__) {
            /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE. */
            var glMatrix = __webpack_require__(1);
            /**
             * @class 3x3 Matrix
             * @name mat3
             */
            var mat3 = {};
            /**
             * Creates a new identity mat3
             *
             * @returns {mat3} a new 3x3 matrix
             */
            mat3.create = function () {
                var out = new glMatrix.ARRAY_TYPE(9);
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 1;
                out[5] = 0;
                out[6] = 0;
                out[7] = 0;
                out[8] = 1;
                return out;
            };
            /**
             * Copies the upper-left 3x3 values into the given mat3.
             *
             * @param {mat3} out the receiving 3x3 matrix
             * @param {mat4} a   the source 4x4 matrix
             * @returns {mat3} out
             */
            mat3.fromMat4 = function (out, a) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[4];
                out[4] = a[5];
                out[5] = a[6];
                out[6] = a[8];
                out[7] = a[9];
                out[8] = a[10];
                return out;
            };
            /**
             * Creates a new mat3 initialized with values from an existing matrix
             *
             * @param {mat3} a matrix to clone
             * @returns {mat3} a new 3x3 matrix
             */
            mat3.clone = function (a) {
                var out = new glMatrix.ARRAY_TYPE(9);
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                out[4] = a[4];
                out[5] = a[5];
                out[6] = a[6];
                out[7] = a[7];
                out[8] = a[8];
                return out;
            };
            /**
             * Copy the values from one mat3 to another
             *
             * @param {mat3} out the receiving matrix
             * @param {mat3} a the source matrix
             * @returns {mat3} out
             */
            mat3.copy = function (out, a) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                out[4] = a[4];
                out[5] = a[5];
                out[6] = a[6];
                out[7] = a[7];
                out[8] = a[8];
                return out;
            };
            /**
             * Create a new mat3 with the given values
             *
             * @param {Number} m00 Component in column 0, row 0 position (index 0)
             * @param {Number} m01 Component in column 0, row 1 position (index 1)
             * @param {Number} m02 Component in column 0, row 2 position (index 2)
             * @param {Number} m10 Component in column 1, row 0 position (index 3)
             * @param {Number} m11 Component in column 1, row 1 position (index 4)
             * @param {Number} m12 Component in column 1, row 2 position (index 5)
             * @param {Number} m20 Component in column 2, row 0 position (index 6)
             * @param {Number} m21 Component in column 2, row 1 position (index 7)
             * @param {Number} m22 Component in column 2, row 2 position (index 8)
             * @returns {mat3} A new mat3
             */
            mat3.fromValues = function (m00, m01, m02, m10, m11, m12, m20, m21, m22) {
                var out = new glMatrix.ARRAY_TYPE(9);
                out[0] = m00;
                out[1] = m01;
                out[2] = m02;
                out[3] = m10;
                out[4] = m11;
                out[5] = m12;
                out[6] = m20;
                out[7] = m21;
                out[8] = m22;
                return out;
            };
            /**
             * Set the components of a mat3 to the given values
             *
             * @param {mat3} out the receiving matrix
             * @param {Number} m00 Component in column 0, row 0 position (index 0)
             * @param {Number} m01 Component in column 0, row 1 position (index 1)
             * @param {Number} m02 Component in column 0, row 2 position (index 2)
             * @param {Number} m10 Component in column 1, row 0 position (index 3)
             * @param {Number} m11 Component in column 1, row 1 position (index 4)
             * @param {Number} m12 Component in column 1, row 2 position (index 5)
             * @param {Number} m20 Component in column 2, row 0 position (index 6)
             * @param {Number} m21 Component in column 2, row 1 position (index 7)
             * @param {Number} m22 Component in column 2, row 2 position (index 8)
             * @returns {mat3} out
             */
            mat3.set = function (out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
                out[0] = m00;
                out[1] = m01;
                out[2] = m02;
                out[3] = m10;
                out[4] = m11;
                out[5] = m12;
                out[6] = m20;
                out[7] = m21;
                out[8] = m22;
                return out;
            };
            /**
             * Set a mat3 to the identity matrix
             *
             * @param {mat3} out the receiving matrix
             * @returns {mat3} out
             */
            mat3.identity = function (out) {
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 1;
                out[5] = 0;
                out[6] = 0;
                out[7] = 0;
                out[8] = 1;
                return out;
            };
            /**
             * Transpose the values of a mat3
             *
             * @param {mat3} out the receiving matrix
             * @param {mat3} a the source matrix
             * @returns {mat3} out
             */
            mat3.transpose = function (out, a) {
                // If we are transposing ourselves we can skip a few steps but have to cache some values
                if (out === a) {
                    var a01 = a[1], a02 = a[2], a12 = a[5];
                    out[1] = a[3];
                    out[2] = a[6];
                    out[3] = a01;
                    out[5] = a[7];
                    out[6] = a02;
                    out[7] = a12;
                }
                else {
                    out[0] = a[0];
                    out[1] = a[3];
                    out[2] = a[6];
                    out[3] = a[1];
                    out[4] = a[4];
                    out[5] = a[7];
                    out[6] = a[2];
                    out[7] = a[5];
                    out[8] = a[8];
                }
                return out;
            };
            /**
             * Inverts a mat3
             *
             * @param {mat3} out the receiving matrix
             * @param {mat3} a the source matrix
             * @returns {mat3} out
             */
            mat3.invert = function (out, a) {
                var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b01 = a22 * a11 - a12 * a21, b11 = -a22 * a10 + a12 * a20, b21 = a21 * a10 - a11 * a20,
                // Calculate the determinant
                det = a00 * b01 + a01 * b11 + a02 * b21;
                if (!det) {
                    return null;
                }
                det = 1.0 / det;
                out[0] = b01 * det;
                out[1] = (-a22 * a01 + a02 * a21) * det;
                out[2] = (a12 * a01 - a02 * a11) * det;
                out[3] = b11 * det;
                out[4] = (a22 * a00 - a02 * a20) * det;
                out[5] = (-a12 * a00 + a02 * a10) * det;
                out[6] = b21 * det;
                out[7] = (-a21 * a00 + a01 * a20) * det;
                out[8] = (a11 * a00 - a01 * a10) * det;
                return out;
            };
            /**
             * Calculates the adjugate of a mat3
             *
             * @param {mat3} out the receiving matrix
             * @param {mat3} a the source matrix
             * @returns {mat3} out
             */
            mat3.adjoint = function (out, a) {
                var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];
                out[0] = (a11 * a22 - a12 * a21);
                out[1] = (a02 * a21 - a01 * a22);
                out[2] = (a01 * a12 - a02 * a11);
                out[3] = (a12 * a20 - a10 * a22);
                out[4] = (a00 * a22 - a02 * a20);
                out[5] = (a02 * a10 - a00 * a12);
                out[6] = (a10 * a21 - a11 * a20);
                out[7] = (a01 * a20 - a00 * a21);
                out[8] = (a00 * a11 - a01 * a10);
                return out;
            };
            /**
             * Calculates the determinant of a mat3
             *
             * @param {mat3} a the source matrix
             * @returns {Number} determinant of a
             */
            mat3.determinant = function (a) {
                var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];
                return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
            };
            /**
             * Multiplies two mat3's
             *
             * @param {mat3} out the receiving matrix
             * @param {mat3} a the first operand
             * @param {mat3} b the second operand
             * @returns {mat3} out
             */
            mat3.multiply = function (out, a, b) {
                var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b00 = b[0], b01 = b[1], b02 = b[2], b10 = b[3], b11 = b[4], b12 = b[5], b20 = b[6], b21 = b[7], b22 = b[8];
                out[0] = b00 * a00 + b01 * a10 + b02 * a20;
                out[1] = b00 * a01 + b01 * a11 + b02 * a21;
                out[2] = b00 * a02 + b01 * a12 + b02 * a22;
                out[3] = b10 * a00 + b11 * a10 + b12 * a20;
                out[4] = b10 * a01 + b11 * a11 + b12 * a21;
                out[5] = b10 * a02 + b11 * a12 + b12 * a22;
                out[6] = b20 * a00 + b21 * a10 + b22 * a20;
                out[7] = b20 * a01 + b21 * a11 + b22 * a21;
                out[8] = b20 * a02 + b21 * a12 + b22 * a22;
                return out;
            };
            /**
             * Alias for {@link mat3.multiply}
             * @function
             */
            mat3.mul = mat3.multiply;
            /**
             * Translate a mat3 by the given vector
             *
             * @param {mat3} out the receiving matrix
             * @param {mat3} a the matrix to translate
             * @param {vec2} v vector to translate by
             * @returns {mat3} out
             */
            mat3.translate = function (out, a, v) {
                var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];
                out[0] = a00;
                out[1] = a01;
                out[2] = a02;
                out[3] = a10;
                out[4] = a11;
                out[5] = a12;
                out[6] = x * a00 + y * a10 + a20;
                out[7] = x * a01 + y * a11 + a21;
                out[8] = x * a02 + y * a12 + a22;
                return out;
            };
            /**
             * Rotates a mat3 by the given angle
             *
             * @param {mat3} out the receiving matrix
             * @param {mat3} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat3} out
             */
            mat3.rotate = function (out, a, rad) {
                var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);
                out[0] = c * a00 + s * a10;
                out[1] = c * a01 + s * a11;
                out[2] = c * a02 + s * a12;
                out[3] = c * a10 - s * a00;
                out[4] = c * a11 - s * a01;
                out[5] = c * a12 - s * a02;
                out[6] = a20;
                out[7] = a21;
                out[8] = a22;
                return out;
            };
            /**
             * Scales the mat3 by the dimensions in the given vec2
             *
             * @param {mat3} out the receiving matrix
             * @param {mat3} a the matrix to rotate
             * @param {vec2} v the vec2 to scale the matrix by
             * @returns {mat3} out
             **/
            mat3.scale = function (out, a, v) {
                var x = v[0], y = v[1];
                out[0] = x * a[0];
                out[1] = x * a[1];
                out[2] = x * a[2];
                out[3] = y * a[3];
                out[4] = y * a[4];
                out[5] = y * a[5];
                out[6] = a[6];
                out[7] = a[7];
                out[8] = a[8];
                return out;
            };
            /**
             * Creates a matrix from a vector translation
             * This is equivalent to (but much faster than):
             *
             *     mat3.identity(dest);
             *     mat3.translate(dest, dest, vec);
             *
             * @param {mat3} out mat3 receiving operation result
             * @param {vec2} v Translation vector
             * @returns {mat3} out
             */
            mat3.fromTranslation = function (out, v) {
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 1;
                out[5] = 0;
                out[6] = v[0];
                out[7] = v[1];
                out[8] = 1;
                return out;
            };
            /**
             * Creates a matrix from a given angle
             * This is equivalent to (but much faster than):
             *
             *     mat3.identity(dest);
             *     mat3.rotate(dest, dest, rad);
             *
             * @param {mat3} out mat3 receiving operation result
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat3} out
             */
            mat3.fromRotation = function (out, rad) {
                var s = Math.sin(rad), c = Math.cos(rad);
                out[0] = c;
                out[1] = s;
                out[2] = 0;
                out[3] = -s;
                out[4] = c;
                out[5] = 0;
                out[6] = 0;
                out[7] = 0;
                out[8] = 1;
                return out;
            };
            /**
             * Creates a matrix from a vector scaling
             * This is equivalent to (but much faster than):
             *
             *     mat3.identity(dest);
             *     mat3.scale(dest, dest, vec);
             *
             * @param {mat3} out mat3 receiving operation result
             * @param {vec2} v Scaling vector
             * @returns {mat3} out
             */
            mat3.fromScaling = function (out, v) {
                out[0] = v[0];
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = v[1];
                out[5] = 0;
                out[6] = 0;
                out[7] = 0;
                out[8] = 1;
                return out;
            };
            /**
             * Copies the values from a mat2d into a mat3
             *
             * @param {mat3} out the receiving matrix
             * @param {mat2d} a the matrix to copy
             * @returns {mat3} out
             **/
            mat3.fromMat2d = function (out, a) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = 0;
                out[3] = a[2];
                out[4] = a[3];
                out[5] = 0;
                out[6] = a[4];
                out[7] = a[5];
                out[8] = 1;
                return out;
            };
            /**
            * Calculates a 3x3 matrix from the given quaternion
            *
            * @param {mat3} out mat3 receiving operation result
            * @param {quat} q Quaternion to create matrix from
            *
            * @returns {mat3} out
            */
            mat3.fromQuat = function (out, q) {
                var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, yx = y * x2, yy = y * y2, zx = z * x2, zy = z * y2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
                out[0] = 1 - yy - zz;
                out[3] = yx - wz;
                out[6] = zx + wy;
                out[1] = yx + wz;
                out[4] = 1 - xx - zz;
                out[7] = zy - wx;
                out[2] = zx - wy;
                out[5] = zy + wx;
                out[8] = 1 - xx - yy;
                return out;
            };
            /**
            * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
            *
            * @param {mat3} out mat3 receiving operation result
            * @param {mat4} a Mat4 to derive the normal matrix from
            *
            * @returns {mat3} out
            */
            mat3.normalFromMat4 = function (out, a) {
                var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32,
                // Calculate the determinant
                det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                if (!det) {
                    return null;
                }
                det = 1.0 / det;
                out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                return out;
            };
            /**
             * Returns a string representation of a mat3
             *
             * @param {mat3} a matrix to represent as a string
             * @returns {String} string representation of the matrix
             */
            mat3.str = function (a) {
                return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +
                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
            };
            /**
             * Returns Frobenius norm of a mat3
             *
             * @param {mat3} a the matrix to calculate Frobenius norm of
             * @returns {Number} Frobenius norm
             */
            mat3.frob = function (a) {
                return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)));
            };
            /**
             * Adds two mat3's
             *
             * @param {mat3} out the receiving matrix
             * @param {mat3} a the first operand
             * @param {mat3} b the second operand
             * @returns {mat3} out
             */
            mat3.add = function (out, a, b) {
                out[0] = a[0] + b[0];
                out[1] = a[1] + b[1];
                out[2] = a[2] + b[2];
                out[3] = a[3] + b[3];
                out[4] = a[4] + b[4];
                out[5] = a[5] + b[5];
                out[6] = a[6] + b[6];
                out[7] = a[7] + b[7];
                out[8] = a[8] + b[8];
                return out;
            };
            /**
             * Subtracts matrix b from matrix a
             *
             * @param {mat3} out the receiving matrix
             * @param {mat3} a the first operand
             * @param {mat3} b the second operand
             * @returns {mat3} out
             */
            mat3.subtract = function (out, a, b) {
                out[0] = a[0] - b[0];
                out[1] = a[1] - b[1];
                out[2] = a[2] - b[2];
                out[3] = a[3] - b[3];
                out[4] = a[4] - b[4];
                out[5] = a[5] - b[5];
                out[6] = a[6] - b[6];
                out[7] = a[7] - b[7];
                out[8] = a[8] - b[8];
                return out;
            };
            /**
             * Alias for {@link mat3.subtract}
             * @function
             */
            mat3.sub = mat3.subtract;
            /**
             * Multiply each element of the matrix by a scalar.
             *
             * @param {mat3} out the receiving matrix
             * @param {mat3} a the matrix to scale
             * @param {Number} b amount to scale the matrix's elements by
             * @returns {mat3} out
             */
            mat3.multiplyScalar = function (out, a, b) {
                out[0] = a[0] * b;
                out[1] = a[1] * b;
                out[2] = a[2] * b;
                out[3] = a[3] * b;
                out[4] = a[4] * b;
                out[5] = a[5] * b;
                out[6] = a[6] * b;
                out[7] = a[7] * b;
                out[8] = a[8] * b;
                return out;
            };
            /**
             * Adds two mat3's after multiplying each element of the second operand by a scalar value.
             *
             * @param {mat3} out the receiving vector
             * @param {mat3} a the first operand
             * @param {mat3} b the second operand
             * @param {Number} scale the amount to scale b's elements by before adding
             * @returns {mat3} out
             */
            mat3.multiplyScalarAndAdd = function (out, a, b, scale) {
                out[0] = a[0] + (b[0] * scale);
                out[1] = a[1] + (b[1] * scale);
                out[2] = a[2] + (b[2] * scale);
                out[3] = a[3] + (b[3] * scale);
                out[4] = a[4] + (b[4] * scale);
                out[5] = a[5] + (b[5] * scale);
                out[6] = a[6] + (b[6] * scale);
                out[7] = a[7] + (b[7] * scale);
                out[8] = a[8] + (b[8] * scale);
                return out;
            };
            /**
             * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
             *
             * @param {mat3} a The first matrix.
             * @param {mat3} b The second matrix.
             * @returns {Boolean} True if the matrices are equal, false otherwise.
             */
            mat3.exactEquals = function (a, b) {
                return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&
                    a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&
                    a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
            };
            /**
             * Returns whether or not the matrices have approximately the same elements in the same position.
             *
             * @param {mat3} a The first matrix.
             * @param {mat3} b The second matrix.
             * @returns {Boolean} True if the matrices are equal, false otherwise.
             */
            mat3.equals = function (a, b) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
                var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];
                return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
                    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
                    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
                    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
                    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
                    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
                    Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)));
            };
            module.exports = mat3;
            /***/ },
        /* 5 */
        /***/ function (module, exports, __webpack_require__) {
            /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE. */
            var glMatrix = __webpack_require__(1);
            /**
             * @class 4x4 Matrix
             * @name mat4
             */
            var mat4 = {
                scalar: {},
                SIMD: {}
            };
            /**
             * Creates a new identity mat4
             *
             * @returns {mat4} a new 4x4 matrix
             */
            mat4.create = function () {
                var out = new glMatrix.ARRAY_TYPE(16);
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 0;
                out[5] = 1;
                out[6] = 0;
                out[7] = 0;
                out[8] = 0;
                out[9] = 0;
                out[10] = 1;
                out[11] = 0;
                out[12] = 0;
                out[13] = 0;
                out[14] = 0;
                out[15] = 1;
                return out;
            };
            /**
             * Creates a new mat4 initialized with values from an existing matrix
             *
             * @param {mat4} a matrix to clone
             * @returns {mat4} a new 4x4 matrix
             */
            mat4.clone = function (a) {
                var out = new glMatrix.ARRAY_TYPE(16);
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                out[4] = a[4];
                out[5] = a[5];
                out[6] = a[6];
                out[7] = a[7];
                out[8] = a[8];
                out[9] = a[9];
                out[10] = a[10];
                out[11] = a[11];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
                return out;
            };
            /**
             * Copy the values from one mat4 to another
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the source matrix
             * @returns {mat4} out
             */
            mat4.copy = function (out, a) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                out[4] = a[4];
                out[5] = a[5];
                out[6] = a[6];
                out[7] = a[7];
                out[8] = a[8];
                out[9] = a[9];
                out[10] = a[10];
                out[11] = a[11];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
                return out;
            };
            /**
             * Create a new mat4 with the given values
             *
             * @param {Number} m00 Component in column 0, row 0 position (index 0)
             * @param {Number} m01 Component in column 0, row 1 position (index 1)
             * @param {Number} m02 Component in column 0, row 2 position (index 2)
             * @param {Number} m03 Component in column 0, row 3 position (index 3)
             * @param {Number} m10 Component in column 1, row 0 position (index 4)
             * @param {Number} m11 Component in column 1, row 1 position (index 5)
             * @param {Number} m12 Component in column 1, row 2 position (index 6)
             * @param {Number} m13 Component in column 1, row 3 position (index 7)
             * @param {Number} m20 Component in column 2, row 0 position (index 8)
             * @param {Number} m21 Component in column 2, row 1 position (index 9)
             * @param {Number} m22 Component in column 2, row 2 position (index 10)
             * @param {Number} m23 Component in column 2, row 3 position (index 11)
             * @param {Number} m30 Component in column 3, row 0 position (index 12)
             * @param {Number} m31 Component in column 3, row 1 position (index 13)
             * @param {Number} m32 Component in column 3, row 2 position (index 14)
             * @param {Number} m33 Component in column 3, row 3 position (index 15)
             * @returns {mat4} A new mat4
             */
            mat4.fromValues = function (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
                var out = new glMatrix.ARRAY_TYPE(16);
                out[0] = m00;
                out[1] = m01;
                out[2] = m02;
                out[3] = m03;
                out[4] = m10;
                out[5] = m11;
                out[6] = m12;
                out[7] = m13;
                out[8] = m20;
                out[9] = m21;
                out[10] = m22;
                out[11] = m23;
                out[12] = m30;
                out[13] = m31;
                out[14] = m32;
                out[15] = m33;
                return out;
            };
            /**
             * Set the components of a mat4 to the given values
             *
             * @param {mat4} out the receiving matrix
             * @param {Number} m00 Component in column 0, row 0 position (index 0)
             * @param {Number} m01 Component in column 0, row 1 position (index 1)
             * @param {Number} m02 Component in column 0, row 2 position (index 2)
             * @param {Number} m03 Component in column 0, row 3 position (index 3)
             * @param {Number} m10 Component in column 1, row 0 position (index 4)
             * @param {Number} m11 Component in column 1, row 1 position (index 5)
             * @param {Number} m12 Component in column 1, row 2 position (index 6)
             * @param {Number} m13 Component in column 1, row 3 position (index 7)
             * @param {Number} m20 Component in column 2, row 0 position (index 8)
             * @param {Number} m21 Component in column 2, row 1 position (index 9)
             * @param {Number} m22 Component in column 2, row 2 position (index 10)
             * @param {Number} m23 Component in column 2, row 3 position (index 11)
             * @param {Number} m30 Component in column 3, row 0 position (index 12)
             * @param {Number} m31 Component in column 3, row 1 position (index 13)
             * @param {Number} m32 Component in column 3, row 2 position (index 14)
             * @param {Number} m33 Component in column 3, row 3 position (index 15)
             * @returns {mat4} out
             */
            mat4.set = function (out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
                out[0] = m00;
                out[1] = m01;
                out[2] = m02;
                out[3] = m03;
                out[4] = m10;
                out[5] = m11;
                out[6] = m12;
                out[7] = m13;
                out[8] = m20;
                out[9] = m21;
                out[10] = m22;
                out[11] = m23;
                out[12] = m30;
                out[13] = m31;
                out[14] = m32;
                out[15] = m33;
                return out;
            };
            /**
             * Set a mat4 to the identity matrix
             *
             * @param {mat4} out the receiving matrix
             * @returns {mat4} out
             */
            mat4.identity = function (out) {
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 0;
                out[5] = 1;
                out[6] = 0;
                out[7] = 0;
                out[8] = 0;
                out[9] = 0;
                out[10] = 1;
                out[11] = 0;
                out[12] = 0;
                out[13] = 0;
                out[14] = 0;
                out[15] = 1;
                return out;
            };
            /**
             * Transpose the values of a mat4 not using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the source matrix
             * @returns {mat4} out
             */
            mat4.scalar.transpose = function (out, a) {
                // If we are transposing ourselves we can skip a few steps but have to cache some values
                if (out === a) {
                    var a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];
                    out[1] = a[4];
                    out[2] = a[8];
                    out[3] = a[12];
                    out[4] = a01;
                    out[6] = a[9];
                    out[7] = a[13];
                    out[8] = a02;
                    out[9] = a12;
                    out[11] = a[14];
                    out[12] = a03;
                    out[13] = a13;
                    out[14] = a23;
                }
                else {
                    out[0] = a[0];
                    out[1] = a[4];
                    out[2] = a[8];
                    out[3] = a[12];
                    out[4] = a[1];
                    out[5] = a[5];
                    out[6] = a[9];
                    out[7] = a[13];
                    out[8] = a[2];
                    out[9] = a[6];
                    out[10] = a[10];
                    out[11] = a[14];
                    out[12] = a[3];
                    out[13] = a[7];
                    out[14] = a[11];
                    out[15] = a[15];
                }
                return out;
            };
            /**
             * Transpose the values of a mat4 using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the source matrix
             * @returns {mat4} out
             */
            mat4.SIMD.transpose = function (out, a) {
                var a0, a1, a2, a3, tmp01, tmp23, out0, out1, out2, out3;
                a0 = SIMD.Float32x4.load(a, 0);
                a1 = SIMD.Float32x4.load(a, 4);
                a2 = SIMD.Float32x4.load(a, 8);
                a3 = SIMD.Float32x4.load(a, 12);
                tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
                tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
                out0 = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
                out1 = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
                SIMD.Float32x4.store(out, 0, out0);
                SIMD.Float32x4.store(out, 4, out1);
                tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
                tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
                out2 = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
                out3 = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
                SIMD.Float32x4.store(out, 8, out2);
                SIMD.Float32x4.store(out, 12, out3);
                return out;
            };
            /**
             * Transpse a mat4 using SIMD if available and enabled
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the source matrix
             * @returns {mat4} out
             */
            mat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;
            /**
             * Inverts a mat4 not using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the source matrix
             * @returns {mat4} out
             */
            mat4.scalar.invert = function (out, a) {
                var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32,
                // Calculate the determinant
                det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                if (!det) {
                    return null;
                }
                det = 1.0 / det;
                out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                return out;
            };
            /**
             * Inverts a mat4 using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the source matrix
             * @returns {mat4} out
             */
            mat4.SIMD.invert = function (out, a) {
                var row0, row1, row2, row3, tmp1, minor0, minor1, minor2, minor3, det, a0 = SIMD.Float32x4.load(a, 0), a1 = SIMD.Float32x4.load(a, 4), a2 = SIMD.Float32x4.load(a, 8), a3 = SIMD.Float32x4.load(a, 12);
                // Compute matrix adjugate
                tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
                row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
                row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
                row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);
                tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
                row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
                row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
                row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);
                tmp1 = SIMD.Float32x4.mul(row2, row3);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                minor0 = SIMD.Float32x4.mul(row1, tmp1);
                minor1 = SIMD.Float32x4.mul(row0, tmp1);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
                minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
                minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);
                tmp1 = SIMD.Float32x4.mul(row1, row2);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
                minor3 = SIMD.Float32x4.mul(row0, tmp1);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
                minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
                minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);
                tmp1 = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                row2 = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
                minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
                minor2 = SIMD.Float32x4.mul(row0, tmp1);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
                minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
                minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);
                tmp1 = SIMD.Float32x4.mul(row0, row1);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
                minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
                minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));
                tmp1 = SIMD.Float32x4.mul(row0, row3);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
                minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
                minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));
                tmp1 = SIMD.Float32x4.mul(row0, row2);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
                minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
                minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);
                // Compute matrix determinant
                det = SIMD.Float32x4.mul(row0, minor0);
                det = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);
                det = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);
                tmp1 = SIMD.Float32x4.reciprocalApproximation(det);
                det = SIMD.Float32x4.sub(SIMD.Float32x4.add(tmp1, tmp1), SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));
                det = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);
                if (!det) {
                    return null;
                }
                // Compute matrix inverse
                SIMD.Float32x4.store(out, 0, SIMD.Float32x4.mul(det, minor0));
                SIMD.Float32x4.store(out, 4, SIMD.Float32x4.mul(det, minor1));
                SIMD.Float32x4.store(out, 8, SIMD.Float32x4.mul(det, minor2));
                SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));
                return out;
            };
            /**
             * Inverts a mat4 using SIMD if available and enabled
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the source matrix
             * @returns {mat4} out
             */
            mat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;
            /**
             * Calculates the adjugate of a mat4 not using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the source matrix
             * @returns {mat4} out
             */
            mat4.scalar.adjoint = function (out, a) {
                var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
                out[0] = (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
                out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
                out[2] = (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
                out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
                out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
                out[5] = (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
                out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
                out[7] = (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
                out[8] = (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
                out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
                out[10] = (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
                out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
                out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
                out[13] = (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
                out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
                out[15] = (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
                return out;
            };
            /**
             * Calculates the adjugate of a mat4 using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the source matrix
             * @returns {mat4} out
             */
            mat4.SIMD.adjoint = function (out, a) {
                var a0, a1, a2, a3;
                var row0, row1, row2, row3;
                var tmp1;
                var minor0, minor1, minor2, minor3;
                a0 = SIMD.Float32x4.load(a, 0);
                a1 = SIMD.Float32x4.load(a, 4);
                a2 = SIMD.Float32x4.load(a, 8);
                a3 = SIMD.Float32x4.load(a, 12);
                // Transpose the source matrix.  Sort of.  Not a true transpose operation
                tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
                row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
                row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
                row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);
                tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
                row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
                row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
                row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);
                tmp1 = SIMD.Float32x4.mul(row2, row3);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                minor0 = SIMD.Float32x4.mul(row1, tmp1);
                minor1 = SIMD.Float32x4.mul(row0, tmp1);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
                minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
                minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);
                tmp1 = SIMD.Float32x4.mul(row1, row2);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
                minor3 = SIMD.Float32x4.mul(row0, tmp1);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
                minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
                minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);
                tmp1 = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                row2 = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
                minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
                minor2 = SIMD.Float32x4.mul(row0, tmp1);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
                minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
                minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);
                tmp1 = SIMD.Float32x4.mul(row0, row1);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
                minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
                minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));
                tmp1 = SIMD.Float32x4.mul(row0, row3);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
                minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
                minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));
                tmp1 = SIMD.Float32x4.mul(row0, row2);
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
                minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
                tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
                minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);
                SIMD.Float32x4.store(out, 0, minor0);
                SIMD.Float32x4.store(out, 4, minor1);
                SIMD.Float32x4.store(out, 8, minor2);
                SIMD.Float32x4.store(out, 12, minor3);
                return out;
            };
            /**
             * Calculates the adjugate of a mat4 using SIMD if available and enabled
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the source matrix
             * @returns {mat4} out
             */
            mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;
            /**
             * Calculates the determinant of a mat4
             *
             * @param {mat4} a the source matrix
             * @returns {Number} determinant of a
             */
            mat4.determinant = function (a) {
                var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;
                // Calculate the determinant
                return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
            };
            /**
             * Multiplies two mat4's explicitly using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the first operand, must be a Float32Array
             * @param {mat4} b the second operand, must be a Float32Array
             * @returns {mat4} out
             */
            mat4.SIMD.multiply = function (out, a, b) {
                var a0 = SIMD.Float32x4.load(a, 0);
                var a1 = SIMD.Float32x4.load(a, 4);
                var a2 = SIMD.Float32x4.load(a, 8);
                var a3 = SIMD.Float32x4.load(a, 12);
                var b0 = SIMD.Float32x4.load(b, 0);
                var out0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2), SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));
                SIMD.Float32x4.store(out, 0, out0);
                var b1 = SIMD.Float32x4.load(b, 4);
                var out1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2), SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));
                SIMD.Float32x4.store(out, 4, out1);
                var b2 = SIMD.Float32x4.load(b, 8);
                var out2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2), SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));
                SIMD.Float32x4.store(out, 8, out2);
                var b3 = SIMD.Float32x4.load(b, 12);
                var out3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2), SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));
                SIMD.Float32x4.store(out, 12, out3);
                return out;
            };
            /**
             * Multiplies two mat4's explicitly not using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the first operand
             * @param {mat4} b the second operand
             * @returns {mat4} out
             */
            mat4.scalar.multiply = function (out, a, b) {
                var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
                // Cache only the current line of the second matrix
                var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
                out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = b[4];
                b1 = b[5];
                b2 = b[6];
                b3 = b[7];
                out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = b[8];
                b1 = b[9];
                b2 = b[10];
                b3 = b[11];
                out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = b[12];
                b1 = b[13];
                b2 = b[14];
                b3 = b[15];
                out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                return out;
            };
            /**
             * Multiplies two mat4's using SIMD if available and enabled
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the first operand
             * @param {mat4} b the second operand
             * @returns {mat4} out
             */
            mat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;
            /**
             * Alias for {@link mat4.multiply}
             * @function
             */
            mat4.mul = mat4.multiply;
            /**
             * Translate a mat4 by the given vector not using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to translate
             * @param {vec3} v vector to translate by
             * @returns {mat4} out
             */
            mat4.scalar.translate = function (out, a, v) {
                var x = v[0], y = v[1], z = v[2], a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;
                if (a === out) {
                    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
                    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
                    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
                    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
                }
                else {
                    a00 = a[0];
                    a01 = a[1];
                    a02 = a[2];
                    a03 = a[3];
                    a10 = a[4];
                    a11 = a[5];
                    a12 = a[6];
                    a13 = a[7];
                    a20 = a[8];
                    a21 = a[9];
                    a22 = a[10];
                    a23 = a[11];
                    out[0] = a00;
                    out[1] = a01;
                    out[2] = a02;
                    out[3] = a03;
                    out[4] = a10;
                    out[5] = a11;
                    out[6] = a12;
                    out[7] = a13;
                    out[8] = a20;
                    out[9] = a21;
                    out[10] = a22;
                    out[11] = a23;
                    out[12] = a00 * x + a10 * y + a20 * z + a[12];
                    out[13] = a01 * x + a11 * y + a21 * z + a[13];
                    out[14] = a02 * x + a12 * y + a22 * z + a[14];
                    out[15] = a03 * x + a13 * y + a23 * z + a[15];
                }
                return out;
            };
            /**
             * Translates a mat4 by the given vector using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to translate
             * @param {vec3} v vector to translate by
             * @returns {mat4} out
             */
            mat4.SIMD.translate = function (out, a, v) {
                var a0 = SIMD.Float32x4.load(a, 0), a1 = SIMD.Float32x4.load(a, 4), a2 = SIMD.Float32x4.load(a, 8), a3 = SIMD.Float32x4.load(a, 12), vec = SIMD.Float32x4(v[0], v[1], v[2], 0);
                if (a !== out) {
                    out[0] = a[0];
                    out[1] = a[1];
                    out[2] = a[2];
                    out[3] = a[3];
                    out[4] = a[4];
                    out[5] = a[5];
                    out[6] = a[6];
                    out[7] = a[7];
                    out[8] = a[8];
                    out[9] = a[9];
                    out[10] = a[10];
                    out[11] = a[11];
                }
                a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));
                a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));
                a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));
                var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));
                SIMD.Float32x4.store(out, 12, t0);
                return out;
            };
            /**
             * Translates a mat4 by the given vector using SIMD if available and enabled
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to translate
             * @param {vec3} v vector to translate by
             * @returns {mat4} out
             */
            mat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;
            /**
             * Scales the mat4 by the dimensions in the given vec3 not using vectorization
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to scale
             * @param {vec3} v the vec3 to scale the matrix by
             * @returns {mat4} out
             **/
            mat4.scalar.scale = function (out, a, v) {
                var x = v[0], y = v[1], z = v[2];
                out[0] = a[0] * x;
                out[1] = a[1] * x;
                out[2] = a[2] * x;
                out[3] = a[3] * x;
                out[4] = a[4] * y;
                out[5] = a[5] * y;
                out[6] = a[6] * y;
                out[7] = a[7] * y;
                out[8] = a[8] * z;
                out[9] = a[9] * z;
                out[10] = a[10] * z;
                out[11] = a[11] * z;
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
                return out;
            };
            /**
             * Scales the mat4 by the dimensions in the given vec3 using vectorization
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to scale
             * @param {vec3} v the vec3 to scale the matrix by
             * @returns {mat4} out
             **/
            mat4.SIMD.scale = function (out, a, v) {
                var a0, a1, a2;
                var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);
                a0 = SIMD.Float32x4.load(a, 0);
                SIMD.Float32x4.store(out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));
                a1 = SIMD.Float32x4.load(a, 4);
                SIMD.Float32x4.store(out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));
                a2 = SIMD.Float32x4.load(a, 8);
                SIMD.Float32x4.store(out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
                return out;
            };
            /**
             * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to scale
             * @param {vec3} v the vec3 to scale the matrix by
             * @returns {mat4} out
             */
            mat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;
            /**
             * Rotates a mat4 by the given angle around the given axis
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @param {vec3} axis the axis to rotate around
             * @returns {mat4} out
             */
            mat4.rotate = function (out, a, rad, axis) {
                var x = axis[0], y = axis[1], z = axis[2], len = Math.sqrt(x * x + y * y + z * z), s, c, t, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, b00, b01, b02, b10, b11, b12, b20, b21, b22;
                if (Math.abs(len) < glMatrix.EPSILON) {
                    return null;
                }
                len = 1 / len;
                x *= len;
                y *= len;
                z *= len;
                s = Math.sin(rad);
                c = Math.cos(rad);
                t = 1 - c;
                a00 = a[0];
                a01 = a[1];
                a02 = a[2];
                a03 = a[3];
                a10 = a[4];
                a11 = a[5];
                a12 = a[6];
                a13 = a[7];
                a20 = a[8];
                a21 = a[9];
                a22 = a[10];
                a23 = a[11];
                // Construct the elements of the rotation matrix
                b00 = x * x * t + c;
                b01 = y * x * t + z * s;
                b02 = z * x * t - y * s;
                b10 = x * y * t - z * s;
                b11 = y * y * t + c;
                b12 = z * y * t + x * s;
                b20 = x * z * t + y * s;
                b21 = y * z * t - x * s;
                b22 = z * z * t + c;
                // Perform rotation-specific matrix multiplication
                out[0] = a00 * b00 + a10 * b01 + a20 * b02;
                out[1] = a01 * b00 + a11 * b01 + a21 * b02;
                out[2] = a02 * b00 + a12 * b01 + a22 * b02;
                out[3] = a03 * b00 + a13 * b01 + a23 * b02;
                out[4] = a00 * b10 + a10 * b11 + a20 * b12;
                out[5] = a01 * b10 + a11 * b11 + a21 * b12;
                out[6] = a02 * b10 + a12 * b11 + a22 * b12;
                out[7] = a03 * b10 + a13 * b11 + a23 * b12;
                out[8] = a00 * b20 + a10 * b21 + a20 * b22;
                out[9] = a01 * b20 + a11 * b21 + a21 * b22;
                out[10] = a02 * b20 + a12 * b21 + a22 * b22;
                out[11] = a03 * b20 + a13 * b21 + a23 * b22;
                if (a !== out) {
                    out[12] = a[12];
                    out[13] = a[13];
                    out[14] = a[14];
                    out[15] = a[15];
                }
                return out;
            };
            /**
             * Rotates a matrix by the given angle around the X axis not using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.scalar.rotateX = function (out, a, rad) {
                var s = Math.sin(rad), c = Math.cos(rad), a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
                if (a !== out) {
                    out[0] = a[0];
                    out[1] = a[1];
                    out[2] = a[2];
                    out[3] = a[3];
                    out[12] = a[12];
                    out[13] = a[13];
                    out[14] = a[14];
                    out[15] = a[15];
                }
                // Perform axis-specific matrix multiplication
                out[4] = a10 * c + a20 * s;
                out[5] = a11 * c + a21 * s;
                out[6] = a12 * c + a22 * s;
                out[7] = a13 * c + a23 * s;
                out[8] = a20 * c - a10 * s;
                out[9] = a21 * c - a11 * s;
                out[10] = a22 * c - a12 * s;
                out[11] = a23 * c - a13 * s;
                return out;
            };
            /**
             * Rotates a matrix by the given angle around the X axis using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.SIMD.rotateX = function (out, a, rad) {
                var s = SIMD.Float32x4.splat(Math.sin(rad)), c = SIMD.Float32x4.splat(Math.cos(rad));
                if (a !== out) {
                    out[0] = a[0];
                    out[1] = a[1];
                    out[2] = a[2];
                    out[3] = a[3];
                    out[12] = a[12];
                    out[13] = a[13];
                    out[14] = a[14];
                    out[15] = a[15];
                }
                // Perform axis-specific matrix multiplication
                var a_1 = SIMD.Float32x4.load(a, 4);
                var a_2 = SIMD.Float32x4.load(a, 8);
                SIMD.Float32x4.store(out, 4, SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));
                SIMD.Float32x4.store(out, 8, SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));
                return out;
            };
            /**
             * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;
            /**
             * Rotates a matrix by the given angle around the Y axis not using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.scalar.rotateY = function (out, a, rad) {
                var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
                if (a !== out) {
                    out[4] = a[4];
                    out[5] = a[5];
                    out[6] = a[6];
                    out[7] = a[7];
                    out[12] = a[12];
                    out[13] = a[13];
                    out[14] = a[14];
                    out[15] = a[15];
                }
                // Perform axis-specific matrix multiplication
                out[0] = a00 * c - a20 * s;
                out[1] = a01 * c - a21 * s;
                out[2] = a02 * c - a22 * s;
                out[3] = a03 * c - a23 * s;
                out[8] = a00 * s + a20 * c;
                out[9] = a01 * s + a21 * c;
                out[10] = a02 * s + a22 * c;
                out[11] = a03 * s + a23 * c;
                return out;
            };
            /**
             * Rotates a matrix by the given angle around the Y axis using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.SIMD.rotateY = function (out, a, rad) {
                var s = SIMD.Float32x4.splat(Math.sin(rad)), c = SIMD.Float32x4.splat(Math.cos(rad));
                if (a !== out) {
                    out[4] = a[4];
                    out[5] = a[5];
                    out[6] = a[6];
                    out[7] = a[7];
                    out[12] = a[12];
                    out[13] = a[13];
                    out[14] = a[14];
                    out[15] = a[15];
                }
                // Perform axis-specific matrix multiplication
                var a_0 = SIMD.Float32x4.load(a, 0);
                var a_2 = SIMD.Float32x4.load(a, 8);
                SIMD.Float32x4.store(out, 0, SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));
                SIMD.Float32x4.store(out, 8, SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));
                return out;
            };
            /**
             * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;
            /**
             * Rotates a matrix by the given angle around the Z axis not using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.scalar.rotateZ = function (out, a, rad) {
                var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
                if (a !== out) {
                    out[8] = a[8];
                    out[9] = a[9];
                    out[10] = a[10];
                    out[11] = a[11];
                    out[12] = a[12];
                    out[13] = a[13];
                    out[14] = a[14];
                    out[15] = a[15];
                }
                // Perform axis-specific matrix multiplication
                out[0] = a00 * c + a10 * s;
                out[1] = a01 * c + a11 * s;
                out[2] = a02 * c + a12 * s;
                out[3] = a03 * c + a13 * s;
                out[4] = a10 * c - a00 * s;
                out[5] = a11 * c - a01 * s;
                out[6] = a12 * c - a02 * s;
                out[7] = a13 * c - a03 * s;
                return out;
            };
            /**
             * Rotates a matrix by the given angle around the Z axis using SIMD
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.SIMD.rotateZ = function (out, a, rad) {
                var s = SIMD.Float32x4.splat(Math.sin(rad)), c = SIMD.Float32x4.splat(Math.cos(rad));
                if (a !== out) {
                    out[8] = a[8];
                    out[9] = a[9];
                    out[10] = a[10];
                    out[11] = a[11];
                    out[12] = a[12];
                    out[13] = a[13];
                    out[14] = a[14];
                    out[15] = a[15];
                }
                // Perform axis-specific matrix multiplication
                var a_0 = SIMD.Float32x4.load(a, 0);
                var a_1 = SIMD.Float32x4.load(a, 4);
                SIMD.Float32x4.store(out, 0, SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));
                SIMD.Float32x4.store(out, 4, SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));
                return out;
            };
            /**
             * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to rotate
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;
            /**
             * Creates a matrix from a vector translation
             * This is equivalent to (but much faster than):
             *
             *     mat4.identity(dest);
             *     mat4.translate(dest, dest, vec);
             *
             * @param {mat4} out mat4 receiving operation result
             * @param {vec3} v Translation vector
             * @returns {mat4} out
             */
            mat4.fromTranslation = function (out, v) {
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 0;
                out[5] = 1;
                out[6] = 0;
                out[7] = 0;
                out[8] = 0;
                out[9] = 0;
                out[10] = 1;
                out[11] = 0;
                out[12] = v[0];
                out[13] = v[1];
                out[14] = v[2];
                out[15] = 1;
                return out;
            };
            /**
             * Creates a matrix from a vector scaling
             * This is equivalent to (but much faster than):
             *
             *     mat4.identity(dest);
             *     mat4.scale(dest, dest, vec);
             *
             * @param {mat4} out mat4 receiving operation result
             * @param {vec3} v Scaling vector
             * @returns {mat4} out
             */
            mat4.fromScaling = function (out, v) {
                out[0] = v[0];
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 0;
                out[5] = v[1];
                out[6] = 0;
                out[7] = 0;
                out[8] = 0;
                out[9] = 0;
                out[10] = v[2];
                out[11] = 0;
                out[12] = 0;
                out[13] = 0;
                out[14] = 0;
                out[15] = 1;
                return out;
            };
            /**
             * Creates a matrix from a given angle around a given axis
             * This is equivalent to (but much faster than):
             *
             *     mat4.identity(dest);
             *     mat4.rotate(dest, dest, rad, axis);
             *
             * @param {mat4} out mat4 receiving operation result
             * @param {Number} rad the angle to rotate the matrix by
             * @param {vec3} axis the axis to rotate around
             * @returns {mat4} out
             */
            mat4.fromRotation = function (out, rad, axis) {
                var x = axis[0], y = axis[1], z = axis[2], len = Math.sqrt(x * x + y * y + z * z), s, c, t;
                if (Math.abs(len) < glMatrix.EPSILON) {
                    return null;
                }
                len = 1 / len;
                x *= len;
                y *= len;
                z *= len;
                s = Math.sin(rad);
                c = Math.cos(rad);
                t = 1 - c;
                // Perform rotation-specific matrix multiplication
                out[0] = x * x * t + c;
                out[1] = y * x * t + z * s;
                out[2] = z * x * t - y * s;
                out[3] = 0;
                out[4] = x * y * t - z * s;
                out[5] = y * y * t + c;
                out[6] = z * y * t + x * s;
                out[7] = 0;
                out[8] = x * z * t + y * s;
                out[9] = y * z * t - x * s;
                out[10] = z * z * t + c;
                out[11] = 0;
                out[12] = 0;
                out[13] = 0;
                out[14] = 0;
                out[15] = 1;
                return out;
            };
            /**
             * Creates a matrix from the given angle around the X axis
             * This is equivalent to (but much faster than):
             *
             *     mat4.identity(dest);
             *     mat4.rotateX(dest, dest, rad);
             *
             * @param {mat4} out mat4 receiving operation result
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.fromXRotation = function (out, rad) {
                var s = Math.sin(rad), c = Math.cos(rad);
                // Perform axis-specific matrix multiplication
                out[0] = 1;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 0;
                out[5] = c;
                out[6] = s;
                out[7] = 0;
                out[8] = 0;
                out[9] = -s;
                out[10] = c;
                out[11] = 0;
                out[12] = 0;
                out[13] = 0;
                out[14] = 0;
                out[15] = 1;
                return out;
            };
            /**
             * Creates a matrix from the given angle around the Y axis
             * This is equivalent to (but much faster than):
             *
             *     mat4.identity(dest);
             *     mat4.rotateY(dest, dest, rad);
             *
             * @param {mat4} out mat4 receiving operation result
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.fromYRotation = function (out, rad) {
                var s = Math.sin(rad), c = Math.cos(rad);
                // Perform axis-specific matrix multiplication
                out[0] = c;
                out[1] = 0;
                out[2] = -s;
                out[3] = 0;
                out[4] = 0;
                out[5] = 1;
                out[6] = 0;
                out[7] = 0;
                out[8] = s;
                out[9] = 0;
                out[10] = c;
                out[11] = 0;
                out[12] = 0;
                out[13] = 0;
                out[14] = 0;
                out[15] = 1;
                return out;
            };
            /**
             * Creates a matrix from the given angle around the Z axis
             * This is equivalent to (but much faster than):
             *
             *     mat4.identity(dest);
             *     mat4.rotateZ(dest, dest, rad);
             *
             * @param {mat4} out mat4 receiving operation result
             * @param {Number} rad the angle to rotate the matrix by
             * @returns {mat4} out
             */
            mat4.fromZRotation = function (out, rad) {
                var s = Math.sin(rad), c = Math.cos(rad);
                // Perform axis-specific matrix multiplication
                out[0] = c;
                out[1] = s;
                out[2] = 0;
                out[3] = 0;
                out[4] = -s;
                out[5] = c;
                out[6] = 0;
                out[7] = 0;
                out[8] = 0;
                out[9] = 0;
                out[10] = 1;
                out[11] = 0;
                out[12] = 0;
                out[13] = 0;
                out[14] = 0;
                out[15] = 1;
                return out;
            };
            /**
             * Creates a matrix from a quaternion rotation and vector translation
             * This is equivalent to (but much faster than):
             *
             *     mat4.identity(dest);
             *     mat4.translate(dest, vec);
             *     var quatMat = mat4.create();
             *     quat4.toMat4(quat, quatMat);
             *     mat4.multiply(dest, quatMat);
             *
             * @param {mat4} out mat4 receiving operation result
             * @param {quat4} q Rotation quaternion
             * @param {vec3} v Translation vector
             * @returns {mat4} out
             */
            mat4.fromRotationTranslation = function (out, q, v) {
                // Quaternion math
                var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
                out[0] = 1 - (yy + zz);
                out[1] = xy + wz;
                out[2] = xz - wy;
                out[3] = 0;
                out[4] = xy - wz;
                out[5] = 1 - (xx + zz);
                out[6] = yz + wx;
                out[7] = 0;
                out[8] = xz + wy;
                out[9] = yz - wx;
                out[10] = 1 - (xx + yy);
                out[11] = 0;
                out[12] = v[0];
                out[13] = v[1];
                out[14] = v[2];
                out[15] = 1;
                return out;
            };
            /**
             * Returns the translation vector component of a transformation
             *  matrix. If a matrix is built with fromRotationTranslation,
             *  the returned vector will be the same as the translation vector
             *  originally supplied.
             * @param  {vec3} out Vector to receive translation component
             * @param  {mat4} mat Matrix to be decomposed (input)
             * @return {vec3} out
             */
            mat4.getTranslation = function (out, mat) {
                out[0] = mat[12];
                out[1] = mat[13];
                out[2] = mat[14];
                return out;
            };
            /**
             * Returns a quaternion representing the rotational component
             *  of a transformation matrix. If a matrix is built with
             *  fromRotationTranslation, the returned quaternion will be the
             *  same as the quaternion originally supplied.
             * @param {quat} out Quaternion to receive the rotation component
             * @param {mat4} mat Matrix to be decomposed (input)
             * @return {quat} out
             */
            mat4.getRotation = function (out, mat) {
                // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
                var trace = mat[0] + mat[5] + mat[10];
                var S = 0;
                if (trace > 0) {
                    S = Math.sqrt(trace + 1.0) * 2;
                    out[3] = 0.25 * S;
                    out[0] = (mat[6] - mat[9]) / S;
                    out[1] = (mat[8] - mat[2]) / S;
                    out[2] = (mat[1] - mat[4]) / S;
                }
                else if ((mat[0] > mat[5]) & (mat[0] > mat[10])) {
                    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
                    out[3] = (mat[6] - mat[9]) / S;
                    out[0] = 0.25 * S;
                    out[1] = (mat[1] + mat[4]) / S;
                    out[2] = (mat[8] + mat[2]) / S;
                }
                else if (mat[5] > mat[10]) {
                    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
                    out[3] = (mat[8] - mat[2]) / S;
                    out[0] = (mat[1] + mat[4]) / S;
                    out[1] = 0.25 * S;
                    out[2] = (mat[6] + mat[9]) / S;
                }
                else {
                    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
                    out[3] = (mat[1] - mat[4]) / S;
                    out[0] = (mat[8] + mat[2]) / S;
                    out[1] = (mat[6] + mat[9]) / S;
                    out[2] = 0.25 * S;
                }
                return out;
            };
            /**
             * Creates a matrix from a quaternion rotation, vector translation and vector scale
             * This is equivalent to (but much faster than):
             *
             *     mat4.identity(dest);
             *     mat4.translate(dest, vec);
             *     var quatMat = mat4.create();
             *     quat4.toMat4(quat, quatMat);
             *     mat4.multiply(dest, quatMat);
             *     mat4.scale(dest, scale)
             *
             * @param {mat4} out mat4 receiving operation result
             * @param {quat4} q Rotation quaternion
             * @param {vec3} v Translation vector
             * @param {vec3} s Scaling vector
             * @returns {mat4} out
             */
            mat4.fromRotationTranslationScale = function (out, q, v, s) {
                // Quaternion math
                var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2, sx = s[0], sy = s[1], sz = s[2];
                out[0] = (1 - (yy + zz)) * sx;
                out[1] = (xy + wz) * sx;
                out[2] = (xz - wy) * sx;
                out[3] = 0;
                out[4] = (xy - wz) * sy;
                out[5] = (1 - (xx + zz)) * sy;
                out[6] = (yz + wx) * sy;
                out[7] = 0;
                out[8] = (xz + wy) * sz;
                out[9] = (yz - wx) * sz;
                out[10] = (1 - (xx + yy)) * sz;
                out[11] = 0;
                out[12] = v[0];
                out[13] = v[1];
                out[14] = v[2];
                out[15] = 1;
                return out;
            };
            /**
             * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
             * This is equivalent to (but much faster than):
             *
             *     mat4.identity(dest);
             *     mat4.translate(dest, vec);
             *     mat4.translate(dest, origin);
             *     var quatMat = mat4.create();
             *     quat4.toMat4(quat, quatMat);
             *     mat4.multiply(dest, quatMat);
             *     mat4.scale(dest, scale)
             *     mat4.translate(dest, negativeOrigin);
             *
             * @param {mat4} out mat4 receiving operation result
             * @param {quat4} q Rotation quaternion
             * @param {vec3} v Translation vector
             * @param {vec3} s Scaling vector
             * @param {vec3} o The origin vector around which to scale and rotate
             * @returns {mat4} out
             */
            mat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {
                // Quaternion math
                var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2, sx = s[0], sy = s[1], sz = s[2], ox = o[0], oy = o[1], oz = o[2];
                out[0] = (1 - (yy + zz)) * sx;
                out[1] = (xy + wz) * sx;
                out[2] = (xz - wy) * sx;
                out[3] = 0;
                out[4] = (xy - wz) * sy;
                out[5] = (1 - (xx + zz)) * sy;
                out[6] = (yz + wx) * sy;
                out[7] = 0;
                out[8] = (xz + wy) * sz;
                out[9] = (yz - wx) * sz;
                out[10] = (1 - (xx + yy)) * sz;
                out[11] = 0;
                out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
                out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
                out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
                out[15] = 1;
                return out;
            };
            /**
             * Calculates a 4x4 matrix from the given quaternion
             *
             * @param {mat4} out mat4 receiving operation result
             * @param {quat} q Quaternion to create matrix from
             *
             * @returns {mat4} out
             */
            mat4.fromQuat = function (out, q) {
                var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, yx = y * x2, yy = y * y2, zx = z * x2, zy = z * y2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
                out[0] = 1 - yy - zz;
                out[1] = yx + wz;
                out[2] = zx - wy;
                out[3] = 0;
                out[4] = yx - wz;
                out[5] = 1 - xx - zz;
                out[6] = zy + wx;
                out[7] = 0;
                out[8] = zx + wy;
                out[9] = zy - wx;
                out[10] = 1 - xx - yy;
                out[11] = 0;
                out[12] = 0;
                out[13] = 0;
                out[14] = 0;
                out[15] = 1;
                return out;
            };
            /**
             * Generates a frustum matrix with the given bounds
             *
             * @param {mat4} out mat4 frustum matrix will be written into
             * @param {Number} left Left bound of the frustum
             * @param {Number} right Right bound of the frustum
             * @param {Number} bottom Bottom bound of the frustum
             * @param {Number} top Top bound of the frustum
             * @param {Number} near Near bound of the frustum
             * @param {Number} far Far bound of the frustum
             * @returns {mat4} out
             */
            mat4.frustum = function (out, left, right, bottom, top, near, far) {
                var rl = 1 / (right - left), tb = 1 / (top - bottom), nf = 1 / (near - far);
                out[0] = (near * 2) * rl;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 0;
                out[5] = (near * 2) * tb;
                out[6] = 0;
                out[7] = 0;
                out[8] = (right + left) * rl;
                out[9] = (top + bottom) * tb;
                out[10] = (far + near) * nf;
                out[11] = -1;
                out[12] = 0;
                out[13] = 0;
                out[14] = (far * near * 2) * nf;
                out[15] = 0;
                return out;
            };
            /**
             * Generates a perspective projection matrix with the given bounds
             *
             * @param {mat4} out mat4 frustum matrix will be written into
             * @param {number} fovy Vertical field of view in radians
             * @param {number} aspect Aspect ratio. typically viewport width/height
             * @param {number} near Near bound of the frustum
             * @param {number} far Far bound of the frustum
             * @returns {mat4} out
             */
            mat4.perspective = function (out, fovy, aspect, near, far) {
                var f = 1.0 / Math.tan(fovy / 2), nf = 1 / (near - far);
                out[0] = f / aspect;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 0;
                out[5] = f;
                out[6] = 0;
                out[7] = 0;
                out[8] = 0;
                out[9] = 0;
                out[10] = (far + near) * nf;
                out[11] = -1;
                out[12] = 0;
                out[13] = 0;
                out[14] = (2 * far * near) * nf;
                out[15] = 0;
                return out;
            };
            /**
             * Generates a perspective projection matrix with the given field of view.
             * This is primarily useful for generating projection matrices to be used
             * with the still experiemental WebVR API.
             *
             * @param {mat4} out mat4 frustum matrix will be written into
             * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
             * @param {number} near Near bound of the frustum
             * @param {number} far Far bound of the frustum
             * @returns {mat4} out
             */
            mat4.perspectiveFromFieldOfView = function (out, fov, near, far) {
                var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0), downTan = Math.tan(fov.downDegrees * Math.PI / 180.0), leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0), rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0), xScale = 2.0 / (leftTan + rightTan), yScale = 2.0 / (upTan + downTan);
                out[0] = xScale;
                out[1] = 0.0;
                out[2] = 0.0;
                out[3] = 0.0;
                out[4] = 0.0;
                out[5] = yScale;
                out[6] = 0.0;
                out[7] = 0.0;
                out[8] = -((leftTan - rightTan) * xScale * 0.5);
                out[9] = ((upTan - downTan) * yScale * 0.5);
                out[10] = far / (near - far);
                out[11] = -1.0;
                out[12] = 0.0;
                out[13] = 0.0;
                out[14] = (far * near) / (near - far);
                out[15] = 0.0;
                return out;
            };
            /**
             * Generates a orthogonal projection matrix with the given bounds
             *
             * @param {mat4} out mat4 frustum matrix will be written into
             * @param {number} left Left bound of the frustum
             * @param {number} right Right bound of the frustum
             * @param {number} bottom Bottom bound of the frustum
             * @param {number} top Top bound of the frustum
             * @param {number} near Near bound of the frustum
             * @param {number} far Far bound of the frustum
             * @returns {mat4} out
             */
            mat4.ortho = function (out, left, right, bottom, top, near, far) {
                var lr = 1 / (left - right), bt = 1 / (bottom - top), nf = 1 / (near - far);
                out[0] = -2 * lr;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 0;
                out[5] = -2 * bt;
                out[6] = 0;
                out[7] = 0;
                out[8] = 0;
                out[9] = 0;
                out[10] = 2 * nf;
                out[11] = 0;
                out[12] = (left + right) * lr;
                out[13] = (top + bottom) * bt;
                out[14] = (far + near) * nf;
                out[15] = 1;
                return out;
            };
            /**
             * Generates a look-at matrix with the given eye position, focal point, and up axis
             *
             * @param {mat4} out mat4 frustum matrix will be written into
             * @param {vec3} eye Position of the viewer
             * @param {vec3} center Point the viewer is looking at
             * @param {vec3} up vec3 pointing up
             * @returns {mat4} out
             */
            mat4.lookAt = function (out, eye, center, up) {
                var x0, x1, x2, y0, y1, y2, z0, z1, z2, len, eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2], centerx = center[0], centery = center[1], centerz = center[2];
                if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&
                    Math.abs(eyey - centery) < glMatrix.EPSILON &&
                    Math.abs(eyez - centerz) < glMatrix.EPSILON) {
                    return mat4.identity(out);
                }
                z0 = eyex - centerx;
                z1 = eyey - centery;
                z2 = eyez - centerz;
                len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
                z0 *= len;
                z1 *= len;
                z2 *= len;
                x0 = upy * z2 - upz * z1;
                x1 = upz * z0 - upx * z2;
                x2 = upx * z1 - upy * z0;
                len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
                if (!len) {
                    x0 = 0;
                    x1 = 0;
                    x2 = 0;
                }
                else {
                    len = 1 / len;
                    x0 *= len;
                    x1 *= len;
                    x2 *= len;
                }
                y0 = z1 * x2 - z2 * x1;
                y1 = z2 * x0 - z0 * x2;
                y2 = z0 * x1 - z1 * x0;
                len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
                if (!len) {
                    y0 = 0;
                    y1 = 0;
                    y2 = 0;
                }
                else {
                    len = 1 / len;
                    y0 *= len;
                    y1 *= len;
                    y2 *= len;
                }
                out[0] = x0;
                out[1] = y0;
                out[2] = z0;
                out[3] = 0;
                out[4] = x1;
                out[5] = y1;
                out[6] = z1;
                out[7] = 0;
                out[8] = x2;
                out[9] = y2;
                out[10] = z2;
                out[11] = 0;
                out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
                out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
                out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
                out[15] = 1;
                return out;
            };
            /**
             * Returns a string representation of a mat4
             *
             * @param {mat4} a matrix to represent as a string
             * @returns {String} string representation of the matrix
             */
            mat4.str = function (a) {
                return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
            };
            /**
             * Returns Frobenius norm of a mat4
             *
             * @param {mat4} a the matrix to calculate Frobenius norm of
             * @returns {Number} Frobenius norm
             */
            mat4.frob = function (a) {
                return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2)));
            };
            /**
             * Adds two mat4's
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the first operand
             * @param {mat4} b the second operand
             * @returns {mat4} out
             */
            mat4.add = function (out, a, b) {
                out[0] = a[0] + b[0];
                out[1] = a[1] + b[1];
                out[2] = a[2] + b[2];
                out[3] = a[3] + b[3];
                out[4] = a[4] + b[4];
                out[5] = a[5] + b[5];
                out[6] = a[6] + b[6];
                out[7] = a[7] + b[7];
                out[8] = a[8] + b[8];
                out[9] = a[9] + b[9];
                out[10] = a[10] + b[10];
                out[11] = a[11] + b[11];
                out[12] = a[12] + b[12];
                out[13] = a[13] + b[13];
                out[14] = a[14] + b[14];
                out[15] = a[15] + b[15];
                return out;
            };
            /**
             * Subtracts matrix b from matrix a
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the first operand
             * @param {mat4} b the second operand
             * @returns {mat4} out
             */
            mat4.subtract = function (out, a, b) {
                out[0] = a[0] - b[0];
                out[1] = a[1] - b[1];
                out[2] = a[2] - b[2];
                out[3] = a[3] - b[3];
                out[4] = a[4] - b[4];
                out[5] = a[5] - b[5];
                out[6] = a[6] - b[6];
                out[7] = a[7] - b[7];
                out[8] = a[8] - b[8];
                out[9] = a[9] - b[9];
                out[10] = a[10] - b[10];
                out[11] = a[11] - b[11];
                out[12] = a[12] - b[12];
                out[13] = a[13] - b[13];
                out[14] = a[14] - b[14];
                out[15] = a[15] - b[15];
                return out;
            };
            /**
             * Alias for {@link mat4.subtract}
             * @function
             */
            mat4.sub = mat4.subtract;
            /**
             * Multiply each element of the matrix by a scalar.
             *
             * @param {mat4} out the receiving matrix
             * @param {mat4} a the matrix to scale
             * @param {Number} b amount to scale the matrix's elements by
             * @returns {mat4} out
             */
            mat4.multiplyScalar = function (out, a, b) {
                out[0] = a[0] * b;
                out[1] = a[1] * b;
                out[2] = a[2] * b;
                out[3] = a[3] * b;
                out[4] = a[4] * b;
                out[5] = a[5] * b;
                out[6] = a[6] * b;
                out[7] = a[7] * b;
                out[8] = a[8] * b;
                out[9] = a[9] * b;
                out[10] = a[10] * b;
                out[11] = a[11] * b;
                out[12] = a[12] * b;
                out[13] = a[13] * b;
                out[14] = a[14] * b;
                out[15] = a[15] * b;
                return out;
            };
            /**
             * Adds two mat4's after multiplying each element of the second operand by a scalar value.
             *
             * @param {mat4} out the receiving vector
             * @param {mat4} a the first operand
             * @param {mat4} b the second operand
             * @param {Number} scale the amount to scale b's elements by before adding
             * @returns {mat4} out
             */
            mat4.multiplyScalarAndAdd = function (out, a, b, scale) {
                out[0] = a[0] + (b[0] * scale);
                out[1] = a[1] + (b[1] * scale);
                out[2] = a[2] + (b[2] * scale);
                out[3] = a[3] + (b[3] * scale);
                out[4] = a[4] + (b[4] * scale);
                out[5] = a[5] + (b[5] * scale);
                out[6] = a[6] + (b[6] * scale);
                out[7] = a[7] + (b[7] * scale);
                out[8] = a[8] + (b[8] * scale);
                out[9] = a[9] + (b[9] * scale);
                out[10] = a[10] + (b[10] * scale);
                out[11] = a[11] + (b[11] * scale);
                out[12] = a[12] + (b[12] * scale);
                out[13] = a[13] + (b[13] * scale);
                out[14] = a[14] + (b[14] * scale);
                out[15] = a[15] + (b[15] * scale);
                return out;
            };
            /**
             * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
             *
             * @param {mat4} a The first matrix.
             * @param {mat4} b The second matrix.
             * @returns {Boolean} True if the matrices are equal, false otherwise.
             */
            mat4.exactEquals = function (a, b) {
                return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&
                    a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&
                    a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&
                    a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
            };
            /**
             * Returns whether or not the matrices have approximately the same elements in the same position.
             *
             * @param {mat4} a The first matrix.
             * @param {mat4} b The second matrix.
             * @returns {Boolean} True if the matrices are equal, false otherwise.
             */
            mat4.equals = function (a, b) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11], a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
                var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
                return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
                    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
                    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
                    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
                    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
                    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
                    Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&
                    Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&
                    Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&
                    Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&
                    Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&
                    Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&
                    Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&
                    Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15)));
            };
            module.exports = mat4;
            /***/ },
        /* 6 */
        /***/ function (module, exports, __webpack_require__) {
            /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE. */
            var glMatrix = __webpack_require__(1);
            var mat3 = __webpack_require__(4);
            var vec3 = __webpack_require__(7);
            var vec4 = __webpack_require__(8);
            /**
             * @class Quaternion
             * @name quat
             */
            var quat = {};
            /**
             * Creates a new identity quat
             *
             * @returns {quat} a new quaternion
             */
            quat.create = function () {
                var out = new glMatrix.ARRAY_TYPE(4);
                out[0] = 0;
                out[1] = 0;
                out[2] = 0;
                out[3] = 1;
                return out;
            };
            /**
             * Sets a quaternion to represent the shortest rotation from one
             * vector to another.
             *
             * Both vectors are assumed to be unit length.
             *
             * @param {quat} out the receiving quaternion.
             * @param {vec3} a the initial vector
             * @param {vec3} b the destination vector
             * @returns {quat} out
             */
            quat.rotationTo = (function () {
                var tmpvec3 = vec3.create();
                var xUnitVec3 = vec3.fromValues(1, 0, 0);
                var yUnitVec3 = vec3.fromValues(0, 1, 0);
                return function (out, a, b) {
                    var dot = vec3.dot(a, b);
                    if (dot < -0.999999) {
                        vec3.cross(tmpvec3, xUnitVec3, a);
                        if (vec3.length(tmpvec3) < 0.000001)
                            vec3.cross(tmpvec3, yUnitVec3, a);
                        vec3.normalize(tmpvec3, tmpvec3);
                        quat.setAxisAngle(out, tmpvec3, Math.PI);
                        return out;
                    }
                    else if (dot > 0.999999) {
                        out[0] = 0;
                        out[1] = 0;
                        out[2] = 0;
                        out[3] = 1;
                        return out;
                    }
                    else {
                        vec3.cross(tmpvec3, a, b);
                        out[0] = tmpvec3[0];
                        out[1] = tmpvec3[1];
                        out[2] = tmpvec3[2];
                        out[3] = 1 + dot;
                        return quat.normalize(out, out);
                    }
                };
            })();
            /**
             * Sets the specified quaternion with values corresponding to the given
             * axes. Each axis is a vec3 and is expected to be unit length and
             * perpendicular to all other specified axes.
             *
             * @param {vec3} view  the vector representing the viewing direction
             * @param {vec3} right the vector representing the local "right" direction
             * @param {vec3} up    the vector representing the local "up" direction
             * @returns {quat} out
             */
            quat.setAxes = (function () {
                var matr = mat3.create();
                return function (out, view, right, up) {
                    matr[0] = right[0];
                    matr[3] = right[1];
                    matr[6] = right[2];
                    matr[1] = up[0];
                    matr[4] = up[1];
                    matr[7] = up[2];
                    matr[2] = -view[0];
                    matr[5] = -view[1];
                    matr[8] = -view[2];
                    return quat.normalize(out, quat.fromMat3(out, matr));
                };
            })();
            /**
             * Creates a new quat initialized with values from an existing quaternion
             *
             * @param {quat} a quaternion to clone
             * @returns {quat} a new quaternion
             * @function
             */
            quat.clone = vec4.clone;
            /**
             * Creates a new quat initialized with the given values
             *
             * @param {Number} x X component
             * @param {Number} y Y component
             * @param {Number} z Z component
             * @param {Number} w W component
             * @returns {quat} a new quaternion
             * @function
             */
            quat.fromValues = vec4.fromValues;
            /**
             * Copy the values from one quat to another
             *
             * @param {quat} out the receiving quaternion
             * @param {quat} a the source quaternion
             * @returns {quat} out
             * @function
             */
            quat.copy = vec4.copy;
            /**
             * Set the components of a quat to the given values
             *
             * @param {quat} out the receiving quaternion
             * @param {Number} x X component
             * @param {Number} y Y component
             * @param {Number} z Z component
             * @param {Number} w W component
             * @returns {quat} out
             * @function
             */
            quat.set = vec4.set;
            /**
             * Set a quat to the identity quaternion
             *
             * @param {quat} out the receiving quaternion
             * @returns {quat} out
             */
            quat.identity = function (out) {
                out[0] = 0;
                out[1] = 0;
                out[2] = 0;
                out[3] = 1;
                return out;
            };
            /**
             * Sets a quat from the given angle and rotation axis,
             * then returns it.
             *
             * @param {quat} out the receiving quaternion
             * @param {vec3} axis the axis around which to rotate
             * @param {Number} rad the angle in radians
             * @returns {quat} out
             **/
            quat.setAxisAngle = function (out, axis, rad) {
                rad = rad * 0.5;
                var s = Math.sin(rad);
                out[0] = s * axis[0];
                out[1] = s * axis[1];
                out[2] = s * axis[2];
                out[3] = Math.cos(rad);
                return out;
            };
            /**
             * Gets the rotation axis and angle for a given
             *  quaternion. If a quaternion is created with
             *  setAxisAngle, this method will return the same
             *  values as providied in the original parameter list
             *  OR functionally equivalent values.
             * Example: The quaternion formed by axis [0, 0, 1] and
             *  angle -90 is the same as the quaternion formed by
             *  [0, 0, 1] and 270. This method favors the latter.
             * @param  {vec3} out_axis  Vector receiving the axis of rotation
             * @param  {quat} q     Quaternion to be decomposed
             * @return {Number}     Angle, in radians, of the rotation
             */
            quat.getAxisAngle = function (out_axis, q) {
                var rad = Math.acos(q[3]) * 2.0;
                var s = Math.sin(rad / 2.0);
                if (s != 0.0) {
                    out_axis[0] = q[0] / s;
                    out_axis[1] = q[1] / s;
                    out_axis[2] = q[2] / s;
                }
                else {
                    // If s is zero, return any axis (no rotation - axis does not matter)
                    out_axis[0] = 1;
                    out_axis[1] = 0;
                    out_axis[2] = 0;
                }
                return rad;
            };
            /**
             * Adds two quat's
             *
             * @param {quat} out the receiving quaternion
             * @param {quat} a the first operand
             * @param {quat} b the second operand
             * @returns {quat} out
             * @function
             */
            quat.add = vec4.add;
            /**
             * Multiplies two quat's
             *
             * @param {quat} out the receiving quaternion
             * @param {quat} a the first operand
             * @param {quat} b the second operand
             * @returns {quat} out
             */
            quat.multiply = function (out, a, b) {
                var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = b[3];
                out[0] = ax * bw + aw * bx + ay * bz - az * by;
                out[1] = ay * bw + aw * by + az * bx - ax * bz;
                out[2] = az * bw + aw * bz + ax * by - ay * bx;
                out[3] = aw * bw - ax * bx - ay * by - az * bz;
                return out;
            };
            /**
             * Alias for {@link quat.multiply}
             * @function
             */
            quat.mul = quat.multiply;
            /**
             * Scales a quat by a scalar number
             *
             * @param {quat} out the receiving vector
             * @param {quat} a the vector to scale
             * @param {Number} b amount to scale the vector by
             * @returns {quat} out
             * @function
             */
            quat.scale = vec4.scale;
            /**
             * Rotates a quaternion by the given angle about the X axis
             *
             * @param {quat} out quat receiving operation result
             * @param {quat} a quat to rotate
             * @param {number} rad angle (in radians) to rotate
             * @returns {quat} out
             */
            quat.rotateX = function (out, a, rad) {
                rad *= 0.5;
                var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = Math.sin(rad), bw = Math.cos(rad);
                out[0] = ax * bw + aw * bx;
                out[1] = ay * bw + az * bx;
                out[2] = az * bw - ay * bx;
                out[3] = aw * bw - ax * bx;
                return out;
            };
            /**
             * Rotates a quaternion by the given angle about the Y axis
             *
             * @param {quat} out quat receiving operation result
             * @param {quat} a quat to rotate
             * @param {number} rad angle (in radians) to rotate
             * @returns {quat} out
             */
            quat.rotateY = function (out, a, rad) {
                rad *= 0.5;
                var ax = a[0], ay = a[1], az = a[2], aw = a[3], by = Math.sin(rad), bw = Math.cos(rad);
                out[0] = ax * bw - az * by;
                out[1] = ay * bw + aw * by;
                out[2] = az * bw + ax * by;
                out[3] = aw * bw - ay * by;
                return out;
            };
            /**
             * Rotates a quaternion by the given angle about the Z axis
             *
             * @param {quat} out quat receiving operation result
             * @param {quat} a quat to rotate
             * @param {number} rad angle (in radians) to rotate
             * @returns {quat} out
             */
            quat.rotateZ = function (out, a, rad) {
                rad *= 0.5;
                var ax = a[0], ay = a[1], az = a[2], aw = a[3], bz = Math.sin(rad), bw = Math.cos(rad);
                out[0] = ax * bw + ay * bz;
                out[1] = ay * bw - ax * bz;
                out[2] = az * bw + aw * bz;
                out[3] = aw * bw - az * bz;
                return out;
            };
            /**
             * Calculates the W component of a quat from the X, Y, and Z components.
             * Assumes that quaternion is 1 unit in length.
             * Any existing W component will be ignored.
             *
             * @param {quat} out the receiving quaternion
             * @param {quat} a quat to calculate W component of
             * @returns {quat} out
             */
            quat.calculateW = function (out, a) {
                var x = a[0], y = a[1], z = a[2];
                out[0] = x;
                out[1] = y;
                out[2] = z;
                out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
                return out;
            };
            /**
             * Calculates the dot product of two quat's
             *
             * @param {quat} a the first operand
             * @param {quat} b the second operand
             * @returns {Number} dot product of a and b
             * @function
             */
            quat.dot = vec4.dot;
            /**
             * Performs a linear interpolation between two quat's
             *
             * @param {quat} out the receiving quaternion
             * @param {quat} a the first operand
             * @param {quat} b the second operand
             * @param {Number} t interpolation amount between the two inputs
             * @returns {quat} out
             * @function
             */
            quat.lerp = vec4.lerp;
            /**
             * Performs a spherical linear interpolation between two quat
             *
             * @param {quat} out the receiving quaternion
             * @param {quat} a the first operand
             * @param {quat} b the second operand
             * @param {Number} t interpolation amount between the two inputs
             * @returns {quat} out
             */
            quat.slerp = function (out, a, b, t) {
                // benchmarks:
                //    http://jsperf.com/quaternion-slerp-implementations
                var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = b[3];
                var omega, cosom, sinom, scale0, scale1;
                // calc cosine
                cosom = ax * bx + ay * by + az * bz + aw * bw;
                // adjust signs (if necessary)
                if (cosom < 0.0) {
                    cosom = -cosom;
                    bx = -bx;
                    by = -by;
                    bz = -bz;
                    bw = -bw;
                }
                // calculate coefficients
                if ((1.0 - cosom) > 0.000001) {
                    // standard case (slerp)
                    omega = Math.acos(cosom);
                    sinom = Math.sin(omega);
                    scale0 = Math.sin((1.0 - t) * omega) / sinom;
                    scale1 = Math.sin(t * omega) / sinom;
                }
                else {
                    // "from" and "to" quaternions are very close
                    //  ... so we can do a linear interpolation
                    scale0 = 1.0 - t;
                    scale1 = t;
                }
                // calculate final values
                out[0] = scale0 * ax + scale1 * bx;
                out[1] = scale0 * ay + scale1 * by;
                out[2] = scale0 * az + scale1 * bz;
                out[3] = scale0 * aw + scale1 * bw;
                return out;
            };
            /**
             * Performs a spherical linear interpolation with two control points
             *
             * @param {quat} out the receiving quaternion
             * @param {quat} a the first operand
             * @param {quat} b the second operand
             * @param {quat} c the third operand
             * @param {quat} d the fourth operand
             * @param {Number} t interpolation amount
             * @returns {quat} out
             */
            quat.sqlerp = (function () {
                var temp1 = quat.create();
                var temp2 = quat.create();
                return function (out, a, b, c, d, t) {
                    quat.slerp(temp1, a, d, t);
                    quat.slerp(temp2, b, c, t);
                    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
                    return out;
                };
            }());
            /**
             * Calculates the inverse of a quat
             *
             * @param {quat} out the receiving quaternion
             * @param {quat} a quat to calculate inverse of
             * @returns {quat} out
             */
            quat.invert = function (out, a) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3, invDot = dot ? 1.0 / dot : 0;
                // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
                out[0] = -a0 * invDot;
                out[1] = -a1 * invDot;
                out[2] = -a2 * invDot;
                out[3] = a3 * invDot;
                return out;
            };
            /**
             * Calculates the conjugate of a quat
             * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
             *
             * @param {quat} out the receiving quaternion
             * @param {quat} a quat to calculate conjugate of
             * @returns {quat} out
             */
            quat.conjugate = function (out, a) {
                out[0] = -a[0];
                out[1] = -a[1];
                out[2] = -a[2];
                out[3] = a[3];
                return out;
            };
            /**
             * Calculates the length of a quat
             *
             * @param {quat} a vector to calculate length of
             * @returns {Number} length of a
             * @function
             */
            quat.length = vec4.length;
            /**
             * Alias for {@link quat.length}
             * @function
             */
            quat.len = quat.length;
            /**
             * Calculates the squared length of a quat
             *
             * @param {quat} a vector to calculate squared length of
             * @returns {Number} squared length of a
             * @function
             */
            quat.squaredLength = vec4.squaredLength;
            /**
             * Alias for {@link quat.squaredLength}
             * @function
             */
            quat.sqrLen = quat.squaredLength;
            /**
             * Normalize a quat
             *
             * @param {quat} out the receiving quaternion
             * @param {quat} a quaternion to normalize
             * @returns {quat} out
             * @function
             */
            quat.normalize = vec4.normalize;
            /**
             * Creates a quaternion from the given 3x3 rotation matrix.
             *
             * NOTE: The resultant quaternion is not normalized, so you should be sure
             * to renormalize the quaternion yourself where necessary.
             *
             * @param {quat} out the receiving quaternion
             * @param {mat3} m rotation matrix
             * @returns {quat} out
             * @function
             */
            quat.fromMat3 = function (out, m) {
                // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
                // article "Quaternion Calculus and Fast Animation".
                var fTrace = m[0] + m[4] + m[8];
                var fRoot;
                if (fTrace > 0.0) {
                    // |w| > 1/2, may as well choose w > 1/2
                    fRoot = Math.sqrt(fTrace + 1.0); // 2w
                    out[3] = 0.5 * fRoot;
                    fRoot = 0.5 / fRoot; // 1/(4w)
                    out[0] = (m[5] - m[7]) * fRoot;
                    out[1] = (m[6] - m[2]) * fRoot;
                    out[2] = (m[1] - m[3]) * fRoot;
                }
                else {
                    // |w| <= 1/2
                    var i = 0;
                    if (m[4] > m[0])
                        i = 1;
                    if (m[8] > m[i * 3 + i])
                        i = 2;
                    var j = (i + 1) % 3;
                    var k = (i + 2) % 3;
                    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
                    out[i] = 0.5 * fRoot;
                    fRoot = 0.5 / fRoot;
                    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
                    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
                    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
                }
                return out;
            };
            /**
             * Returns a string representation of a quatenion
             *
             * @param {quat} a vector to represent as a string
             * @returns {String} string representation of the vector
             */
            quat.str = function (a) {
                return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
            };
            /**
             * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
             *
             * @param {quat} a The first quaternion.
             * @param {quat} b The second quaternion.
             * @returns {Boolean} True if the vectors are equal, false otherwise.
             */
            quat.exactEquals = vec4.exactEquals;
            /**
             * Returns whether or not the quaternions have approximately the same elements in the same position.
             *
             * @param {quat} a The first vector.
             * @param {quat} b The second vector.
             * @returns {Boolean} True if the vectors are equal, false otherwise.
             */
            quat.equals = vec4.equals;
            module.exports = quat;
            /***/ },
        /* 7 */
        /***/ function (module, exports, __webpack_require__) {
            /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE. */
            var glMatrix = __webpack_require__(1);
            /**
             * @class 3 Dimensional Vector
             * @name vec3
             */
            var vec3 = {};
            /**
             * Creates a new, empty vec3
             *
             * @returns {vec3} a new 3D vector
             */
            vec3.create = function () {
                var out = new glMatrix.ARRAY_TYPE(3);
                out[0] = 0;
                out[1] = 0;
                out[2] = 0;
                return out;
            };
            /**
             * Creates a new vec3 initialized with values from an existing vector
             *
             * @param {vec3} a vector to clone
             * @returns {vec3} a new 3D vector
             */
            vec3.clone = function (a) {
                var out = new glMatrix.ARRAY_TYPE(3);
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                return out;
            };
            /**
             * Creates a new vec3 initialized with the given values
             *
             * @param {Number} x X component
             * @param {Number} y Y component
             * @param {Number} z Z component
             * @returns {vec3} a new 3D vector
             */
            vec3.fromValues = function (x, y, z) {
                var out = new glMatrix.ARRAY_TYPE(3);
                out[0] = x;
                out[1] = y;
                out[2] = z;
                return out;
            };
            /**
             * Copy the values from one vec3 to another
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the source vector
             * @returns {vec3} out
             */
            vec3.copy = function (out, a) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                return out;
            };
            /**
             * Set the components of a vec3 to the given values
             *
             * @param {vec3} out the receiving vector
             * @param {Number} x X component
             * @param {Number} y Y component
             * @param {Number} z Z component
             * @returns {vec3} out
             */
            vec3.set = function (out, x, y, z) {
                out[0] = x;
                out[1] = y;
                out[2] = z;
                return out;
            };
            /**
             * Adds two vec3's
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @returns {vec3} out
             */
            vec3.add = function (out, a, b) {
                out[0] = a[0] + b[0];
                out[1] = a[1] + b[1];
                out[2] = a[2] + b[2];
                return out;
            };
            /**
             * Subtracts vector b from vector a
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @returns {vec3} out
             */
            vec3.subtract = function (out, a, b) {
                out[0] = a[0] - b[0];
                out[1] = a[1] - b[1];
                out[2] = a[2] - b[2];
                return out;
            };
            /**
             * Alias for {@link vec3.subtract}
             * @function
             */
            vec3.sub = vec3.subtract;
            /**
             * Multiplies two vec3's
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @returns {vec3} out
             */
            vec3.multiply = function (out, a, b) {
                out[0] = a[0] * b[0];
                out[1] = a[1] * b[1];
                out[2] = a[2] * b[2];
                return out;
            };
            /**
             * Alias for {@link vec3.multiply}
             * @function
             */
            vec3.mul = vec3.multiply;
            /**
             * Divides two vec3's
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @returns {vec3} out
             */
            vec3.divide = function (out, a, b) {
                out[0] = a[0] / b[0];
                out[1] = a[1] / b[1];
                out[2] = a[2] / b[2];
                return out;
            };
            /**
             * Alias for {@link vec3.divide}
             * @function
             */
            vec3.div = vec3.divide;
            /**
             * Math.ceil the components of a vec3
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a vector to ceil
             * @returns {vec3} out
             */
            vec3.ceil = function (out, a) {
                out[0] = Math.ceil(a[0]);
                out[1] = Math.ceil(a[1]);
                out[2] = Math.ceil(a[2]);
                return out;
            };
            /**
             * Math.floor the components of a vec3
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a vector to floor
             * @returns {vec3} out
             */
            vec3.floor = function (out, a) {
                out[0] = Math.floor(a[0]);
                out[1] = Math.floor(a[1]);
                out[2] = Math.floor(a[2]);
                return out;
            };
            /**
             * Returns the minimum of two vec3's
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @returns {vec3} out
             */
            vec3.min = function (out, a, b) {
                out[0] = Math.min(a[0], b[0]);
                out[1] = Math.min(a[1], b[1]);
                out[2] = Math.min(a[2], b[2]);
                return out;
            };
            /**
             * Returns the maximum of two vec3's
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @returns {vec3} out
             */
            vec3.max = function (out, a, b) {
                out[0] = Math.max(a[0], b[0]);
                out[1] = Math.max(a[1], b[1]);
                out[2] = Math.max(a[2], b[2]);
                return out;
            };
            /**
             * Math.round the components of a vec3
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a vector to round
             * @returns {vec3} out
             */
            vec3.round = function (out, a) {
                out[0] = Math.round(a[0]);
                out[1] = Math.round(a[1]);
                out[2] = Math.round(a[2]);
                return out;
            };
            /**
             * Scales a vec3 by a scalar number
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the vector to scale
             * @param {Number} b amount to scale the vector by
             * @returns {vec3} out
             */
            vec3.scale = function (out, a, b) {
                out[0] = a[0] * b;
                out[1] = a[1] * b;
                out[2] = a[2] * b;
                return out;
            };
            /**
             * Adds two vec3's after scaling the second operand by a scalar value
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @param {Number} scale the amount to scale b by before adding
             * @returns {vec3} out
             */
            vec3.scaleAndAdd = function (out, a, b, scale) {
                out[0] = a[0] + (b[0] * scale);
                out[1] = a[1] + (b[1] * scale);
                out[2] = a[2] + (b[2] * scale);
                return out;
            };
            /**
             * Calculates the euclidian distance between two vec3's
             *
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @returns {Number} distance between a and b
             */
            vec3.distance = function (a, b) {
                var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
                return Math.sqrt(x * x + y * y + z * z);
            };
            /**
             * Alias for {@link vec3.distance}
             * @function
             */
            vec3.dist = vec3.distance;
            /**
             * Calculates the squared euclidian distance between two vec3's
             *
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @returns {Number} squared distance between a and b
             */
            vec3.squaredDistance = function (a, b) {
                var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
                return x * x + y * y + z * z;
            };
            /**
             * Alias for {@link vec3.squaredDistance}
             * @function
             */
            vec3.sqrDist = vec3.squaredDistance;
            /**
             * Calculates the length of a vec3
             *
             * @param {vec3} a vector to calculate length of
             * @returns {Number} length of a
             */
            vec3.length = function (a) {
                var x = a[0], y = a[1], z = a[2];
                return Math.sqrt(x * x + y * y + z * z);
            };
            /**
             * Alias for {@link vec3.length}
             * @function
             */
            vec3.len = vec3.length;
            /**
             * Calculates the squared length of a vec3
             *
             * @param {vec3} a vector to calculate squared length of
             * @returns {Number} squared length of a
             */
            vec3.squaredLength = function (a) {
                var x = a[0], y = a[1], z = a[2];
                return x * x + y * y + z * z;
            };
            /**
             * Alias for {@link vec3.squaredLength}
             * @function
             */
            vec3.sqrLen = vec3.squaredLength;
            /**
             * Negates the components of a vec3
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a vector to negate
             * @returns {vec3} out
             */
            vec3.negate = function (out, a) {
                out[0] = -a[0];
                out[1] = -a[1];
                out[2] = -a[2];
                return out;
            };
            /**
             * Returns the inverse of the components of a vec3
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a vector to invert
             * @returns {vec3} out
             */
            vec3.inverse = function (out, a) {
                out[0] = 1.0 / a[0];
                out[1] = 1.0 / a[1];
                out[2] = 1.0 / a[2];
                return out;
            };
            /**
             * Normalize a vec3
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a vector to normalize
             * @returns {vec3} out
             */
            vec3.normalize = function (out, a) {
                var x = a[0], y = a[1], z = a[2];
                var len = x * x + y * y + z * z;
                if (len > 0) {
                    //TODO: evaluate use of glm_invsqrt here?
                    len = 1 / Math.sqrt(len);
                    out[0] = a[0] * len;
                    out[1] = a[1] * len;
                    out[2] = a[2] * len;
                }
                return out;
            };
            /**
             * Calculates the dot product of two vec3's
             *
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @returns {Number} dot product of a and b
             */
            vec3.dot = function (a, b) {
                return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
            };
            /**
             * Computes the cross product of two vec3's
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @returns {vec3} out
             */
            vec3.cross = function (out, a, b) {
                var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2];
                out[0] = ay * bz - az * by;
                out[1] = az * bx - ax * bz;
                out[2] = ax * by - ay * bx;
                return out;
            };
            /**
             * Performs a linear interpolation between two vec3's
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @param {Number} t interpolation amount between the two inputs
             * @returns {vec3} out
             */
            vec3.lerp = function (out, a, b, t) {
                var ax = a[0], ay = a[1], az = a[2];
                out[0] = ax + t * (b[0] - ax);
                out[1] = ay + t * (b[1] - ay);
                out[2] = az + t * (b[2] - az);
                return out;
            };
            /**
             * Performs a hermite interpolation with two control points
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @param {vec3} c the third operand
             * @param {vec3} d the fourth operand
             * @param {Number} t interpolation amount between the two inputs
             * @returns {vec3} out
             */
            vec3.hermite = function (out, a, b, c, d, t) {
                var factorTimes2 = t * t, factor1 = factorTimes2 * (2 * t - 3) + 1, factor2 = factorTimes2 * (t - 2) + t, factor3 = factorTimes2 * (t - 1), factor4 = factorTimes2 * (3 - 2 * t);
                out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
                out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
                out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
                return out;
            };
            /**
             * Performs a bezier interpolation with two control points
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the first operand
             * @param {vec3} b the second operand
             * @param {vec3} c the third operand
             * @param {vec3} d the fourth operand
             * @param {Number} t interpolation amount between the two inputs
             * @returns {vec3} out
             */
            vec3.bezier = function (out, a, b, c, d, t) {
                var inverseFactor = 1 - t, inverseFactorTimesTwo = inverseFactor * inverseFactor, factorTimes2 = t * t, factor1 = inverseFactorTimesTwo * inverseFactor, factor2 = 3 * t * inverseFactorTimesTwo, factor3 = 3 * factorTimes2 * inverseFactor, factor4 = factorTimes2 * t;
                out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
                out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
                out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
                return out;
            };
            /**
             * Generates a random vector with the given scale
             *
             * @param {vec3} out the receiving vector
             * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
             * @returns {vec3} out
             */
            vec3.random = function (out, scale) {
                scale = scale || 1.0;
                var r = glMatrix.RANDOM() * 2.0 * Math.PI;
                var z = (glMatrix.RANDOM() * 2.0) - 1.0;
                var zScale = Math.sqrt(1.0 - z * z) * scale;
                out[0] = Math.cos(r) * zScale;
                out[1] = Math.sin(r) * zScale;
                out[2] = z * scale;
                return out;
            };
            /**
             * Transforms the vec3 with a mat4.
             * 4th vector component is implicitly '1'
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the vector to transform
             * @param {mat4} m matrix to transform with
             * @returns {vec3} out
             */
            vec3.transformMat4 = function (out, a, m) {
                var x = a[0], y = a[1], z = a[2], w = m[3] * x + m[7] * y + m[11] * z + m[15];
                w = w || 1.0;
                out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
                out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
                out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
                return out;
            };
            /**
             * Transforms the vec3 with a mat3.
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the vector to transform
             * @param {mat4} m the 3x3 matrix to transform with
             * @returns {vec3} out
             */
            vec3.transformMat3 = function (out, a, m) {
                var x = a[0], y = a[1], z = a[2];
                out[0] = x * m[0] + y * m[3] + z * m[6];
                out[1] = x * m[1] + y * m[4] + z * m[7];
                out[2] = x * m[2] + y * m[5] + z * m[8];
                return out;
            };
            /**
             * Transforms the vec3 with a quat
             *
             * @param {vec3} out the receiving vector
             * @param {vec3} a the vector to transform
             * @param {quat} q quaternion to transform with
             * @returns {vec3} out
             */
            vec3.transformQuat = function (out, a, q) {
                // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations
                var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3],
                // calculate quat * vec
                ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;
                // calculate result * inverse quat
                out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                return out;
            };
            /**
             * Rotate a 3D vector around the x-axis
             * @param {vec3} out The receiving vec3
             * @param {vec3} a The vec3 point to rotate
             * @param {vec3} b The origin of the rotation
             * @param {Number} c The angle of rotation
             * @returns {vec3} out
             */
            vec3.rotateX = function (out, a, b, c) {
                var p = [], r = [];
                //Translate point to the origin
                p[0] = a[0] - b[0];
                p[1] = a[1] - b[1];
                p[2] = a[2] - b[2];
                //perform rotation
                r[0] = p[0];
                r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
                r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);
                //translate to correct position
                out[0] = r[0] + b[0];
                out[1] = r[1] + b[1];
                out[2] = r[2] + b[2];
                return out;
            };
            /**
             * Rotate a 3D vector around the y-axis
             * @param {vec3} out The receiving vec3
             * @param {vec3} a The vec3 point to rotate
             * @param {vec3} b The origin of the rotation
             * @param {Number} c The angle of rotation
             * @returns {vec3} out
             */
            vec3.rotateY = function (out, a, b, c) {
                var p = [], r = [];
                //Translate point to the origin
                p[0] = a[0] - b[0];
                p[1] = a[1] - b[1];
                p[2] = a[2] - b[2];
                //perform rotation
                r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
                r[1] = p[1];
                r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);
                //translate to correct position
                out[0] = r[0] + b[0];
                out[1] = r[1] + b[1];
                out[2] = r[2] + b[2];
                return out;
            };
            /**
             * Rotate a 3D vector around the z-axis
             * @param {vec3} out The receiving vec3
             * @param {vec3} a The vec3 point to rotate
             * @param {vec3} b The origin of the rotation
             * @param {Number} c The angle of rotation
             * @returns {vec3} out
             */
            vec3.rotateZ = function (out, a, b, c) {
                var p = [], r = [];
                //Translate point to the origin
                p[0] = a[0] - b[0];
                p[1] = a[1] - b[1];
                p[2] = a[2] - b[2];
                //perform rotation
                r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
                r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
                r[2] = p[2];
                //translate to correct position
                out[0] = r[0] + b[0];
                out[1] = r[1] + b[1];
                out[2] = r[2] + b[2];
                return out;
            };
            /**
             * Perform some operation over an array of vec3s.
             *
             * @param {Array} a the array of vectors to iterate over
             * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
             * @param {Number} offset Number of elements to skip at the beginning of the array
             * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
             * @param {Function} fn Function to call for each vector in the array
             * @param {Object} [arg] additional argument to pass to fn
             * @returns {Array} a
             * @function
             */
            vec3.forEach = (function () {
                var vec = vec3.create();
                return function (a, stride, offset, count, fn, arg) {
                    var i, l;
                    if (!stride) {
                        stride = 3;
                    }
                    if (!offset) {
                        offset = 0;
                    }
                    if (count) {
                        l = Math.min((count * stride) + offset, a.length);
                    }
                    else {
                        l = a.length;
                    }
                    for (i = offset; i < l; i += stride) {
                        vec[0] = a[i];
                        vec[1] = a[i + 1];
                        vec[2] = a[i + 2];
                        fn(vec, vec, arg);
                        a[i] = vec[0];
                        a[i + 1] = vec[1];
                        a[i + 2] = vec[2];
                    }
                    return a;
                };
            })();
            /**
             * Get the angle between two 3D vectors
             * @param {vec3} a The first operand
             * @param {vec3} b The second operand
             * @returns {Number} The angle in radians
             */
            vec3.angle = function (a, b) {
                var tempA = vec3.fromValues(a[0], a[1], a[2]);
                var tempB = vec3.fromValues(b[0], b[1], b[2]);
                vec3.normalize(tempA, tempA);
                vec3.normalize(tempB, tempB);
                var cosine = vec3.dot(tempA, tempB);
                if (cosine > 1.0) {
                    return 0;
                }
                else {
                    return Math.acos(cosine);
                }
            };
            /**
             * Returns a string representation of a vector
             *
             * @param {vec3} a vector to represent as a string
             * @returns {String} string representation of the vector
             */
            vec3.str = function (a) {
                return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
            };
            /**
             * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
             *
             * @param {vec3} a The first vector.
             * @param {vec3} b The second vector.
             * @returns {Boolean} True if the vectors are equal, false otherwise.
             */
            vec3.exactEquals = function (a, b) {
                return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
            };
            /**
             * Returns whether or not the vectors have approximately the same elements in the same position.
             *
             * @param {vec3} a The first vector.
             * @param {vec3} b The second vector.
             * @returns {Boolean} True if the vectors are equal, false otherwise.
             */
            vec3.equals = function (a, b) {
                var a0 = a[0], a1 = a[1], a2 = a[2];
                var b0 = b[0], b1 = b[1], b2 = b[2];
                return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)));
            };
            module.exports = vec3;
            /***/ },
        /* 8 */
        /***/ function (module, exports, __webpack_require__) {
            /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE. */
            var glMatrix = __webpack_require__(1);
            /**
             * @class 4 Dimensional Vector
             * @name vec4
             */
            var vec4 = {};
            /**
             * Creates a new, empty vec4
             *
             * @returns {vec4} a new 4D vector
             */
            vec4.create = function () {
                var out = new glMatrix.ARRAY_TYPE(4);
                out[0] = 0;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                return out;
            };
            /**
             * Creates a new vec4 initialized with values from an existing vector
             *
             * @param {vec4} a vector to clone
             * @returns {vec4} a new 4D vector
             */
            vec4.clone = function (a) {
                var out = new glMatrix.ARRAY_TYPE(4);
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                return out;
            };
            /**
             * Creates a new vec4 initialized with the given values
             *
             * @param {Number} x X component
             * @param {Number} y Y component
             * @param {Number} z Z component
             * @param {Number} w W component
             * @returns {vec4} a new 4D vector
             */
            vec4.fromValues = function (x, y, z, w) {
                var out = new glMatrix.ARRAY_TYPE(4);
                out[0] = x;
                out[1] = y;
                out[2] = z;
                out[3] = w;
                return out;
            };
            /**
             * Copy the values from one vec4 to another
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the source vector
             * @returns {vec4} out
             */
            vec4.copy = function (out, a) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                return out;
            };
            /**
             * Set the components of a vec4 to the given values
             *
             * @param {vec4} out the receiving vector
             * @param {Number} x X component
             * @param {Number} y Y component
             * @param {Number} z Z component
             * @param {Number} w W component
             * @returns {vec4} out
             */
            vec4.set = function (out, x, y, z, w) {
                out[0] = x;
                out[1] = y;
                out[2] = z;
                out[3] = w;
                return out;
            };
            /**
             * Adds two vec4's
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the first operand
             * @param {vec4} b the second operand
             * @returns {vec4} out
             */
            vec4.add = function (out, a, b) {
                out[0] = a[0] + b[0];
                out[1] = a[1] + b[1];
                out[2] = a[2] + b[2];
                out[3] = a[3] + b[3];
                return out;
            };
            /**
             * Subtracts vector b from vector a
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the first operand
             * @param {vec4} b the second operand
             * @returns {vec4} out
             */
            vec4.subtract = function (out, a, b) {
                out[0] = a[0] - b[0];
                out[1] = a[1] - b[1];
                out[2] = a[2] - b[2];
                out[3] = a[3] - b[3];
                return out;
            };
            /**
             * Alias for {@link vec4.subtract}
             * @function
             */
            vec4.sub = vec4.subtract;
            /**
             * Multiplies two vec4's
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the first operand
             * @param {vec4} b the second operand
             * @returns {vec4} out
             */
            vec4.multiply = function (out, a, b) {
                out[0] = a[0] * b[0];
                out[1] = a[1] * b[1];
                out[2] = a[2] * b[2];
                out[3] = a[3] * b[3];
                return out;
            };
            /**
             * Alias for {@link vec4.multiply}
             * @function
             */
            vec4.mul = vec4.multiply;
            /**
             * Divides two vec4's
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the first operand
             * @param {vec4} b the second operand
             * @returns {vec4} out
             */
            vec4.divide = function (out, a, b) {
                out[0] = a[0] / b[0];
                out[1] = a[1] / b[1];
                out[2] = a[2] / b[2];
                out[3] = a[3] / b[3];
                return out;
            };
            /**
             * Alias for {@link vec4.divide}
             * @function
             */
            vec4.div = vec4.divide;
            /**
             * Math.ceil the components of a vec4
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a vector to ceil
             * @returns {vec4} out
             */
            vec4.ceil = function (out, a) {
                out[0] = Math.ceil(a[0]);
                out[1] = Math.ceil(a[1]);
                out[2] = Math.ceil(a[2]);
                out[3] = Math.ceil(a[3]);
                return out;
            };
            /**
             * Math.floor the components of a vec4
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a vector to floor
             * @returns {vec4} out
             */
            vec4.floor = function (out, a) {
                out[0] = Math.floor(a[0]);
                out[1] = Math.floor(a[1]);
                out[2] = Math.floor(a[2]);
                out[3] = Math.floor(a[3]);
                return out;
            };
            /**
             * Returns the minimum of two vec4's
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the first operand
             * @param {vec4} b the second operand
             * @returns {vec4} out
             */
            vec4.min = function (out, a, b) {
                out[0] = Math.min(a[0], b[0]);
                out[1] = Math.min(a[1], b[1]);
                out[2] = Math.min(a[2], b[2]);
                out[3] = Math.min(a[3], b[3]);
                return out;
            };
            /**
             * Returns the maximum of two vec4's
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the first operand
             * @param {vec4} b the second operand
             * @returns {vec4} out
             */
            vec4.max = function (out, a, b) {
                out[0] = Math.max(a[0], b[0]);
                out[1] = Math.max(a[1], b[1]);
                out[2] = Math.max(a[2], b[2]);
                out[3] = Math.max(a[3], b[3]);
                return out;
            };
            /**
             * Math.round the components of a vec4
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a vector to round
             * @returns {vec4} out
             */
            vec4.round = function (out, a) {
                out[0] = Math.round(a[0]);
                out[1] = Math.round(a[1]);
                out[2] = Math.round(a[2]);
                out[3] = Math.round(a[3]);
                return out;
            };
            /**
             * Scales a vec4 by a scalar number
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the vector to scale
             * @param {Number} b amount to scale the vector by
             * @returns {vec4} out
             */
            vec4.scale = function (out, a, b) {
                out[0] = a[0] * b;
                out[1] = a[1] * b;
                out[2] = a[2] * b;
                out[3] = a[3] * b;
                return out;
            };
            /**
             * Adds two vec4's after scaling the second operand by a scalar value
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the first operand
             * @param {vec4} b the second operand
             * @param {Number} scale the amount to scale b by before adding
             * @returns {vec4} out
             */
            vec4.scaleAndAdd = function (out, a, b, scale) {
                out[0] = a[0] + (b[0] * scale);
                out[1] = a[1] + (b[1] * scale);
                out[2] = a[2] + (b[2] * scale);
                out[3] = a[3] + (b[3] * scale);
                return out;
            };
            /**
             * Calculates the euclidian distance between two vec4's
             *
             * @param {vec4} a the first operand
             * @param {vec4} b the second operand
             * @returns {Number} distance between a and b
             */
            vec4.distance = function (a, b) {
                var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
                return Math.sqrt(x * x + y * y + z * z + w * w);
            };
            /**
             * Alias for {@link vec4.distance}
             * @function
             */
            vec4.dist = vec4.distance;
            /**
             * Calculates the squared euclidian distance between two vec4's
             *
             * @param {vec4} a the first operand
             * @param {vec4} b the second operand
             * @returns {Number} squared distance between a and b
             */
            vec4.squaredDistance = function (a, b) {
                var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
                return x * x + y * y + z * z + w * w;
            };
            /**
             * Alias for {@link vec4.squaredDistance}
             * @function
             */
            vec4.sqrDist = vec4.squaredDistance;
            /**
             * Calculates the length of a vec4
             *
             * @param {vec4} a vector to calculate length of
             * @returns {Number} length of a
             */
            vec4.length = function (a) {
                var x = a[0], y = a[1], z = a[2], w = a[3];
                return Math.sqrt(x * x + y * y + z * z + w * w);
            };
            /**
             * Alias for {@link vec4.length}
             * @function
             */
            vec4.len = vec4.length;
            /**
             * Calculates the squared length of a vec4
             *
             * @param {vec4} a vector to calculate squared length of
             * @returns {Number} squared length of a
             */
            vec4.squaredLength = function (a) {
                var x = a[0], y = a[1], z = a[2], w = a[3];
                return x * x + y * y + z * z + w * w;
            };
            /**
             * Alias for {@link vec4.squaredLength}
             * @function
             */
            vec4.sqrLen = vec4.squaredLength;
            /**
             * Negates the components of a vec4
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a vector to negate
             * @returns {vec4} out
             */
            vec4.negate = function (out, a) {
                out[0] = -a[0];
                out[1] = -a[1];
                out[2] = -a[2];
                out[3] = -a[3];
                return out;
            };
            /**
             * Returns the inverse of the components of a vec4
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a vector to invert
             * @returns {vec4} out
             */
            vec4.inverse = function (out, a) {
                out[0] = 1.0 / a[0];
                out[1] = 1.0 / a[1];
                out[2] = 1.0 / a[2];
                out[3] = 1.0 / a[3];
                return out;
            };
            /**
             * Normalize a vec4
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a vector to normalize
             * @returns {vec4} out
             */
            vec4.normalize = function (out, a) {
                var x = a[0], y = a[1], z = a[2], w = a[3];
                var len = x * x + y * y + z * z + w * w;
                if (len > 0) {
                    len = 1 / Math.sqrt(len);
                    out[0] = x * len;
                    out[1] = y * len;
                    out[2] = z * len;
                    out[3] = w * len;
                }
                return out;
            };
            /**
             * Calculates the dot product of two vec4's
             *
             * @param {vec4} a the first operand
             * @param {vec4} b the second operand
             * @returns {Number} dot product of a and b
             */
            vec4.dot = function (a, b) {
                return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
            };
            /**
             * Performs a linear interpolation between two vec4's
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the first operand
             * @param {vec4} b the second operand
             * @param {Number} t interpolation amount between the two inputs
             * @returns {vec4} out
             */
            vec4.lerp = function (out, a, b, t) {
                var ax = a[0], ay = a[1], az = a[2], aw = a[3];
                out[0] = ax + t * (b[0] - ax);
                out[1] = ay + t * (b[1] - ay);
                out[2] = az + t * (b[2] - az);
                out[3] = aw + t * (b[3] - aw);
                return out;
            };
            /**
             * Generates a random vector with the given scale
             *
             * @param {vec4} out the receiving vector
             * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
             * @returns {vec4} out
             */
            vec4.random = function (out, scale) {
                scale = scale || 1.0;
                //TODO: This is a pretty awful way of doing this. Find something better.
                out[0] = glMatrix.RANDOM();
                out[1] = glMatrix.RANDOM();
                out[2] = glMatrix.RANDOM();
                out[3] = glMatrix.RANDOM();
                vec4.normalize(out, out);
                vec4.scale(out, out, scale);
                return out;
            };
            /**
             * Transforms the vec4 with a mat4.
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the vector to transform
             * @param {mat4} m matrix to transform with
             * @returns {vec4} out
             */
            vec4.transformMat4 = function (out, a, m) {
                var x = a[0], y = a[1], z = a[2], w = a[3];
                out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
                out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
                out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
                out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
                return out;
            };
            /**
             * Transforms the vec4 with a quat
             *
             * @param {vec4} out the receiving vector
             * @param {vec4} a the vector to transform
             * @param {quat} q quaternion to transform with
             * @returns {vec4} out
             */
            vec4.transformQuat = function (out, a, q) {
                var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3],
                // calculate quat * vec
                ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;
                // calculate result * inverse quat
                out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                out[3] = a[3];
                return out;
            };
            /**
             * Perform some operation over an array of vec4s.
             *
             * @param {Array} a the array of vectors to iterate over
             * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
             * @param {Number} offset Number of elements to skip at the beginning of the array
             * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
             * @param {Function} fn Function to call for each vector in the array
             * @param {Object} [arg] additional argument to pass to fn
             * @returns {Array} a
             * @function
             */
            vec4.forEach = (function () {
                var vec = vec4.create();
                return function (a, stride, offset, count, fn, arg) {
                    var i, l;
                    if (!stride) {
                        stride = 4;
                    }
                    if (!offset) {
                        offset = 0;
                    }
                    if (count) {
                        l = Math.min((count * stride) + offset, a.length);
                    }
                    else {
                        l = a.length;
                    }
                    for (i = offset; i < l; i += stride) {
                        vec[0] = a[i];
                        vec[1] = a[i + 1];
                        vec[2] = a[i + 2];
                        vec[3] = a[i + 3];
                        fn(vec, vec, arg);
                        a[i] = vec[0];
                        a[i + 1] = vec[1];
                        a[i + 2] = vec[2];
                        a[i + 3] = vec[3];
                    }
                    return a;
                };
            })();
            /**
             * Returns a string representation of a vector
             *
             * @param {vec4} a vector to represent as a string
             * @returns {String} string representation of the vector
             */
            vec4.str = function (a) {
                return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
            };
            /**
             * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
             *
             * @param {vec4} a The first vector.
             * @param {vec4} b The second vector.
             * @returns {Boolean} True if the vectors are equal, false otherwise.
             */
            vec4.exactEquals = function (a, b) {
                return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
            };
            /**
             * Returns whether or not the vectors have approximately the same elements in the same position.
             *
             * @param {vec4} a The first vector.
             * @param {vec4} b The second vector.
             * @returns {Boolean} True if the vectors are equal, false otherwise.
             */
            vec4.equals = function (a, b) {
                var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
                var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
                return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
                    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)));
            };
            module.exports = vec4;
            /***/ },
        /* 9 */
        /***/ function (module, exports, __webpack_require__) {
            /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE. */
            var glMatrix = __webpack_require__(1);
            /**
             * @class 2 Dimensional Vector
             * @name vec2
             */
            var vec2 = {};
            /**
             * Creates a new, empty vec2
             *
             * @returns {vec2} a new 2D vector
             */
            vec2.create = function () {
                var out = new glMatrix.ARRAY_TYPE(2);
                out[0] = 0;
                out[1] = 0;
                return out;
            };
            /**
             * Creates a new vec2 initialized with values from an existing vector
             *
             * @param {vec2} a vector to clone
             * @returns {vec2} a new 2D vector
             */
            vec2.clone = function (a) {
                var out = new glMatrix.ARRAY_TYPE(2);
                out[0] = a[0];
                out[1] = a[1];
                return out;
            };
            /**
             * Creates a new vec2 initialized with the given values
             *
             * @param {Number} x X component
             * @param {Number} y Y component
             * @returns {vec2} a new 2D vector
             */
            vec2.fromValues = function (x, y) {
                var out = new glMatrix.ARRAY_TYPE(2);
                out[0] = x;
                out[1] = y;
                return out;
            };
            /**
             * Copy the values from one vec2 to another
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the source vector
             * @returns {vec2} out
             */
            vec2.copy = function (out, a) {
                out[0] = a[0];
                out[1] = a[1];
                return out;
            };
            /**
             * Set the components of a vec2 to the given values
             *
             * @param {vec2} out the receiving vector
             * @param {Number} x X component
             * @param {Number} y Y component
             * @returns {vec2} out
             */
            vec2.set = function (out, x, y) {
                out[0] = x;
                out[1] = y;
                return out;
            };
            /**
             * Adds two vec2's
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @returns {vec2} out
             */
            vec2.add = function (out, a, b) {
                out[0] = a[0] + b[0];
                out[1] = a[1] + b[1];
                return out;
            };
            /**
             * Subtracts vector b from vector a
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @returns {vec2} out
             */
            vec2.subtract = function (out, a, b) {
                out[0] = a[0] - b[0];
                out[1] = a[1] - b[1];
                return out;
            };
            /**
             * Alias for {@link vec2.subtract}
             * @function
             */
            vec2.sub = vec2.subtract;
            /**
             * Multiplies two vec2's
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @returns {vec2} out
             */
            vec2.multiply = function (out, a, b) {
                out[0] = a[0] * b[0];
                out[1] = a[1] * b[1];
                return out;
            };
            /**
             * Alias for {@link vec2.multiply}
             * @function
             */
            vec2.mul = vec2.multiply;
            /**
             * Divides two vec2's
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @returns {vec2} out
             */
            vec2.divide = function (out, a, b) {
                out[0] = a[0] / b[0];
                out[1] = a[1] / b[1];
                return out;
            };
            /**
             * Alias for {@link vec2.divide}
             * @function
             */
            vec2.div = vec2.divide;
            /**
             * Math.ceil the components of a vec2
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a vector to ceil
             * @returns {vec2} out
             */
            vec2.ceil = function (out, a) {
                out[0] = Math.ceil(a[0]);
                out[1] = Math.ceil(a[1]);
                return out;
            };
            /**
             * Math.floor the components of a vec2
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a vector to floor
             * @returns {vec2} out
             */
            vec2.floor = function (out, a) {
                out[0] = Math.floor(a[0]);
                out[1] = Math.floor(a[1]);
                return out;
            };
            /**
             * Returns the minimum of two vec2's
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @returns {vec2} out
             */
            vec2.min = function (out, a, b) {
                out[0] = Math.min(a[0], b[0]);
                out[1] = Math.min(a[1], b[1]);
                return out;
            };
            /**
             * Returns the maximum of two vec2's
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @returns {vec2} out
             */
            vec2.max = function (out, a, b) {
                out[0] = Math.max(a[0], b[0]);
                out[1] = Math.max(a[1], b[1]);
                return out;
            };
            /**
             * Math.round the components of a vec2
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a vector to round
             * @returns {vec2} out
             */
            vec2.round = function (out, a) {
                out[0] = Math.round(a[0]);
                out[1] = Math.round(a[1]);
                return out;
            };
            /**
             * Scales a vec2 by a scalar number
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the vector to scale
             * @param {Number} b amount to scale the vector by
             * @returns {vec2} out
             */
            vec2.scale = function (out, a, b) {
                out[0] = a[0] * b;
                out[1] = a[1] * b;
                return out;
            };
            /**
             * Adds two vec2's after scaling the second operand by a scalar value
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @param {Number} scale the amount to scale b by before adding
             * @returns {vec2} out
             */
            vec2.scaleAndAdd = function (out, a, b, scale) {
                out[0] = a[0] + (b[0] * scale);
                out[1] = a[1] + (b[1] * scale);
                return out;
            };
            /**
             * Calculates the euclidian distance between two vec2's
             *
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @returns {Number} distance between a and b
             */
            vec2.distance = function (a, b) {
                var x = b[0] - a[0], y = b[1] - a[1];
                return Math.sqrt(x * x + y * y);
            };
            /**
             * Alias for {@link vec2.distance}
             * @function
             */
            vec2.dist = vec2.distance;
            /**
             * Calculates the squared euclidian distance between two vec2's
             *
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @returns {Number} squared distance between a and b
             */
            vec2.squaredDistance = function (a, b) {
                var x = b[0] - a[0], y = b[1] - a[1];
                return x * x + y * y;
            };
            /**
             * Alias for {@link vec2.squaredDistance}
             * @function
             */
            vec2.sqrDist = vec2.squaredDistance;
            /**
             * Calculates the length of a vec2
             *
             * @param {vec2} a vector to calculate length of
             * @returns {Number} length of a
             */
            vec2.length = function (a) {
                var x = a[0], y = a[1];
                return Math.sqrt(x * x + y * y);
            };
            /**
             * Alias for {@link vec2.length}
             * @function
             */
            vec2.len = vec2.length;
            /**
             * Calculates the squared length of a vec2
             *
             * @param {vec2} a vector to calculate squared length of
             * @returns {Number} squared length of a
             */
            vec2.squaredLength = function (a) {
                var x = a[0], y = a[1];
                return x * x + y * y;
            };
            /**
             * Alias for {@link vec2.squaredLength}
             * @function
             */
            vec2.sqrLen = vec2.squaredLength;
            /**
             * Negates the components of a vec2
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a vector to negate
             * @returns {vec2} out
             */
            vec2.negate = function (out, a) {
                out[0] = -a[0];
                out[1] = -a[1];
                return out;
            };
            /**
             * Returns the inverse of the components of a vec2
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a vector to invert
             * @returns {vec2} out
             */
            vec2.inverse = function (out, a) {
                out[0] = 1.0 / a[0];
                out[1] = 1.0 / a[1];
                return out;
            };
            /**
             * Normalize a vec2
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a vector to normalize
             * @returns {vec2} out
             */
            vec2.normalize = function (out, a) {
                var x = a[0], y = a[1];
                var len = x * x + y * y;
                if (len > 0) {
                    //TODO: evaluate use of glm_invsqrt here?
                    len = 1 / Math.sqrt(len);
                    out[0] = a[0] * len;
                    out[1] = a[1] * len;
                }
                return out;
            };
            /**
             * Calculates the dot product of two vec2's
             *
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @returns {Number} dot product of a and b
             */
            vec2.dot = function (a, b) {
                return a[0] * b[0] + a[1] * b[1];
            };
            /**
             * Computes the cross product of two vec2's
             * Note that the cross product must by definition produce a 3D vector
             *
             * @param {vec3} out the receiving vector
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @returns {vec3} out
             */
            vec2.cross = function (out, a, b) {
                var z = a[0] * b[1] - a[1] * b[0];
                out[0] = out[1] = 0;
                out[2] = z;
                return out;
            };
            /**
             * Performs a linear interpolation between two vec2's
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the first operand
             * @param {vec2} b the second operand
             * @param {Number} t interpolation amount between the two inputs
             * @returns {vec2} out
             */
            vec2.lerp = function (out, a, b, t) {
                var ax = a[0], ay = a[1];
                out[0] = ax + t * (b[0] - ax);
                out[1] = ay + t * (b[1] - ay);
                return out;
            };
            /**
             * Generates a random vector with the given scale
             *
             * @param {vec2} out the receiving vector
             * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
             * @returns {vec2} out
             */
            vec2.random = function (out, scale) {
                scale = scale || 1.0;
                var r = glMatrix.RANDOM() * 2.0 * Math.PI;
                out[0] = Math.cos(r) * scale;
                out[1] = Math.sin(r) * scale;
                return out;
            };
            /**
             * Transforms the vec2 with a mat2
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the vector to transform
             * @param {mat2} m matrix to transform with
             * @returns {vec2} out
             */
            vec2.transformMat2 = function (out, a, m) {
                var x = a[0], y = a[1];
                out[0] = m[0] * x + m[2] * y;
                out[1] = m[1] * x + m[3] * y;
                return out;
            };
            /**
             * Transforms the vec2 with a mat2d
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the vector to transform
             * @param {mat2d} m matrix to transform with
             * @returns {vec2} out
             */
            vec2.transformMat2d = function (out, a, m) {
                var x = a[0], y = a[1];
                out[0] = m[0] * x + m[2] * y + m[4];
                out[1] = m[1] * x + m[3] * y + m[5];
                return out;
            };
            /**
             * Transforms the vec2 with a mat3
             * 3rd vector component is implicitly '1'
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the vector to transform
             * @param {mat3} m matrix to transform with
             * @returns {vec2} out
             */
            vec2.transformMat3 = function (out, a, m) {
                var x = a[0], y = a[1];
                out[0] = m[0] * x + m[3] * y + m[6];
                out[1] = m[1] * x + m[4] * y + m[7];
                return out;
            };
            /**
             * Transforms the vec2 with a mat4
             * 3rd vector component is implicitly '0'
             * 4th vector component is implicitly '1'
             *
             * @param {vec2} out the receiving vector
             * @param {vec2} a the vector to transform
             * @param {mat4} m matrix to transform with
             * @returns {vec2} out
             */
            vec2.transformMat4 = function (out, a, m) {
                var x = a[0], y = a[1];
                out[0] = m[0] * x + m[4] * y + m[12];
                out[1] = m[1] * x + m[5] * y + m[13];
                return out;
            };
            /**
             * Perform some operation over an array of vec2s.
             *
             * @param {Array} a the array of vectors to iterate over
             * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
             * @param {Number} offset Number of elements to skip at the beginning of the array
             * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
             * @param {Function} fn Function to call for each vector in the array
             * @param {Object} [arg] additional argument to pass to fn
             * @returns {Array} a
             * @function
             */
            vec2.forEach = (function () {
                var vec = vec2.create();
                return function (a, stride, offset, count, fn, arg) {
                    var i, l;
                    if (!stride) {
                        stride = 2;
                    }
                    if (!offset) {
                        offset = 0;
                    }
                    if (count) {
                        l = Math.min((count * stride) + offset, a.length);
                    }
                    else {
                        l = a.length;
                    }
                    for (i = offset; i < l; i += stride) {
                        vec[0] = a[i];
                        vec[1] = a[i + 1];
                        fn(vec, vec, arg);
                        a[i] = vec[0];
                        a[i + 1] = vec[1];
                    }
                    return a;
                };
            })();
            /**
             * Returns a string representation of a vector
             *
             * @param {vec2} a vector to represent as a string
             * @returns {String} string representation of the vector
             */
            vec2.str = function (a) {
                return 'vec2(' + a[0] + ', ' + a[1] + ')';
            };
            /**
             * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
             *
             * @param {vec2} a The first vector.
             * @param {vec2} b The second vector.
             * @returns {Boolean} True if the vectors are equal, false otherwise.
             */
            vec2.exactEquals = function (a, b) {
                return a[0] === b[0] && a[1] === b[1];
            };
            /**
             * Returns whether or not the vectors have approximately the same elements in the same position.
             *
             * @param {vec2} a The first vector.
             * @param {vec2} b The second vector.
             * @returns {Boolean} True if the vectors are equal, false otherwise.
             */
            vec2.equals = function (a, b) {
                var a0 = a[0], a1 = a[1];
                var b0 = b[0], b1 = b[1];
                return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)));
            };
            module.exports = vec2;
            /***/ }
    ]);
});
;
const ImportModels = (() => {
    // hard-coding for now because laziness
    const mtlFiles = {
        'untitled.mtl': `
# Blender MTL File: 'None'
# Material Count: 1

newmtl None
Ns 96.078431
Ka 1.000000 1.000000 1.000000
Kd 0.640000 0.189712 0.171980
Ks 0.500000 0.045271 0.052739
Ke 0.000000 0.000000 0.000000
Ni 1.000000
d 0.500000
illum 2
`
    };
    const objFiles = [`
# Blender v2.76 (sub 0) OBJ File: ''
# www.blender.org
mtllib untitled.mtl
o Cube
v -35.000000 -35.000000 35.000000
v -35.000000 35.000000 35.000000
v -35.000000 -35.000000 -35.000000
v -35.000000 35.000000 -35.000000
v 35.000000 -35.000000 35.000000
v 35.000000 35.000000 35.000000
v 35.000000 -35.000000 -35.000000
v 35.000000 35.000000 -35.000000
vn -1.000000 0.000000 0.000000
vn 0.000000 0.000000 -1.000000
vn 1.000000 0.000000 0.000000
vn 0.000000 0.000000 1.000000
vn 0.000000 -1.000000 0.000000
vn 0.000000 1.000000 0.000000
usemtl None
s off
f 4//1 3//1 1//1
f 8//2 7//2 3//2
f 6//3 5//3 7//3
f 2//4 1//4 5//4
f 3//5 7//5 5//5
f 8//6 4//6 2//6
f 2//1 4//1 1//1
f 4//2 8//2 3//2
f 8//3 6//3 7//3
f 6//4 2//4 5//4
f 1//5 3//5 5//5
f 6//6 8//6 2//6
`, `
# Blender v2.76 (sub 0) OBJ File: 'battlefield.blend'
# www.blender.org
mtllib untitled.mtl
o Battlefield
v -0.269086 -0.496934 0.169273
v -1.000000 0.000000 0.084319
v -0.600000 0.000000 0.140658
v -0.767786 -0.100000 0.179997
v -1.000000 -0.100000 0.096016
v -0.374302 -0.100000 0.272721
v 0.269086 -0.496934 0.169273
v 1.000000 0.000000 0.084319
v 0.000000 -0.507306 0.222342
v 0.000000 0.000000 0.239627
v 0.600000 0.000000 0.140658
v 0.767786 -0.100000 0.179997
v 1.000000 -0.100000 0.096016
v 0.000000 -0.100000 0.272721
v 0.374302 -0.100000 0.272721
v -0.269086 -0.496934 -0.169273
v -1.000000 0.000000 -0.084319
v -0.710356 -0.431677 0.000000
v -1.000000 0.000000 0.000000
v -0.600000 0.000000 -0.140658
v -1.000000 -0.100000 0.000000
v -0.767786 -0.100000 -0.179997
v -1.000000 -0.100000 -0.096016
v -0.374302 -0.100000 -0.272721
v 0.269086 -0.496934 -0.169273
v 1.000000 0.000000 -0.084319
v 0.000000 -0.507306 -0.222342
v 0.000000 0.000000 -0.239627
v 0.710356 -0.431677 0.000000
v 1.000000 0.000000 0.000000
v 0.000000 0.000000 0.000000
v 0.000000 -0.570984 0.000000
v 0.600000 0.000000 -0.140658
v 1.000000 -0.100000 0.000000
v 0.767786 -0.100000 -0.179997
v 1.000000 -0.100000 -0.096016
v 0.000000 -0.100000 -0.272721
v 0.374302 -0.100000 -0.272721
vn -0.091000 -0.957400 0.274200
vn -0.118300 0.529100 0.840300
vn -1.000000 0.000000 0.000000
vn -0.191000 -0.973900 0.122400
vn 0.000000 -0.252200 0.967700
vn -0.338100 0.109300 0.934800
vn -0.218800 -0.300000 0.928500
vn -0.753200 -0.657800 0.000000
vn -0.309800 -0.412400 0.856700
vn -0.181900 0.609000 0.772000
vn 0.000000 0.314200 0.949400
vn -0.118800 0.683200 0.720500
vn -0.369700 -0.541500 0.755100
vn 0.000000 1.000000 0.000000
vn -0.196500 -0.120400 0.973100
vn 0.091000 -0.957400 0.274200
vn 0.118300 0.529100 0.840300
vn 1.000000 0.000000 0.000000
vn 0.191000 -0.973900 0.122400
vn 0.338100 0.109300 0.934800
vn 0.218800 -0.300000 0.928500
vn 0.753200 -0.657800 0.000000
vn 0.309800 -0.412400 0.856700
vn 0.181900 0.609000 0.772000
vn 0.118800 0.683200 0.720500
vn 0.369700 -0.541500 0.755100
vn 0.196500 -0.120400 0.973100
vn -0.091000 -0.957400 -0.274200
vn -0.118300 0.529100 -0.840300
vn -0.191000 -0.973900 -0.122400
vn 0.000000 -0.252200 -0.967700
vn -0.338100 0.109300 -0.934800
vn -0.218800 -0.300000 -0.928500
vn -0.309800 -0.412400 -0.856700
vn -0.181900 0.609000 -0.772000
vn 0.000000 0.314200 -0.949400
vn -0.118800 0.683200 -0.720500
vn -0.369700 -0.541500 -0.755100
vn -0.196500 -0.120400 -0.973100
vn 0.091000 -0.957400 -0.274200
vn 0.118300 0.529100 -0.840300
vn 0.191000 -0.973900 -0.122400
vn 0.338100 0.109300 -0.934800
vn 0.218800 -0.300000 -0.928500
vn 0.309800 -0.412400 -0.856700
vn 0.181900 0.609000 -0.772000
vn 0.118800 0.683200 -0.720500
vn 0.369700 -0.541500 -0.755100
vn 0.196500 -0.120400 -0.973100
usemtl None
s off
f 32//1 9//1 1//1
f 3//2 2//2 4//2
f 2//3 19//3 5//3
f 18//4 32//4 1//4
f 14//5 6//5 1//5
f 4//6 2//6 5//6
f 6//7 4//7 1//7
f 5//8 21//8 18//8
f 1//9 4//9 5//9
f 3//10 4//10 6//10
f 14//11 10//11 6//11
f 19//3 21//3 5//3
f 10//12 3//12 6//12
f 18//13 1//13 5//13
f 19//14 2//14 31//14
f 9//15 14//15 1//15
f 3//14 10//14 31//14
f 2//14 3//14 31//14
f 32//16 7//16 9//16
f 11//17 12//17 8//17
f 8//18 13//18 30//18
f 29//19 7//19 32//19
f 14//5 7//5 15//5
f 12//20 13//20 8//20
f 15//21 7//21 12//21
f 13//22 29//22 34//22
f 7//23 13//23 12//23
f 11//24 15//24 12//24
f 14//11 15//11 10//11
f 30//18 13//18 34//18
f 10//25 15//25 11//25
f 29//26 13//26 7//26
f 30//14 31//14 8//14
f 9//27 7//27 14//27
f 11//14 31//14 10//14
f 8//14 31//14 11//14
f 32//28 16//28 27//28
f 20//29 22//29 17//29
f 17//3 23//3 19//3
f 18//30 16//30 32//30
f 37//31 16//31 24//31
f 22//32 23//32 17//32
f 24//33 16//33 22//33
f 23//8 18//8 21//8
f 16//34 23//34 22//34
f 20//35 24//35 22//35
f 37//36 24//36 28//36
f 19//3 23//3 21//3
f 28//37 24//37 20//37
f 18//38 23//38 16//38
f 19//14 31//14 17//14
f 27//39 16//39 37//39
f 20//14 31//14 28//14
f 17//14 31//14 20//14
f 32//40 27//40 25//40
f 33//41 26//41 35//41
f 26//18 30//18 36//18
f 29//42 32//42 25//42
f 37//31 38//31 25//31
f 35//43 26//43 36//43
f 38//44 35//44 25//44
f 36//22 34//22 29//22
f 25//45 35//45 36//45
f 33//46 35//46 38//46
f 37//36 28//36 38//36
f 30//18 34//18 36//18
f 28//47 33//47 38//47
f 29//48 25//48 36//48
f 30//14 26//14 31//14
f 27//49 37//49 25//49
f 33//14 28//14 31//14
f 26//14 33//14 31//14
`, `
# Blender v2.76 (sub 0) OBJ File: ''
# www.blender.org
mtllib untitled.mtl
o Cylinder
v 0.000000 -20.000000 -30.000000
v 0.000000 20.000000 -30.000000
v 1.472030 -20.000000 -29.963863
v 1.472030 20.000000 -29.963863
v 2.940514 -20.000000 -29.855541
v 2.940514 20.000000 -29.855541
v 4.401914 -20.000000 -29.675295
v 4.401914 20.000000 -29.675295
v 5.852710 -20.000000 -29.423557
v 5.852710 20.000000 -29.423557
v 7.289406 -20.000000 -29.100937
v 7.289406 20.000000 -29.100937
v 8.708540 -20.000000 -28.708210
v 8.708540 20.000000 -28.708210
v 10.106695 -20.000000 -28.246323
v 10.106695 20.000000 -28.246323
v 11.480503 -20.000000 -27.716387
v 11.480503 20.000000 -27.716387
v 12.826652 -20.000000 -27.119678
v 12.826652 20.000000 -27.119678
v 14.141901 -20.000000 -26.457638
v 14.141901 20.000000 -26.457638
v 15.423082 -20.000000 -25.731857
v 15.423082 20.000000 -25.731857
v 16.667107 -20.000000 -24.944088
v 16.667107 20.000000 -24.944088
v 17.870979 -20.000000 -24.096226
v 17.870979 20.000000 -24.096226
v 19.031799 -20.000000 -23.190313
v 19.031799 20.000000 -23.190313
v 20.146769 -20.000000 -22.228531
v 20.146769 20.000000 -22.228531
v 21.213205 -20.000000 -21.213202
v 21.213205 20.000000 -21.213202
v 22.228535 -20.000000 -20.146767
v 22.228535 20.000000 -20.146767
v 23.190317 -20.000000 -19.031796
v 23.190317 20.000000 -19.031796
v 24.096230 -20.000000 -17.870975
v 24.096230 20.000000 -17.870975
v 24.944092 -20.000000 -16.667103
v 24.944092 20.000000 -16.667103
v 25.731861 -20.000000 -15.423078
v 25.731861 20.000000 -15.423078
v 26.457640 -20.000000 -14.141897
v 26.457640 20.000000 -14.141897
v 27.119680 -20.000000 -12.826647
v 27.119680 20.000000 -12.826647
v 27.716389 -20.000000 -11.480496
v 27.716389 20.000000 -11.480496
v 28.246325 -20.000000 -10.106688
v 28.246325 20.000000 -10.106688
v 28.708212 -20.000000 -8.708532
v 28.708212 20.000000 -8.708532
v 29.100939 -20.000000 -7.289396
v 29.100939 20.000000 -7.289396
v 29.423561 -20.000000 -5.852700
v 29.423561 20.000000 -5.852700
v 29.675297 -20.000000 -4.401904
v 29.675297 20.000000 -4.401904
v 29.855543 -20.000000 -2.940504
v 29.855543 20.000000 -2.940504
v 29.963863 -20.000000 -1.472019
v 29.963863 20.000000 -1.472019
v 30.000000 -20.000000 0.000012
v 30.000000 20.000000 0.000012
v 29.963863 -20.000000 1.472043
v 29.963863 20.000000 1.472043
v 29.855539 -20.000000 2.940527
v 29.855539 20.000000 2.940527
v 29.675293 -20.000000 4.401928
v 29.675293 20.000000 4.401928
v 29.423555 -20.000000 5.852724
v 29.423555 20.000000 5.852724
v 29.100935 -20.000000 7.289420
v 29.100935 20.000000 7.289420
v 28.708206 -20.000000 8.708555
v 28.708206 20.000000 8.708555
v 28.246317 -20.000000 10.106711
v 28.246317 20.000000 10.106711
v 27.716379 -20.000000 11.480519
v 27.716379 20.000000 11.480519
v 27.119673 -20.000000 12.826665
v 27.119673 20.000000 12.826665
v 26.457634 -20.000000 14.141912
v 26.457634 20.000000 14.141912
v 25.731853 -20.000000 15.423090
v 25.731853 20.000000 15.423090
v 24.944086 -20.000000 16.667110
v 24.944086 20.000000 16.667110
v 24.096226 -20.000000 17.870981
v 24.096226 20.000000 17.870981
v 23.190315 -20.000000 19.031797
v 23.190315 20.000000 19.031797
v 22.228537 -20.000000 20.146767
v 22.228537 20.000000 20.146767
v 21.213209 -20.000000 21.213198
v 21.213209 20.000000 21.213198
v 20.146776 -20.000000 22.228527
v 20.146776 20.000000 22.228527
v 19.031809 -20.000000 23.190306
v 19.031809 20.000000 23.190306
v 17.870993 -20.000000 24.096216
v 17.870993 20.000000 24.096216
v 16.667124 -20.000000 24.944077
v 16.667124 20.000000 24.944077
v 15.423100 -20.000000 25.731848
v 15.423100 20.000000 25.731848
v 14.141924 -20.000000 26.457626
v 14.141924 20.000000 26.457626
v 12.826677 -20.000000 27.119667
v 12.826677 20.000000 27.119667
v 11.480532 -20.000000 27.716373
v 11.480532 20.000000 27.716373
v 10.106728 -20.000000 28.246311
v 10.106728 20.000000 28.246311
v 8.708575 -20.000000 28.708200
v 8.708575 20.000000 28.708200
v 7.289444 -20.000000 29.100927
v 7.289444 20.000000 29.100927
v 5.852752 -20.000000 29.423550
v 5.852752 20.000000 29.423550
v 4.401959 -20.000000 29.675289
v 4.401959 20.000000 29.675289
v 2.940562 -20.000000 29.855536
v 2.940562 20.000000 29.855536
v 1.472082 -20.000000 29.963861
v 1.472082 20.000000 29.963861
v 0.000055 -20.000000 30.000000
v 0.000055 20.000000 30.000000
v -1.471973 -20.000000 29.963867
v -1.471973 20.000000 29.963867
v -2.940454 -20.000000 29.855547
v -2.940454 20.000000 29.855547
v -4.401852 -20.000000 29.675304
v -4.401852 20.000000 29.675304
v -5.852644 -20.000000 29.423573
v -5.852644 20.000000 29.423573
v -7.289338 -20.000000 29.100954
v -7.289338 20.000000 29.100954
v -8.708471 -20.000000 28.708231
v -8.708471 20.000000 28.708231
v -10.106625 -20.000000 28.246347
v -10.106625 20.000000 28.246347
v -11.480431 -20.000000 27.716415
v -11.480431 20.000000 27.716415
v -12.826579 -20.000000 27.119713
v -12.826579 20.000000 27.119713
v -14.141829 -20.000000 26.457678
v -14.141829 20.000000 26.457678
v -15.423008 -20.000000 25.731903
v -15.423008 20.000000 25.731903
v -16.667032 -20.000000 24.944138
v -16.667032 20.000000 24.944138
v -17.870905 -20.000000 24.096281
v -17.870905 20.000000 24.096281
v -19.031725 -20.000000 23.190376
v -19.031725 20.000000 23.190376
v -20.146696 -20.000000 22.228600
v -20.146696 20.000000 22.228600
v -21.213131 -20.000000 21.213276
v -21.213131 20.000000 21.213276
v -22.228464 -20.000000 20.146847
v -22.228464 20.000000 20.146847
v -23.190250 -20.000000 19.031878
v -23.190250 20.000000 19.031878
v -24.096169 -20.000000 17.871056
v -24.096169 20.000000 17.871056
v -24.944036 -20.000000 16.667185
v -24.944036 20.000000 16.667185
v -25.731813 -20.000000 15.423158
v -25.731813 20.000000 15.423158
v -26.457598 -20.000000 14.141976
v -26.457598 20.000000 14.141976
v -27.119644 -20.000000 12.826725
v -27.119644 20.000000 12.826725
v -27.716356 -20.000000 11.480574
v -27.716356 20.000000 11.480574
v -28.246298 -20.000000 10.106763
v -28.246298 20.000000 10.106763
v -28.708191 -20.000000 8.708605
v -28.708191 20.000000 8.708605
v -29.100922 -20.000000 7.289467
v -29.100922 20.000000 7.289467
v -29.423546 -20.000000 5.852768
v -29.423546 20.000000 5.852768
v -29.675287 -20.000000 4.401968
v -29.675287 20.000000 4.401968
v -29.855536 -20.000000 2.940565
v -29.855536 20.000000 2.940565
v -29.963861 -20.000000 1.472077
v -29.963861 20.000000 1.472077
v -30.000000 -20.000000 0.000043
v -30.000000 20.000000 0.000043
v -29.963865 -20.000000 -1.471992
v -29.963865 20.000000 -1.471992
v -29.855545 -20.000000 -2.940480
v -29.855545 20.000000 -2.940480
v -29.675299 -20.000000 -4.401885
v -29.675299 20.000000 -4.401885
v -29.423563 -20.000000 -5.852684
v -29.423563 20.000000 -5.852684
v -29.100943 -20.000000 -7.289384
v -29.100943 20.000000 -7.289384
v -28.708216 -20.000000 -8.708524
v -28.708216 20.000000 -8.708524
v -28.246326 -20.000000 -10.106684
v -28.246326 20.000000 -10.106684
v -27.716389 -20.000000 -11.480494
v -27.716389 20.000000 -11.480494
v -27.119680 -20.000000 -12.826648
v -27.119680 20.000000 -12.826648
v -26.457638 -20.000000 -14.141901
v -26.457638 20.000000 -14.141901
v -25.731855 -20.000000 -15.423084
v -25.731855 20.000000 -15.423084
v -24.944084 -20.000000 -16.667112
v -24.944084 20.000000 -16.667112
v -24.096218 -20.000000 -17.870989
v -24.096218 20.000000 -17.870989
v -23.190304 -20.000000 -19.031811
v -23.190304 20.000000 -19.031811
v -22.228521 -20.000000 -20.146784
v -22.228521 20.000000 -20.146784
v -21.213186 -20.000000 -21.213221
v -21.213186 20.000000 -21.213221
v -20.146748 -20.000000 -22.228554
v -20.146748 20.000000 -22.228554
v -19.031773 -20.000000 -23.190334
v -19.031773 20.000000 -23.190334
v -17.870949 -20.000000 -24.096249
v -17.870949 20.000000 -24.096249
v -16.667074 -20.000000 -24.944111
v -16.667074 20.000000 -24.944111
v -15.423043 -20.000000 -25.731882
v -15.423043 20.000000 -25.731882
v -14.141858 -20.000000 -26.457663
v -14.141858 20.000000 -26.457663
v -12.826604 -20.000000 -27.119701
v -12.826604 20.000000 -27.119701
v -11.480450 -20.000000 -27.716408
v -11.480450 20.000000 -27.716408
v -10.106638 -20.000000 -28.246344
v -10.106638 20.000000 -28.246344
v -8.708477 -20.000000 -28.708229
v -8.708477 20.000000 -28.708229
v -7.289338 -20.000000 -29.100954
v -7.289338 20.000000 -29.100954
v -5.852637 -20.000000 -29.423574
v -5.852637 20.000000 -29.423574
v -4.401837 -20.000000 -29.675306
v -4.401837 20.000000 -29.675306
v -2.940432 -20.000000 -29.855551
v -2.940432 20.000000 -29.855551
v -1.471943 -20.000000 -29.963867
v -1.471943 20.000000 -29.963867
vn 0.024500 0.000000 -0.999700
vn 0.073600 0.000000 -0.997300
vn 0.122400 0.000000 -0.992500
vn 0.171000 0.000000 -0.985300
vn 0.219100 0.000000 -0.975700
vn 0.266700 0.000000 -0.963800
vn 0.313700 0.000000 -0.949500
vn 0.359900 0.000000 -0.933000
vn 0.405200 0.000000 -0.914200
vn 0.449600 0.000000 -0.893200
vn 0.492900 0.000000 -0.870100
vn 0.535000 0.000000 -0.844900
vn 0.575800 0.000000 -0.817600
vn 0.615200 0.000000 -0.788300
vn 0.653200 0.000000 -0.757200
vn 0.689500 0.000000 -0.724200
vn 0.724200 0.000000 -0.689500
vn 0.757200 0.000000 -0.653200
vn 0.788300 0.000000 -0.615200
vn 0.817600 0.000000 -0.575800
vn 0.844900 0.000000 -0.535000
vn 0.870100 0.000000 -0.492900
vn 0.893200 0.000000 -0.449600
vn 0.914200 0.000000 -0.405200
vn 0.933000 0.000000 -0.359900
vn 0.949500 0.000000 -0.313700
vn 0.963800 0.000000 -0.266700
vn 0.975700 0.000000 -0.219100
vn 0.985300 0.000000 -0.171000
vn 0.992500 0.000000 -0.122400
vn 0.997300 0.000000 -0.073600
vn 0.999700 0.000000 -0.024500
vn 0.999700 0.000000 0.024500
vn 0.997300 0.000000 0.073600
vn 0.992500 0.000000 0.122400
vn 0.985300 0.000000 0.171000
vn 0.975700 0.000000 0.219100
vn 0.963800 0.000000 0.266700
vn 0.949500 0.000000 0.313700
vn 0.933000 0.000000 0.359900
vn 0.914200 0.000000 0.405200
vn 0.893200 0.000000 0.449600
vn 0.870100 0.000000 0.492900
vn 0.844900 0.000000 0.535000
vn 0.817600 0.000000 0.575800
vn 0.788300 0.000000 0.615200
vn 0.757200 0.000000 0.653200
vn 0.724200 0.000000 0.689500
vn 0.689500 0.000000 0.724200
vn 0.653200 0.000000 0.757200
vn 0.615200 0.000000 0.788300
vn 0.575800 0.000000 0.817600
vn 0.535000 0.000000 0.844900
vn 0.492900 0.000000 0.870100
vn 0.449600 0.000000 0.893200
vn 0.405200 0.000000 0.914200
vn 0.359900 0.000000 0.933000
vn 0.313700 0.000000 0.949500
vn 0.266700 0.000000 0.963800
vn 0.219100 0.000000 0.975700
vn 0.171000 0.000000 0.985300
vn 0.122400 0.000000 0.992500
vn 0.073600 0.000000 0.997300
vn 0.024500 0.000000 0.999700
vn -0.024500 0.000000 0.999700
vn -0.073600 0.000000 0.997300
vn -0.122400 0.000000 0.992500
vn -0.171000 0.000000 0.985300
vn -0.219100 0.000000 0.975700
vn -0.266700 0.000000 0.963800
vn -0.313700 0.000000 0.949500
vn -0.359900 0.000000 0.933000
vn -0.405200 0.000000 0.914200
vn -0.449600 0.000000 0.893200
vn -0.492900 0.000000 0.870100
vn -0.535000 0.000000 0.844900
vn -0.575800 0.000000 0.817600
vn -0.615200 0.000000 0.788300
vn -0.653200 0.000000 0.757200
vn -0.689500 0.000000 0.724200
vn -0.724200 0.000000 0.689500
vn -0.757200 0.000000 0.653200
vn -0.788300 0.000000 0.615200
vn -0.817600 0.000000 0.575800
vn -0.844900 0.000000 0.535000
vn -0.870100 0.000000 0.492900
vn -0.893200 0.000000 0.449600
vn -0.914200 0.000000 0.405200
vn -0.933000 0.000000 0.359900
vn -0.949500 0.000000 0.313700
vn -0.963800 0.000000 0.266700
vn -0.975700 0.000000 0.219100
vn -0.985300 0.000000 0.171000
vn -0.992500 0.000000 0.122400
vn -0.997300 0.000000 0.073600
vn -0.999700 0.000000 0.024500
vn -0.999700 0.000000 -0.024500
vn -0.997300 0.000000 -0.073600
vn -0.992500 0.000000 -0.122400
vn -0.985300 0.000000 -0.171000
vn -0.975700 0.000000 -0.219100
vn -0.963800 0.000000 -0.266700
vn -0.949500 0.000000 -0.313700
vn -0.933000 0.000000 -0.359900
vn -0.914200 0.000000 -0.405200
vn -0.893200 0.000000 -0.449600
vn -0.870100 0.000000 -0.492900
vn -0.844900 0.000000 -0.535000
vn -0.817600 0.000000 -0.575800
vn -0.788300 0.000000 -0.615200
vn -0.757200 0.000000 -0.653200
vn -0.724200 0.000000 -0.689500
vn -0.689500 0.000000 -0.724200
vn -0.653200 0.000000 -0.757200
vn -0.615200 0.000000 -0.788300
vn -0.575800 0.000000 -0.817600
vn -0.535000 0.000000 -0.844900
vn -0.492900 0.000000 -0.870100
vn -0.449600 0.000000 -0.893200
vn -0.405200 0.000000 -0.914200
vn -0.359900 0.000000 -0.933000
vn -0.313700 0.000000 -0.949500
vn -0.266700 0.000000 -0.963800
vn -0.219100 0.000000 -0.975700
vn -0.171000 0.000000 -0.985300
vn -0.122400 0.000000 -0.992500
vn 0.000000 1.000000 0.000000
vn -0.024500 0.000000 -0.999700
vn -0.073600 0.000000 -0.997300
vn 0.000000 -1.000000 0.000000
usemtl None
s off
f 2//1 4//1 3//1
f 4//2 6//2 5//2
f 6//3 8//3 7//3
f 8//4 10//4 9//4
f 10//5 12//5 11//5
f 12//6 14//6 13//6
f 14//7 16//7 15//7
f 16//8 18//8 17//8
f 18//9 20//9 19//9
f 20//10 22//10 21//10
f 22//11 24//11 23//11
f 24//12 26//12 25//12
f 26//13 28//13 27//13
f 28//14 30//14 29//14
f 30//15 32//15 31//15
f 32//16 34//16 33//16
f 34//17 36//17 35//17
f 36//18 38//18 37//18
f 38//19 40//19 39//19
f 40//20 42//20 41//20
f 42//21 44//21 43//21
f 44//22 46//22 45//22
f 46//23 48//23 47//23
f 48//24 50//24 49//24
f 50//25 52//25 51//25
f 52//26 54//26 53//26
f 54//27 56//27 55//27
f 56//28 58//28 57//28
f 58//29 60//29 59//29
f 60//30 62//30 61//30
f 62//31 64//31 63//31
f 64//32 66//32 65//32
f 66//33 68//33 67//33
f 68//34 70//34 69//34
f 70//35 72//35 71//35
f 72//36 74//36 73//36
f 74//37 76//37 75//37
f 76//38 78//38 77//38
f 78//39 80//39 79//39
f 80//40 82//40 81//40
f 82//41 84//41 83//41
f 84//42 86//42 85//42
f 86//43 88//43 87//43
f 88//44 90//44 89//44
f 90//45 92//45 91//45
f 92//46 94//46 93//46
f 94//47 96//47 95//47
f 96//48 98//48 97//48
f 98//49 100//49 99//49
f 100//50 102//50 101//50
f 102//51 104//51 103//51
f 104//52 106//52 105//52
f 106//53 108//53 107//53
f 108//54 110//54 109//54
f 110//55 112//55 111//55
f 112//56 114//56 113//56
f 114//57 116//57 115//57
f 116//58 118//58 117//58
f 118//59 120//59 119//59
f 120//60 122//60 121//60
f 122//61 124//61 123//61
f 124//62 126//62 125//62
f 126//63 128//63 127//63
f 128//64 130//64 129//64
f 130//65 132//65 131//65
f 132//66 134//66 133//66
f 134//67 136//67 135//67
f 136//68 138//68 137//68
f 138//69 140//69 139//69
f 140//70 142//70 141//70
f 142//71 144//71 143//71
f 144//72 146//72 145//72
f 146//73 148//73 147//73
f 148//74 150//74 149//74
f 150//75 152//75 151//75
f 152//76 154//76 153//76
f 154//77 156//77 155//77
f 156//78 158//78 157//78
f 158//79 160//79 159//79
f 160//80 162//80 161//80
f 162//81 164//81 163//81
f 164//82 166//82 165//82
f 166//83 168//83 167//83
f 168//84 170//84 169//84
f 170//85 172//85 171//85
f 172//86 174//86 173//86
f 174//87 176//87 175//87
f 176//88 178//88 177//88
f 178//89 180//89 179//89
f 180//90 182//90 181//90
f 182//91 184//91 183//91
f 184//92 186//92 185//92
f 186//93 188//93 187//93
f 188//94 190//94 189//94
f 190//95 192//95 191//95
f 192//96 194//96 193//96
f 194//97 196//97 195//97
f 196//98 198//98 197//98
f 198//99 200//99 199//99
f 200//100 202//100 201//100
f 202//101 204//101 203//101
f 204//102 206//102 205//102
f 206//103 208//103 207//103
f 208//104 210//104 209//104
f 210//105 212//105 211//105
f 212//106 214//106 213//106
f 214//107 216//107 215//107
f 216//108 218//108 217//108
f 218//109 220//109 219//109
f 220//110 222//110 221//110
f 222//111 224//111 223//111
f 224//112 226//112 225//112
f 226//113 228//113 227//113
f 228//114 230//114 229//114
f 230//115 232//115 231//115
f 232//116 234//116 233//116
f 234//117 236//117 235//117
f 236//118 238//118 237//118
f 238//119 240//119 239//119
f 240//120 242//120 241//120
f 242//121 244//121 243//121
f 244//122 246//122 245//122
f 246//123 248//123 247//123
f 248//124 250//124 249//124
f 250//125 252//125 251//125
f 252//126 254//126 253//126
f 134//127 70//127 6//127
f 256//128 2//128 1//128
f 254//129 256//129 255//129
f 195//130 199//130 31//130
f 1//1 2//1 3//1
f 3//2 4//2 5//2
f 5//3 6//3 7//3
f 7//4 8//4 9//4
f 9//5 10//5 11//5
f 11//6 12//6 13//6
f 13//7 14//7 15//7
f 15//8 16//8 17//8
f 17//9 18//9 19//9
f 19//10 20//10 21//10
f 21//11 22//11 23//11
f 23//12 24//12 25//12
f 25//13 26//13 27//13
f 27//14 28//14 29//14
f 29//15 30//15 31//15
f 31//16 32//16 33//16
f 33//17 34//17 35//17
f 35//18 36//18 37//18
f 37//19 38//19 39//19
f 39//20 40//20 41//20
f 41//21 42//21 43//21
f 43//22 44//22 45//22
f 45//23 46//23 47//23
f 47//24 48//24 49//24
f 49//25 50//25 51//25
f 51//26 52//26 53//26
f 53//27 54//27 55//27
f 55//28 56//28 57//28
f 57//29 58//29 59//29
f 59//30 60//30 61//30
f 61//31 62//31 63//31
f 63//32 64//32 65//32
f 65//33 66//33 67//33
f 67//34 68//34 69//34
f 69//35 70//35 71//35
f 71//36 72//36 73//36
f 73//37 74//37 75//37
f 75//38 76//38 77//38
f 77//39 78//39 79//39
f 79//40 80//40 81//40
f 81//41 82//41 83//41
f 83//42 84//42 85//42
f 85//43 86//43 87//43
f 87//44 88//44 89//44
f 89//45 90//45 91//45
f 91//46 92//46 93//46
f 93//47 94//47 95//47
f 95//48 96//48 97//48
f 97//49 98//49 99//49
f 99//50 100//50 101//50
f 101//51 102//51 103//51
f 103//52 104//52 105//52
f 105//53 106//53 107//53
f 107//54 108//54 109//54
f 109//55 110//55 111//55
f 111//56 112//56 113//56
f 113//57 114//57 115//57
f 115//58 116//58 117//58
f 117//59 118//59 119//59
f 119//60 120//60 121//60
f 121//61 122//61 123//61
f 123//62 124//62 125//62
f 125//63 126//63 127//63
f 127//64 128//64 129//64
f 129//65 130//65 131//65
f 131//66 132//66 133//66
f 133//67 134//67 135//67
f 135//68 136//68 137//68
f 137//69 138//69 139//69
f 139//70 140//70 141//70
f 141//71 142//71 143//71
f 143//72 144//72 145//72
f 145//73 146//73 147//73
f 147//74 148//74 149//74
f 149//75 150//75 151//75
f 151//76 152//76 153//76
f 153//77 154//77 155//77
f 155//78 156//78 157//78
f 157//79 158//79 159//79
f 159//80 160//80 161//80
f 161//81 162//81 163//81
f 163//82 164//82 165//82
f 165//83 166//83 167//83
f 167//84 168//84 169//84
f 169//85 170//85 171//85
f 171//86 172//86 173//86
f 173//87 174//87 175//87
f 175//88 176//88 177//88
f 177//89 178//89 179//89
f 179//90 180//90 181//90
f 181//91 182//91 183//91
f 183//92 184//92 185//92
f 185//93 186//93 187//93
f 187//94 188//94 189//94
f 189//95 190//95 191//95
f 191//96 192//96 193//96
f 193//97 194//97 195//97
f 195//98 196//98 197//98
f 197//99 198//99 199//99
f 199//100 200//100 201//100
f 201//101 202//101 203//101
f 203//102 204//102 205//102
f 205//103 206//103 207//103
f 207//104 208//104 209//104
f 209//105 210//105 211//105
f 211//106 212//106 213//106
f 213//107 214//107 215//107
f 215//108 216//108 217//108
f 217//109 218//109 219//109
f 219//110 220//110 221//110
f 221//111 222//111 223//111
f 223//112 224//112 225//112
f 225//113 226//113 227//113
f 227//114 228//114 229//114
f 229//115 230//115 231//115
f 231//116 232//116 233//116
f 233//117 234//117 235//117
f 235//118 236//118 237//118
f 237//119 238//119 239//119
f 239//120 240//120 241//120
f 241//121 242//121 243//121
f 243//122 244//122 245//122
f 245//123 246//123 247//123
f 247//124 248//124 249//124
f 249//125 250//125 251//125
f 251//126 252//126 253//126
f 6//127 4//127 2//127
f 2//127 256//127 6//127
f 254//127 252//127 256//127
f 250//127 248//127 252//127
f 246//127 244//127 242//127
f 242//127 240//127 230//127
f 238//127 236//127 240//127
f 234//127 232//127 230//127
f 230//127 228//127 226//127
f 226//127 224//127 222//127
f 222//127 220//127 226//127
f 218//127 216//127 220//127
f 214//127 212//127 210//127
f 210//127 208//127 206//127
f 206//127 204//127 210//127
f 202//127 200//127 214//127
f 198//127 196//127 190//127
f 194//127 192//127 190//127
f 190//127 188//127 186//127
f 186//127 184//127 178//127
f 182//127 180//127 184//127
f 178//127 176//127 174//127
f 174//127 172//127 170//127
f 170//127 168//127 174//127
f 166//127 164//127 168//127
f 162//127 160//127 154//127
f 158//127 156//127 160//127
f 154//127 152//127 150//127
f 150//127 148//127 154//127
f 146//127 144//127 142//127
f 142//127 140//127 134//127
f 138//127 136//127 140//127
f 134//127 132//127 130//127
f 130//127 128//127 126//127
f 126//127 124//127 122//127
f 122//127 120//127 126//127
f 118//127 116//127 114//127
f 114//127 112//127 110//127
f 110//127 108//127 106//127
f 106//127 104//127 102//127
f 102//127 100//127 98//127
f 98//127 96//127 94//127
f 94//127 92//127 90//127
f 90//127 88//127 94//127
f 86//127 84//127 88//127
f 82//127 80//127 78//127
f 78//127 76//127 74//127
f 74//127 72//127 70//127
f 70//127 68//127 66//127
f 66//127 64//127 70//127
f 62//127 60//127 64//127
f 58//127 56//127 60//127
f 54//127 52//127 48//127
f 50//127 48//127 52//127
f 46//127 44//127 42//127
f 42//127 40//127 38//127
f 38//127 36//127 42//127
f 34//127 32//127 36//127
f 30//127 28//127 32//127
f 26//127 24//127 32//127
f 22//127 20//127 14//127
f 18//127 16//127 20//127
f 14//127 12//127 10//127
f 10//127 8//127 6//127
f 6//127 256//127 252//127
f 252//127 248//127 246//127
f 246//127 242//127 230//127
f 236//127 234//127 240//127
f 230//127 226//127 220//127
f 220//127 216//127 230//127
f 214//127 210//127 202//127
f 204//127 202//127 210//127
f 196//127 194//127 190//127
f 190//127 186//127 174//127
f 180//127 178//127 184//127
f 174//127 168//127 154//127
f 164//127 162//127 168//127
f 156//127 154//127 160//127
f 148//127 146//127 142//127
f 140//127 136//127 134//127
f 134//127 130//127 126//127
f 126//127 114//127 106//127
f 118//127 114//127 120//127
f 126//127 120//127 114//127
f 102//127 98//127 70//127
f 94//127 88//127 98//127
f 84//127 82//127 88//127
f 78//127 74//127 70//127
f 70//127 64//127 54//127
f 60//127 56//127 64//127
f 54//127 48//127 70//127
f 46//127 42//127 36//127
f 36//127 32//127 46//127
f 28//127 26//127 32//127
f 20//127 16//127 14//127
f 14//127 10//127 22//127
f 6//127 252//127 246//127
f 240//127 234//127 230//127
f 230//127 216//127 6//127
f 214//127 200//127 216//127
f 198//127 190//127 174//127
f 178//127 174//127 186//127
f 162//127 154//127 168//127
f 148//127 142//127 134//127
f 134//127 126//127 102//127
f 110//127 106//127 114//127
f 98//127 88//127 70//127
f 82//127 78//127 70//127
f 64//127 56//127 54//127
f 48//127 46//127 32//127
f 32//127 24//127 22//127
f 22//127 10//127 32//127
f 6//127 246//127 230//127
f 216//127 198//127 6//127
f 198//127 174//127 134//127
f 154//127 148//127 134//127
f 126//127 106//127 102//127
f 88//127 82//127 70//127
f 70//127 48//127 6//127
f 32//127 10//127 6//127
f 216//127 200//127 198//127
f 174//127 154//127 134//127
f 134//127 102//127 70//127
f 48//127 32//127 6//127
f 6//127 198//127 134//127
f 255//128 256//128 1//128
f 253//129 254//129 255//129
f 255//130 1//130 3//130
f 3//130 5//130 255//130
f 7//130 9//130 19//130
f 11//130 13//130 19//130
f 15//130 17//130 19//130
f 19//130 21//130 23//130
f 23//130 25//130 31//130
f 27//130 29//130 31//130
f 31//130 33//130 35//130
f 35//130 37//130 39//130
f 39//130 41//130 43//130
f 43//130 45//130 39//130
f 47//130 49//130 51//130
f 51//130 53//130 47//130
f 55//130 57//130 59//130
f 59//130 61//130 63//130
f 63//130 65//130 67//130
f 67//130 69//130 63//130
f 71//130 73//130 69//130
f 75//130 77//130 73//130
f 79//130 81//130 69//130
f 83//130 85//130 87//130
f 87//130 89//130 95//130
f 91//130 93//130 89//130
f 95//130 97//130 87//130
f 99//130 101//130 103//130
f 103//130 105//130 99//130
f 107//130 109//130 111//130
f 111//130 113//130 119//130
f 115//130 117//130 119//130
f 119//130 121//130 125//130
f 123//130 125//130 121//130
f 127//130 129//130 133//130
f 131//130 133//130 129//130
f 135//130 137//130 139//130
f 139//130 141//130 143//130
f 143//130 145//130 133//130
f 147//130 149//130 151//130
f 151//130 153//130 147//130
f 155//130 157//130 159//130
f 159//130 161//130 167//130
f 163//130 165//130 167//130
f 167//130 169//130 171//130
f 171//130 173//130 167//130
f 175//130 177//130 183//130
f 179//130 181//130 183//130
f 183//130 185//130 189//130
f 187//130 189//130 185//130
f 191//130 193//130 195//130
f 195//130 197//130 199//130
f 199//130 201//130 203//130
f 203//130 205//130 207//130
f 207//130 209//130 203//130
f 211//130 213//130 215//130
f 215//130 217//130 219//130
f 219//130 221//130 225//130
f 223//130 225//130 221//130
f 227//130 229//130 225//130
f 231//130 233//130 235//130
f 235//130 237//130 239//130
f 239//130 241//130 247//130
f 243//130 245//130 241//130
f 247//130 249//130 251//130
f 251//130 253//130 255//130
f 255//130 5//130 7//130
f 9//130 11//130 19//130
f 15//130 19//130 13//130
f 25//130 27//130 31//130
f 31//130 35//130 45//130
f 39//130 45//130 35//130
f 47//130 53//130 55//130
f 55//130 59//130 63//130
f 63//130 69//130 83//130
f 73//130 77//130 79//130
f 81//130 83//130 69//130
f 89//130 93//130 95//130
f 97//130 99//130 105//130
f 105//130 107//130 111//130
f 113//130 115//130 119//130
f 119//130 125//130 63//130
f 127//130 133//130 145//130
f 135//130 139//130 143//130
f 145//130 175//130 191//130
f 153//130 155//130 159//130
f 161//130 163//130 167//130
f 167//130 173//130 175//130
f 177//130 179//130 183//130
f 183//130 189//130 175//130
f 191//130 195//130 127//130
f 199//130 203//130 209//130
f 209//130 211//130 215//130
f 215//130 219//130 225//130
f 225//130 229//130 215//130
f 231//130 235//130 239//130
f 241//130 245//130 247//130
f 247//130 251//130 255//130
f 255//130 7//130 23//130
f 19//130 23//130 7//130
f 31//130 45//130 47//130
f 47//130 55//130 31//130
f 69//130 73//130 79//130
f 83//130 87//130 63//130
f 97//130 105//130 87//130
f 111//130 119//130 63//130
f 133//130 135//130 143//130
f 147//130 153//130 159//130
f 159//130 167//130 175//130
f 175//130 189//130 191//130
f 195//130 31//130 127//130
f 209//130 215//130 199//130
f 229//130 231//130 239//130
f 239//130 247//130 255//130
f 255//130 23//130 31//130
f 31//130 55//130 63//130
f 63//130 87//130 111//130
f 105//130 111//130 87//130
f 127//130 145//130 191//130
f 159//130 175//130 145//130
f 199//130 215//130 31//130
f 229//130 239//130 215//130
f 255//130 31//130 215//130
f 63//130 125//130 127//130
f 147//130 159//130 145//130
f 215//130 239//130 255//130
f 31//130 63//130 127//130
`, `
# Blender v2.76 (sub 0) OBJ File: ''
# www.blender.org
mtllib untitled.mtl
o Icosphere
v 1.000130 -49.951351 0.290411
v 37.180496 -22.312325 26.576675
v -12.819270 -22.312340 42.822872
v -43.721180 -22.312130 0.290411
v -12.819270 -22.312340 -42.242046
v 37.180496 -22.312325 -25.995853
v 14.819530 22.409641 42.822872
v -35.180237 22.409626 26.576675
v -35.180237 22.409626 -25.995853
v 14.819530 22.409641 -42.242046
v 45.721439 22.409431 0.290411
v 1.000130 50.048649 0.290411
v -12.396734 -24.860092 41.522423
v -11.896696 -27.485611 39.983437
v -11.312798 -30.155485 38.186348
v -10.640946 -32.827309 36.118568
v -9.880331 -35.450989 33.777592
v -9.034295 -37.971500 31.173717
v -8.110857 -40.333035 28.331621
v -7.122649 -42.484070 25.290176
v -6.086181 -44.382393 22.100199
v -5.020504 -45.999088 18.820326
v -3.945508 -47.320652 15.511776
v -2.880203 -48.348831 12.233047
v -1.841292 -49.098568 9.035556
v -0.842257 -49.594604 5.960791
v 0.107014 -49.867748 3.039184
v 3.338383 -49.867744 1.989231
v 5.823658 -49.594601 3.794868
v 8.439219 -49.098568 5.695162
v 11.159177 -48.348831 7.671303
v 13.948236 -47.320648 9.697650
v 16.762665 -45.999084 11.742429
v 19.552702 -44.382385 13.769485
v 22.266264 -42.484062 15.740979
v 24.853476 -40.333023 17.620678
v 27.271118 -37.971493 19.377176
v 29.486107 -35.450974 20.986443
v 31.477467 -32.827293 22.433233
v 33.236427 -30.155470 23.711178
v 34.765125 -27.485600 24.821827
v 36.074265 -24.860077 25.772961
v 35.181156 -23.073792 28.521772
v 32.922756 -23.800720 30.492290
v 30.395037 -24.472475 32.456451
v 27.597174 -25.066437 34.376034
v 24.540525 -25.559475 36.208008
v 21.250549 -25.929972 37.907322
v 17.767244 -26.160141 39.430714
v 14.143568 -26.238234 40.740997
v 10.441799 -26.160141 41.810936
v 6.728325 -25.929974 42.625961
v 3.067852 -25.559481 43.185028
v -0.481835 -25.066442 43.499619
v -3.873658 -24.472486 43.591225
v -7.073133 -23.800734 43.487976
v -10.058464 -23.073807 43.221283
v 38.412537 -23.073778 -23.493301
v 39.588696 -23.800694 -20.736517
v 40.675575 -24.472431 -17.725565
v 41.636589 -25.066378 -14.471474
v 42.434315 -25.559402 -10.998343
v 43.033764 -25.929888 -7.344305
v 43.406174 -26.160053 -3.560768
v 43.532524 -26.238142 0.290411
v 43.406174 -26.160053 4.141590
v 43.033764 -25.929888 7.925127
v 42.434315 -25.559402 11.579165
v 41.636593 -25.066380 15.052297
v 40.675575 -24.472431 18.306385
v 39.588696 -23.800694 21.317339
v 38.412537 -23.073778 24.074121
v 3.338383 -49.867744 -1.408409
v 5.823658 -49.594601 -3.214046
v 8.439219 -49.098568 -5.114340
v 11.159177 -48.348831 -7.090481
v 13.948236 -47.320648 -9.116828
v 16.762665 -45.999084 -11.161607
v 19.552702 -44.382385 -13.188663
v 22.266264 -42.484062 -15.160157
v 24.853476 -40.333023 -17.039856
v 27.271118 -37.971493 -18.796354
v 29.486107 -35.450974 -20.405621
v 31.477467 -32.827293 -21.852411
v 33.236427 -30.155470 -23.130356
v 34.765125 -27.485600 -24.241005
v 36.074265 -24.860077 -25.192139
v -42.353828 -24.859873 0.290411
v -40.735668 -27.485388 0.290411
v -38.846123 -30.155260 0.290411
v -36.671947 -32.827087 0.290411
v -34.210526 -35.450779 0.290411
v -31.472668 -37.971310 0.290411
v -28.484322 -40.332870 0.290411
v -25.286360 -42.483932 0.290411
v -21.932213 -44.382282 0.290411
v -18.483540 -45.999008 0.290411
v -15.004702 -47.320599 0.290411
v -11.557218 -48.348797 0.290411
v -8.195148 -49.098549 0.290411
v -4.962119 -49.594597 0.290411
v -1.890130 -49.867748 0.290411
v -15.287029 -23.073805 41.522442
v -17.859022 -23.800732 39.983479
v -20.508186 -24.472479 38.186413
v -23.198441 -25.066431 36.118641
v -25.885336 -25.559456 33.777676
v -28.518152 -25.929935 31.173803
v -31.043404 -26.160088 28.331709
v -33.409340 -26.238157 25.290257
v -35.570820 -26.160042 22.100271
v -37.493469 -25.929852 18.820387
v -39.156307 -25.559338 15.511822
v -40.552399 -25.066282 12.233083
v -41.687626 -24.472303 9.035579
v -42.578106 -23.800541 5.960803
v -43.246967 -23.073603 3.039189
v -12.396734 -24.860092 -40.941597
v -11.896696 -27.485611 -39.402611
v -11.312798 -30.155485 -37.605522
v -10.640946 -32.827309 -35.537743
v -9.880331 -35.450989 -33.196766
v -9.034295 -37.971500 -30.592896
v -8.110857 -40.333035 -27.750799
v -7.122649 -42.484070 -24.709354
v -6.086181 -44.382393 -21.519377
v -5.020504 -45.999088 -18.239504
v -3.945508 -47.320652 -14.930954
v -2.880203 -48.348831 -11.652225
v -1.841292 -49.098568 -8.454734
v -0.842257 -49.594604 -5.379969
v 0.107014 -49.867748 -2.458362
v -43.246971 -23.073603 -2.458367
v -42.578114 -23.800541 -5.379982
v -41.687626 -24.472301 -8.454756
v -40.552406 -25.066282 -11.652260
v -39.156311 -25.559334 -14.931000
v -37.493473 -25.929852 -18.239565
v -35.570820 -26.160042 -21.519447
v -33.409340 -26.238157 -24.709435
v -31.043404 -26.160088 -27.750887
v -28.518152 -25.929935 -30.592981
v -25.885336 -25.559456 -33.196850
v -23.198441 -25.066431 -35.537815
v -20.508186 -24.472479 -37.605579
v -17.859022 -23.800732 -39.402649
v -15.287031 -23.073807 -40.941616
v -10.058463 -23.073807 -42.640457
v -7.073132 -23.800734 -42.907150
v -3.873656 -24.472486 -43.010399
v -0.481833 -25.066442 -42.918793
v 3.067855 -25.559481 -42.604202
v 6.728328 -25.929974 -42.045135
v 10.441802 -26.160141 -41.230110
v 14.143572 -26.238234 -40.160172
v 17.767248 -26.160141 -38.849888
v 21.250555 -25.929972 -37.326496
v 24.540529 -25.559475 -35.627182
v 27.597176 -25.066437 -33.795208
v 30.395037 -24.472473 -31.875624
v 32.922760 -23.800720 -29.911469
v 35.181156 -23.073792 -27.940950
v 46.692375 20.280626 1.989235
v 47.559532 17.935551 3.794878
v 48.285583 15.374255 5.695178
v 48.831417 12.606125 7.671329
v 49.159088 9.651653 9.697686
v 49.235699 6.543282 11.742476
v 49.037407 3.324740 13.769541
v 48.553024 0.048651 15.741043
v 47.786095 -3.227443 17.620747
v 46.755043 -6.445999 19.377245
v 45.491177 -9.554392 20.986509
v 44.035011 -12.508892 22.433289
v 42.431862 -15.277055 23.711226
v 40.727478 -17.838379 24.821861
v 38.964577 -20.183487 25.772976
v 38.964577 -20.183489 -25.192154
v 40.727478 -17.838379 -24.241034
v 42.431862 -15.277054 -23.130396
v 44.035019 -12.508893 -21.852461
v 45.491177 -9.554392 -20.405678
v 46.755047 -6.446000 -18.796415
v 47.786102 -3.227444 -17.039919
v 48.553028 0.048650 -15.160214
v 49.037411 3.324738 -13.188711
v 49.235699 6.543279 -11.161649
v 49.159096 9.651649 -9.116859
v 48.831421 12.606121 -7.090504
v 48.285587 15.374253 -5.114354
v 47.559532 17.935547 -3.214054
v 46.692375 20.280621 -1.408412
v 13.503883 20.280813 44.271271
v 12.054576 17.935709 45.653969
v 10.471643 15.374388 46.931728
v 8.760883 12.606227 48.061512
v 6.934961 9.651727 48.999332
v 5.013928 6.543327 49.704060
v 3.024810 3.324761 50.141872
v 1.000129 0.048651 50.290413
v -1.024551 -3.227459 50.141872
v -3.013669 -6.446024 49.704060
v -4.934703 -9.554423 48.999336
v -6.760624 -12.508923 48.061512
v -8.471387 -15.277084 46.931728
v -10.054318 -17.838408 45.653969
v -11.503624 -20.183510 44.271271
v 36.967445 -20.183510 28.521805
v 36.607647 -17.838419 30.492359
v 36.078053 -15.277105 32.456558
v 35.358055 -12.508948 34.376183
v 34.432056 -9.554447 36.208195
v 33.292095 -6.446043 37.907539
v 31.940153 -3.227469 39.430954
v 30.389406 0.048650 40.741249
v 28.664034 3.324769 41.811192
v 26.797407 6.543344 42.626205
v 24.828966 9.651749 43.185246
v 22.800468 12.606253 43.499809
v 20.752306 15.374412 43.591370
v 18.720587 17.935728 43.488075
v 16.735296 20.280823 43.221333
v -36.964317 20.280790 25.772976
v -38.727219 17.935680 24.821856
v -40.431602 15.374355 23.711218
v -42.034760 12.606194 22.433283
v -43.490917 9.651693 20.986500
v -44.754787 6.543301 19.377237
v -45.785843 3.324745 17.620741
v -46.552769 0.048651 15.741036
v -47.037151 -3.227437 13.769533
v -47.235439 -6.445978 11.742471
v -47.158836 -9.554348 9.697681
v -46.831161 -12.508820 7.671326
v -46.285328 -15.276952 5.695176
v -45.559273 -17.838245 3.794876
v -44.692116 -20.183319 1.989234
v -14.735038 -20.183525 43.221333
v -16.720329 -17.838428 43.488075
v -18.752048 -15.277112 43.591370
v -20.800209 -12.508951 43.499805
v -22.828709 -9.554449 43.185246
v -24.797148 -6.446044 42.626205
v -26.663778 -3.227469 41.811192
v -28.389151 0.048650 40.741249
v -29.939896 3.324769 39.430954
v -31.291836 6.543342 37.907536
v -32.431801 9.651747 36.208195
v -33.357800 12.606247 34.376183
v -34.077789 15.374404 32.456558
v -34.607388 17.935717 30.492355
v -34.967186 20.280807 28.521805
v -34.967186 20.280811 -27.940983
v -34.607388 17.935720 -29.911537
v -34.077793 15.374407 -31.875734
v -33.357796 12.606250 -33.795357
v -32.431797 9.651749 -35.627369
v -31.291836 6.543344 -37.326714
v -29.939894 3.324770 -38.850128
v -28.389147 0.048651 -40.160423
v -26.663774 -3.227468 -41.230366
v -24.797148 -6.446043 -42.045380
v -22.828707 -9.554447 -42.604420
v -20.800209 -12.508951 -42.918983
v -18.752047 -15.277110 -43.010544
v -16.720327 -17.838427 -42.907249
v -14.735038 -20.183521 -42.640507
v -44.692116 -20.183325 -1.408413
v -45.559273 -17.838249 -3.214056
v -46.285324 -15.276954 -5.114356
v -46.831158 -12.508823 -7.090508
v -47.158829 -9.554352 -9.116864
v -47.235439 -6.445982 -11.161654
v -47.037148 -3.227440 -13.188719
v -46.552765 0.048650 -15.160221
v -45.785835 3.324744 -17.039925
v -44.754784 6.543300 -18.796423
v -43.490917 9.651693 -20.405687
v -42.034752 12.606194 -21.852467
v -40.431602 15.374356 -23.130404
v -38.727219 17.935680 -24.241039
v -36.964317 20.280788 -25.192154
v 16.735296 20.280827 -42.640507
v 18.720589 17.935730 -42.907249
v 20.752308 15.374413 -43.010544
v 22.800468 12.606253 -42.918980
v 24.828968 9.651751 -42.604420
v 26.797407 6.543345 -42.045380
v 28.664038 3.324770 -41.230366
v 30.389410 0.048651 -40.160423
v 31.940155 -3.227468 -38.850128
v 33.292095 -6.446041 -37.326710
v 34.432060 -9.554445 -35.627369
v 35.358059 -12.508945 -33.795357
v 36.078049 -15.277102 -31.875734
v 36.607647 -17.838415 -29.911533
v 36.967445 -20.183506 -27.940983
v -11.503624 -20.183512 -43.690445
v -10.054317 -17.838408 -45.073143
v -8.471384 -15.277086 -46.350903
v -6.760624 -12.508925 -47.480686
v -4.934702 -9.554425 -48.418507
v -3.013669 -6.446027 -49.123234
v -1.024551 -3.227460 -49.561047
v 1.000130 0.048650 -49.709587
v 3.024810 3.324759 -49.561047
v 5.013928 6.543325 -49.123234
v 6.934962 9.651725 -48.418510
v 8.760883 12.606224 -47.480686
v 10.471646 15.374386 -46.350903
v 12.054578 17.935709 -45.073143
v 13.503883 20.280811 -43.690445
v 45.247231 23.170904 3.039189
v 44.578373 23.897842 5.960804
v 43.687885 24.569603 9.035578
v 42.552666 25.163584 12.233082
v 41.156570 25.656635 15.511822
v 39.493732 26.027153 18.820387
v 37.571079 26.257343 22.100269
v 35.409599 26.335459 25.290257
v 33.043663 26.257389 28.331709
v 30.518412 26.027237 31.173803
v 27.885595 25.656757 33.777676
v 25.198700 25.163733 36.118641
v 22.508446 24.569780 38.186405
v 19.859282 23.898033 39.983475
v 17.287291 23.171108 41.522442
v 12.058722 23.171108 43.221283
v 9.073391 23.898035 43.487976
v 5.873915 24.569788 43.591225
v 2.482092 25.163744 43.499619
v -1.067596 25.656782 43.185028
v -4.728069 26.027275 42.625961
v -8.441543 26.257442 41.810936
v -12.143312 26.335535 40.740997
v -15.766989 26.257442 39.430714
v -19.250296 26.027273 37.907322
v -22.540270 25.656776 36.208008
v -25.596916 25.163738 34.376034
v -28.394777 24.569775 32.456448
v -30.922501 23.898022 30.492290
v -33.180897 23.171093 28.521772
v -36.412277 23.171080 24.074123
v -37.588436 23.897995 21.317339
v -38.675316 24.569733 18.306387
v -39.636330 25.163679 15.052296
v -40.434055 25.656704 11.579165
v -41.033504 26.027189 7.925127
v -41.405914 26.257355 4.141590
v -41.532265 26.335443 0.290411
v -41.405914 26.257355 -3.560768
v -41.033504 26.027189 -7.344305
v -40.434055 25.656704 -10.998343
v -39.636333 25.163681 -14.471475
v -38.675316 24.569733 -17.725563
v -37.588436 23.897995 -20.736517
v -36.412277 23.171080 -23.493299
v -33.180897 23.171093 -27.940950
v -30.922497 23.898022 -29.911469
v -28.394777 24.569777 -31.875628
v -25.596914 25.163738 -33.795208
v -22.540266 25.656776 -35.627182
v -19.250290 26.027273 -37.326496
v -15.766985 26.257442 -38.849888
v -12.143309 26.335535 -40.160172
v -8.441540 26.257442 -41.230110
v -4.728065 26.027275 -42.045135
v -1.067593 25.656782 -42.604202
v 2.482094 25.163744 -42.918793
v 5.873917 24.569788 -43.010399
v 9.073393 23.898035 -42.907150
v 12.058723 23.171108 -42.640457
v 17.287289 23.171106 -40.941616
v 19.859282 23.898033 -39.402653
v 22.508446 24.569780 -37.605587
v 25.198700 25.163733 -35.537815
v 27.885595 25.656757 -33.196850
v 30.518412 26.027237 -30.592981
v 33.043663 26.257389 -27.750887
v 35.409599 26.335459 -24.709435
v 37.571079 26.257343 -21.519449
v 39.493729 26.027153 -18.239565
v 41.156567 25.656639 -14.931000
v 42.552658 25.163584 -11.652261
v 43.687885 24.569605 -8.454757
v 44.578365 23.897842 -5.379981
v 45.247227 23.170904 -2.458367
v 1.893245 49.965042 3.039184
v 2.842516 49.691902 5.960792
v 3.841551 49.195866 9.035556
v 4.880461 48.446129 12.233047
v 5.945767 47.417953 15.511776
v 7.020762 46.096390 18.820326
v 8.086439 44.479691 22.100199
v 9.122908 42.581367 25.290176
v 10.111116 40.430332 28.331619
v 11.034554 38.068798 31.173717
v 11.880589 35.548283 33.777592
v 12.641205 32.924606 36.118568
v 13.313055 30.252787 38.186348
v 13.896956 27.582914 39.983437
v 14.396994 24.957394 41.522419
v 44.354088 24.957174 0.290411
v 42.735928 27.582689 0.290411
v 40.846382 30.252562 0.290411
v 38.672207 32.924385 0.290411
v 36.210785 35.548077 0.290411
v 33.472927 38.068607 0.290411
v 30.484581 40.430168 0.290411
v 27.286619 42.581230 0.290411
v 23.932472 44.479580 0.290411
v 20.483799 46.096306 0.290411
v 17.004961 47.417896 0.290411
v 13.557477 48.446095 0.290411
v 10.195408 49.195847 0.290411
v 6.962379 49.691895 0.290411
v 3.890389 49.965046 0.290411
v -1.338124 49.965042 1.989231
v -3.823399 49.691898 3.794868
v -6.438960 49.195866 5.695162
v -9.158917 48.446129 7.671303
v -11.947976 47.417946 9.697650
v -14.762405 46.096382 11.742429
v -17.552443 44.479683 13.769485
v -20.266005 42.581360 15.740979
v -22.853216 40.430321 17.620678
v -25.270859 38.068790 19.377176
v -27.485847 35.548271 20.986443
v -29.477207 32.924591 22.433233
v -31.236168 30.252771 23.711178
v -32.764866 27.582901 24.821827
v -34.074005 24.957378 25.772961
v -1.338124 49.965042 -1.408409
v -3.823399 49.691898 -3.214046
v -6.438960 49.195866 -5.114340
v -9.158917 48.446129 -7.090481
v -11.947976 47.417946 -9.116828
v -14.762405 46.096382 -11.161607
v -17.552443 44.479683 -13.188663
v -20.266005 42.581360 -15.160157
v -22.853216 40.430321 -17.039856
v -25.270859 38.068790 -18.796354
v -27.485847 35.548271 -20.405621
v -29.477207 32.924591 -21.852411
v -31.236168 30.252771 -23.130356
v -32.764866 27.582901 -24.241005
v -34.074005 24.957378 -25.192139
v 1.893245 49.965042 -2.458362
v 2.842516 49.691902 -5.379970
v 3.841551 49.195866 -8.454734
v 4.880461 48.446129 -11.652225
v 5.945767 47.417953 -14.930954
v 7.020762 46.096390 -18.239504
v 8.086439 44.479691 -21.519377
v 9.122908 42.581367 -24.709354
v 10.111116 40.430332 -27.750797
v 11.034554 38.068798 -30.592896
v 11.880589 35.548283 -33.196766
v 12.641205 32.924606 -35.537743
v 13.313055 30.252787 -37.605522
v 13.896956 27.582914 -39.402611
v 14.396994 24.957394 -40.941593
v 4.912068 49.814285 -2.551769
v 8.114499 49.453098 -2.639895
v 5.985461 49.453098 -5.570200
v 11.474170 48.846523 -2.719950
v 9.310012 48.982224 -5.747053
v 7.099767 48.846535 -8.740673
v 14.952073 47.963795 -2.788944
v 12.783229 48.243916 -5.904303
v 10.532822 48.243927 -9.001661
v 8.240088 47.963829 -12.027010
v 18.496815 46.782387 -2.843921
v 16.358490 47.209053 -6.035483
v 14.100541 47.353905 -9.227571
v 11.762370 47.209080 -12.361377
v 9.387734 46.782444 -15.381249
v 22.046741 45.292149 -2.882253
v 19.976553 45.859306 -6.134457
v 17.748507 46.151012 -9.408255
v 15.399632 46.151028 -12.641143
v 12.974514 45.859356 -15.771761
v 10.521152 45.292233 -18.745573
v 25.534105 43.498543 -2.901955
v 23.568871 44.191338 -6.196123
v 21.410229 44.623272 -9.534592
v 19.090145 44.770107 -12.852738
v 16.651289 44.623310 -16.084591
v 14.143221 44.191410 -19.169189
v 11.617520 43.498642 -22.056152
v 28.890781 41.424004 -2.901958
v 27.062979 42.219494 -6.217078
v 25.011713 42.776047 -9.599643
v 22.761517 43.062725 -12.984797
v 20.350225 43.062748 -16.303600
v 17.826052 42.776108 -19.489698
v 15.242866 42.219589 -22.485802
v 12.654774 41.424137 -25.248541
v 32.054642 39.106956 -2.882262
v 30.389277 39.976124 -6.196135
v 28.478079 40.633724 -9.599653
v 26.336563 41.044250 -13.029722
v 23.995165 41.183895 -16.416462
v 21.497665 41.044292 -19.689789
v 18.897198 40.633808 -22.786409
v 16.250807 39.976242 -25.655773
v 13.613709 39.107109 -28.263643
v 34.975140 36.598263 -2.843936
v 33.487701 37.509010 -6.134484
v 31.740942 38.238586 -9.534623
v 29.740768 38.749344 -12.984828
v 27.508526 39.012543 -16.416481
v 25.080839 39.012562 -19.757860
v 22.506899 38.749405 -22.941256
v 19.843605 38.238689 -25.909678
v 17.149620 37.509148 -28.621613
v 14.479729 36.598442 -31.053061
v 37.617096 33.956100 -2.788965
v 36.313015 34.876549 -6.035521
v 34.744980 35.646683 -9.408305
v 32.909801 36.229153 -12.852795
v 30.819103 36.592674 -16.303656
v 28.500530 36.716316 -19.689833
v 25.996525 36.592716 -22.941282
v 23.360584 36.229233 -25.996000
v 20.651743 35.646801 -28.805733
v 17.928551 34.876705 -31.339247
v 15.243844 33.956287 -33.582714
v 39.962017 31.240139 -2.719974
v 38.837559 32.141544 -5.904349
v 37.452332 32.921795 -9.227638
v 35.795410 33.545830 -12.641222
v 33.869164 33.982159 -16.084677
v 31.691545 34.206829 -19.489784
v 29.296324 34.206848 -22.786482
v 26.730761 33.982216 -25.909729
v 24.051050 33.545929 -28.805763
v 21.316523 32.921932 -31.436420
v 18.583914 32.141716 -33.780777
v 15.902841 31.240337 -35.834206
v 42.007057 28.506424 -2.639921
v 41.051212 29.365187 -5.747107
v 39.843956 30.128763 -9.001739
v 38.368435 30.765743 -12.361478
v 36.619049 31.246332 -15.771873
v 34.604473 31.545753 -19.169310
v 32.348988 31.647505 -22.485926
v 29.891649 31.545790 -25.655884
v 27.283003 31.246407 -28.621700
v 24.580082 30.765850 -31.339312
v 21.840715 30.128906 -33.780807
v 19.118412 29.365358 -35.934696
v 16.458654 28.506626 -37.803913
v 43.762306 25.803616 -2.551797
v 42.959175 26.602201 -5.570259
v 41.918274 27.327642 -8.740759
v 40.618736 27.952854 -12.027124
v 39.048771 28.451042 -15.381386
v 37.208950 28.798388 -18.745722
v 35.114349 28.976915 -22.056309
v 32.794914 28.976931 -25.248697
v 30.293604 28.798439 -28.263790
v 27.662437 28.451126 -31.053183
v 24.957464 27.952971 -33.582809
v 22.233501 27.327789 -35.834270
v 19.539810 26.602373 -37.803944
v 16.917242 25.803812 -39.500507
v -0.494116 49.814285 -4.308318
v 0.411650 49.453102 -7.381213
v -3.033123 49.453102 -6.261921
v 1.373682 48.846539 -10.601160
v -2.174003 48.982235 -9.478377
v -5.704084 48.846535 -8.301416
v 2.382770 47.963829 -13.930137
v -1.250300 48.243942 -12.830169
v -4.891451 48.243938 -11.647067
v -8.477198 47.963825 -10.401461
v 3.425843 46.782436 -17.318350
v -0.270268 47.209087 -16.270950
v -4.003845 47.353924 -15.109951
v -7.706780 47.209087 -13.854645
v -11.312629 46.782440 -12.529453
v 4.486352 45.292233 -20.706362
v 0.753620 45.859360 -19.742500
v -3.048426 46.151047 -18.635183
v -6.848902 46.151043 -17.400314
v -10.575673 45.859356 -16.061329
v -14.162046 45.292225 -14.647030
v 5.545246 43.498646 -24.029119
v 1.805037 44.191418 -23.178038
v -2.037068 44.623329 -22.156708
v -5.909734 44.770145 -20.975565
v -9.737031 44.623325 -19.654797
v -13.445670 44.191414 -18.222700
v -16.971800 43.498642 -16.712763
v 6.582498 41.424145 -27.221510
v 2.864827 42.219604 -26.507603
v -0.986038 42.776127 -25.602011
v -4.900835 43.062782 -24.508034
v -8.802308 43.062782 -23.240349
v -12.612455 42.776123 -21.824299
v -16.260145 42.219597 -20.293417
v -19.687412 41.424129 -18.685753
v 7.578900 39.107113 -30.224434
v 3.912608 39.976254 -29.664625
v 0.085099 40.633831 -28.898722
v -3.838830 41.044323 -27.921976
v -7.783318 41.183952 -26.741756
v -11.668178 41.044323 -25.378023
v -15.416803 40.633827 -23.861763
v -18.963491 39.976242 -22.231600
v -22.258617 39.107105 -20.529474
v 8.517822 36.598442 -32.990162
v 4.928696 37.509155 -32.592354
v 1.155213 38.238708 -31.981794
v -2.744193 38.749439 -31.145695
v -6.697665 39.012611 -30.083153
v -10.625675 39.012611 -28.806845
v -14.448631 38.749435 -27.342627
v -18.094748 38.238697 -25.726995
v -21.506422 37.509148 -24.002920
v -24.643892 36.598431 -22.215086
v 9.386505 33.956295 -35.485840
v 5.895875 34.876717 -35.248821
v 2.203634 35.646824 -34.799778
v -1.639351 36.229267 -34.118832
v -5.567352 36.592762 -33.196838
v -9.504250 36.716381 -32.038143
v -13.370317 36.592758 -30.661459
v -17.090055 36.229259 -29.098511
v -20.599331 35.646812 -27.390526
v -23.850338 34.876705 -25.583532
v -26.813608 33.956280 -23.723513
v 10.176732 31.240345 -37.694695
v 6.800742 32.141727 -37.609283
v 3.212064 32.921951 -37.318802
v -0.546446 33.545963 -36.797836
v -4.416589 33.982265 -36.029953
v -8.327934 34.206913 -35.011154
v -12.203422 34.206909 -33.751911
v -15.966587 33.982262 -32.277069
v -19.548929 33.545952 -30.623449
v -22.895826 32.921944 -28.835693
v -25.969845 32.141716 -26.961294
v -28.751263 31.240330 -25.046007
v 10.884817 28.506636 -39.614929
v 7.634343 29.365377 -39.666027
v 4.165952 30.128933 -39.523582
v 0.514706 30.765890 -39.158485
v -3.269343 31.246454 -38.548592
v -7.123013 31.545853 -37.682484
v -10.974261 31.647579 -36.562286
v -14.748405 31.545849 -35.204800
v -18.375160 31.246449 -33.640331
v -21.794989 30.765881 -31.909506
v -24.963484 30.128922 -30.058691
v -27.853176 29.365362 -28.135231
v -30.452808 28.506620 -26.183287
v 11.511027 25.803822 -41.257061
v 8.392125 26.602388 -41.425980
v 5.055154 27.327810 -41.415752
v 1.528069 27.953001 -41.195351
v -2.147152 28.451166 -40.738747
v -5.915344 28.798492 -40.028599
v -9.711145 28.976999 -39.059544
v -13.464007 28.976995 -37.840141
v -17.104456 28.798483 -36.392971
v -20.570381 28.451160 -34.752571
v -23.812063 27.952991 -32.961697
v -26.795067 27.327799 -31.066813
v -29.500721 26.602373 -29.113634
v -31.924652 25.803802 -27.143703
v -3.835291 49.814285 0.290411
v -6.477895 49.453094 -1.520602
v -6.477895 49.453094 2.101424
v -9.242964 48.846527 -3.430567
v -9.271448 48.982220 0.290411
v -9.242964 48.846527 4.011389
v -12.097186 47.963814 -5.418976
v -12.173752 48.243923 -1.623844
v -12.173752 48.243923 2.204666
v -12.097186 47.963814 5.999798
v -14.997244 46.782425 -7.458013
v -15.143288 47.209068 -3.619169
v -15.192865 47.353901 0.290411
v -15.143288 47.209068 4.199992
v -14.997244 46.782425 8.038836
v -17.891722 45.292213 -9.513568
v -18.128531 45.859337 -5.665712
v -18.250320 46.151016 -1.707604
v -18.250320 46.151016 2.288426
v -18.128531 45.859337 6.246534
v -17.891722 45.292213 10.094390
v -20.724634 43.498627 -11.547421
v -21.071009 44.191383 -7.727304
v -21.286959 44.623287 -3.757670
v -21.360363 44.770103 0.290412
v -21.286959 44.623287 4.338493
v -21.071009 44.191383 8.308126
v -20.724634 43.498627 12.128245
v -23.440250 41.424114 -13.520407
v -23.910120 42.219566 -9.764112
v -24.238850 42.776077 -5.821914
v -24.408171 43.062729 -1.760699
v -24.408171 43.062729 2.341522
v -24.238850 42.776077 6.402737
v -23.910120 42.219566 10.344934
v -23.440250 41.424114 14.101229
v -25.988297 39.107082 -15.395994
v -26.588837 39.976208 -11.736181
v -27.043200 40.633778 -7.859361
v -27.326841 41.044266 -3.825689
v -27.423313 41.183887 0.290412
v -27.326841 41.044266 4.406513
v -27.043200 40.633778 8.440185
v -26.588837 39.976208 12.317004
v -25.988297 39.107082 15.976817
v -28.328514 36.598415 -17.143618
v -29.059288 37.509113 -13.607255
v -29.644686 38.238647 -9.829818
v -30.054506 38.749371 -5.862931
v -30.265680 39.012539 -1.774651
v -30.265680 39.012539 2.355472
v -30.054506 38.749371 6.443752
v -29.644686 38.238647 10.410640
v -29.059288 37.509113 14.188077
v -28.328514 36.598415 17.724440
v -30.433605 33.956261 -18.740988
v -31.286861 34.876663 -15.347986
v -32.000767 35.646755 -11.697726
v -32.540710 36.229191 -7.832442
v -32.877674 36.592678 -3.811818
v -32.992275 36.716301 0.290411
v -32.877674 36.592678 4.392641
v -32.540710 36.229191 8.413264
v -32.000767 35.646755 12.278548
v -31.286861 34.876663 15.928808
v -30.433605 33.956261 19.321810
v -32.290154 31.240313 -20.175108
v -33.252167 32.141682 -16.937984
v -34.084873 32.921890 -13.435214
v -34.750851 33.545883 -9.699704
v -35.216503 33.982185 -5.781730
v -35.456257 34.206825 -1.747035
v -35.456257 34.206825 2.327858
v -35.216503 33.982185 6.362554
v -34.750851 33.545883 10.280528
v -34.084869 32.921890 14.016036
v -33.252167 32.141682 17.518806
v -32.290154 31.240313 20.755932
v -33.897594 28.506605 -21.441916
v -34.950638 29.365330 -18.366343
v -35.886967 30.128870 -15.023720
v -36.668037 30.765812 -11.438392
v -37.257343 31.246368 -7.651119
v -37.624485 31.545763 -3.718460
v -37.749237 31.647493 0.290411
v -37.624485 31.545763 4.299282
v -37.257343 31.246368 8.231941
v -36.668037 30.765812 12.019214
v -35.886967 30.128870 15.604542
v -34.950638 29.365330 18.947165
v -33.897594 28.506605 22.022738
v -35.265842 25.803787 -22.544922
v -36.390289 26.602345 -19.630888
v -37.411739 27.327751 -16.454105
v -38.292061 27.952929 -13.031571
v -38.993511 28.451084 -9.395166
v -39.482571 28.798399 -5.591999
v -39.733925 28.976908 -1.682566
v -39.733925 28.976908 2.263391
v -39.482571 28.798399 6.172823
v -38.993511 28.451084 9.975991
v -38.292061 27.952929 13.612396
v -37.411739 27.327751 17.034927
v -36.390289 26.602345 20.211710
v -35.265842 25.803787 23.125744
v -0.494116 49.814285 4.889140
v -3.033123 49.453102 6.842743
v 0.411650 49.453102 7.962035
v -5.704084 48.846535 8.882238
v -2.174003 48.982235 10.059199
v 1.373682 48.846539 11.181982
v -8.477199 47.963825 10.982284
v -4.891451 48.243938 12.227889
v -1.250299 48.243938 13.410991
v 2.382770 47.963829 14.510961
v -11.312631 46.782440 13.110275
v -7.706782 47.209087 14.435467
v -4.003845 47.353924 15.690771
v -0.270268 47.209087 16.851774
v 3.425843 46.782444 17.899174
v -14.162046 45.292225 15.227852
v -10.575673 45.859356 16.642151
v -6.848903 46.151047 17.981136
v -3.048425 46.151047 19.216005
v 0.753621 45.859360 20.323322
v 4.486352 45.292229 21.287184
v -16.971800 43.498642 17.293587
v -13.445668 44.191410 18.803522
v -9.737031 44.623329 20.235620
v -5.909733 44.770142 21.556387
v -2.037068 44.623329 22.737530
v 1.805038 44.191414 23.758858
v 5.545247 43.498646 24.609941
v -19.687412 41.424129 19.266579
v -16.260147 42.219597 20.874241
v -12.612456 42.776123 22.405123
v -8.802309 43.062778 23.821175
v -4.900836 43.062782 25.088861
v -0.986039 42.776127 26.182838
v 2.864826 42.219601 27.088425
v 6.582497 41.424141 27.802332
v -22.258621 39.107105 21.110296
v -18.963493 39.976242 22.812422
v -15.416807 40.633827 24.442589
v -11.668180 41.044323 25.958851
v -7.783319 41.183952 27.322580
v -3.838831 41.044323 28.502800
v 0.085099 40.633831 29.479551
v 3.912609 39.976246 30.245447
v 7.578900 39.107113 30.805256
v -24.643892 36.598431 22.795910
v -21.506424 37.509148 24.583746
v -18.094749 38.238697 26.307823
v -14.448634 38.749432 27.923454
v -10.625678 39.012608 29.387676
v -6.697666 39.012608 30.663984
v -2.744193 38.749439 31.726524
v 1.155213 38.238705 32.562622
v 4.928696 37.509155 33.173183
v 8.517822 36.598442 33.570988
v -26.813612 33.956280 24.304335
v -23.850338 34.876705 26.164354
v -20.599331 35.646812 27.971348
v -17.090059 36.229259 29.679337
v -13.370320 36.592754 31.242287
v -9.504251 36.716377 32.618973
v -5.567353 36.592758 33.777672
v -1.639351 36.229263 34.699661
v 2.203635 35.646820 35.380608
v 5.895875 34.876713 35.829651
v 9.386505 33.956291 36.066669
v -28.751261 31.240330 25.626825
v -25.969849 32.141716 27.542116
v -22.895824 32.921944 29.416510
v -19.548929 33.545956 31.204268
v -15.966585 33.982262 32.857891
v -12.203420 34.206909 34.332737
v -8.327932 34.206909 35.591976
v -4.416587 33.982269 36.610779
v -0.546444 33.545963 37.378658
v 3.212065 32.921951 37.899628
v 6.800744 32.141731 38.190113
v 10.176731 31.240343 38.275517
v -30.452808 28.506620 26.764107
v -27.853176 29.365362 28.716053
v -24.963486 30.128922 30.639513
v -21.794991 30.765881 32.490330
v -18.375162 31.246449 34.221157
v -14.748407 31.545849 35.785625
v -10.974261 31.647579 37.143112
v -7.123013 31.545853 38.263309
v -3.269343 31.246452 39.129421
v 0.514706 30.765884 39.739315
v 4.165952 30.128927 40.104408
v 7.634343 29.365374 40.246853
v 10.884815 28.506632 40.195751
v -31.924652 25.803802 27.724525
v -29.500721 26.602373 29.694456
v -26.795067 27.327799 31.647631
v -23.812063 27.952991 33.542522
v -20.570383 28.451159 35.333397
v -17.104456 28.798483 36.973801
v -13.464005 28.976995 38.420971
v -9.711144 28.976999 39.640369
v -5.915343 28.798489 40.609428
v -2.147151 28.451164 41.319572
v 1.528069 27.952997 41.776180
v 5.055154 27.327810 41.996578
v 8.392125 26.602386 42.006805
v 11.511027 25.803818 41.837887
v 4.912068 49.814285 3.132591
v 5.985461 49.453098 6.151022
v 8.114499 49.453091 3.220717
v 7.099766 48.846535 9.321494
v 9.310011 48.982224 6.327875
v 11.474170 48.846523 3.300772
v 8.240088 47.963829 12.607832
v 10.532822 48.243927 9.582481
v 12.783229 48.243916 6.485125
v 14.952073 47.963795 3.369766
v 9.387734 46.782440 15.962071
v 11.762370 47.209087 12.942200
v 14.100541 47.353905 9.808393
v 16.358492 47.209057 6.616305
v 18.496817 46.782387 3.424743
v 10.521152 45.292233 19.326395
v 12.974514 45.859356 16.352579
v 15.399632 46.151024 13.221962
v 17.748505 46.151009 9.989075
v 19.976553 45.859306 6.715278
v 22.046745 45.292149 3.463075
v 11.617520 43.498642 22.636974
v 14.143221 44.191410 19.750010
v 16.651289 44.623310 16.665413
v 19.090145 44.770107 13.433558
v 21.410229 44.623272 10.115412
v 23.568871 44.191338 6.776944
v 25.534105 43.498543 3.482777
v 12.654775 41.424137 25.829365
v 15.242868 42.219593 23.066626
v 17.826052 42.776104 20.070518
v 20.350227 43.062744 16.884422
v 22.761518 43.062725 13.565620
v 25.011717 42.776047 10.180466
v 27.062983 42.219498 6.797901
v 28.890781 41.424004 3.482780
v 13.613709 39.107109 28.844465
v 16.250807 39.976242 26.236595
v 18.897200 40.633812 23.367229
v 21.497665 41.044292 20.270607
v 23.995165 41.183895 16.997282
v 26.336563 41.044250 13.610541
v 28.478079 40.633724 10.180475
v 30.389277 39.976124 6.776957
v 32.054642 39.106956 3.463084
v 14.479729 36.598438 31.633883
v 17.149620 37.509148 29.202436
v 19.843605 38.238686 26.490499
v 22.506899 38.749401 23.522081
v 25.080839 39.012558 20.338686
v 27.508530 39.012539 16.997307
v 29.740770 38.749344 13.565651
v 31.740946 38.238583 10.115446
v 33.487705 37.509010 6.715306
v 34.975143 36.598263 3.424758
v 15.243846 33.956287 34.163540
v 17.928555 34.876705 31.920069
v 20.651749 35.646797 29.386559
v 23.360588 36.229229 26.576822
v 25.996531 36.592709 23.522106
v 28.500536 36.716309 20.270655
v 30.819111 36.592667 16.884480
v 32.909813 36.229149 13.433619
v 34.744987 35.646675 9.989127
v 36.313019 34.876545 6.616343
v 37.617096 33.956097 3.369786
v 15.902843 31.240337 36.415028
v 18.583918 32.141716 34.361595
v 21.316523 32.921932 32.017239
v 24.051050 33.545929 29.386581
v 26.730762 33.982220 26.490551
v 29.296324 34.206844 23.367304
v 31.691545 34.206829 20.070604
v 33.869164 33.982159 16.665499
v 35.795410 33.545830 13.222042
v 37.452332 32.921799 9.808460
v 38.837551 32.141548 6.485171
v 39.962013 31.240143 3.300796
v 16.458656 28.506630 38.384739
v 19.118416 29.365366 36.515522
v 21.840717 30.128910 34.361629
v 24.580086 30.765854 31.920128
v 27.283007 31.246410 29.202522
v 29.891655 31.545795 26.236700
v 32.348988 31.647505 23.066740
v 34.604473 31.545753 19.750126
v 36.619053 31.246332 16.352690
v 38.368435 30.765747 12.942295
v 39.843952 30.128769 9.582559
v 41.051212 29.365192 6.327927
v 42.007057 28.506424 3.220743
v 16.917244 25.803814 40.081337
v 19.539814 26.602377 38.384773
v 22.233501 27.327785 36.415096
v 24.957464 27.952967 34.163635
v 27.662436 28.451122 31.634008
v 30.293602 28.798435 28.844616
v 32.794914 28.976931 25.829523
v 35.114346 28.976913 22.637135
v 37.208946 28.798382 19.326544
v 39.048771 28.451038 15.962208
v 40.618736 27.952854 12.607946
v 41.918278 27.327642 9.321582
v 42.959175 26.602201 6.151081
v 43.762306 25.803616 3.132619
v 46.180061 20.968143 -4.308328
v 46.992500 18.535631 -6.261940
v 45.451908 21.616793 -7.381235
v 47.644478 15.875356 -8.301445
v 46.187115 19.093512 -9.478411
v 44.479122 22.206034 -10.601195
v 48.095142 13.000204 -10.401501
v 46.742062 16.332741 -11.647115
v 45.113644 19.589558 -12.830219
v 43.238293 22.713867 -13.930187
v 48.306526 9.935740 -12.529505
v 47.075527 13.351792 -13.854709
v 45.549026 16.728645 -15.110020
v 43.749733 20.003359 -16.271027
v 41.715115 23.118521 -17.318420
v 48.247940 6.720655 -14.647096
v 47.151302 10.182112 -16.061407
v 45.745502 13.645965 -17.400404
v 44.045834 17.045294 -18.635279
v 42.084560 20.315573 -19.742594
v 39.907913 23.400658 -20.706448
v 47.900257 3.405368 -16.712839
v 46.942944 6.869131 -18.222794
v 45.670681 10.379478 -19.654905
v 44.090340 13.868457 -20.975683
v 42.227066 17.266695 -22.156826
v 40.122448 20.510092 -23.178150
v 37.830086 23.545677 -24.029221
v 47.259201 0.048648 -18.685839
v 46.437962 3.469907 -20.293526
v 45.304420 6.981471 -21.824427
v 43.856831 10.517653 -23.240492
v 42.111992 14.007319 -24.508183
v 40.104794 17.380703 -25.602156
v 37.884804 20.576204 -26.507736
v 35.510658 23.545700 -27.221624
v 46.336643 -3.287364 -20.529568
v 45.640396 0.048647 -22.231720
v 44.642418 3.515062 -23.861910
v 43.333115 7.051601 -25.378189
v 41.720596 10.588857 -26.741932
v 39.831631 14.054556 -27.922157
v 37.709579 17.380722 -28.898893
v 35.409645 20.510132 -29.664768
v 32.992588 23.400724 -30.224560
v 45.159523 -6.542773 -22.215174
v 44.570972 -3.329185 -24.003036
v 43.697746 0.048648 -25.727142
v 42.523949 3.538324 -27.342800
v 41.049625 7.075462 -28.807035
v 39.292923 10.588869 -30.083353
v 37.289436 14.007351 -31.145893
v 35.088692 17.266747 -31.981970
v 32.748550 20.315649 -32.592510
v 30.328815 23.118622 -32.990284
v 43.766605 -9.665072 -23.723595
v 43.264641 -6.602958 -25.583647
v 42.499550 -3.350697 -27.390671
v 41.451092 0.048649 -29.098690
v 40.112671 3.538329 -30.661665
v 38.494247 7.051620 -32.038361
v 36.622990 10.517688 -33.197056
v 34.541161 13.868517 -34.119038
v 32.301510 17.045378 -34.799965
v 29.961428 20.003471 -35.248978
v 27.577066 22.713999 -35.485958
v 42.203892 -12.612802 -25.046078
v 41.766239 -9.721870 -26.961405
v 41.089348 -6.623393 -28.835840
v 40.150692 -3.350699 -30.623632
v 38.938839 0.048651 -32.277271
v 37.456799 3.515078 -33.752140
v 35.723583 6.981505 -35.011391
v 33.773396 10.379538 -36.030186
v 31.652319 13.646052 -36.798058
v 29.413271 16.728762 -37.318993
v 27.110455 19.589693 -37.609436
v 24.794390 22.206194 -37.694801
v 40.519707 -15.357287 -26.183353
v 40.125210 -12.648023 -28.135336
v 39.515846 -9.721877 -30.058834
v 38.668552 -6.602968 -31.909685
v 37.568974 -3.329190 -33.640545
v 36.214798 0.048655 -35.205032
v 34.617905 3.469934 -36.562538
v 32.804535 6.869182 -37.682735
v 30.813282 10.182193 -38.548836
v 28.691118 13.351902 -39.158703
v 26.488470 16.332876 -39.523766
v 24.254364 19.093668 -39.666157
v 22.032587 21.616972 -39.615017
v 38.760429 -17.882496 -27.143751
v 38.390682 -15.357301 -29.113720
v 37.829517 -12.612825 -31.066936
v 37.054665 -9.665099 -32.961864
v 36.050499 -6.542797 -34.752777
v 34.811119 -3.287374 -36.393204
v 33.342693 0.048656 -37.840397
v 31.664324 3.405401 -39.059803
v 29.807076 6.720717 -40.028854
v 27.811180 9.935834 -40.738979
v 25.721952 13.000330 -41.195557
v 23.585358 15.875507 -41.415916
v 21.444138 18.535805 -41.426102
v 19.335024 20.968332 -41.257130
v 10.587565 20.968323 -44.099319
v 8.980623 18.535780 -45.475700
v 7.440026 21.616959 -44.356377
v 7.242410 15.875478 -46.726028
v 5.672683 19.093645 -45.703667
v 4.077041 22.206186 -44.426208
v 5.384401 13.000295 -47.803585
v 3.781612 16.332848 -46.901627
v 2.153192 19.589676 -45.718483
v 0.527534 22.713999 -44.274807
v 3.425875 9.935802 -48.662220
v 1.785119 13.351868 -47.900955
v 0.119520 16.728739 -46.837070
v -1.540686 20.003466 -45.484577
v -3.165556 23.118639 -43.873177
v 1.393831 6.720688 -49.260864
v -0.290151 10.182161 -48.654938
v -1.998039 13.646026 -47.731686
v -3.697710 17.045364 -46.496784
v -5.356905 20.315660 -44.973663
v -6.946208 23.400753 -43.201366
v -0.678234 3.405378 -49.568539
v -2.410120 6.869153 -49.124672
v -4.165299 10.379512 -48.357216
v -5.909795 13.868504 -47.262344
v -7.608919 17.266754 -45.855240
v -9.230621 20.510157 -44.169212
v -10.748416 23.545746 -42.252010
v -2.752744 0.048640 -49.568550
v -4.535531 3.469908 -49.284294
v -6.341796 6.981480 -48.679295
v -8.135891 10.517673 -47.740124
v -9.880727 14.007349 -46.472408
v -11.541421 17.380743 -44.901493
v -13.088689 20.576248 -43.069969
v -14.501289 23.545753 -41.032616
v -4.791295 -3.287385 -49.260876
v -6.625298 0.048632 -49.124691
v -8.484098 3.515055 -48.679306
v -10.330770 7.051602 -47.902626
v -12.126064 10.588865 -46.790440
v -13.832250 14.054572 -45.358627
v -15.416931 17.380745 -43.642246
v -16.856043 20.510160 -41.691528
v -18.135342 23.400757 -39.565742
v -6.758130 -6.542803 -48.662243
v -8.640368 -3.329211 -48.654972
v -10.549937 0.048628 -48.357258
v -12.449248 3.538310 -47.740170
v -14.297411 7.075455 -46.790466
v -16.054115 10.588868 -45.514133
v -17.683760 14.007357 -43.937031
v -19.158987 17.266760 -42.102352
v -20.462784 20.315666 -40.065399
v -21.588820 23.118641 -37.887001
v -8.623128 -9.665103 -47.803619
v -10.547262 -6.602987 -47.901009
v -12.502279 -3.350723 -47.731766
v -14.450693 0.048627 -47.262421
v -16.350769 3.538312 -46.472485
v -18.160210 7.051608 -45.358685
v -19.840446 10.517682 -43.937061
v -21.360620 13.868515 -42.242020
v -22.700308 17.045382 -40.322399
v -23.850464 20.003477 -38.235588
v -24.812645 22.714005 -36.041145
v -10.363759 -12.612833 -46.726067
v -12.320587 -9.721900 -46.901695
v -14.312457 -6.623421 -46.837166
v -16.302811 -3.350725 -46.496899
v -18.250008 0.048628 -45.855362
v -20.110662 3.515058 -44.901604
v -21.843874 6.981489 -43.642345
v -23.415445 10.379525 -42.102425
v -24.801180 13.646044 -40.322437
v -25.988520 16.728756 -38.353954
v -26.976353 19.589689 -36.253593
v -27.773235 22.206188 -34.077259
v -11.965777 -15.357316 -45.475746
v -13.944133 -12.648050 -45.703747
v -15.961796 -9.721907 -45.718601
v -17.983889 -6.602996 -45.484718
v -19.969824 -3.329217 -44.973820
v -21.876211 0.048631 -44.169384
v -23.660740 3.469912 -43.070126
v -25.286472 6.869164 -41.691673
v -26.725510 10.182176 -40.065510
v -27.961311 13.351886 -38.235664
v -28.989161 16.332865 -36.253632
v -29.814964 19.093660 -34.172871
v -30.452885 21.616962 -32.044029
v -13.422790 -17.882519 -44.099365
v -15.410599 -15.357325 -44.356468
v -17.441626 -12.612846 -44.426334
v -19.483259 -9.665120 -44.274971
v -21.496820 -6.542818 -43.873375
v -23.439953 -3.287395 -43.201576
v -25.270081 0.048636 -42.252224
v -26.948452 3.405382 -41.032814
v -28.443993 6.720699 -39.565918
v -29.736126 9.935818 -37.887154
v -30.815962 13.000314 -36.041267
v -31.685783 15.875491 -34.077335
v -32.357140 18.535791 -32.044064
v -32.848183 20.968321 -29.985962
v -38.254368 20.968285 -22.544939
v -40.059971 18.535744 -21.441950
v -39.471474 21.616911 -19.630907
v -41.786236 15.875435 -20.175154
v -41.298981 19.093599 -18.366377
v -40.577106 22.206125 -16.454124
v -43.385223 13.000253 -18.741041
v -43.022682 16.332792 -16.938025
v -42.400646 19.589611 -15.023749
v -41.529972 22.713928 -13.031590
v -44.807049 9.935764 -17.143681
v -44.590057 13.351817 -15.348039
v -44.092918 16.728672 -13.435253
v -43.319656 20.003389 -11.438418
v -42.289234 23.118555 -9.395182
v -46.004330 6.720659 -15.396058
v -45.948418 10.182117 -13.607306
v -45.598114 13.645967 -11.697764
v -44.948872 17.045292 -9.699735
v -44.013023 20.315577 -7.651138
v -42.818592 23.400665 -5.592009
v -46.937248 3.405365 -13.520465
v -47.050266 6.869124 -11.736234
v -46.862740 10.379468 -9.829859
v -46.360531 13.868443 -7.832472
v -45.547356 17.266678 -5.781751
v -44.444992 20.510071 -3.718471
v -43.090668 23.545658 -1.682571
v -47.578308 0.048649 -11.547476
v -47.858860 3.469901 -9.764157
v -47.841625 6.981456 -7.859399
v -47.502827 10.517630 -5.862954
v -46.836342 14.007290 -3.811833
v -45.855503 17.380671 -1.747042
v -44.591766 20.576162 0.290410
v -43.090664 23.545664 2.263391
v -47.915638 -3.287350 -9.513610
v -48.352837 0.048653 -7.727338
v -48.503639 3.515057 -5.821939
v -48.335621 7.051584 -3.825704
v -47.832649 10.588828 -1.774654
v -46.998161 14.054516 0.290414
v -45.855499 17.380672 2.327865
v -44.444988 20.510078 4.299291
v -42.818596 23.400671 6.172829
v -47.954086 -6.542737 -7.458043
v -48.528797 -3.329158 -5.665731
v -48.835732 0.048664 -3.757680
v -48.835751 3.538325 -1.760698
v -48.503654 7.075449 0.290423
v -47.832645 10.588840 2.355492
v -46.836338 14.007309 4.392664
v -45.547344 17.266699 6.362577
v -44.013004 20.315592 8.231961
v -42.289227 23.118565 9.976004
v -47.713806 -9.665005 -5.418993
v -48.401005 -6.602899 -3.619176
v -48.844154 -3.350650 -1.707599
v -48.999870 0.048680 0.290429
v -48.835751 3.538341 2.341550
v -48.335617 7.051613 4.406549
v -47.502815 10.517663 6.443793
v -46.360519 13.868480 8.413305
v -44.948864 17.045330 10.280565
v -43.319637 20.003416 12.019242
v -41.529964 22.713943 13.612411
v -47.226875 -12.612700 -3.430572
v -47.998589 -9.721775 -1.623836
v -48.552719 -6.623309 0.290433
v -48.844154 -3.350630 2.288462
v -48.835724 0.048700 4.338542
v -48.503632 3.515105 6.402795
v -47.841610 6.981509 8.440248
v -46.862720 10.379520 10.410703
v -45.598095 13.646018 12.278606
v -44.092899 16.728718 14.016087
v -42.400627 19.589645 15.604579
v -40.577099 22.206141 17.034946
v -46.532818 -15.357152 -1.520597
v -47.360989 -12.647893 0.290431
v -47.998592 -9.721756 2.204702
v -48.401005 -6.602860 4.200045
v -48.528797 -3.329102 6.246601
v -48.352833 0.048722 8.308206
v -47.858849 3.469977 10.345021
v -47.050255 6.869202 12.317093
v -45.948399 10.182191 14.188159
v -44.590027 13.351880 15.928880
v -43.022655 16.332844 17.518866
v -41.298958 19.093630 18.947206
v -39.471466 21.616926 20.211731
v -45.674061 -17.882328 0.290423
v -46.532825 -15.357134 2.101454
v -47.226887 -12.612663 4.011437
v -47.713810 -9.664948 5.999866
v -47.954086 -6.542662 8.038920
v -47.915630 -3.287262 10.094490
v -47.578293 0.048744 12.128352
v -46.937225 3.405463 14.101339
v -46.004299 6.720754 15.976928
v -44.807014 9.935849 17.724539
v -43.385193 13.000326 19.321894
v -41.786213 15.875490 20.755997
v -40.059952 18.535780 22.022785
v -38.254353 20.968307 23.125767
v -32.848190 20.968317 30.566782
v -32.357143 18.535788 32.624886
v -30.452890 21.616957 32.624844
v -31.685791 15.875490 34.658157
v -29.814972 19.093653 34.753689
v -27.773241 22.206184 34.658077
v -30.815971 13.000309 36.622078
v -28.989176 16.332853 36.834446
v -26.976374 19.589680 36.834408
v -24.812660 22.713993 36.621964
v -29.736141 9.935813 38.467972
v -27.961329 13.351872 38.816483
v -25.988544 16.728739 38.934772
v -23.850487 20.003458 38.816410
v -21.588835 23.118631 38.467823
v -28.444014 6.720695 40.146740
v -26.725536 10.182163 40.646324
v -24.801205 13.646023 40.903244
v -22.700340 17.045361 40.903214
v -20.462811 20.315651 40.646217
v -18.135363 23.400747 40.146561
v -26.948467 3.405377 41.613628
v -25.286495 6.869149 42.272484
v -23.415478 10.379505 42.683235
v -21.360661 13.868491 42.822838
v -19.159023 17.266739 42.683167
v -16.856079 20.510145 42.272354
v -14.501308 23.545742 41.613438
v -25.270100 0.048631 42.833042
v -23.660767 3.469898 43.650940
v -21.843910 6.981468 44.223156
v -19.840490 10.517656 44.517876
v -17.683804 14.007332 44.517841
v -15.416975 17.380724 44.223064
v -13.088724 20.576235 43.650791
v -10.748437 23.545742 42.832836
v -23.439966 -3.287400 43.782394
v -21.876232 0.048618 44.750195
v -20.110695 3.515038 45.482414
v -18.160248 7.051584 45.939499
v -16.054161 10.588845 46.094948
v -13.832294 14.054550 45.939445
v -11.541459 17.380722 45.482307
v -9.230652 20.510145 44.750034
v -6.946227 23.400747 43.782192
v -21.496834 -6.542822 44.454193
v -19.969851 -3.329228 45.554638
v -18.250040 0.048611 46.436172
v -16.350811 3.538290 47.053295
v -14.297458 7.075432 47.371281
v -12.126114 10.588845 47.371262
v -9.880773 14.007330 47.053230
v -7.608958 17.266739 46.436062
v -5.356933 20.315649 45.554489
v -3.165573 23.118631 44.454006
v -19.483271 -9.665123 44.855793
v -17.983908 -6.603004 46.065533
v -16.302839 -3.350739 47.077713
v -14.450729 0.048609 47.843239
v -12.449287 3.538290 48.320980
v -10.330813 7.051583 48.483452
v -8.135934 10.517653 48.320950
v -5.909834 13.868488 47.843174
v -3.697742 17.045351 47.077610
v -1.540709 20.003454 46.065407
v 0.527520 22.713995 44.855629
v -17.441639 -12.612849 45.007160
v -15.961813 -9.721911 46.299423
v -14.312479 -6.623430 47.417976
v -12.502309 -3.350734 48.312580
v -10.549972 0.048615 48.938076
v -8.484136 3.515041 49.260128
v -6.341834 6.981468 49.260113
v -4.165335 10.379501 48.938038
v -1.998070 13.646017 48.312515
v 0.119495 16.728731 47.417892
v 2.153173 19.589672 46.299313
v 4.077030 22.206186 45.007038
v -15.410606 -15.357325 44.937290
v -13.944145 -12.648053 46.284573
v -12.320604 -9.721905 47.482513
v -10.547283 -6.602993 48.481831
v -8.640392 -3.329218 49.235794
v -6.625325 0.048624 49.705517
v -4.535558 3.469899 49.865116
v -2.410147 6.869145 49.705502
v -0.290175 10.182154 49.235764
v 1.785098 13.351864 48.481781
v 3.781596 16.332846 47.482449
v 5.672671 19.093647 46.284496
v 7.440019 21.616961 44.937202
v -13.422793 -17.882521 44.680191
v -11.965782 -15.357317 46.056568
v -10.363767 -12.612836 47.306889
v -8.623138 -9.665108 48.384445
v -6.758142 -6.542807 49.243065
v -4.791309 -3.287389 49.841702
v -2.752759 0.048635 50.149372
v -0.678248 3.405374 50.149372
v 1.393818 6.720685 49.841690
v 3.425863 9.935801 49.243046
v 5.384392 13.000295 48.384418
v 7.242402 15.875477 47.306850
v 8.980618 18.535780 46.056530
v 10.587563 20.968321 44.680145
v 19.335028 20.968332 41.837963
v 21.444138 18.535797 42.006927
v 22.032579 21.616962 40.195847
v 23.585354 15.875493 41.996746
v 24.254360 19.093653 40.246998
v 24.794390 22.206181 38.275631
v 25.721952 13.000313 41.776390
v 26.488464 16.332850 40.104599
v 27.110451 19.589670 38.190273
v 27.577063 22.713984 36.066792
v 27.811180 9.935810 41.319813
v 28.691109 13.351864 39.739540
v 29.413265 16.728724 37.899841
v 29.961418 20.003439 35.829826
v 30.328814 23.118607 33.571125
v 29.807070 6.720688 40.609688
v 30.813276 10.182149 39.129677
v 31.652308 13.646004 37.378906
v 32.301502 17.045334 35.380825
v 32.748543 20.315615 33.173363
v 32.992584 23.400703 30.805399
v 31.664310 3.405368 39.640640
v 32.804523 6.869131 38.263580
v 33.773380 10.379478 36.611042
v 34.541145 13.868456 34.699905
v 35.088684 17.266693 32.562840
v 35.409645 20.510090 30.245625
v 35.510662 23.545677 27.802467
v 33.342682 0.048620 38.421230
v 34.617893 3.469875 37.143383
v 35.723568 6.981434 35.592247
v 36.622978 10.517613 33.777931
v 37.289421 14.007277 31.726759
v 37.709579 17.380659 29.479755
v 37.884800 20.576159 27.088594
v 37.830078 23.545654 24.610062
v 34.811108 -3.287411 36.974041
v 36.214779 0.048593 35.785889
v 37.456764 3.515001 34.333000
v 38.494221 7.051533 32.619236
v 39.292900 10.588782 30.664234
v 39.831623 14.054476 28.503036
v 40.104790 17.380636 26.183035
v 40.122448 20.510046 23.759018
v 39.907913 23.400637 21.287294
v 36.050480 -6.542833 35.333603
v 37.568951 -3.329254 34.221390
v 38.938812 0.048569 32.858139
v 40.112648 3.538234 31.242535
v 41.049606 7.075361 29.387917
v 41.720585 10.588759 27.322817
v 42.111988 14.007232 25.089067
v 42.227066 17.266624 22.737705
v 42.084564 20.315523 20.323460
v 41.715122 23.118500 17.899267
v 37.054638 -9.665133 33.542694
v 38.668522 -6.603029 32.490524
v 40.150658 -3.350780 31.204489
v 41.451065 0.048553 29.679560
v 42.523918 3.538218 27.923685
v 43.333096 7.051494 25.959074
v 43.856815 10.517550 23.821381
v 44.090336 13.868369 21.556570
v 44.045834 17.045223 19.216156
v 43.749737 20.003315 16.851889
v 43.238300 22.713842 14.511030
v 37.829498 -12.612856 31.647764
v 39.515812 -9.721932 30.639675
v 41.089310 -6.623469 29.416695
v 42.499516 -3.350792 27.971544
v 43.697716 0.048540 26.308025
v 44.642391 3.514948 24.442799
v 45.304398 6.981358 22.405321
v 45.670677 10.379375 20.235802
v 45.745499 13.645877 17.981295
v 45.549034 16.728579 15.690901
v 45.113651 19.589510 13.411083
v 44.479134 22.206013 11.182037
v 38.390667 -15.357330 29.694553
v 40.125172 -12.648074 28.716173
v 41.766197 -9.721941 27.542257
v 43.264603 -6.603048 26.164516
v 44.570930 -3.329289 24.583920
v 45.640366 0.048536 22.812605
v 46.437939 3.469793 20.874420
v 46.942928 6.869021 18.803690
v 47.151299 10.182014 16.642305
v 47.075527 13.351708 14.435596
v 46.742065 16.332676 12.227989
v 46.187119 19.093466 10.059270
v 45.451920 21.616774 7.962076
v 38.760418 -17.882521 27.724581
v 40.519676 -15.357330 26.764189
v 42.203854 -12.612864 25.626930
v 43.766560 -9.665153 24.304457
v 45.159477 -6.542870 22.796045
v 46.336613 -3.287471 21.110449
v 47.259174 0.048535 19.266729
v 47.900234 3.405254 17.293734
v 48.247929 6.720547 15.227991
v 48.306526 9.935646 13.110397
v 48.095150 13.000126 10.982384
v 47.644493 15.875297 8.882315
v 46.992512 18.535591 6.842794
v 46.180069 20.968124 4.889166
v 15.423053 17.979818 -44.099365
v 17.410868 15.454620 -44.356468
v 13.966044 15.454613 -45.475746
v 19.441900 12.710140 -44.426338
v 15.944405 12.745343 -45.703743
v 12.364028 12.710127 -46.726063
v 21.483532 9.762414 -44.274967
v 17.962074 9.819197 -45.718597
v 14.320865 9.819190 -46.901691
v 10.623400 9.762396 -47.803616
v 23.497093 6.640108 -43.873367
v 19.984171 6.700282 -45.484715
v 16.312742 6.720706 -46.837154
v 12.547544 6.700274 -47.901005
v 8.758403 6.640094 -48.662235
v 25.440229 3.384683 -43.201569
v 21.970110 3.426500 -44.973812
v 18.303102 3.448006 -46.496887
v 14.502569 3.448004 -47.731754
v 10.640654 3.426495 -48.654968
v 6.791570 3.384675 -49.260872
v 27.270359 0.048651 -42.252216
v 23.876495 0.048651 -44.169369
v 20.250301 0.048650 -45.855347
v 16.450991 0.048650 -47.262413
v 12.550231 0.048650 -48.357254
v 8.625585 0.048650 -49.124691
v 4.753019 0.048650 -49.568542
v 28.948727 -3.308095 -41.032799
v 25.661026 -3.372631 -43.070114
v 22.110956 -3.417781 -44.901588
v 18.351068 -3.441037 -46.472469
v 14.449549 -3.441036 -47.740154
v 10.484395 -3.417778 -48.679298
v 6.535818 -3.372626 -49.284290
v 2.678509 -3.308089 -49.568539
v 30.444267 -6.623411 -39.565910
v 27.286753 -6.771881 -41.691658
v 23.844162 -6.884210 -43.642326
v 20.160501 -6.954332 -45.358665
v 16.297709 -6.978182 -46.790451
v 12.331066 -6.954329 -47.902618
v 8.342088 -6.884203 -48.679283
v 4.410404 -6.771871 -49.124672
v 0.606441 -6.623399 -49.260860
v 31.736397 -9.838528 -37.887138
v 28.725790 -10.084890 -40.065495
v 25.415735 -10.282244 -42.102406
v 21.840744 -10.420404 -43.937042
v 18.054417 -10.491594 -45.514114
v 14.126368 -10.491592 -46.790424
v 10.136191 -10.420398 -47.740112
v 6.165592 -10.282234 -48.357201
v 2.290434 -10.084878 -48.654938
v -1.425603 -9.838511 -48.662216
v 32.816227 -12.903020 -36.041256
v 29.961582 -13.254595 -38.235653
v 26.801460 -13.548756 -40.322418
v 23.360912 -13.771232 -42.242004
v 19.684052 -13.910076 -43.937016
v 15.832544 -13.957294 -45.358604
v 11.881024 -13.910073 -46.472397
v 7.910087 -13.771226 -47.262333
v 3.998324 -13.548745 -47.731686
v 0.215158 -13.254581 -47.900951
v -3.384133 -12.903005 -47.803593
v 33.686043 -15.778199 -34.077332
v 30.989424 -16.235569 -36.253620
v 27.988789 -16.631464 -38.353939
v 24.700581 -16.948092 -40.322380
v 21.159264 -17.169477 -42.102337
v 17.417213 -17.283463 -43.642235
v 13.541705 -17.283463 -44.901478
v 9.609203 -17.169474 -45.855228
v 5.697991 -16.948084 -46.496773
v 1.880757 -16.631453 -46.837059
v -1.781340 -16.235556 -46.901615
v -5.242143 -15.778186 -46.726025
v 34.357403 -18.438494 -32.044056
v 31.815228 -18.996363 -34.172863
v 28.976620 -19.492393 -36.253578
v 25.850733 -19.906183 -38.235577
v 22.463055 -20.218376 -40.065384
v 18.856321 -20.412876 -41.691521
v 15.088967 -20.478964 -43.069958
v 11.230898 -20.412874 -44.169205
v 7.357180 -20.218370 -44.973652
v 3.540960 -19.906178 -45.484570
v -0.152920 -19.492390 -45.718475
v -3.672415 -18.996355 -45.703659
v -6.980360 -18.438486 -45.475704
v 34.848446 -20.871017 -29.985962
v 32.453144 -21.519659 -32.044025
v 29.773497 -22.108889 -34.077259
v 26.812908 -22.616703 -36.041145
v 23.589083 -23.021341 -37.887001
v 20.135605 -23.303457 -39.565739
v 16.501549 -23.448452 -41.032612
v 12.748680 -23.448450 -42.252010
v 8.946470 -23.303455 -43.201366
v 5.165818 -23.021341 -43.873177
v 1.472728 -22.616701 -44.274799
v -2.076778 -22.108885 -44.426205
v -5.439765 -21.519663 -44.356377
v -8.587305 -20.871023 -44.099319
v -36.760170 17.979799 -27.143757
v -36.390419 15.454608 -29.113731
v -38.519444 15.454590 -26.183361
v -35.829243 12.710132 -31.066942
v -38.124939 12.745328 -28.135351
v -40.203621 12.710103 -25.046097
v -35.054390 9.762406 -32.961876
v -37.515568 9.819182 -30.058853
v -39.765965 9.819173 -26.961432
v -41.766331 9.762374 -23.723616
v -34.050220 6.640103 -34.752789
v -36.668266 6.700274 -31.909712
v -39.089062 6.720695 -28.835875
v -41.264362 6.700259 -25.583685
v -43.159245 6.640073 -22.215202
v -32.810844 3.384681 -36.393223
v -35.568684 3.426496 -33.640575
v -38.150398 3.448000 -30.623674
v -40.499260 3.447997 -27.390722
v -42.570690 3.426485 -24.003084
v -44.336372 3.384662 -20.529596
v -31.342419 0.048651 -37.840416
v -34.214504 0.048651 -35.205067
v -36.938534 0.048650 -32.277328
v -39.450790 0.048650 -29.098749
v -41.697449 0.048650 -25.727203
v -43.640114 0.048650 -22.231770
v -45.258934 0.048650 -18.685873
v -29.664038 -3.308095 -39.059822
v -32.617607 -3.372628 -36.562576
v -35.456478 -3.417776 -33.752197
v -38.112354 -3.441030 -30.661739
v -40.523640 -3.441027 -27.342878
v -42.642117 -3.417766 -23.861977
v -44.437672 -3.372611 -20.293583
v -45.899986 -3.308072 -16.712877
v -27.806791 -6.623409 -40.028873
v -30.804232 -6.771875 -37.682770
v -33.723263 -6.884202 -35.011452
v -36.493923 -6.954319 -32.038441
v -39.049309 -6.978165 -28.807129
v -41.332798 -6.954306 -25.378275
v -43.304123 -6.884176 -21.824509
v -44.942657 -6.771836 -18.222857
v -46.247662 -6.623359 -14.647135
v -25.810902 -9.838528 -40.738995
v -28.812975 -10.084885 -38.548870
v -31.773071 -10.282233 -36.030247
v -34.622658 -10.420387 -33.197140
v -37.292591 -10.491570 -30.083448
v -39.720272 -10.491561 -26.742029
v -41.856514 -10.420359 -23.240587
v -43.670383 -10.282186 -19.654989
v -45.151020 -10.084821 -16.061476
v -46.306255 -9.838448 -12.529545
v -23.721666 -12.903021 -41.195572
v -26.690809 -13.254590 -39.158737
v -29.651985 -13.548744 -36.798111
v -32.540821 -13.771215 -34.119122
v -35.289093 -13.910049 -31.145988
v -37.831299 -13.957259 -27.922262
v -40.111664 -13.910027 -24.508293
v -42.090031 -13.771169 -20.975786
v -43.745201 -13.548674 -17.400492
v -45.075241 -13.254501 -13.854774
v -46.094875 -12.902912 -10.401539
v -21.585072 -15.778199 -41.415936
v -24.488161 -16.235563 -39.523796
v -27.412943 -16.631451 -37.319050
v -30.301167 -16.948071 -34.800041
v -33.088345 -17.169445 -31.982073
v -35.709240 -17.283421 -28.899000
v -38.104454 -17.283407 -25.602272
v -40.226738 -17.169405 -22.156940
v -42.045521 -16.948004 -18.635386
v -43.548733 -16.631361 -15.110110
v -44.741776 -16.235451 -11.647178
v -45.644211 -15.778065 -8.301480
v -19.443853 -18.438498 -41.426117
v -22.254055 -18.996355 -39.666195
v -25.110126 -19.492378 -37.609489
v -27.961084 -19.906157 -35.249058
v -30.748201 -20.218342 -32.592606
v -33.409298 -20.412827 -29.664881
v -35.884457 -20.478899 -26.507854
v -38.122116 -20.412798 -23.178274
v -40.084236 -20.218281 -19.742714
v -41.749420 -19.906071 -16.271130
v -43.113350 -19.492268 -12.830304
v -44.186836 -18.996222 -9.478471
v -44.992233 -18.438337 -6.261970
v -17.334745 -20.871025 -41.257145
v -20.032280 -21.519657 -39.615051
v -22.794071 -22.108879 -37.694851
v -25.576723 -22.616682 -35.486027
v -28.328465 -23.021307 -32.990372
v -30.992237 -23.303411 -30.224665
v -33.510311 -23.448393 -27.221741
v -35.829739 -23.448376 -24.029343
v -37.907581 -23.303366 -20.706573
v -39.714794 -23.021231 -17.318537
v -41.237995 -22.616577 -13.930290
v -42.478844 -22.108747 -10.601275
v -43.451645 -21.519505 -7.381292
v -44.179802 -20.870850 -4.308357
v -36.760170 17.979795 27.724575
v -38.519440 15.454589 26.764177
v -36.390415 15.454605 29.694551
v -40.203625 12.710103 25.626911
v -38.124939 12.745327 28.716164
v -35.829250 12.710130 31.647764
v -41.766335 9.762373 24.304430
v -39.765968 9.819172 27.542248
v -37.515568 9.819182 30.639671
v -35.054390 9.762403 33.542698
v -43.159248 6.640074 22.796017
v -41.264366 6.700258 26.164501
v -39.089066 6.720695 29.416695
v -36.668270 6.700272 32.490528
v -34.050220 6.640101 35.333607
v -44.336376 3.384663 21.110413
v -42.570694 3.426485 24.583899
v -40.499260 3.447997 27.971535
v -38.150398 3.448000 31.204491
v -35.568687 3.426496 34.221397
v -32.810848 3.384681 36.974045
v -45.258938 0.048651 19.266687
v -43.640118 0.048651 22.812586
v -41.697456 0.048650 26.308020
v -39.450798 0.048650 29.679569
v -36.938538 0.048650 32.858147
v -34.214508 0.048650 35.785892
v -31.342419 0.048650 38.421238
v -45.899986 -3.308069 17.293692
v -44.437675 -3.372610 20.874399
v -42.642124 -3.417766 24.442795
v -40.523640 -3.441025 27.923693
v -38.112362 -3.441030 31.242556
v -35.456482 -3.417776 34.333019
v -32.617607 -3.372629 37.143398
v -29.664040 -3.308095 39.640644
v -46.247669 -6.623356 15.227950
v -44.942661 -6.771834 18.803673
v -43.304123 -6.884174 22.405321
v -41.332806 -6.954305 25.959091
v -39.049309 -6.978164 29.387945
v -36.493923 -6.954319 32.619259
v -33.723267 -6.884203 35.592274
v -30.804235 -6.771876 38.263596
v -27.806791 -6.623411 40.609699
v -46.306255 -9.838442 13.110360
v -45.151024 -10.084818 16.642292
v -43.670391 -10.282186 20.235807
v -41.856514 -10.420359 23.821404
v -39.720276 -10.491561 27.322845
v -37.292595 -10.491570 30.664270
v -34.622662 -10.420388 33.777966
v -31.773071 -10.282235 36.611065
v -28.812979 -10.084887 39.129696
v -25.810902 -9.838529 41.319820
v -46.094875 -12.902909 10.982356
v -45.075241 -13.254497 14.435590
v -43.745205 -13.548673 17.981312
v -42.090031 -13.771165 21.556604
v -40.111664 -13.910024 25.089111
v -37.831303 -13.957259 28.503080
v -35.289093 -13.910049 31.726807
v -32.540821 -13.771215 34.699947
v -29.651989 -13.548745 37.378937
v -26.690809 -13.254592 39.739563
v -23.721666 -12.903021 41.776398
v -45.644211 -15.778062 8.882299
v -44.741776 -16.235449 12.227999
v -43.548733 -16.631357 15.690929
v -42.045521 -16.948002 19.216204
v -40.226742 -17.169405 22.737764
v -38.104454 -17.283407 26.183098
v -35.709236 -17.283419 29.479822
v -33.088341 -17.169445 32.562893
v -30.301167 -16.948071 35.380867
v -27.412939 -16.631451 37.899872
v -24.488161 -16.235565 40.104622
v -21.585073 -15.778200 41.996761
v -44.992233 -18.438335 6.842792
v -44.186832 -18.996220 10.059291
v -43.113350 -19.492270 13.411126
v -41.749424 -19.906075 16.851952
v -40.084236 -20.218285 20.323534
v -38.122116 -20.412804 23.759096
v -35.884457 -20.478907 27.088675
v -33.409294 -20.412834 30.245703
v -30.748198 -20.218348 33.173428
v -27.961082 -19.906164 35.829876
v -25.110126 -19.492384 38.190311
v -22.254057 -18.996361 40.247017
v -19.443855 -18.438499 42.006943
v -44.179802 -20.870846 4.889178
v -43.451641 -21.519501 7.962112
v -42.478844 -22.108744 11.182097
v -41.237995 -22.616577 14.511110
v -39.714798 -23.021231 17.899359
v -37.907581 -23.303366 21.287394
v -35.829742 -23.448381 24.610165
v -33.510311 -23.448397 27.802563
v -30.992233 -23.303413 30.805487
v -28.328465 -23.021311 33.571198
v -25.576723 -22.616684 36.066853
v -22.794067 -22.108879 38.275673
v -20.032278 -21.519661 40.195873
v -17.334743 -20.871027 41.837967
v 15.423052 17.979816 44.680191
v 13.966043 15.454613 46.056572
v 17.410866 15.454620 44.937294
v 12.364028 12.710130 47.306889
v 15.944405 12.745344 46.284569
v 19.441898 12.710142 45.007164
v 10.623400 9.762399 48.384441
v 14.320865 9.819191 47.482517
v 17.962072 9.819196 46.299419
v 21.483532 9.762413 44.855793
v 8.758402 6.640095 49.243061
v 12.547544 6.700275 48.481831
v 16.312740 6.720706 47.417980
v 19.984167 6.700281 46.065536
v 23.497093 6.640107 44.454193
v 6.791568 3.384676 49.841698
v 10.640652 3.426495 49.235794
v 14.502568 3.448005 48.312580
v 18.303099 3.448006 47.077717
v 21.970110 3.426500 45.554638
v 25.440224 3.384682 43.782394
v 4.753018 0.048651 50.149368
v 8.625585 0.048651 49.705517
v 12.550231 0.048650 48.938080
v 16.450989 0.048650 47.843239
v 20.250298 0.048650 46.436172
v 23.876493 0.048650 44.750195
v 27.270355 0.048650 42.833042
v 2.678508 -3.308088 50.149368
v 6.535817 -3.372625 49.865116
v 10.484393 -3.417778 49.260124
v 14.449545 -3.441035 48.320980
v 18.351067 -3.441037 47.053295
v 22.110952 -3.417781 45.482414
v 25.661020 -3.372631 43.650940
v 28.948723 -3.308096 41.613625
v 0.606441 -6.623397 49.841686
v 4.410405 -6.771871 49.705498
v 8.342091 -6.884204 49.260109
v 12.331070 -6.954329 48.483440
v 16.297714 -6.978184 47.371277
v 20.160505 -6.954333 45.939484
v 23.844166 -6.884212 44.223152
v 27.286753 -6.771882 42.272480
v 30.444267 -6.623413 40.146736
v -1.425604 -9.838509 49.243042
v 2.290432 -10.084875 49.235760
v 6.165589 -10.282232 48.938034
v 10.136188 -10.420396 48.320942
v 14.126363 -10.491591 47.371254
v 18.054411 -10.491594 46.094944
v 21.840736 -10.420403 44.517868
v 25.415728 -10.282243 42.683235
v 28.725788 -10.084891 40.646320
v 31.736397 -9.838531 38.467968
v -3.384134 -12.903004 48.384418
v 0.215157 -13.254583 48.481781
v 3.998323 -13.548745 48.312511
v 7.910085 -13.771226 47.843159
v 11.881021 -13.910073 47.053223
v 15.832542 -13.957294 45.939430
v 19.684050 -13.910078 44.517838
v 23.360909 -13.771236 42.822834
v 26.801455 -13.548758 40.903244
v 29.961582 -13.254600 38.816479
v 32.816223 -12.903023 36.622082
v -5.242146 -15.778184 47.306850
v -1.781341 -16.235558 47.482445
v 1.880756 -16.631456 47.417885
v 5.697992 -16.948088 47.077599
v 9.609205 -17.169477 46.436054
v 13.541708 -17.283464 45.482300
v 17.417219 -17.283466 44.223053
v 21.159271 -17.169479 42.683159
v 24.700588 -16.948095 40.903206
v 27.988794 -16.631466 38.934761
v 30.989426 -16.235573 36.834442
v 33.686047 -15.778200 34.658154
v -6.980361 -18.438486 46.056526
v -3.672418 -18.996357 46.284492
v -0.152922 -19.492388 46.299305
v 3.540958 -19.906178 46.065395
v 7.357179 -20.218374 45.554478
v 11.230898 -20.412872 44.750031
v 15.088969 -20.478962 43.650787
v 18.856323 -20.412878 42.272343
v 22.463057 -20.218378 40.646210
v 25.850737 -19.906183 38.816402
v 28.976620 -19.492393 36.834404
v 31.815224 -18.996363 34.753685
v 34.357403 -18.438498 32.624886
v -8.587303 -20.871023 44.680145
v -5.439764 -21.519663 44.937199
v -2.076778 -22.108892 45.007034
v 1.472730 -22.616707 44.855625
v 5.165821 -23.021345 44.454002
v 8.946472 -23.303461 43.782185
v 12.748683 -23.448458 42.832829
v 16.501553 -23.448460 41.613430
v 20.135609 -23.303463 40.146557
v 23.589087 -23.021345 38.467815
v 26.812914 -22.616709 36.621964
v 29.773500 -22.108894 34.658077
v 32.453144 -21.519665 32.624844
v 34.848446 -20.871023 30.566782
v 47.674316 17.979645 0.290412
v 48.533081 15.454470 2.101430
v 48.533081 15.454470 -1.520607
v 49.227135 12.710014 4.011403
v 49.361240 12.745221 0.290413
v 49.227135 12.710011 -3.430577
v 49.714066 9.762316 5.999822
v 49.998848 9.819100 2.204675
v 49.998848 9.819099 -1.623848
v 49.714062 9.762311 -5.418994
v 49.954342 6.640043 8.038869
v 50.401260 6.700217 4.200011
v 50.552975 6.720644 0.290414
v 50.401260 6.700216 -3.619183
v 49.954342 6.640040 -7.458041
v 49.915894 3.384652 10.094434
v 50.529060 3.426469 6.246562
v 50.844410 3.447975 2.288438
v 50.844414 3.447975 -1.707609
v 50.529060 3.426468 -5.665734
v 49.915897 3.384651 -9.513605
v 49.578564 0.048651 12.128294
v 50.353104 0.048651 8.308164
v 50.835987 0.048650 4.338513
v 51.000130 0.048650 0.290414
v 50.835987 0.048650 -3.757685
v 50.353104 0.048650 -7.727336
v 49.578564 0.048650 -11.547468
v 48.937504 -3.308068 14.101286
v 49.859119 -3.372603 10.344979
v 50.503899 -3.417753 6.402766
v 50.836010 -3.441008 2.341533
v 50.836010 -3.441008 -1.760705
v 50.503899 -3.417753 -5.821937
v 49.859119 -3.372603 -9.764151
v 48.937508 -3.308069 -13.520457
v 48.004585 -6.623364 15.976880
v 49.050526 -6.771830 12.317056
v 49.841881 -6.884158 8.440222
v 50.335884 -6.954279 4.406534
v 50.503910 -6.978129 0.290415
v 50.335884 -6.954279 -3.825703
v 49.841885 -6.884159 -7.859392
v 49.050529 -6.771831 -11.736227
v 48.004585 -6.623365 -15.396050
v 46.807304 -9.838468 17.724499
v 47.948677 -10.084824 14.188127
v 48.862999 -10.282173 10.410679
v 49.503082 -10.420330 6.443779
v 49.832905 -10.491520 2.355484
v 49.832905 -10.491520 -1.774653
v 49.503082 -10.420330 -5.862947
v 48.863003 -10.282174 -9.829848
v 47.948677 -10.084825 -13.607296
v 46.807308 -9.838469 -17.143667
v 45.385487 -12.902959 19.321863
v 46.590309 -13.254526 15.928855
v 47.598377 -13.548679 12.278585
v 48.360790 -13.771151 8.413291
v 48.836601 -13.909992 4.392656
v 48.998421 -13.957211 0.290414
v 48.836601 -13.909992 -3.811828
v 48.360790 -13.771151 -7.832464
v 47.598377 -13.548679 -11.697759
v 46.590309 -13.254525 -15.348025
v 45.385487 -12.902957 -18.741032
v 43.786503 -15.778139 20.755974
v 45.022942 -16.235500 17.518847
v 46.093174 -16.631382 14.016068
v 46.949131 -16.948006 10.280554
v 47.547615 -17.169384 6.362570
v 47.855762 -17.283369 2.327866
v 47.855762 -17.283369 -1.747037
v 47.547615 -17.169384 -5.781742
v 46.949131 -16.948006 -9.699726
v 46.093178 -16.631384 -13.435241
v 45.022942 -16.235500 -16.938017
v 43.786507 -15.778141 -20.175146
v 42.060230 -18.438444 22.022772
v 43.299236 -18.996298 18.947195
v 44.400902 -19.492319 15.604567
v 45.319912 -19.906097 12.019236
v 46.013279 -20.218281 8.231956
v 46.445248 -20.412775 4.299291
v 46.592030 -20.478863 0.290413
v 46.445248 -20.412775 -3.718464
v 46.013279 -20.218281 -7.651130
v 45.319912 -19.906097 -11.438410
v 44.400906 -19.492321 -15.023742
v 43.299236 -18.996298 -18.366367
v 42.060230 -18.438444 -21.441942
v 40.254631 -20.870987 23.125757
v 41.471741 -21.519613 20.211723
v 42.577370 -22.108828 17.034939
v 43.530235 -22.616632 13.612405
v 44.289490 -23.021257 9.975997
v 44.818855 -23.303368 6.172826
v 45.090923 -23.448360 2.263390
v 45.090919 -23.448357 -1.682570
v 44.818855 -23.303368 -5.592006
v 44.289490 -23.021257 -9.395178
v 43.530235 -22.616632 -13.031587
v 42.577370 -22.108828 -16.454119
v 41.471741 -21.519613 -19.630901
v 40.254631 -20.870989 -22.544935
v 33.924911 -25.706499 -27.143705
v 32.453068 -28.409313 -26.183290
v 31.500982 -26.505066 -29.113640
v 30.751520 -31.143023 -25.046009
v 29.853434 -29.268051 -28.135239
v 28.795326 -27.230492 -31.066814
v 28.813868 -33.858974 -23.723520
v 27.970104 -32.044407 -26.961304
v 26.963743 -30.031609 -30.058701
v 25.812325 -27.855684 -32.961704
v 26.644150 -36.501129 -22.215097
v 25.850592 -34.779396 -25.583548
v 24.896080 -32.824631 -28.835709
v 23.795244 -30.668562 -31.909521
v 22.570644 -28.353848 -34.752583
v 24.258877 -39.009800 -20.529493
v 23.506676 -37.411839 -24.002943
v 22.599583 -35.549496 -27.390547
v 21.549181 -33.448635 -30.623472
v 20.375416 -31.149130 -33.640354
v 19.104717 -28.701174 -36.392986
v 21.687672 -41.326832 -18.685774
v 20.963745 -39.878933 -22.231634
v 20.094997 -38.141384 -25.727034
v 19.090302 -36.131935 -29.098545
v 17.966831 -33.884937 -32.277096
v 16.748657 -31.448526 -35.204826
v 15.464264 -28.879681 -37.840157
v 18.972055 -43.401337 -16.712786
v 18.260401 -42.122284 -20.293453
v 17.417057 -40.536507 -23.861813
v 16.448879 -38.652107 -27.342678
v 15.370564 -36.495422 -30.661509
v 14.203667 -34.109573 -33.751949
v 12.974511 -31.550247 -36.562313
v 11.711403 -28.879677 -39.059559
v 16.162300 -45.194920 -14.647056
v 15.445919 -44.094097 -18.222744
v 14.612705 -42.678802 -21.824360
v 13.668422 -40.946987 -25.378092
v 12.625918 -38.915268 -28.806917
v 11.504493 -36.619030 -32.038200
v 10.328179 -34.109566 -35.011204
v 9.123263 -31.448511 -37.682514
v 7.915603 -28.701170 -40.028618
v 13.312884 -46.685131 -12.529480
v 12.575923 -45.762047 -16.061380
v 11.737274 -44.526001 -19.654861
v 10.802549 -42.965446 -23.240427
v 9.783555 -41.086601 -26.741837
v 8.697904 -38.915260 -30.083231
v 7.567590 -36.495407 -33.196903
v 6.416831 -33.884914 -36.029999
v 5.269592 -31.149111 -38.548630
v 4.147409 -28.353836 -40.738762
v 10.477454 -47.866524 -10.401490
v 9.707031 -47.111778 -13.854701
v 8.849145 -46.053719 -17.400391
v 7.909972 -44.672806 -20.975655
v 6.901071 -42.965435 -24.508131
v 5.839062 -40.946968 -27.922073
v 4.744426 -38.652073 -31.145782
v 3.639586 -36.131901 -34.118900
v 2.546686 -33.448601 -36.797886
v 1.485543 -30.668541 -39.158524
v 0.472188 -27.855673 -41.195366
v 7.704336 -48.749237 -8.301447
v 6.891698 -48.146626 -11.647125
v 6.004086 -47.256603 -15.110033
v 5.048660 -46.053707 -18.635281
v 4.037299 -44.525978 -22.156811
v 2.986267 -42.678768 -25.602121
v 1.915129 -40.536465 -28.898827
v 0.845018 -38.141331 -31.981882
v -0.203400 -35.549450 -34.799850
v -1.211824 -32.824593 -37.318859
v -2.165702 -30.031582 -39.523617
v -3.054897 -27.230482 -41.415771
v 5.033374 -49.355801 -6.261951
v 4.174246 -48.884922 -9.478436
v 3.250536 -48.146622 -12.830254
v 2.270499 -47.111759 -16.271059
v 1.246605 -45.762016 -19.742619
v 0.195186 -44.094059 -23.178158
v -0.864602 -42.122227 -26.507719
v -1.912384 -39.878872 -29.664734
v -2.928467 -37.411777 -32.592449
v -3.895641 -34.779339 -35.248901
v -4.800502 -32.044365 -37.609341
v -5.634093 -29.268024 -39.666054
v -6.391869 -26.505058 -41.426003
v 2.494366 -49.716984 -4.308347
v 1.588591 -49.355793 -7.381272
v 0.626552 -48.749222 -10.601244
v -0.382543 -47.866493 -13.930244
v -1.425622 -46.685097 -17.318476
v -2.486133 -45.194866 -20.706491
v -3.545028 -43.401272 -24.029249
v -4.582277 -41.326752 -27.221632
v -5.578676 -39.009716 -30.224548
v -6.517594 -36.501053 -32.990257
v -7.386270 -33.858910 -35.485916
v -8.176492 -31.142973 -37.694744
v -8.884566 -28.409277 -39.614956
v -9.510772 -25.706486 -41.257076
v -14.917007 -25.706516 -39.500496
v -14.458420 -28.409330 -37.803898
v -17.539593 -26.505079 -37.803913
v -13.902607 -31.143036 -35.834190
v -17.118198 -29.268064 -35.934666
v -20.233301 -27.230494 -35.834221
v -13.243611 -33.858994 -33.582699
v -16.583702 -32.044418 -33.780746
v -19.840521 -30.031614 -33.780762
v -22.957279 -27.855679 -33.582745
v -12.479493 -36.501144 -31.053049
v -15.928337 -34.779408 -31.339220
v -19.316324 -32.824635 -31.436378
v -22.579901 -30.668558 -31.339252
v -25.662264 -28.353827 -31.053108
v -11.613474 -39.009811 -28.263638
v -15.149401 -37.411850 -28.621592
v -18.651546 -35.549500 -28.805695
v -22.050863 -33.448624 -28.805706
v -25.282831 -31.149105 -28.621626
v -28.293430 -28.701132 -28.263700
v -10.654535 -41.326839 -25.248537
v -14.250587 -39.878941 -25.655752
v -17.843403 -38.141384 -25.909639
v -21.360403 -36.131924 -25.995943
v -24.730587 -33.884914 -25.909660
v -27.891478 -31.448483 -25.655792
v -30.794748 -28.879620 -25.248596
v -9.617278 -43.401344 -22.056143
v -13.242643 -42.122292 -22.485785
v -16.896992 -40.536507 -22.786375
v -20.506708 -38.652100 -22.941208
v -23.996347 -36.495403 -22.941214
v -27.296146 -34.109535 -22.786400
v -30.348814 -31.550192 -22.485826
v -33.114170 -28.879599 -22.056200
v -8.520910 -45.194931 -18.745565
v -12.142997 -44.094109 -19.169174
v -15.825842 -42.678802 -19.489674
v -19.497469 -40.946980 -19.689745
v -23.080654 -38.915249 -19.757805
v -26.500353 -36.618992 -19.689758
v -29.691366 -34.109505 -19.489700
v -32.604294 -31.448435 -19.169212
v -35.208767 -28.701063 -18.745615
v -7.387490 -46.685139 -15.381248
v -10.974286 -45.762058 -15.771751
v -14.651074 -44.526005 -16.084574
v -18.350021 -42.965435 -16.303572
v -21.994972 -41.086578 -16.416420
v -25.508335 -38.915215 -16.416426
v -28.818924 -36.495346 -16.303587
v -31.868973 -33.884834 -16.084597
v -34.618858 -31.149008 -15.771784
v -37.048573 -28.353710 -15.381287
v -6.239842 -47.866524 -12.027008
v -9.762135 -47.111778 -12.361372
v -13.399410 -46.053719 -12.641129
v -17.089933 -44.672798 -12.852718
v -20.761312 -42.965408 -12.984768
v -24.336363 -40.946926 -13.029679
v -27.740572 -38.652016 -12.984773
v -30.909611 -36.131821 -12.852729
v -33.795212 -33.448502 -12.641148
v -36.368221 -30.668413 -12.361393
v -38.618519 -27.855526 -12.027037
v -5.099517 -48.749237 -8.740670
v -8.532582 -48.146626 -9.001658
v -12.100311 -47.256603 -9.227567
v -15.748285 -46.053699 -9.408242
v -19.410011 -44.525959 -9.534573
v -23.011501 -42.678734 -9.599619
v -26.477875 -40.536404 -9.599621
v -29.740734 -38.141258 -9.534578
v -32.744770 -35.549351 -9.408253
v -35.452114 -32.824467 -9.227580
v -37.843727 -30.031439 -9.001676
v -39.918045 -27.230318 -8.740691
v -3.985210 -49.355801 -5.570200
v -7.309769 -48.884926 -5.747052
v -10.782994 -48.146610 -5.904300
v -14.358263 -47.111748 -6.035477
v -17.976334 -45.761993 -6.134447
v -21.568653 -44.094025 -6.196107
v -25.062763 -42.122177 -6.217059
v -28.389057 -39.878792 -6.196108
v -31.487480 -37.411678 -6.134450
v -34.312794 -34.779217 -6.035483
v -36.837326 -32.044220 -5.904308
v -39.050976 -29.267864 -5.747061
v -40.958939 -26.504879 -5.570212
v -2.911816 -49.716991 -2.551769
v -6.114253 -49.355793 -2.639895
v -9.473930 -48.749222 -2.719949
v -12.951839 -47.866482 -2.788942
v -16.496584 -46.685070 -2.843916
v -20.046515 -45.194839 -2.882246
v -23.533876 -43.401222 -2.901946
v -26.890558 -41.326683 -2.901946
v -30.054419 -39.009636 -2.882247
v -32.974907 -36.500942 -2.843918
v -35.616856 -33.858776 -2.788943
v -37.961777 -31.142820 -2.719951
v -40.006813 -28.409107 -2.639898
v -41.762058 -25.706301 -2.551773
v -41.762051 -25.706305 3.132597
v -40.006805 -28.409117 3.220725
v -40.958935 -26.504885 6.151039
v -37.961769 -31.142832 3.300781
v -39.050964 -29.267874 6.327893
v -39.918041 -27.230324 9.321520
v -35.616848 -33.858791 3.369776
v -36.837315 -32.044228 6.485144
v -37.843723 -30.031441 9.582511
v -38.618515 -27.855530 12.607869
v -32.974899 -36.500957 3.424753
v -34.312778 -34.779228 6.616324
v -35.452106 -32.824471 9.808423
v -36.368217 -30.668415 12.942238
v -37.048569 -28.353714 15.962122
v -30.054403 -39.009647 3.463085
v -31.487465 -37.411686 6.715299
v -32.744762 -35.549355 9.989105
v -33.795200 -33.448502 13.222004
v -34.618847 -31.149008 16.352631
v -35.208755 -28.701063 19.326454
v -26.890541 -41.326694 3.482787
v -28.389044 -39.878799 6.776962
v -29.740725 -38.141254 10.115439
v -30.909599 -36.131813 13.433596
v -31.868958 -33.884819 16.665457
v -32.604279 -31.448420 19.750063
v -33.114166 -28.879593 22.637041
v -23.533859 -43.401237 3.482790
v -25.062750 -42.122181 6.797919
v -26.477861 -40.536400 10.180492
v -27.740559 -38.652008 13.565656
v -28.818909 -36.495327 16.884466
v -29.691355 -34.109489 20.070574
v -30.348804 -31.550173 23.066690
v -30.794741 -28.879612 25.829439
v -20.046501 -45.194843 3.463092
v -21.568642 -44.094021 6.776972
v -23.011499 -42.678719 10.180499
v -24.336353 -40.946907 13.610569
v -25.508329 -38.915195 16.997318
v -26.500345 -36.618965 20.270649
v -27.296141 -34.109505 23.367281
v -27.891470 -31.448458 26.236652
v -28.293425 -28.701118 28.844542
v -16.496571 -46.685078 3.424765
v -17.976324 -45.761990 6.715316
v -19.410009 -44.525944 10.115460
v -20.761311 -42.965389 13.565671
v -21.994970 -41.086548 16.997328
v -23.080645 -38.915207 20.338709
v -23.996342 -36.495358 23.522112
v -24.730576 -33.884872 26.490536
v -25.282822 -31.149076 29.202484
v -25.662258 -28.353809 31.633949
v -12.951829 -47.866489 3.369792
v -14.358260 -47.111740 6.616352
v -15.748289 -46.053688 9.989138
v -17.089937 -44.672771 13.433630
v -18.350023 -42.965401 16.884491
v -19.497469 -40.946930 20.270666
v -20.506706 -38.652046 23.522120
v -21.360399 -36.131874 26.576843
v -22.050861 -33.448582 29.386585
v -22.579899 -30.668522 31.920111
v -22.957279 -27.855658 34.163597
v -9.473923 -48.749214 3.300799
v -10.782995 -48.146606 6.485178
v -12.100319 -47.256584 9.808466
v -13.399420 -46.053692 13.222050
v -14.651081 -44.525959 16.665501
v -15.825848 -42.678745 20.070608
v -16.897001 -40.536442 23.367308
v -17.843405 -38.141315 26.490557
v -18.651548 -35.549431 29.386597
v -19.316322 -32.824577 32.017262
v -19.840517 -30.031569 34.361629
v -20.233299 -27.230471 36.415070
v -6.114252 -49.355797 3.220746
v -7.309775 -48.884918 6.327929
v -8.532597 -48.146614 9.582561
v -9.762152 -47.111752 12.942294
v -10.974303 -45.762009 16.352686
v -12.143013 -44.094051 19.750114
v -13.242661 -42.122223 23.066725
v -14.250603 -39.878864 26.236683
v -15.149412 -37.411774 29.202501
v -15.928347 -34.779339 31.920116
v -16.583706 -32.044361 34.361626
v -17.118200 -29.268023 36.515526
v -17.539591 -26.505054 38.384758
v -2.911820 -49.716988 3.132620
v -3.985222 -49.355793 6.151079
v -5.099536 -48.749222 9.321575
v -6.239866 -47.866493 12.607933
v -7.387517 -46.685097 15.962189
v -8.520939 -45.194866 19.326515
v -9.617309 -43.401272 22.637094
v -10.654561 -41.326756 25.829479
v -11.613495 -39.009724 28.844568
v -12.479508 -36.501057 31.633963
v -13.243621 -33.858913 34.163597
v -13.902614 -31.142973 36.415070
v -14.458422 -28.409281 38.384758
v -14.917005 -25.706486 40.081337
v 37.266098 -25.706486 -22.544920
v 38.390545 -26.505039 -19.630892
v 35.897850 -28.409304 -21.441919
v 39.411999 -27.230446 -16.454105
v 36.950901 -29.268024 -18.366343
v 34.290417 -31.143011 -20.175110
v 40.292320 -27.855625 -13.031572
v 37.887226 -30.031563 -15.023717
v 35.252430 -32.044380 -16.937983
v 32.433865 -33.858963 -18.740984
v 40.993778 -28.353779 -9.395167
v 38.668308 -30.668509 -11.438389
v 36.085136 -32.824589 -13.435209
v 33.287125 -34.779369 -15.347982
v 30.328777 -36.501118 -17.143616
v 41.482834 -28.701092 -5.591997
v 39.257614 -31.149065 -7.651113
v 36.751122 -33.448582 -9.699697
v 34.001034 -35.549454 -11.697717
v 31.059557 -37.411812 -13.607246
v 27.988562 -39.009785 -15.395992
v 41.734196 -28.879599 -1.682563
v 39.624756 -31.448450 -3.718451
v 37.216774 -33.884872 -5.781719
v 34.540981 -36.131882 -7.832429
v 31.644964 -38.141342 -9.829805
v 28.589111 -39.878902 -11.736175
v 25.440517 -41.326817 -13.520403
v 41.734196 -28.879597 2.263396
v 39.749504 -31.550173 0.290423
v 37.456532 -34.109505 -1.747020
v 34.877956 -36.495369 -3.811801
v 32.054790 -38.652061 -5.862913
v 29.043486 -40.536469 -7.859347
v 25.910397 -42.122261 -9.764101
v 22.724901 -43.401325 -11.547416
v 41.482838 -28.701086 6.172830
v 39.624763 -31.448441 4.299297
v 37.456539 -34.109501 2.327878
v 34.992561 -36.618977 0.290435
v 32.265972 -38.915218 -1.774625
v 29.327133 -40.946945 -3.825666
v 26.239141 -42.678768 -5.821894
v 23.071291 -44.094082 -7.727290
v 19.891991 -45.194908 -9.513559
v 40.993778 -28.353762 9.976000
v 39.257622 -31.149040 8.231959
v 37.216789 -33.884850 6.362577
v 34.877968 -36.495346 4.392670
v 32.265980 -38.915207 2.355505
v 29.423620 -41.086559 0.290444
v 26.408478 -42.965405 -1.760669
v 23.287258 -44.525974 -3.757646
v 20.128817 -45.762028 -5.665694
v 16.997520 -46.685120 -7.458004
v 40.292328 -27.855610 13.612405
v 38.668324 -30.668480 12.019233
v 36.751148 -33.448547 10.280556
v 34.541008 -36.131847 8.413298
v 32.054821 -38.652023 6.443791
v 29.327160 -40.946922 4.406555
v 26.408497 -42.965393 2.341563
v 23.360682 -44.672779 0.290448
v 20.250628 -46.053699 -1.707574
v 17.143585 -47.111763 -3.619148
v 14.097466 -47.866516 -5.418966
v 39.412010 -27.230429 17.034939
v 37.887245 -30.031534 15.604563
v 36.085163 -32.824543 14.016066
v 34.001068 -35.549404 12.278585
v 31.645002 -38.141293 10.410685
v 29.043528 -40.536427 8.440234
v 26.239180 -42.678734 6.402788
v 23.287291 -44.525955 4.338542
v 20.250647 -46.053688 2.288470
v 17.193182 -47.256584 0.290446
v 14.174052 -48.146614 -1.623819
v 11.243245 -48.749233 -3.430554
v 38.390560 -26.505018 20.211721
v 36.950920 -29.267986 18.947186
v 35.252460 -32.044327 17.518837
v 33.287167 -34.779308 15.928849
v 31.059610 -37.411747 14.188127
v 28.589170 -39.878841 12.317063
v 25.910456 -42.122200 10.344995
v 23.071352 -44.094040 8.308188
v 20.128866 -45.761997 6.246591
v 17.143620 -47.111744 4.200042
v 14.174069 -48.146610 2.204706
v 11.271748 -48.884918 0.290439
v 8.478175 -49.355797 -1.520588
v 37.266109 -25.706463 23.125750
v 35.897873 -28.409254 22.022753
v 34.290451 -31.142948 20.755959
v 32.433918 -33.858891 19.321848
v 30.328842 -36.501034 17.724491
v 27.988640 -39.009705 15.976881
v 25.440601 -41.326740 14.101295
v 22.724991 -43.401257 12.128314
v 19.892076 -45.194855 10.094460
v 16.997597 -46.685081 8.038901
v 14.097527 -47.866486 5.999854
v 11.243287 -48.749218 4.011433
v 8.478198 -49.355793 2.101454
v 5.835573 -49.716984 0.290427
v -9.510764 -25.706511 41.837883
v -8.884553 -28.409330 40.195759
v -6.391860 -26.505085 42.006813
v -8.176469 -31.143042 38.275524
v -5.634076 -29.268070 40.246857
v -3.054887 -27.230503 41.996586
v -7.386239 -33.858990 36.066669
v -4.800473 -32.044422 38.190121
v -2.165679 -30.031620 40.104416
v 0.472201 -27.855690 41.776180
v -6.517554 -36.501144 33.570999
v -3.895601 -34.779411 35.829666
v -1.211787 -32.824642 37.899643
v 1.485572 -30.668573 39.739323
v 4.147425 -28.353853 41.319576
v -5.578629 -39.009811 30.805275
v -2.928415 -37.411846 33.173199
v -0.203349 -35.549507 35.380623
v 2.546731 -33.448643 37.378677
v 5.269627 -31.149132 39.129433
v 7.915619 -28.701176 40.609440
v -4.582224 -41.326843 27.802347
v -1.912324 -39.878937 30.245468
v 0.845079 -38.141388 32.562645
v 3.639646 -36.131943 34.699684
v 6.416881 -33.884945 36.610794
v 9.123300 -31.448526 38.263321
v 11.711422 -28.879686 39.640385
v -3.544971 -43.401344 24.609955
v -0.864537 -42.122288 27.088448
v 1.915200 -40.536510 29.479580
v 4.744497 -38.652111 31.726551
v 7.567657 -36.495426 33.777695
v 10.328233 -34.109573 35.591999
v 12.974551 -31.550247 37.143127
v 15.464285 -28.879677 38.420979
v -2.486076 -45.194931 21.287203
v 0.195255 -44.094105 23.758888
v 2.986344 -42.678806 26.182875
v 5.839144 -40.946991 28.502842
v 8.697982 -38.915272 30.664021
v 11.504563 -36.619034 32.618999
v 14.203725 -34.109566 34.332760
v 16.748699 -31.448511 35.785641
v 19.104736 -28.701166 36.973808
v -1.425565 -46.685135 17.899193
v 1.246676 -45.762051 20.323359
v 4.037380 -44.526005 22.737574
v 6.901159 -42.965450 25.088909
v 9.783646 -41.086605 27.322628
v 12.626003 -38.915260 29.387714
v 15.370638 -36.495407 31.242319
v 17.966892 -33.884914 32.857918
v 20.375456 -31.149109 34.221172
v 22.570658 -28.353832 35.333401
v -0.382490 -47.866524 14.510980
v 2.270568 -47.111778 16.851814
v 5.048743 -46.053719 19.216057
v 7.910063 -44.672806 21.556444
v 10.802647 -42.965431 23.821234
v 13.668517 -40.946960 25.958906
v 16.448967 -38.652073 27.923500
v 19.090378 -36.131897 29.679369
v 21.549238 -33.448601 31.204300
v 23.795282 -30.668537 32.490349
v 25.812340 -27.855665 33.542526
v 0.626599 -48.749237 11.182000
v 3.250602 -48.146626 13.411025
v 6.004167 -47.256603 15.690824
v 8.849237 -46.053715 17.981195
v 11.737375 -44.525978 20.235680
v 14.612803 -42.678768 22.405182
v 17.417149 -40.536465 24.442646
v 20.095081 -38.141331 26.307865
v 22.599651 -35.549446 27.971384
v 24.896133 -32.824585 29.416542
v 26.963774 -30.031576 30.639528
v 28.795338 -27.230471 31.647636
v 1.588632 -49.355801 7.962055
v 4.174305 -48.884922 10.059235
v 6.891775 -48.146622 12.227940
v 9.707122 -47.111759 14.435529
v 12.576024 -45.762016 16.642220
v 15.446023 -44.094055 18.803591
v 18.260502 -42.122231 20.874310
v 20.963842 -39.878864 22.812487
v 23.506760 -37.411770 24.583796
v 25.850662 -34.779335 26.164394
v 27.970156 -32.044353 27.542143
v 29.853462 -29.268013 28.716068
v 31.500998 -26.505045 29.694468
v 2.494398 -49.716988 4.889157
v 5.033427 -49.355793 6.842777
v 7.704407 -48.749222 8.882287
v 10.477540 -47.866493 10.982345
v 13.312984 -46.685097 13.110345
v 16.162405 -45.194866 15.227925
v 18.972158 -43.401272 17.293657
v 21.687769 -41.326752 19.266645
v 24.258968 -39.009724 21.110361
v 26.644226 -36.501053 22.795958
v 28.813929 -33.858906 24.304371
v 30.751562 -31.142967 25.626852
v 32.453094 -28.409273 26.764128
v 33.924927 -25.706478 27.724533
vn 0.011000 -0.999400 0.034000
vn 0.725000 -0.472800 0.500800
vn -0.028900 -0.999400 0.021000
vn -0.028900 -0.999400 -0.021000
vn 0.011000 -0.999400 -0.034000
vn 0.747100 -0.437100 0.500800
vn -0.245400 -0.437100 0.865300
vn -0.898800 -0.437100 0.034000
vn -0.310100 -0.437100 -0.844300
vn 0.707200 -0.437100 -0.555800
vn 0.736100 -0.415000 0.534800
vn -0.281200 -0.415000 0.865300
vn -0.909800 -0.415000 0.000000
vn -0.281200 -0.415000 -0.865300
vn 0.736100 -0.415000 -0.534800
vn 0.292200 0.472800 0.831300
vn -0.700300 0.472800 0.534800
vn -0.725000 0.472800 -0.500800
vn 0.252200 0.472800 -0.844300
vn 0.880900 0.472800 -0.021000
vn 0.028900 0.999400 -0.021000
vn 0.088500 0.995900 -0.021000
vn 0.151600 0.988200 -0.020900
vn 0.217600 0.975800 -0.020800
vn 0.285700 0.958100 -0.020600
vn 0.355100 0.934600 -0.020500
vn 0.424400 0.905300 -0.020400
vn 0.492500 0.870100 -0.020300
vn 0.558000 0.829600 -0.020300
vn 0.619900 0.784400 -0.020400
vn 0.677200 0.735500 -0.020500
vn 0.729100 0.684000 -0.020600
vn 0.775500 0.631000 -0.020800
vn 0.816100 0.577600 -0.020900
vn 0.851100 0.524600 -0.021000
vn 0.048800 0.998200 -0.035400
vn 0.047300 0.995900 -0.077700
vn 0.111000 0.993100 -0.037300
vn 0.109600 0.990800 -0.079600
vn 0.069800 0.993100 -0.094000
vn 0.066700 0.988200 -0.137700
vn 0.176600 0.983500 -0.039100
vn 0.175200 0.981200 -0.081300
vn 0.134500 0.986100 -0.097700
vn 0.131400 0.981200 -0.141500
vn 0.091800 0.983500 -0.155900
vn 0.087000 0.975800 -0.200500
vn 0.245000 0.968700 -0.040700
vn 0.243600 0.966300 -0.082700
vn 0.202500 0.974100 -0.101100
vn 0.199500 0.969100 -0.144900
vn 0.158700 0.974100 -0.161300
vn 0.154000 0.966300 -0.206100
vn 0.114500 0.968700 -0.220500
vn 0.107900 0.958100 -0.265400
vn 0.315300 0.948100 -0.042100
vn 0.313900 0.945700 -0.083900
vn 0.273000 0.956400 -0.104100
vn 0.270000 0.951500 -0.147800
vn 0.228800 0.959200 -0.166200
vn 0.224000 0.951500 -0.211100
vn 0.183300 0.956400 -0.227500
vn 0.176800 0.945700 -0.272600
vn 0.137500 0.948100 -0.286900
vn 0.129200 0.934600 -0.331300
vn 0.386300 0.921400 -0.043200
vn 0.384900 0.919100 -0.084700
vn 0.345000 0.932600 -0.106500
vn 0.342000 0.927700 -0.150100
vn 0.301000 0.938300 -0.170300
vn 0.296200 0.930600 -0.215200
vn 0.255000 0.938300 -0.233600
vn 0.248400 0.927700 -0.278800
vn 0.207900 0.932600 -0.295200
vn 0.199500 0.919100 -0.339900
vn 0.160500 0.921400 -0.354000
vn 0.150500 0.905300 -0.397300
vn 0.456700 0.888500 -0.043900
vn 0.455300 0.886200 -0.085300
vn 0.417100 0.902400 -0.108200
vn 0.414100 0.897500 -0.151700
vn 0.374100 0.911000 -0.173400
vn 0.369300 0.903300 -0.218300
vn 0.328300 0.914000 -0.238500
vn 0.321700 0.903300 -0.283800
vn 0.280600 0.911000 -0.302200
vn 0.272200 0.897500 -0.347000
vn 0.231800 0.902400 -0.363300
vn 0.221800 0.886200 -0.406700
vn 0.182900 0.888500 -0.420800
vn 0.171500 0.870100 -0.462100
vn 0.525200 0.849800 -0.044100
vn 0.523800 0.847500 -0.085400
vn 0.488000 0.866000 -0.109000
vn 0.485000 0.861100 -0.152500
vn 0.446800 0.877300 -0.175400
vn 0.442000 0.869600 -0.220200
vn 0.402000 0.883100 -0.242000
vn 0.395400 0.872400 -0.287300
vn 0.354400 0.883100 -0.307500
vn 0.346000 0.869600 -0.352300
vn 0.304900 0.877300 -0.370700
vn 0.294900 0.861100 -0.414200
vn 0.254500 0.866000 -0.430500
vn 0.243100 0.847500 -0.471800
vn 0.204300 0.849800 -0.485900
vn 0.191800 0.829600 -0.524400
vn 0.590500 0.805900 -0.043900
vn 0.589000 0.803600 -0.085200
vn 0.556300 0.823800 -0.109000
vn 0.553300 0.818900 -0.152500
vn 0.517500 0.837400 -0.176100
vn 0.512700 0.829700 -0.220800
vn 0.474500 0.845800 -0.243800
vn 0.467900 0.835200 -0.289000
vn 0.427900 0.848700 -0.310900
vn 0.419500 0.835200 -0.355700
vn 0.378500 0.845800 -0.375900
vn 0.368500 0.829700 -0.419400
vn 0.327400 0.837400 -0.437800
vn 0.316000 0.818900 -0.479100
vn 0.275600 0.823800 -0.495400
vn 0.263100 0.803600 -0.533900
vn 0.224200 0.805900 -0.548000
vn 0.210900 0.784400 -0.583300
vn 0.651300 0.757600 -0.043200
vn 0.649900 0.755300 -0.084700
vn 0.620600 0.776700 -0.108200
vn 0.617500 0.771800 -0.151700
vn 0.584800 0.792000 -0.175400
vn 0.580100 0.784200 -0.220200
vn 0.544300 0.802700 -0.243800
vn 0.537700 0.792000 -0.289000
vn 0.499500 0.808200 -0.312000
vn 0.491100 0.794700 -0.356800
vn 0.451100 0.808200 -0.378600
vn 0.441100 0.792000 -0.422100
vn 0.400000 0.802700 -0.442400
vn 0.388700 0.784200 -0.483600
vn 0.347500 0.792000 -0.502000
vn 0.335100 0.771800 -0.540500
vn 0.294600 0.776700 -0.556800
vn 0.281400 0.755300 -0.591900
vn 0.242400 0.757600 -0.606100
vn 0.228800 0.735600 -0.637700
vn 0.706900 0.706000 -0.042100
vn 0.705500 0.703700 -0.083900
vn 0.679800 0.725600 -0.106500
vn 0.676800 0.720700 -0.150100
vn 0.647500 0.742000 -0.173400
vn 0.642800 0.734300 -0.218300
vn 0.610100 0.754500 -0.242000
vn 0.603500 0.743800 -0.287300
vn 0.567800 0.762200 -0.310900
vn 0.559400 0.748700 -0.355700
vn 0.521100 0.764900 -0.378600
vn 0.511100 0.748700 -0.422100
vn 0.471100 0.762200 -0.443900
vn 0.459700 0.743800 -0.485200
vn 0.418700 0.754500 -0.505400
vn 0.406200 0.734300 -0.543800
vn 0.365000 0.742000 -0.562200
vn 0.351900 0.720700 -0.597300
vn 0.311300 0.725600 -0.613600
vn 0.297800 0.703700 -0.645100
vn 0.258500 0.706000 -0.659300
vn 0.245000 0.684100 -0.687100
vn 0.756800 0.652400 -0.040700
vn 0.755400 0.650100 -0.082700
vn 0.733300 0.671900 -0.104100
vn 0.730300 0.667000 -0.147800
vn 0.704600 0.688800 -0.170300
vn 0.699900 0.681100 -0.215200
vn 0.670600 0.702400 -0.238500
vn 0.664000 0.691700 -0.283800
vn 0.631400 0.711900 -0.307500
vn 0.623000 0.698400 -0.352300
vn 0.587300 0.716800 -0.375900
vn 0.577300 0.700600 -0.419400
vn 0.539000 0.716800 -0.442400
vn 0.527600 0.698400 -0.483600
vn 0.487600 0.711900 -0.505400
vn 0.475100 0.691700 -0.543800
vn 0.434100 0.702400 -0.564100
vn 0.420900 0.681100 -0.599100
vn 0.379700 0.688800 -0.617500
vn 0.366200 0.667000 -0.648900
vn 0.325600 0.671900 -0.665300
vn 0.312100 0.650100 -0.692800
vn 0.272600 0.652400 -0.707200
vn 0.259400 0.631000 -0.731100
vn 0.800700 0.597800 -0.039100
vn 0.799200 0.595500 -0.081300
vn 0.780700 0.616700 -0.101100
vn 0.777600 0.611800 -0.144900
vn 0.755600 0.633600 -0.166200
vn 0.750800 0.625800 -0.211100
vn 0.725200 0.647700 -0.233600
vn 0.718600 0.637000 -0.278900
vn 0.689400 0.658400 -0.302200
vn 0.681000 0.644800 -0.347000
vn 0.648300 0.665000 -0.370700
vn 0.638300 0.648800 -0.414200
vn 0.602600 0.667300 -0.437800
vn 0.591200 0.648800 -0.479100
vn 0.552900 0.665000 -0.502000
vn 0.540400 0.644800 -0.540500
vn 0.500400 0.658400 -0.562200
vn 0.487300 0.637000 -0.597300
vn 0.446300 0.647700 -0.617500
vn 0.432800 0.625900 -0.648900
vn 0.391600 0.633600 -0.667300
vn 0.378100 0.611800 -0.694800
vn 0.337400 0.616700 -0.711200
vn 0.324300 0.595500 -0.735000
vn 0.284600 0.597800 -0.749400
vn 0.272100 0.577600 -0.769700
vn 0.838600 0.543400 -0.037300
vn 0.837200 0.541100 -0.079600
vn 0.821800 0.561300 -0.097700
vn 0.818800 0.556400 -0.141500
vn 0.800200 0.577600 -0.161300
vn 0.795500 0.569900 -0.206100
vn 0.773400 0.591700 -0.227500
vn 0.766800 0.581100 -0.272600
vn 0.741100 0.603000 -0.295200
vn 0.732800 0.589500 -0.339900
vn 0.703500 0.610900 -0.363300
vn 0.693500 0.594700 -0.406700
vn 0.660700 0.614900 -0.430500
vn 0.649300 0.596500 -0.471800
vn 0.613600 0.614900 -0.495400
vn 0.601100 0.594700 -0.533900
vn 0.562900 0.610900 -0.556800
vn 0.549700 0.589500 -0.591900
vn 0.509800 0.603000 -0.613600
vn 0.496200 0.581100 -0.645100
vn 0.455300 0.591700 -0.665300
vn 0.441900 0.569900 -0.692800
vn 0.400700 0.577600 -0.711200
vn 0.387600 0.556400 -0.735000
vn 0.346900 0.561300 -0.751400
vn 0.334400 0.541100 -0.771600
vn 0.294600 0.543400 -0.786100
vn 0.283000 0.524600 -0.803000
vn 0.871000 0.490000 -0.035400
vn 0.869500 0.487700 -0.077700
vn 0.857100 0.506500 -0.094000
vn 0.854000 0.501600 -0.137700
vn 0.838600 0.521900 -0.155900
vn 0.833900 0.514200 -0.200500
vn 0.815200 0.535600 -0.220500
vn 0.808700 0.525000 -0.265400
vn 0.786500 0.547000 -0.286900
vn 0.778200 0.533600 -0.331300
vn 0.752300 0.555600 -0.354000
vn 0.742400 0.539500 -0.397300
vn 0.712900 0.560900 -0.420800
vn 0.701500 0.542500 -0.462100
vn 0.668700 0.562800 -0.485900
vn 0.656200 0.542500 -0.524400
vn 0.620500 0.560900 -0.548000
vn 0.607300 0.539500 -0.583300
vn 0.569200 0.555600 -0.606100
vn 0.555600 0.533600 -0.637700
vn 0.515800 0.547000 -0.659300
vn 0.502300 0.525000 -0.687100
vn 0.461600 0.535600 -0.707200
vn 0.448400 0.514200 -0.731100
vn 0.407400 0.521900 -0.749400
vn 0.394900 0.501700 -0.769700
vn 0.354300 0.506500 -0.786100
vn 0.342600 0.487700 -0.803000
vn 0.302800 0.490000 -0.817400
vn 0.292200 0.472800 -0.831300
vn -0.011000 0.999400 -0.034000
vn 0.007400 0.995900 -0.090700
vn 0.027000 0.988200 -0.150700
vn 0.047500 0.975800 -0.213400
vn 0.068700 0.958100 -0.278100
vn 0.090200 0.934600 -0.344000
vn 0.111700 0.905300 -0.409900
vn 0.132800 0.870100 -0.474600
vn 0.153100 0.829600 -0.537000
vn 0.172200 0.784400 -0.595900
vn 0.189700 0.735600 -0.650400
vn 0.205700 0.684100 -0.699800
vn 0.219900 0.631000 -0.743900
vn 0.232300 0.577600 -0.782600
vn 0.243000 0.524600 -0.815900
vn -0.018600 0.998200 -0.057300
vn -0.059300 0.995900 -0.069000
vn -0.001200 0.993100 -0.117100
vn -0.041800 0.990800 -0.128800
vn -0.067900 0.993100 -0.095400
vn -0.110400 0.988200 -0.106000
vn 0.017400 0.983500 -0.180100
vn -0.023200 0.981200 -0.191700
vn -0.051400 0.986100 -0.158100
vn -0.094000 0.981200 -0.168700
vn -0.119900 0.983500 -0.135500
vn -0.163800 0.975800 -0.144700
vn 0.037000 0.968700 -0.245600
vn -0.003400 0.966300 -0.257300
vn -0.033600 0.974100 -0.223800
vn -0.076200 0.969100 -0.234500
vn -0.104400 0.974100 -0.200800
vn -0.148500 0.966300 -0.210100
vn -0.174300 0.968700 -0.177000
vn -0.219000 0.958100 -0.184700
vn 0.057400 0.948100 -0.312900
vn 0.017200 0.945700 -0.324500
vn -0.014600 0.956400 -0.291800
vn -0.057100 0.951500 -0.302400
vn -0.087400 0.959200 -0.268900
vn -0.131500 0.951500 -0.278300
vn -0.159700 0.956400 -0.244700
vn -0.204600 0.945700 -0.252400
vn -0.230300 0.948100 -0.219400
vn -0.275200 0.934600 -0.225300
vn 0.078300 0.921400 -0.380800
vn 0.038400 0.919100 -0.392200
vn 0.005300 0.932600 -0.361000
vn -0.037100 0.927700 -0.371600
vn -0.069000 0.938300 -0.338900
vn -0.113100 0.930600 -0.348200
vn -0.143400 0.938300 -0.314700
vn -0.188400 0.927700 -0.322400
vn -0.216500 0.932600 -0.288900
vn -0.261600 0.919100 -0.294800
vn -0.287100 0.921400 -0.262000
vn -0.331300 0.905300 -0.265900
vn 0.099400 0.888500 -0.447900
vn 0.059600 0.886200 -0.459400
vn 0.026000 0.902400 -0.430100
vn -0.016300 0.897500 -0.440700
vn -0.049300 0.911000 -0.409400
vn -0.093500 0.903300 -0.418700
vn -0.125400 0.914000 -0.385900
vn -0.170500 0.903300 -0.393700
vn -0.200700 0.911000 -0.360200
vn -0.245900 0.897500 -0.366100
vn -0.273900 0.902400 -0.332700
vn -0.318300 0.886200 -0.336600
vn -0.343700 0.888500 -0.304000
vn -0.386500 0.870100 -0.305900
vn 0.120300 0.849800 -0.513100
vn 0.080600 0.847500 -0.524600
vn 0.047100 0.866000 -0.497900
vn 0.004900 0.861100 -0.508400
vn -0.028700 0.877300 -0.479100
vn -0.072800 0.869600 -0.488400
vn -0.105900 0.883100 -0.457100
vn -0.151000 0.872400 -0.464800
vn -0.183000 0.883100 -0.432000
vn -0.228200 0.869600 -0.437900
vn -0.258400 0.877300 -0.404500
vn -0.302800 0.861100 -0.408400
vn -0.330700 0.866000 -0.375100
vn -0.373600 0.847500 -0.377000
vn -0.399000 0.849800 -0.344400
vn -0.439500 0.829600 -0.344400
vn 0.140700 0.805900 -0.575100
vn 0.100900 0.803600 -0.586600
vn 0.068200 0.823800 -0.562800
vn 0.026000 0.818900 -0.573300
vn -0.007500 0.837400 -0.546600
vn -0.051600 0.829700 -0.555900
vn -0.085200 0.845800 -0.526600
vn -0.130300 0.835200 -0.534300
vn -0.163400 0.848700 -0.503000
vn -0.208700 0.835200 -0.508900
vn -0.240600 0.845800 -0.476100
vn -0.285000 0.829700 -0.480000
vn -0.315200 0.837400 -0.446600
vn -0.358000 0.818900 -0.448500
vn -0.386000 0.823800 -0.415200
vn -0.426400 0.803600 -0.415200
vn -0.451900 0.805900 -0.382600
vn -0.489500 0.784400 -0.380900
vn 0.160200 0.757600 -0.632800
vn 0.120200 0.755300 -0.644300
vn 0.088900 0.776700 -0.623600
vn 0.046600 0.771800 -0.634200
vn 0.013900 0.792000 -0.610400
vn -0.030200 0.784200 -0.619700
vn -0.063600 0.802700 -0.593000
vn -0.108700 0.792000 -0.600700
vn -0.142400 0.808200 -0.571400
vn -0.187600 0.794700 -0.577300
vn -0.220700 0.808200 -0.546000
vn -0.265100 0.792000 -0.549900
vn -0.297100 0.802700 -0.517200
vn -0.339900 0.784200 -0.519100
vn -0.370100 0.792000 -0.485700
vn -0.410500 0.771800 -0.485700
vn -0.438500 0.776700 -0.452300
vn -0.476000 0.755300 -0.450500
vn -0.501500 0.757600 -0.417800
vn -0.535800 0.735600 -0.414600
vn 0.178400 0.706000 -0.685400
vn 0.138200 0.703700 -0.696900
vn 0.108800 0.725600 -0.679400
vn 0.066400 0.720700 -0.690000
vn 0.035100 0.742000 -0.669400
vn -0.009000 0.734300 -0.678700
vn -0.041600 0.754500 -0.655000
vn -0.086700 0.743800 -0.662700
vn -0.120200 0.762200 -0.636000
vn -0.165400 0.748700 -0.641900
vn -0.199100 0.764900 -0.612600
vn -0.243500 0.748700 -0.616600
vn -0.276600 0.762200 -0.585200
vn -0.319400 0.743800 -0.587100
vn -0.351300 0.754500 -0.554400
vn -0.391700 0.734300 -0.554400
vn -0.421900 0.742000 -0.520900
vn -0.459300 0.720700 -0.519200
vn -0.487400 0.725600 -0.485700
vn -0.521500 0.703700 -0.482500
vn -0.547200 0.706000 -0.449600
vn -0.577800 0.684100 -0.445300
vn 0.195100 0.652400 -0.732300
vn 0.154700 0.650100 -0.743900
vn 0.127600 0.671900 -0.729600
vn 0.085100 0.667000 -0.740200
vn 0.055800 0.688800 -0.722800
vn 0.011600 0.681100 -0.732100
vn -0.019600 0.702400 -0.711500
vn -0.064700 0.691700 -0.719200
vn -0.097400 0.711900 -0.695500
vn -0.142600 0.698400 -0.701400
vn -0.176100 0.716800 -0.674700
vn -0.220500 0.700600 -0.678600
vn -0.254100 0.716800 -0.649300
vn -0.296900 0.698400 -0.651300
vn -0.330000 0.711900 -0.619900
vn -0.370400 0.691700 -0.619900
vn -0.402400 0.702400 -0.587200
vn -0.439700 0.681100 -0.585500
vn -0.470000 0.688800 -0.552000
vn -0.503900 0.667000 -0.548800
vn -0.532100 0.671900 -0.515200
vn -0.562500 0.650100 -0.510900
vn -0.588300 0.652400 -0.477800
vn -0.615100 0.631000 -0.472600
vn 0.210200 0.597800 -0.773600
vn 0.169700 0.595500 -0.785200
vn 0.145100 0.616700 -0.773700
vn 0.102500 0.611800 -0.784300
vn 0.075400 0.633600 -0.770000
vn 0.031300 0.625900 -0.779300
vn 0.001900 0.647700 -0.761900
vn -0.043100 0.637000 -0.769600
vn -0.074400 0.658400 -0.749000
vn -0.119600 0.644800 -0.754900
vn -0.152200 0.665000 -0.731100
vn -0.196700 0.648800 -0.735100
vn -0.230200 0.667300 -0.708300
vn -0.273000 0.648800 -0.710300
vn -0.306600 0.665000 -0.681000
vn -0.347000 0.644800 -0.681000
vn -0.380100 0.658400 -0.649700
vn -0.417500 0.637000 -0.648000
vn -0.449400 0.647700 -0.615300
vn -0.483400 0.625900 -0.612100
vn -0.513600 0.633600 -0.578600
vn -0.543900 0.611800 -0.574300
vn -0.572200 0.616700 -0.540600
vn -0.598800 0.595500 -0.535500
vn -0.624800 0.597800 -0.502200
vn -0.647900 0.577600 -0.496600
vn 0.223700 0.543400 -0.809100
vn 0.183000 0.541100 -0.820800
vn 0.161000 0.561300 -0.811800
vn 0.118400 0.556400 -0.822500
vn 0.093800 0.577600 -0.810900
vn 0.049800 0.569900 -0.820200
vn 0.022600 0.591700 -0.805800
vn -0.022300 0.581100 -0.813500
vn -0.051700 0.603000 -0.796100
vn -0.096800 0.589500 -0.802000
vn -0.128100 0.610900 -0.781300
vn -0.172500 0.594700 -0.785200
vn -0.205200 0.614900 -0.761400
vn -0.248000 0.596500 -0.763300
vn -0.281500 0.614900 -0.736600
vn -0.322000 0.594700 -0.736600
vn -0.355600 0.610900 -0.707400
vn -0.393100 0.589500 -0.705700
vn -0.426100 0.603000 -0.674400
vn -0.460100 0.581100 -0.671300
vn -0.492000 0.591700 -0.638600
vn -0.522400 0.569900 -0.634300
vn -0.552600 0.577600 -0.600900
vn -0.579200 0.556400 -0.595800
vn -0.607500 0.561300 -0.562100
vn -0.630500 0.541100 -0.556500
vn -0.656600 0.543400 -0.523100
vn -0.676200 0.524600 -0.517300
vn 0.235500 0.490000 -0.839300
vn 0.194800 0.487700 -0.851000
vn 0.175400 0.506500 -0.844200
vn 0.132900 0.501700 -0.854800
vn 0.110900 0.521900 -0.845800
vn 0.067000 0.514200 -0.855000
vn 0.042200 0.535600 -0.843400
vn -0.002500 0.525000 -0.851100
vn -0.029800 0.547000 -0.836600
vn -0.074700 0.533600 -0.842500
vn -0.104200 0.555600 -0.824900
vn -0.148500 0.539500 -0.828800
vn -0.179900 0.560900 -0.808100
vn -0.222700 0.542500 -0.810000
vn -0.255400 0.562800 -0.786200
vn -0.296000 0.542500 -0.786200
vn -0.329400 0.561000 -0.759500
vn -0.367100 0.539500 -0.757800
vn -0.400500 0.555600 -0.728600
vn -0.434800 0.533600 -0.725400
vn -0.467600 0.547000 -0.694300
vn -0.498200 0.525000 -0.690000
vn -0.529900 0.535600 -0.657500
vn -0.556800 0.514200 -0.652400
vn -0.586800 0.521900 -0.619100
vn -0.610000 0.501700 -0.613400
vn -0.638100 0.506500 -0.579800
vn -0.657800 0.487700 -0.574000
vn -0.683800 0.490000 -0.540600
vn -0.700300 0.472800 -0.534800
vn -0.035700 0.999400 0.000000
vn -0.084000 0.995900 -0.035100
vn -0.135000 0.988200 -0.072200
vn -0.188300 0.975800 -0.111100
vn -0.243300 0.958100 -0.151200
vn -0.299300 0.934600 -0.192100
vn -0.355300 0.905300 -0.232900
vn -0.410300 0.870100 -0.273000
vn -0.463400 0.829600 -0.311500
vn -0.513500 0.784400 -0.347900
vn -0.559900 0.735600 -0.381400
vn -0.602000 0.684100 -0.411900
vn -0.639600 0.631000 -0.439000
vn -0.672500 0.577600 -0.462800
vn -0.700900 0.524600 -0.483300
vn -0.060300 0.998200 0.000000
vn -0.084000 0.995900 0.035100
vn -0.111700 0.993100 -0.035100
vn -0.135400 0.990800 0.000000
vn -0.111700 0.993100 0.035100
vn -0.135000 0.988200 0.072200
vn -0.165900 0.983500 -0.072200
vn -0.189500 0.981200 -0.037200
vn -0.166200 0.986100 0.000000
vn -0.189500 0.981200 0.037200
vn -0.165900 0.983500 0.072200
vn -0.188300 0.975800 0.111100
vn -0.222200 0.968700 -0.111100
vn -0.245700 0.966300 -0.076300
vn -0.223200 0.974100 -0.037200
vn -0.246500 0.969100 0.000000
vn -0.223200 0.974100 0.037200
vn -0.245700 0.966300 0.076300
vn -0.222200 0.968700 0.111100
vn -0.243300 0.958100 0.151200
vn -0.279900 0.948100 -0.151200
vn -0.303300 0.945700 -0.116600
vn -0.282000 0.956400 -0.076300
vn -0.305300 0.951500 -0.039100
vn -0.282800 0.959200 0.000000
vn -0.305300 0.951500 0.039100
vn -0.282000 0.956400 0.076300
vn -0.303300 0.945700 0.116600
vn -0.279900 0.948100 0.151200
vn -0.299300 0.934600 0.192100
vn -0.337900 0.921400 -0.192100
vn -0.361200 0.919100 -0.157700
vn -0.341700 0.932600 -0.116600
vn -0.364900 0.927700 -0.079600
vn -0.343600 0.938300 -0.039100
vn -0.366100 0.930600 0.000000
vn -0.343600 0.938300 0.039100
vn -0.364900 0.927700 0.079600
vn -0.341700 0.932600 0.116600
vn -0.361200 0.919100 0.157700
vn -0.337900 0.921400 0.192100
vn -0.355300 0.905300 0.232900
vn -0.395300 0.888500 -0.232900
vn -0.418500 0.886200 -0.198700
vn -0.401000 0.902400 -0.157700
vn -0.424200 0.897500 -0.120700
vn -0.404600 0.911000 -0.079600
vn -0.427100 0.903300 -0.040500
vn -0.405800 0.914000 0.000000
vn -0.427100 0.903300 0.040500
vn -0.404600 0.911000 0.079600
vn -0.424200 0.897500 0.120700
vn -0.401000 0.902400 0.157700
vn -0.418500 0.886200 0.198700
vn -0.395300 0.888500 0.232900
vn -0.410300 0.870100 0.273000
vn -0.450900 0.849800 -0.273000
vn -0.474000 0.847500 -0.238800
vn -0.458900 0.866000 -0.198700
vn -0.482000 0.861100 -0.161800
vn -0.464600 0.877300 -0.120700
vn -0.487000 0.869600 -0.081700
vn -0.467400 0.883100 -0.040500
vn -0.488700 0.872400 0.000000
vn -0.467400 0.883100 0.040500
vn -0.487000 0.869600 0.081700
vn -0.464600 0.877300 0.120700
vn -0.482000 0.861100 0.161800
vn -0.458900 0.866000 0.198700
vn -0.474000 0.847500 0.238800
vn -0.450900 0.849800 0.273000
vn -0.463400 0.829600 0.311500
vn -0.503500 0.805900 -0.311500
vn -0.526700 0.803600 -0.277300
vn -0.514100 0.823800 -0.238800
vn -0.537200 0.818900 -0.201900
vn -0.522200 0.837400 -0.161700
vn -0.544600 0.829700 -0.122700
vn -0.527200 0.845800 -0.081700
vn -0.548400 0.835200 -0.041200
vn -0.528900 0.848700 0.000000
vn -0.548400 0.835200 0.041200
vn -0.527200 0.845800 0.081700
vn -0.544600 0.829700 0.122700
vn -0.522200 0.837400 0.161700
vn -0.537200 0.818900 0.201900
vn -0.514100 0.823800 0.238800
vn -0.526700 0.803600 0.277300
vn -0.503500 0.805900 0.311500
vn -0.513500 0.784400 0.347900
vn -0.552300 0.757600 -0.347900
vn -0.575600 0.755300 -0.313400
vn -0.565600 0.776700 -0.277300
vn -0.588700 0.771800 -0.240300
vn -0.576200 0.792000 -0.201900
vn -0.598700 0.784200 -0.162800
vn -0.583700 0.802700 -0.122700
vn -0.604900 0.792000 -0.082200
vn -0.587500 0.808200 -0.041200
vn -0.607100 0.794700 0.000000
vn -0.587500 0.808200 0.041200
vn -0.604900 0.792000 0.082200
vn -0.583700 0.802700 0.122700
vn -0.598700 0.784200 0.162800
vn -0.576200 0.792000 0.201900
vn -0.588700 0.771800 0.240300
vn -0.565600 0.776700 0.277300
vn -0.575600 0.755300 0.313400
vn -0.552300 0.757600 0.347900
vn -0.559900 0.735600 0.381400
vn -0.596700 0.706000 -0.381400
vn -0.620100 0.703700 -0.346800
vn -0.612600 0.725600 -0.313400
vn -0.635700 0.720700 -0.276400
vn -0.625800 0.742000 -0.240300
vn -0.648300 0.734300 -0.201200
vn -0.635800 0.754500 -0.162800
vn -0.657100 0.743800 -0.122300
vn -0.642000 0.762200 -0.082200
vn -0.661600 0.748700 -0.041000
vn -0.644200 0.764900 0.000000
vn -0.661600 0.748700 0.041000
vn -0.642000 0.762200 0.082200
vn -0.657100 0.743800 0.122300
vn -0.635800 0.754500 0.162800
vn -0.648300 0.734300 0.201200
vn -0.625800 0.742000 0.240300
vn -0.635700 0.720700 0.276400
vn -0.612600 0.725600 0.313400
vn -0.620100 0.703700 0.346800
vn -0.596700 0.706000 0.381400
vn -0.602000 0.684100 0.411900
vn -0.636200 0.652400 -0.411900
vn -0.659700 0.650100 -0.377100
vn -0.654400 0.671900 -0.346800
vn -0.677700 0.667000 -0.309700
vn -0.670200 0.688800 -0.276400
vn -0.692700 0.681100 -0.237300
vn -0.682800 0.702400 -0.201200
vn -0.704000 0.691700 -0.160700
vn -0.691600 0.711900 -0.122300
vn -0.711100 0.698400 -0.081100
vn -0.696100 0.716800 -0.041000
vn -0.713500 0.700600 0.000000
vn -0.696100 0.716800 0.041000
vn -0.711100 0.698400 0.081100
vn -0.691600 0.711900 0.122300
vn -0.704000 0.691700 0.160700
vn -0.682800 0.702400 0.201200
vn -0.692700 0.681100 0.237300
vn -0.670200 0.688800 0.276400
vn -0.677700 0.667000 0.309700
vn -0.654400 0.671900 0.346800
vn -0.659700 0.650100 0.377100
vn -0.636200 0.652400 0.411900
vn -0.639600 0.631000 0.439000
vn -0.670700 0.597800 -0.439000
vn -0.694400 0.595500 -0.404000
vn -0.691000 0.616700 -0.377100
vn -0.714300 0.611800 -0.339800
vn -0.709000 0.633600 -0.309700
vn -0.731500 0.625900 -0.270500
vn -0.724000 0.647700 -0.237300
vn -0.745300 0.637000 -0.196800
vn -0.735300 0.658400 -0.160700
vn -0.754900 0.644800 -0.119600
vn -0.742400 0.665000 -0.081100
vn -0.759900 0.648800 -0.040100
vn -0.744800 0.667300 0.000000
vn -0.759900 0.648800 0.040100
vn -0.742400 0.665000 0.081100
vn -0.754900 0.644800 0.119600
vn -0.735300 0.658400 0.160700
vn -0.745300 0.637000 0.196800
vn -0.724000 0.647700 0.237300
vn -0.731500 0.625900 0.270500
vn -0.709000 0.633600 0.309700
vn -0.714300 0.611800 0.339800
vn -0.691000 0.616700 0.377100
vn -0.694400 0.595500 0.404000
vn -0.670700 0.597800 0.439000
vn -0.672500 0.577600 0.462800
vn -0.700400 0.543400 -0.462800
vn -0.724100 0.541100 -0.427700
vn -0.722300 0.561300 -0.404000
vn -0.745600 0.556400 -0.366800
vn -0.742200 0.577600 -0.339800
vn -0.764700 0.569900 -0.300800
vn -0.759400 0.591700 -0.270600
vn -0.780600 0.581100 -0.230200
vn -0.773100 0.603000 -0.196800
vn -0.792600 0.589500 -0.155800
vn -0.782700 0.610900 -0.119600
vn -0.800100 0.594700 -0.078600
vn -0.787600 0.614900 -0.040100
vn -0.802600 0.596500 0.000000
vn -0.787600 0.614900 0.040100
vn -0.800100 0.594700 0.078600
vn -0.782700 0.610900 0.119600
vn -0.792600 0.589500 0.155800
vn -0.773100 0.603000 0.196800
vn -0.780600 0.581100 0.230200
vn -0.759400 0.591700 0.270600
vn -0.764700 0.569900 0.300800
vn -0.742200 0.577600 0.339800
vn -0.745600 0.556400 0.366800
vn -0.722300 0.561300 0.404000
vn -0.724100 0.541100 0.427700
vn -0.700400 0.543400 0.462800
vn -0.700900 0.524600 0.483300
vn -0.725500 0.490000 -0.483300
vn -0.749200 0.487700 -0.448200
vn -0.748700 0.506500 -0.427700
vn -0.771900 0.501700 -0.390600
vn -0.770100 0.521900 -0.366800
vn -0.792500 0.514200 -0.327900
vn -0.789100 0.535600 -0.300800
vn -0.810200 0.525000 -0.260600
vn -0.804900 0.547000 -0.230200
vn -0.824300 0.533600 -0.189300
vn -0.816700 0.555600 -0.155800
vn -0.834100 0.539500 -0.114900
vn -0.824100 0.561000 -0.078600
vn -0.839200 0.542500 -0.038500
vn -0.826600 0.562800 0.000000
vn -0.839200 0.542500 0.038500
vn -0.824100 0.561000 0.078600
vn -0.834100 0.539500 0.114900
vn -0.816700 0.555600 0.155800
vn -0.824300 0.533600 0.189300
vn -0.804900 0.547000 0.230200
vn -0.810200 0.525000 0.260600
vn -0.789100 0.535600 0.300800
vn -0.792500 0.514200 0.327900
vn -0.770100 0.521900 0.366800
vn -0.771900 0.501600 0.390600
vn -0.748700 0.506500 0.427700
vn -0.749200 0.487700 0.448200
vn -0.725500 0.490000 0.483300
vn -0.725000 0.472800 0.500800
vn -0.011000 0.999400 0.034000
vn -0.059300 0.995900 0.069000
vn -0.110400 0.988200 0.106000
vn -0.163800 0.975800 0.144700
vn -0.219000 0.958100 0.184700
vn -0.275200 0.934600 0.225300
vn -0.331300 0.905300 0.265900
vn -0.386500 0.870100 0.305900
vn -0.439500 0.829600 0.344400
vn -0.489500 0.784400 0.380900
vn -0.535800 0.735600 0.414600
vn -0.577800 0.684100 0.445300
vn -0.615200 0.631000 0.472600
vn -0.647900 0.577600 0.496600
vn -0.676200 0.524600 0.517300
vn -0.018600 0.998200 0.057300
vn 0.007400 0.995900 0.090700
vn -0.067900 0.993100 0.095400
vn -0.041800 0.990800 0.128800
vn -0.001200 0.993100 0.117100
vn 0.027000 0.988200 0.150700
vn -0.119900 0.983500 0.135400
vn -0.094000 0.981200 0.168700
vn -0.051400 0.986100 0.158100
vn -0.023200 0.981200 0.191700
vn 0.017400 0.983500 0.180100
vn 0.047500 0.975800 0.213400
vn -0.174300 0.968700 0.177000
vn -0.148500 0.966300 0.210100
vn -0.104400 0.974100 0.200800
vn -0.076200 0.969100 0.234500
vn -0.033600 0.974100 0.223800
vn -0.003400 0.966300 0.257300
vn 0.037000 0.968700 0.245600
vn 0.068700 0.958100 0.278100
vn -0.230300 0.948100 0.219400
vn -0.204600 0.945700 0.252400
vn -0.159700 0.956400 0.244700
vn -0.131500 0.951500 0.278300
vn -0.087400 0.959200 0.268900
vn -0.057100 0.951500 0.302400
vn -0.014600 0.956400 0.291800
vn 0.017200 0.945700 0.324500
vn 0.057400 0.948100 0.312900
vn 0.090200 0.934600 0.344000
vn -0.287100 0.921400 0.262000
vn -0.261600 0.919100 0.294800
vn -0.216500 0.932600 0.288900
vn -0.188400 0.927700 0.322400
vn -0.143400 0.938300 0.314700
vn -0.113100 0.930600 0.348200
vn -0.069000 0.938300 0.338900
vn -0.037100 0.927700 0.371600
vn 0.005300 0.932600 0.361000
vn 0.038400 0.919100 0.392200
vn 0.078300 0.921400 0.380800
vn 0.111700 0.905300 0.409900
vn -0.343700 0.888500 0.304000
vn -0.318300 0.886200 0.336600
vn -0.273900 0.902400 0.332700
vn -0.245900 0.897500 0.366100
vn -0.200700 0.911000 0.360200
vn -0.170500 0.903300 0.393700
vn -0.125400 0.914000 0.385900
vn -0.093500 0.903300 0.418700
vn -0.049300 0.911000 0.409400
vn -0.016300 0.897500 0.440700
vn 0.026000 0.902400 0.430100
vn 0.059600 0.886200 0.459400
vn 0.099400 0.888500 0.447900
vn 0.132800 0.870100 0.474600
vn -0.399000 0.849800 0.344400
vn -0.373600 0.847500 0.377000
vn -0.330700 0.866000 0.375100
vn -0.302800 0.861100 0.408400
vn -0.258400 0.877300 0.404500
vn -0.228200 0.869600 0.437900
vn -0.183000 0.883100 0.432100
vn -0.151000 0.872400 0.464800
vn -0.105900 0.883100 0.457100
vn -0.072800 0.869600 0.488400
vn -0.028700 0.877300 0.479100
vn 0.004900 0.861100 0.508400
vn 0.047100 0.866000 0.497900
vn 0.080600 0.847500 0.524600
vn 0.120300 0.849800 0.513100
vn 0.153100 0.829600 0.537000
vn -0.451900 0.805900 0.382600
vn -0.426400 0.803600 0.415200
vn -0.386000 0.823800 0.415200
vn -0.358000 0.818900 0.448500
vn -0.315200 0.837400 0.446600
vn -0.285000 0.829700 0.480000
vn -0.240600 0.845800 0.476100
vn -0.208600 0.835200 0.508900
vn -0.163400 0.848700 0.503000
vn -0.130300 0.835200 0.534300
vn -0.085200 0.845800 0.526600
vn -0.051600 0.829700 0.555900
vn -0.007500 0.837400 0.546600
vn 0.026000 0.818900 0.573300
vn 0.068200 0.823800 0.562800
vn 0.100900 0.803600 0.586600
vn 0.140700 0.805900 0.575100
vn 0.172200 0.784400 0.595900
vn -0.501500 0.757600 0.417800
vn -0.476000 0.755300 0.450500
vn -0.438500 0.776700 0.452300
vn -0.410500 0.771800 0.485700
vn -0.370100 0.792000 0.485700
vn -0.339900 0.784200 0.519100
vn -0.297100 0.802700 0.517200
vn -0.265100 0.792000 0.549900
vn -0.220700 0.808200 0.546000
vn -0.187600 0.794700 0.577300
vn -0.142400 0.808200 0.571400
vn -0.108700 0.792000 0.600700
vn -0.063600 0.802700 0.593000
vn -0.030200 0.784200 0.619700
vn 0.013900 0.792000 0.610400
vn 0.046600 0.771800 0.634200
vn 0.088900 0.776700 0.623600
vn 0.120200 0.755300 0.644300
vn 0.160200 0.757600 0.632800
vn 0.189700 0.735600 0.650400
vn -0.547200 0.706000 0.449600
vn -0.521500 0.703700 0.482500
vn -0.487400 0.725600 0.485700
vn -0.459300 0.720700 0.519200
vn -0.421900 0.742000 0.520900
vn -0.391700 0.734300 0.554400
vn -0.351300 0.754500 0.554400
vn -0.319400 0.743800 0.587100
vn -0.276600 0.762200 0.585200
vn -0.243500 0.748700 0.616600
vn -0.199100 0.764900 0.612600
vn -0.165400 0.748700 0.641900
vn -0.120200 0.762200 0.636000
vn -0.086700 0.743800 0.662700
vn -0.041600 0.754500 0.655000
vn -0.009000 0.734300 0.678700
vn 0.035100 0.742000 0.669400
vn 0.066400 0.720700 0.690000
vn 0.108800 0.725600 0.679400
vn 0.138200 0.703700 0.696900
vn 0.178400 0.706000 0.685400
vn 0.205700 0.684100 0.699800
vn -0.588300 0.652400 0.477800
vn -0.562500 0.650100 0.510900
vn -0.532100 0.671900 0.515200
vn -0.503900 0.667000 0.548800
vn -0.470000 0.688800 0.552000
vn -0.439700 0.681100 0.585500
vn -0.402400 0.702400 0.587200
vn -0.370400 0.691700 0.619900
vn -0.330000 0.711900 0.619900
vn -0.296900 0.698400 0.651300
vn -0.254100 0.716800 0.649300
vn -0.220500 0.700600 0.678600
vn -0.176100 0.716800 0.674700
vn -0.142600 0.698400 0.701400
vn -0.097400 0.711900 0.695500
vn -0.064700 0.691700 0.719200
vn -0.019600 0.702400 0.711500
vn 0.011600 0.681100 0.732100
vn 0.055800 0.688800 0.722800
vn 0.085100 0.667000 0.740200
vn 0.127600 0.671900 0.729600
vn 0.154700 0.650100 0.744000
vn 0.195100 0.652400 0.732300
vn 0.219900 0.631000 0.743900
vn -0.624800 0.597800 0.502200
vn -0.598800 0.595500 0.535500
vn -0.572200 0.616700 0.540600
vn -0.543900 0.611800 0.574300
vn -0.513600 0.633600 0.578600
vn -0.483400 0.625900 0.612100
vn -0.449400 0.647700 0.615300
vn -0.417500 0.637000 0.648000
vn -0.380100 0.658400 0.649700
vn -0.347000 0.644800 0.681000
vn -0.306600 0.665000 0.681000
vn -0.273000 0.648800 0.710300
vn -0.230200 0.667300 0.708300
vn -0.196700 0.648900 0.735100
vn -0.152200 0.665000 0.731100
vn -0.119600 0.644800 0.754900
vn -0.074400 0.658400 0.749000
vn -0.043100 0.637000 0.769600
vn 0.001900 0.647700 0.761900
vn 0.031300 0.625900 0.779300
vn 0.075400 0.633600 0.770000
vn 0.102500 0.611800 0.784300
vn 0.145100 0.616700 0.773700
vn 0.169700 0.595500 0.785200
vn 0.210200 0.597800 0.773600
vn 0.232300 0.577600 0.782600
vn -0.656600 0.543400 0.523100
vn -0.630500 0.541100 0.556500
vn -0.607500 0.561300 0.562100
vn -0.579200 0.556400 0.595800
vn -0.552600 0.577600 0.600900
vn -0.522400 0.569900 0.634300
vn -0.492000 0.591700 0.638600
vn -0.460100 0.581100 0.671300
vn -0.426100 0.603000 0.674400
vn -0.393100 0.589500 0.705700
vn -0.355600 0.610900 0.707400
vn -0.322000 0.594700 0.736600
vn -0.281500 0.614900 0.736600
vn -0.248000 0.596500 0.763300
vn -0.205200 0.614900 0.761400
vn -0.172500 0.594700 0.785200
vn -0.128100 0.610900 0.781300
vn -0.096800 0.589500 0.802000
vn -0.051700 0.603000 0.796100
vn -0.022300 0.581100 0.813500
vn 0.022600 0.591700 0.805800
vn 0.049800 0.569900 0.820200
vn 0.093800 0.577600 0.810900
vn 0.118400 0.556400 0.822500
vn 0.161000 0.561300 0.811800
vn 0.183000 0.541100 0.820800
vn 0.223700 0.543400 0.809100
vn 0.243000 0.524600 0.815900
vn -0.683800 0.490000 0.540600
vn -0.657800 0.487700 0.574000
vn -0.638100 0.506500 0.579800
vn -0.610000 0.501700 0.613400
vn -0.586800 0.521900 0.619100
vn -0.556800 0.514200 0.652400
vn -0.529900 0.535600 0.657500
vn -0.498200 0.525000 0.690000
vn -0.467600 0.547000 0.694300
vn -0.434800 0.533600 0.725400
vn -0.400500 0.555600 0.728600
vn -0.367100 0.539500 0.757800
vn -0.329400 0.561000 0.759500
vn -0.296000 0.542500 0.786200
vn -0.255400 0.562800 0.786200
vn -0.222700 0.542500 0.810000
vn -0.179900 0.560900 0.808100
vn -0.148500 0.539500 0.828800
vn -0.104200 0.555600 0.824900
vn -0.074700 0.533600 0.842500
vn -0.029800 0.547000 0.836600
vn -0.002500 0.525000 0.851100
vn 0.042200 0.535600 0.843400
vn 0.067000 0.514200 0.855000
vn 0.110900 0.521900 0.845800
vn 0.132900 0.501700 0.854800
vn 0.175400 0.506500 0.844200
vn 0.194800 0.487700 0.851000
vn 0.235500 0.490000 0.839300
vn 0.252200 0.472800 0.844300
vn 0.028900 0.999400 0.021000
vn 0.047300 0.995900 0.077700
vn 0.066700 0.988200 0.137700
vn 0.087000 0.975800 0.200500
vn 0.107900 0.958100 0.265400
vn 0.129200 0.934600 0.331300
vn 0.150500 0.905300 0.397300
vn 0.171500 0.870100 0.462100
vn 0.191800 0.829600 0.524400
vn 0.210900 0.784400 0.583300
vn 0.228800 0.735600 0.637700
vn 0.245000 0.684100 0.687100
vn 0.259400 0.631000 0.731100
vn 0.272100 0.577600 0.769700
vn 0.283000 0.524600 0.803000
vn 0.048800 0.998200 0.035400
vn 0.088500 0.995900 0.021000
vn 0.069800 0.993100 0.094000
vn 0.109600 0.990800 0.079600
vn 0.111000 0.993100 0.037300
vn 0.151600 0.988200 0.020900
vn 0.091800 0.983500 0.155900
vn 0.131400 0.981200 0.141500
vn 0.134500 0.986100 0.097700
vn 0.175200 0.981200 0.081300
vn 0.176600 0.983500 0.039100
vn 0.217600 0.975800 0.020800
vn 0.114500 0.968700 0.220500
vn 0.154000 0.966300 0.206100
vn 0.158700 0.974100 0.161300
vn 0.199400 0.969100 0.144900
vn 0.202500 0.974100 0.101100
vn 0.243600 0.966300 0.082700
vn 0.245000 0.968700 0.040700
vn 0.285700 0.958100 0.020600
vn 0.137500 0.948100 0.286900
vn 0.176800 0.945700 0.272600
vn 0.183300 0.956400 0.227500
vn 0.224000 0.951500 0.211100
vn 0.228800 0.959200 0.166200
vn 0.270000 0.951500 0.147800
vn 0.273000 0.956400 0.104100
vn 0.313900 0.945700 0.083900
vn 0.315300 0.948100 0.042100
vn 0.355100 0.934600 0.020500
vn 0.160500 0.921400 0.354000
vn 0.199500 0.919100 0.339900
vn 0.207900 0.932600 0.295200
vn 0.248400 0.927700 0.278800
vn 0.255000 0.938300 0.233600
vn 0.296200 0.930600 0.215200
vn 0.301000 0.938300 0.170300
vn 0.342000 0.927700 0.150100
vn 0.345000 0.932600 0.106500
vn 0.384900 0.919100 0.084700
vn 0.386300 0.921400 0.043200
vn 0.424400 0.905300 0.020400
vn 0.182900 0.888500 0.420800
vn 0.221800 0.886200 0.406700
vn 0.231800 0.902400 0.363300
vn 0.272200 0.897500 0.347000
vn 0.280600 0.911000 0.302200
vn 0.321700 0.903300 0.283800
vn 0.328300 0.914000 0.238500
vn 0.369300 0.903300 0.218300
vn 0.374100 0.911000 0.173400
vn 0.414100 0.897500 0.151700
vn 0.417100 0.902400 0.108200
vn 0.455300 0.886200 0.085300
vn 0.456700 0.888500 0.043900
vn 0.492500 0.870100 0.020300
vn 0.204300 0.849800 0.485900
vn 0.243100 0.847500 0.471800
vn 0.254500 0.866000 0.430500
vn 0.294900 0.861100 0.414200
vn 0.304900 0.877300 0.370700
vn 0.346000 0.869600 0.352300
vn 0.354400 0.883100 0.307500
vn 0.395400 0.872400 0.287300
vn 0.402000 0.883100 0.242000
vn 0.442000 0.869600 0.220200
vn 0.446800 0.877300 0.175400
vn 0.485000 0.861100 0.152500
vn 0.488000 0.866000 0.109000
vn 0.523800 0.847500 0.085400
vn 0.525200 0.849800 0.044100
vn 0.558000 0.829600 0.020300
vn 0.224200 0.805900 0.548000
vn 0.263100 0.803600 0.533900
vn 0.275600 0.823800 0.495400
vn 0.316000 0.818900 0.479100
vn 0.327400 0.837400 0.437800
vn 0.368500 0.829700 0.419400
vn 0.378500 0.845800 0.375900
vn 0.419500 0.835200 0.355700
vn 0.427900 0.848700 0.310900
vn 0.467900 0.835200 0.289000
vn 0.474500 0.845800 0.243800
vn 0.512800 0.829700 0.220800
vn 0.517500 0.837400 0.176100
vn 0.553300 0.818900 0.152500
vn 0.556300 0.823800 0.109000
vn 0.589000 0.803600 0.085200
vn 0.590500 0.805900 0.043900
vn 0.619900 0.784400 0.020400
vn 0.242400 0.757600 0.606100
vn 0.281400 0.755300 0.591900
vn 0.294600 0.776700 0.556800
vn 0.335100 0.771800 0.540500
vn 0.347500 0.792000 0.502000
vn 0.388700 0.784200 0.483600
vn 0.400100 0.802700 0.442400
vn 0.441100 0.792000 0.422100
vn 0.451100 0.808200 0.378600
vn 0.491100 0.794700 0.356800
vn 0.499500 0.808200 0.312000
vn 0.537700 0.792000 0.289000
vn 0.544300 0.802700 0.243800
vn 0.580100 0.784200 0.220200
vn 0.584800 0.792000 0.175400
vn 0.617500 0.771800 0.151700
vn 0.620600 0.776700 0.108200
vn 0.649900 0.755300 0.084700
vn 0.651300 0.757600 0.043200
vn 0.677200 0.735500 0.020500
vn 0.258500 0.706000 0.659300
vn 0.297800 0.703700 0.645100
vn 0.311300 0.725600 0.613600
vn 0.351900 0.720700 0.597300
vn 0.365000 0.742000 0.562200
vn 0.406200 0.734300 0.543800
vn 0.418700 0.754500 0.505400
vn 0.459700 0.743800 0.485200
vn 0.471100 0.762200 0.443900
vn 0.511100 0.748700 0.422100
vn 0.521100 0.764900 0.378600
vn 0.559400 0.748700 0.355700
vn 0.567800 0.762200 0.310900
vn 0.603500 0.743800 0.287300
vn 0.610100 0.754500 0.242000
vn 0.642800 0.734300 0.218300
vn 0.647500 0.742000 0.173400
vn 0.676800 0.720700 0.150100
vn 0.679800 0.725600 0.106500
vn 0.705500 0.703700 0.083900
vn 0.706900 0.706000 0.042100
vn 0.729100 0.684000 0.020600
vn 0.272600 0.652400 0.707200
vn 0.312100 0.650100 0.692800
vn 0.325600 0.671900 0.665300
vn 0.366200 0.667000 0.648900
vn 0.379700 0.688800 0.617500
vn 0.420900 0.681100 0.599100
vn 0.434100 0.702400 0.564100
vn 0.475100 0.691700 0.543800
vn 0.487600 0.711900 0.505400
vn 0.527600 0.698400 0.483600
vn 0.539000 0.716800 0.442400
vn 0.577300 0.700600 0.419400
vn 0.587300 0.716800 0.375900
vn 0.623000 0.698400 0.352400
vn 0.631400 0.711900 0.307500
vn 0.664000 0.691700 0.283800
vn 0.670600 0.702400 0.238500
vn 0.699900 0.681100 0.215200
vn 0.704600 0.688800 0.170300
vn 0.730300 0.667000 0.147800
vn 0.733300 0.671900 0.104100
vn 0.755400 0.650100 0.082700
vn 0.756800 0.652400 0.040700
vn 0.775500 0.631000 0.020800
vn 0.284600 0.597800 0.749400
vn 0.324300 0.595500 0.735000
vn 0.337400 0.616700 0.711200
vn 0.378100 0.611800 0.694800
vn 0.391600 0.633600 0.667300
vn 0.432800 0.625900 0.648900
vn 0.446300 0.647700 0.617500
vn 0.487300 0.637000 0.597300
vn 0.500400 0.658400 0.562200
vn 0.540500 0.644800 0.540500
vn 0.552900 0.665000 0.502000
vn 0.591200 0.648800 0.479100
vn 0.602600 0.667300 0.437800
vn 0.638300 0.648800 0.414200
vn 0.648300 0.665000 0.370700
vn 0.681000 0.644800 0.347000
vn 0.689400 0.658400 0.302200
vn 0.718600 0.637000 0.278900
vn 0.725200 0.647700 0.233600
vn 0.750800 0.625900 0.211100
vn 0.755600 0.633600 0.166200
vn 0.777600 0.611800 0.144900
vn 0.780700 0.616700 0.101100
vn 0.799200 0.595500 0.081300
vn 0.800700 0.597800 0.039100
vn 0.816100 0.577600 0.020900
vn 0.294600 0.543400 0.786100
vn 0.334400 0.541100 0.771600
vn 0.346900 0.561300 0.751400
vn 0.387600 0.556400 0.735000
vn 0.400700 0.577600 0.711200
vn 0.441900 0.569900 0.692800
vn 0.455300 0.591700 0.665300
vn 0.496200 0.581100 0.645100
vn 0.509800 0.603000 0.613600
vn 0.549700 0.589500 0.591900
vn 0.562900 0.610900 0.556800
vn 0.601100 0.594700 0.533900
vn 0.613600 0.614900 0.495400
vn 0.649300 0.596500 0.471800
vn 0.660700 0.614900 0.430500
vn 0.693500 0.594700 0.406700
vn 0.703500 0.610900 0.363300
vn 0.732800 0.589500 0.339900
vn 0.741100 0.603000 0.295200
vn 0.766800 0.581100 0.272600
vn 0.773400 0.591700 0.227500
vn 0.795500 0.569900 0.206100
vn 0.800200 0.577600 0.161300
vn 0.818800 0.556400 0.141500
vn 0.821800 0.561300 0.097700
vn 0.837200 0.541100 0.079600
vn 0.838600 0.543400 0.037300
vn 0.851100 0.524600 0.021000
vn 0.302800 0.490000 0.817400
vn 0.342600 0.487700 0.803000
vn 0.354300 0.506500 0.786100
vn 0.394900 0.501700 0.769700
vn 0.407400 0.521900 0.749400
vn 0.448400 0.514200 0.731100
vn 0.461600 0.535600 0.707200
vn 0.502300 0.525000 0.687100
vn 0.515800 0.547000 0.659300
vn 0.555600 0.533600 0.637700
vn 0.569200 0.555600 0.606100
vn 0.607300 0.539500 0.583300
vn 0.620500 0.560900 0.548000
vn 0.656200 0.542500 0.524400
vn 0.668700 0.562800 0.485900
vn 0.701500 0.542500 0.462100
vn 0.712900 0.560900 0.420800
vn 0.742400 0.539500 0.397300
vn 0.752300 0.555600 0.354000
vn 0.778200 0.533600 0.331300
vn 0.786500 0.547000 0.286900
vn 0.808700 0.525000 0.265400
vn 0.815200 0.535600 0.220500
vn 0.833900 0.514200 0.200500
vn 0.838600 0.521900 0.155900
vn 0.854000 0.501600 0.137700
vn 0.857100 0.506500 0.094000
vn 0.869500 0.487700 0.077700
vn 0.871000 0.490000 0.035400
vn 0.880900 0.472800 0.021000
vn 0.898800 0.437100 -0.034000
vn 0.917200 0.392300 -0.069000
vn 0.933200 0.343200 -0.106000
vn 0.946100 0.289900 -0.144700
vn 0.954900 0.232600 -0.184700
vn 0.959000 0.171800 -0.225300
vn 0.957900 0.108500 -0.265900
vn 0.951100 0.043500 -0.305900
vn 0.938600 -0.022100 -0.344400
vn 0.920500 -0.087000 -0.380900
vn 0.897500 -0.150300 -0.414600
vn 0.870200 -0.210800 -0.445300
vn 0.839500 -0.268000 -0.472600
vn 0.806300 -0.321200 -0.496600
vn 0.771600 -0.370300 -0.517300
vn 0.901100 0.429700 -0.057300
vn 0.887400 0.452000 -0.090700
vn 0.918600 0.383400 -0.095400
vn 0.904900 0.405700 -0.128800
vn 0.888800 0.443100 -0.117100
vn 0.871800 0.466100 -0.150700
vn 0.933300 0.332600 -0.135500
vn 0.919600 0.354700 -0.168700
vn 0.905000 0.395100 -0.158100
vn 0.887900 0.418100 -0.191700
vn 0.871900 0.455400 -0.180100
vn 0.851600 0.478900 -0.213400
vn 0.944300 0.277300 -0.177000
vn 0.930700 0.299400 -0.210100
vn 0.917900 0.342200 -0.200800
vn 0.900900 0.365300 -0.234500
vn 0.886200 0.405600 -0.223800
vn 0.865800 0.429100 -0.257300
vn 0.849900 0.466300 -0.245600
vn 0.826200 0.489900 -0.278100
vn 0.951000 0.218000 -0.219400
vn 0.937400 0.239900 -0.252400
vn 0.926800 0.284900 -0.244700
vn 0.909800 0.307900 -0.278300
vn 0.897000 0.350800 -0.268900
vn 0.876600 0.374400 -0.302400
vn 0.861900 0.414600 -0.291800
vn 0.838200 0.438400 -0.324500
vn 0.822300 0.475300 -0.312900
vn 0.795600 0.498700 -0.344000
vn 0.952500 0.155200 -0.262000
vn 0.939000 0.177000 -0.294800
vn 0.930900 0.223400 -0.288900
vn 0.914000 0.246300 -0.322400
vn 0.903400 0.291400 -0.314700
vn 0.882900 0.315000 -0.348200
vn 0.870100 0.357900 -0.338900
vn 0.846300 0.381700 -0.371600
vn 0.831700 0.421800 -0.361000
vn 0.804900 0.445300 -0.392200
vn 0.789100 0.482100 -0.380800
vn 0.759700 0.504800 -0.409900
vn 0.948400 0.089900 -0.304000
vn 0.935000 0.111700 -0.336600
vn 0.929600 0.158600 -0.332700
vn 0.912700 0.181400 -0.366100
vn 0.904600 0.227900 -0.360200
vn 0.884200 0.251500 -0.393700
vn 0.873500 0.296600 -0.385900
vn 0.849700 0.320400 -0.418700
vn 0.836900 0.363300 -0.409400
vn 0.810000 0.386800 -0.440700
vn 0.795500 0.426800 -0.430100
vn 0.766000 0.449700 -0.459400
vn 0.750300 0.486300 -0.447900
vn 0.718800 0.507900 -0.474600
vn 0.938500 0.023200 -0.344400
vn 0.925100 0.044900 -0.377000
vn 0.922500 0.091400 -0.375100
vn 0.905600 0.114300 -0.408400
vn 0.900200 0.161200 -0.404500
vn 0.879800 0.184800 -0.437900
vn 0.871700 0.231300 -0.432100
vn 0.847900 0.255100 -0.464800
vn 0.837200 0.300200 -0.457100
vn 0.810300 0.323800 -0.488400
vn 0.797500 0.366600 -0.479100
vn 0.768000 0.389500 -0.508400
vn 0.753500 0.429400 -0.497900
vn 0.722000 0.451100 -0.524600
vn 0.706300 0.487700 -0.513100
vn 0.673500 0.507900 -0.537000
vn 0.922900 -0.043800 -0.382600
vn 0.909500 -0.022000 -0.415200
vn 0.909400 0.023200 -0.415200
vn 0.892600 0.046000 -0.448500
vn 0.889900 0.092600 -0.446600
vn 0.869500 0.116100 -0.480000
vn 0.864100 0.163100 -0.476100
vn 0.840300 0.186900 -0.508900
vn 0.832200 0.233400 -0.503000
vn 0.805300 0.256900 -0.534300
vn 0.794600 0.302000 -0.526600
vn 0.765100 0.324900 -0.555900
vn 0.752300 0.367800 -0.546600
vn 0.720900 0.389500 -0.573300
vn 0.706300 0.429400 -0.562800
vn 0.673600 0.449700 -0.586600
vn 0.657900 0.486300 -0.575100
vn 0.624600 0.504800 -0.595900
vn 0.901900 -0.109800 -0.417800
vn 0.888400 -0.088000 -0.450500
vn 0.890800 -0.044800 -0.452300
vn 0.873900 -0.022000 -0.485700
vn 0.873800 0.023200 -0.485700
vn 0.853400 0.046700 -0.519100
vn 0.850800 0.093200 -0.517200
vn 0.827000 0.117000 -0.549900
vn 0.821600 0.164000 -0.546000
vn 0.794700 0.187600 -0.577300
vn 0.786500 0.234100 -0.571500
vn 0.757000 0.257000 -0.600700
vn 0.746400 0.302000 -0.593000
vn 0.714900 0.323800 -0.619700
vn 0.702100 0.366600 -0.610400
vn 0.669500 0.386800 -0.634200
vn 0.654900 0.426900 -0.623600
vn 0.621800 0.445300 -0.644300
vn 0.606000 0.482100 -0.632800
vn 0.573000 0.498700 -0.650400
vn 0.876200 -0.173700 -0.449600
vn 0.862600 -0.151700 -0.482500
vn 0.867000 -0.111400 -0.485700
vn 0.850000 -0.088500 -0.519200
vn 0.852400 -0.045500 -0.520900
vn 0.832000 -0.022000 -0.554400
vn 0.831900 0.023200 -0.554400
vn 0.808100 0.047000 -0.587100
vn 0.805500 0.093500 -0.585200
vn 0.778600 0.117000 -0.616600
vn 0.773200 0.164000 -0.612600
vn 0.743600 0.186900 -0.641900
vn 0.735500 0.233400 -0.636000
vn 0.704100 0.255100 -0.662700
vn 0.693400 0.300200 -0.655000
vn 0.660800 0.320400 -0.678700
vn 0.648000 0.363300 -0.669400
vn 0.614900 0.381700 -0.690000
vn 0.600300 0.421800 -0.679400
vn 0.567600 0.438400 -0.696900
vn 0.551700 0.475300 -0.685400
vn 0.519800 0.489900 -0.699800
vn 0.846600 -0.234500 -0.477800
vn 0.833000 -0.212400 -0.510900
vn 0.838900 -0.175400 -0.515200
vn 0.821900 -0.152400 -0.548800
vn 0.826300 -0.112300 -0.552000
vn 0.805800 -0.088700 -0.585500
vn 0.808200 -0.045800 -0.587200
vn 0.784400 -0.022000 -0.619900
vn 0.784300 0.023200 -0.619900
vn 0.757400 0.046700 -0.651300
vn 0.754800 0.093200 -0.649300
vn 0.725300 0.116100 -0.678600
vn 0.719900 0.163100 -0.674700
vn 0.688400 0.184800 -0.701400
vn 0.680300 0.231300 -0.695500
vn 0.647600 0.251500 -0.719300
vn 0.637000 0.296600 -0.711500
vn 0.604000 0.315000 -0.732100
vn 0.591200 0.357900 -0.722800
vn 0.558500 0.374400 -0.740200
vn 0.543900 0.414600 -0.729600
vn 0.512200 0.429100 -0.744000
vn 0.496200 0.466300 -0.732300
vn 0.466100 0.478900 -0.743900
vn 0.814100 -0.291500 -0.502200
vn 0.800400 -0.269300 -0.535500
vn 0.807500 -0.235900 -0.540600
vn 0.790500 -0.212900 -0.574300
vn 0.796400 -0.176000 -0.578600
vn 0.775900 -0.152400 -0.612100
vn 0.780300 -0.112300 -0.615300
vn 0.756500 -0.088500 -0.648000
vn 0.758800 -0.045500 -0.649700
vn 0.731900 -0.022000 -0.681000
vn 0.731900 0.023200 -0.681000
vn 0.702400 0.046000 -0.710300
vn 0.699800 0.092600 -0.708300
vn 0.668300 0.114300 -0.735100
vn 0.662900 0.161200 -0.731100
vn 0.630200 0.181400 -0.754900
vn 0.622100 0.227900 -0.749000
vn 0.589100 0.246300 -0.769600
vn 0.578400 0.291400 -0.761900
vn 0.545800 0.307900 -0.779300
vn 0.533000 0.350800 -0.770000
vn 0.501400 0.365300 -0.784300
vn 0.486700 0.405600 -0.773700
vn 0.456800 0.418100 -0.785200
vn 0.440700 0.455400 -0.773600
vn 0.412700 0.466100 -0.782600
vn 0.779700 -0.344200 -0.523100
vn 0.765900 -0.322000 -0.556500
vn 0.773700 -0.292300 -0.562100
vn 0.756700 -0.269300 -0.595800
vn 0.763700 -0.236000 -0.600900
vn 0.743300 -0.212400 -0.634300
vn 0.749200 -0.175400 -0.638600
vn 0.725500 -0.151700 -0.671300
vn 0.729900 -0.111400 -0.674400
vn 0.703000 -0.088000 -0.705700
vn 0.705400 -0.044800 -0.707400
vn 0.675900 -0.022000 -0.736600
vn 0.675900 0.023200 -0.736600
vn 0.644400 0.044900 -0.763300
vn 0.641800 0.091400 -0.761400
vn 0.609100 0.111700 -0.785200
vn 0.603700 0.158600 -0.781300
vn 0.570500 0.177000 -0.802000
vn 0.562400 0.223400 -0.796100
vn 0.529700 0.239900 -0.813600
vn 0.519100 0.284900 -0.805900
vn 0.487400 0.299400 -0.820200
vn 0.474600 0.342200 -0.810900
vn 0.444700 0.354700 -0.822500
vn 0.430000 0.395100 -0.811800
vn 0.402100 0.405700 -0.820800
vn 0.386000 0.443100 -0.809100
vn 0.360500 0.452000 -0.815900
vn 0.744100 -0.392500 -0.540600
vn 0.730400 -0.370300 -0.574000
vn 0.738400 -0.344200 -0.579800
vn 0.721500 -0.321200 -0.613400
vn 0.729300 -0.291500 -0.619100
vn 0.708900 -0.268000 -0.652400
vn 0.716000 -0.234500 -0.657500
vn 0.692400 -0.210800 -0.690000
vn 0.698400 -0.173700 -0.694300
vn 0.671700 -0.150300 -0.725500
vn 0.676100 -0.109800 -0.728600
vn 0.646700 -0.087000 -0.757800
vn 0.649000 -0.043800 -0.759500
vn 0.617600 -0.022100 -0.786200
vn 0.617600 0.023200 -0.786200
vn 0.584800 0.043500 -0.810000
vn 0.582200 0.089900 -0.808100
vn 0.548900 0.108500 -0.828800
vn 0.543500 0.155200 -0.824900
vn 0.510600 0.171800 -0.842500
vn 0.502600 0.218000 -0.836600
vn 0.470700 0.232600 -0.851100
vn 0.460100 0.277300 -0.843400
vn 0.430000 0.289900 -0.855000
vn 0.417200 0.332600 -0.845800
vn 0.389200 0.343200 -0.854800
vn 0.374600 0.383400 -0.844200
vn 0.349100 0.392300 -0.851000
vn 0.333000 0.429800 -0.839300
vn 0.310100 0.437100 -0.844300
vn 0.245400 0.437100 -0.865300
vn 0.217800 0.392300 -0.893700
vn 0.187500 0.343200 -0.920300
vn 0.154700 0.289900 -0.944500
vn 0.119400 0.232600 -0.965200
vn 0.082100 0.171800 -0.981700
vn 0.043100 0.108500 -0.993200
vn 0.003000 0.043500 -0.999100
vn -0.037500 -0.022100 -0.999100
vn -0.077800 -0.087000 -0.993200
vn -0.117000 -0.150300 -0.981700
vn -0.154600 -0.210800 -0.965200
vn -0.190100 -0.268000 -0.944500
vn -0.223100 -0.321200 -0.920300
vn -0.253500 -0.370300 -0.893700
vn 0.224000 0.429800 -0.874700
vn 0.188000 0.452000 -0.872000
vn 0.193100 0.383400 -0.903100
vn 0.157100 0.405700 -0.900400
vn 0.163300 0.443100 -0.881500
vn 0.126100 0.466100 -0.875700
vn 0.159600 0.332600 -0.929500
vn 0.123700 0.354700 -0.926700
vn 0.129300 0.395100 -0.909500
vn 0.092000 0.418100 -0.903700
vn 0.098200 0.455400 -0.884900
vn 0.060200 0.478900 -0.875800
vn 0.123500 0.277300 -0.952800
vn 0.087800 0.299400 -0.950100
vn 0.092700 0.342200 -0.935000
vn 0.055400 0.365300 -0.929200
vn 0.061000 0.405600 -0.912000
vn 0.022900 0.429100 -0.902900
vn 0.029000 0.466300 -0.884200
vn -0.009200 0.489900 -0.871700
vn 0.085200 0.218000 -0.972200
vn 0.049700 0.239900 -0.969500
vn 0.053700 0.284900 -0.957100
vn 0.016500 0.307800 -0.951300
vn 0.021400 0.350800 -0.936200
vn -0.016800 0.374400 -0.927100
vn -0.011200 0.414600 -0.909900
vn -0.049600 0.438400 -0.897400
vn -0.043500 0.475300 -0.878800
vn -0.081300 0.498700 -0.863000
vn 0.045100 0.155200 -0.986800
vn 0.009800 0.177000 -0.984200
vn 0.012900 0.223400 -0.974600
vn -0.024200 0.246300 -0.968900
vn -0.020100 0.291400 -0.956400
vn -0.058300 0.315000 -0.947300
vn -0.053400 0.357900 -0.932200
vn -0.091900 0.381700 -0.919700
vn -0.086300 0.421800 -0.902600
vn -0.124300 0.445300 -0.886700
vn -0.118300 0.482100 -0.868100
vn -0.155100 0.504800 -0.849200
vn 0.004000 0.089900 -0.995900
vn -0.031200 0.111700 -0.993300
vn -0.029100 0.158600 -0.986900
vn -0.066100 0.181400 -0.981200
vn -0.063000 0.227900 -0.971600
vn -0.101200 0.251500 -0.962600
vn -0.097100 0.296600 -0.950100
vn -0.135600 0.320400 -0.937500
vn -0.130700 0.363300 -0.922500
vn -0.168800 0.386800 -0.906600
vn -0.163300 0.426900 -0.889500
vn -0.200200 0.449700 -0.870500
vn -0.194200 0.486300 -0.852000
vn -0.229300 0.507900 -0.830300
vn -0.037500 0.023200 -0.999000
vn -0.072700 0.044900 -0.996300
vn -0.071700 0.091400 -0.993200
vn -0.108600 0.114300 -0.987500
vn -0.106500 0.161200 -0.981100
vn -0.144600 0.184800 -0.972100
vn -0.141500 0.231300 -0.962500
vn -0.180100 0.255100 -0.950000
vn -0.176000 0.300200 -0.937500
vn -0.214100 0.323800 -0.921600
vn -0.209200 0.366600 -0.906500
vn -0.246200 0.389500 -0.887500
vn -0.240700 0.429400 -0.870400
vn -0.275800 0.451100 -0.848800
vn -0.269800 0.487700 -0.830300
vn -0.302600 0.508000 -0.806500
vn -0.078700 -0.043800 -0.995900
vn -0.113800 -0.022000 -0.993300
vn -0.113800 0.023200 -0.993200
vn -0.150800 0.046000 -0.987500
vn -0.149800 0.092600 -0.984400
vn -0.187900 0.116100 -0.975300
vn -0.185800 0.163100 -0.969000
vn -0.224300 0.186900 -0.956400
vn -0.221200 0.233400 -0.946900
vn -0.259300 0.256900 -0.931000
vn -0.255300 0.302000 -0.918500
vn -0.292300 0.324900 -0.899500
vn -0.287400 0.367800 -0.884400
vn -0.322500 0.389500 -0.862700
vn -0.317000 0.429400 -0.845700
vn -0.349700 0.449700 -0.821900
vn -0.343700 0.486300 -0.803400
vn -0.373700 0.504800 -0.778200
vn -0.118700 -0.109800 -0.986800
vn -0.154000 -0.088000 -0.984200
vn -0.154900 -0.044900 -0.986900
vn -0.191900 -0.022000 -0.981200
vn -0.191900 0.023200 -0.981100
vn -0.230000 0.046700 -0.972100
vn -0.229000 0.093200 -0.969000
vn -0.267500 0.117000 -0.956400
vn -0.265400 0.164000 -0.950100
vn -0.303500 0.187600 -0.934200
vn -0.300400 0.234100 -0.924600
vn -0.337400 0.256900 -0.905600
vn -0.333300 0.302000 -0.893100
vn -0.368500 0.323800 -0.871400
vn -0.363600 0.366600 -0.856400
vn -0.396300 0.386800 -0.832700
vn -0.390700 0.426900 -0.815600
vn -0.420600 0.445300 -0.790400
vn -0.414600 0.482100 -0.771800
vn -0.441500 0.498700 -0.746000
vn -0.156900 -0.173700 -0.972200
vn -0.192400 -0.151700 -0.969500
vn -0.194000 -0.111400 -0.974600
vn -0.231100 -0.088500 -0.968900
vn -0.232000 -0.045500 -0.971600
vn -0.270200 -0.022000 -0.962600
vn -0.270200 0.023200 -0.962500
vn -0.308700 0.047000 -0.950000
vn -0.307700 0.093500 -0.946900
vn -0.345800 0.117000 -0.931000
vn -0.343700 0.164000 -0.924600
vn -0.380700 0.186900 -0.905600
vn -0.377600 0.233400 -0.896100
vn -0.412700 0.255100 -0.874400
vn -0.408700 0.300200 -0.861900
vn -0.441300 0.320400 -0.838200
vn -0.436400 0.363300 -0.823100
vn -0.466200 0.381700 -0.798100
vn -0.460700 0.421800 -0.780900
vn -0.487400 0.438400 -0.755200
vn -0.481300 0.475300 -0.736500
vn -0.504900 0.489900 -0.710700
vn -0.192800 -0.234500 -0.952800
vn -0.228500 -0.212400 -0.950100
vn -0.230800 -0.175400 -0.957100
vn -0.268000 -0.152400 -0.951300
vn -0.269600 -0.112300 -0.956400
vn -0.307800 -0.088700 -0.947300
vn -0.308700 -0.045800 -0.950100
vn -0.347200 -0.022000 -0.937500
vn -0.347200 0.023200 -0.937500
vn -0.385300 0.046700 -0.921600
vn -0.384300 0.093200 -0.918500
vn -0.421300 0.116100 -0.899500
vn -0.419200 0.163100 -0.893100
vn -0.454400 0.184800 -0.871400
vn -0.451300 0.231300 -0.861900
vn -0.483900 0.251500 -0.838200
vn -0.479900 0.296600 -0.825700
vn -0.509600 0.315000 -0.800700
vn -0.504700 0.357900 -0.785600
vn -0.531400 0.374400 -0.759900
vn -0.525800 0.414600 -0.742700
vn -0.549300 0.429100 -0.717000
vn -0.543200 0.466300 -0.698300
vn -0.563500 0.478900 -0.673200
vn -0.226100 -0.291500 -0.929500
vn -0.262000 -0.269300 -0.926700
vn -0.264700 -0.236000 -0.935000
vn -0.301900 -0.212900 -0.929300
vn -0.304200 -0.176100 -0.936200
vn -0.342400 -0.152400 -0.927100
vn -0.344000 -0.112300 -0.932200
vn -0.382500 -0.088500 -0.919700
vn -0.383400 -0.045500 -0.922500
vn -0.421500 -0.022000 -0.906600
vn -0.421500 0.023200 -0.906500
vn -0.458500 0.046000 -0.887500
vn -0.457400 0.092600 -0.884400
vn -0.492600 0.114300 -0.862700
vn -0.490500 0.161200 -0.856400
vn -0.523200 0.181400 -0.832700
vn -0.520100 0.227900 -0.823100
vn -0.549900 0.246300 -0.798100
vn -0.545900 0.291400 -0.785600
vn -0.572500 0.307800 -0.759900
vn -0.567600 0.350800 -0.744800
vn -0.591000 0.365300 -0.719200
vn -0.585400 0.405600 -0.702000
vn -0.605700 0.418100 -0.677000
vn -0.599500 0.455400 -0.658200
vn -0.616800 0.466100 -0.634300
vn -0.256600 -0.344200 -0.903100
vn -0.292600 -0.322000 -0.900400
vn -0.295500 -0.292300 -0.909500
vn -0.332800 -0.269300 -0.903700
vn -0.335500 -0.236000 -0.912000
vn -0.373600 -0.212400 -0.903000
vn -0.375900 -0.175400 -0.909900
vn -0.414200 -0.151700 -0.897400
vn -0.415900 -0.111400 -0.902600
vn -0.453900 -0.088000 -0.886700
vn -0.454800 -0.044900 -0.889500
vn -0.491700 -0.022000 -0.870500
vn -0.491700 0.023200 -0.870500
vn -0.526800 0.044900 -0.848800
vn -0.525800 0.091400 -0.845700
vn -0.558600 0.111700 -0.821900
vn -0.556500 0.158600 -0.815600
vn -0.586400 0.177000 -0.790400
vn -0.583300 0.223400 -0.780900
vn -0.610100 0.239900 -0.755200
vn -0.606000 0.284900 -0.742700
vn -0.629500 0.299400 -0.717000
vn -0.624600 0.342200 -0.702000
vn -0.644800 0.354700 -0.677000
vn -0.639200 0.395100 -0.659800
vn -0.656400 0.405700 -0.636100
vn -0.650200 0.443100 -0.617100
vn -0.664600 0.452000 -0.595000
vn -0.284200 -0.392500 -0.874700
vn -0.320200 -0.370300 -0.872000
vn -0.323300 -0.344200 -0.881500
vn -0.360400 -0.321200 -0.875700
vn -0.363400 -0.291500 -0.884900
vn -0.401400 -0.268000 -0.875800
vn -0.404100 -0.234500 -0.884200
vn -0.442300 -0.210800 -0.871700
vn -0.444600 -0.173700 -0.878800
vn -0.482400 -0.150300 -0.863000
vn -0.484100 -0.109800 -0.868100
vn -0.520900 -0.087000 -0.849200
vn -0.521800 -0.043800 -0.852000
vn -0.556900 -0.022100 -0.830300
vn -0.556800 0.023200 -0.830300
vn -0.589600 0.043500 -0.806500
vn -0.588600 0.089900 -0.803400
vn -0.618600 0.108500 -0.778200
vn -0.616600 0.155200 -0.771900
vn -0.643400 0.171800 -0.746000
vn -0.640400 0.218000 -0.736500
vn -0.664000 0.232600 -0.710700
vn -0.660000 0.277300 -0.698300
vn -0.680300 0.289900 -0.673200
vn -0.675400 0.332600 -0.658200
vn -0.692700 0.343200 -0.634300
vn -0.687100 0.383400 -0.617100
vn -0.701500 0.392300 -0.595000
vn -0.695300 0.429700 -0.576000
vn -0.707200 0.437100 -0.555800
vn -0.747100 0.437100 -0.500800
vn -0.782600 0.392300 -0.483300
vn -0.817300 0.343200 -0.462800
vn -0.850500 0.289900 -0.439000
vn -0.881100 0.232600 -0.411900
vn -0.908300 0.171800 -0.381400
vn -0.931200 0.108500 -0.347900
vn -0.949200 0.043500 -0.311500
vn -0.961800 -0.022100 -0.273000
vn -0.968600 -0.087000 -0.232900
vn -0.969800 -0.150300 -0.192100
vn -0.965700 -0.210800 -0.151200
vn -0.957000 -0.268000 -0.111100
vn -0.944200 -0.321200 -0.072200
vn -0.928300 -0.370200 -0.035100
vn -0.762700 0.429800 -0.483300
vn -0.771200 0.452000 -0.448200
vn -0.799300 0.383400 -0.462800
vn -0.807800 0.405700 -0.427700
vn -0.787900 0.443100 -0.427700
vn -0.793900 0.466100 -0.390500
vn -0.834700 0.332600 -0.439000
vn -0.843200 0.354700 -0.404000
vn -0.825000 0.395100 -0.404000
vn -0.831100 0.418100 -0.366800
vn -0.811200 0.455400 -0.366800
vn -0.814400 0.478900 -0.327900
vn -0.868000 0.277300 -0.411900
vn -0.876500 0.299400 -0.377100
vn -0.860600 0.342200 -0.377100
vn -0.866700 0.365300 -0.339800
vn -0.848500 0.405600 -0.339800
vn -0.851700 0.429100 -0.300800
vn -0.831900 0.466300 -0.300800
vn -0.831900 0.489900 -0.260600
vn -0.898300 0.218000 -0.381400
vn -0.906700 0.239900 -0.346800
vn -0.893600 0.284900 -0.346800
vn -0.899600 0.307800 -0.309700
vn -0.883800 0.350800 -0.309700
vn -0.886900 0.374400 -0.270500
vn -0.868800 0.414600 -0.270600
vn -0.868800 0.438400 -0.230200
vn -0.849200 0.475300 -0.230200
vn -0.845900 0.498700 -0.189300
vn -0.924600 0.155200 -0.347900
vn -0.933000 0.177000 -0.313400
vn -0.923000 0.223400 -0.313400
vn -0.928900 0.246300 -0.276400
vn -0.915800 0.291400 -0.276400
vn -0.919000 0.315000 -0.237300
vn -0.903100 0.357900 -0.237300
vn -0.903100 0.381700 -0.196800
vn -0.885100 0.421800 -0.196800
vn -0.881700 0.445300 -0.155800
vn -0.862200 0.482100 -0.155800
vn -0.855600 0.504800 -0.114900
vn -0.946000 0.089900 -0.311500
vn -0.954300 0.111700 -0.277300
vn -0.947600 0.158600 -0.277300
vn -0.953600 0.181400 -0.240300
vn -0.943600 0.227900 -0.240300
vn -0.946700 0.251500 -0.201200
vn -0.933600 0.296600 -0.201200
vn -0.933600 0.320400 -0.160700
vn -0.917700 0.363300 -0.160700
vn -0.914400 0.386800 -0.119600
vn -0.896400 0.426900 -0.119600
vn -0.889700 0.449700 -0.078600
vn -0.870300 0.486300 -0.078600
vn -0.860500 0.507900 -0.038500
vn -0.961700 0.023200 -0.273000
vn -0.970000 0.044900 -0.238800
vn -0.966800 0.091400 -0.238800
vn -0.972700 0.114300 -0.201900
vn -0.966000 0.161200 -0.201900
vn -0.969200 0.184800 -0.162800
vn -0.959200 0.231300 -0.162800
vn -0.959200 0.255100 -0.122300
vn -0.946000 0.300200 -0.122300
vn -0.942700 0.323800 -0.081100
vn -0.926800 0.366600 -0.081100
vn -0.920200 0.389500 -0.040100
vn -0.902200 0.429400 -0.040100
vn -0.892500 0.451100 -0.000000
vn -0.873000 0.487700 0.000000
vn -0.860500 0.507900 0.038500
vn -0.971500 -0.043800 -0.232900
vn -0.979800 -0.022000 -0.198700
vn -0.979800 0.023200 -0.198700
vn -0.985800 0.046000 -0.161800
vn -0.982500 0.092600 -0.161800
vn -0.985600 0.116100 -0.122700
vn -0.979000 0.163100 -0.122700
vn -0.978900 0.186900 -0.082200
vn -0.968900 0.233400 -0.082200
vn -0.965600 0.256900 -0.041000
vn -0.952400 0.302000 -0.041000
vn -0.945700 0.324900 0.000000
vn -0.929900 0.367800 0.000000
vn -0.920200 0.389500 0.040100
vn -0.902200 0.429400 0.040100
vn -0.889700 0.449700 0.078600
vn -0.870300 0.486300 0.078600
vn -0.855600 0.504800 0.114900
vn -0.975200 -0.109800 -0.192100
vn -0.983600 -0.088000 -0.157700
vn -0.986500 -0.044900 -0.157700
vn -0.992400 -0.022000 -0.120700
vn -0.992400 0.023200 -0.120700
vn -0.995600 0.046700 -0.081700
vn -0.992300 0.093200 -0.081700
vn -0.992300 0.117000 -0.041200
vn -0.985600 0.164000 -0.041200
vn -0.982200 0.187600 0.000000
vn -0.972200 0.234100 0.000000
vn -0.965600 0.256900 0.041000
vn -0.952400 0.302000 0.041000
vn -0.942700 0.323800 0.081100
vn -0.926800 0.366600 0.081100
vn -0.914400 0.386800 0.119600
vn -0.896400 0.426800 0.119600
vn -0.881700 0.445300 0.155800
vn -0.862200 0.482100 0.155800
vn -0.845900 0.498700 0.189300
vn -0.973100 -0.173700 -0.151200
vn -0.981500 -0.151700 -0.116600
vn -0.986900 -0.111400 -0.116600
vn -0.992900 -0.088500 -0.079600
vn -0.995800 -0.045500 -0.079600
vn -0.998900 -0.022000 -0.040500
vn -0.998900 0.023200 -0.040500
vn -0.998900 0.047000 -0.000000
vn -0.995600 0.093500 -0.000000
vn -0.992300 0.117000 0.041200
vn -0.985600 0.164000 0.041200
vn -0.978900 0.186900 0.082200
vn -0.968900 0.233400 0.082200
vn -0.959200 0.255100 0.122300
vn -0.946000 0.300200 0.122300
vn -0.933600 0.320400 0.160700
vn -0.917700 0.363300 0.160700
vn -0.903100 0.381700 0.196800
vn -0.885100 0.421800 0.196800
vn -0.868800 0.438400 0.230200
vn -0.849200 0.475300 0.230200
vn -0.831900 0.489900 0.260600
vn -0.965800 -0.234500 -0.111100
vn -0.974200 -0.212400 -0.076300
vn -0.981500 -0.175400 -0.076300
vn -0.987500 -0.152400 -0.039100
vn -0.992900 -0.112300 -0.039100
vn -0.996100 -0.088700 0.000000
vn -0.999000 -0.045800 0.000000
vn -0.998900 -0.022000 0.040500
vn -0.998900 0.023200 0.040500
vn -0.995600 0.046700 0.081700
vn -0.992300 0.093200 0.081700
vn -0.985600 0.116100 0.122700
vn -0.978900 0.163100 0.122700
vn -0.969200 0.184800 0.162800
vn -0.959200 0.231300 0.162800
vn -0.946700 0.251500 0.201200
vn -0.933600 0.296600 0.201200
vn -0.919000 0.315000 0.237300
vn -0.903100 0.357900 0.237300
vn -0.886900 0.374400 0.270500
vn -0.868800 0.414600 0.270600
vn -0.851700 0.429100 0.300800
vn -0.831900 0.466300 0.300800
vn -0.814400 0.478900 0.327900
vn -0.953900 -0.291500 -0.072200
vn -0.962300 -0.269300 -0.037200
vn -0.971100 -0.235900 -0.037200
vn -0.977100 -0.212900 0.000000
vn -0.984400 -0.176000 -0.000000
vn -0.987500 -0.152400 0.039100
vn -0.992900 -0.112300 0.039100
vn -0.992900 -0.088500 0.079600
vn -0.995800 -0.045500 0.079600
vn -0.992400 -0.022000 0.120700
vn -0.992400 0.023200 0.120700
vn -0.985800 0.046000 0.161800
vn -0.982500 0.092600 0.161800
vn -0.972700 0.114300 0.201900
vn -0.966100 0.161200 0.201900
vn -0.953600 0.181400 0.240300
vn -0.943600 0.227900 0.240300
vn -0.928900 0.246300 0.276400
vn -0.915800 0.291400 0.276400
vn -0.899600 0.307800 0.309700
vn -0.883800 0.350800 0.309700
vn -0.866700 0.365300 0.339800
vn -0.848500 0.405600 0.339800
vn -0.831100 0.418100 0.366800
vn -0.811200 0.455400 0.366800
vn -0.793900 0.466100 0.390600
vn -0.938200 -0.344200 -0.035100
vn -0.946800 -0.322000 -0.000000
vn -0.956300 -0.292300 -0.000000
vn -0.962300 -0.269300 0.037200
vn -0.971100 -0.235900 0.037200
vn -0.974200 -0.212400 0.076300
vn -0.981500 -0.175400 0.076300
vn -0.981500 -0.151700 0.116600
vn -0.986900 -0.111400 0.116600
vn -0.983600 -0.088000 0.157700
vn -0.986500 -0.044900 0.157700
vn -0.979800 -0.022000 0.198700
vn -0.979800 0.023200 0.198700
vn -0.970000 0.044900 0.238800
vn -0.966800 0.091400 0.238800
vn -0.954300 0.111700 0.277300
vn -0.947600 0.158600 0.277300
vn -0.933000 0.177000 0.313400
vn -0.923000 0.223400 0.313400
vn -0.906700 0.239900 0.346800
vn -0.893600 0.284900 0.346800
vn -0.876500 0.299400 0.377100
vn -0.860600 0.342200 0.377100
vn -0.843200 0.354700 0.404000
vn -0.825000 0.395100 0.404000
vn -0.807800 0.405700 0.427700
vn -0.787900 0.443100 0.427700
vn -0.771200 0.452000 0.448200
vn -0.919800 -0.392500 0.000000
vn -0.928300 -0.370300 0.035100
vn -0.938200 -0.344200 0.035100
vn -0.944200 -0.321200 0.072200
vn -0.953900 -0.291500 0.072200
vn -0.957000 -0.268000 0.111100
vn -0.965800 -0.234500 0.111100
vn -0.965700 -0.210800 0.151200
vn -0.973100 -0.173700 0.151200
vn -0.969800 -0.150300 0.192100
vn -0.975200 -0.109800 0.192100
vn -0.968600 -0.087000 0.232900
vn -0.971500 -0.043800 0.232900
vn -0.961800 -0.022100 0.273000
vn -0.961700 0.023200 0.273000
vn -0.949200 0.043500 0.311500
vn -0.946000 0.089900 0.311500
vn -0.931200 0.108500 0.347900
vn -0.924600 0.155200 0.347900
vn -0.908300 0.171800 0.381400
vn -0.898300 0.218000 0.381400
vn -0.881100 0.232600 0.411900
vn -0.868000 0.277300 0.411900
vn -0.850500 0.289900 0.439000
vn -0.834700 0.332600 0.439000
vn -0.817300 0.343200 0.462800
vn -0.799300 0.383400 0.462800
vn -0.782600 0.392300 0.483300
vn -0.762700 0.429800 0.483300
vn -0.747100 0.437100 0.500800
vn -0.707200 0.437100 0.555800
vn -0.701500 0.392300 0.595000
vn -0.692700 0.343200 0.634300
vn -0.680300 0.289900 0.673200
vn -0.664000 0.232600 0.710700
vn -0.643400 0.171800 0.746000
vn -0.618600 0.108500 0.778200
vn -0.589600 0.043500 0.806500
vn -0.556900 -0.022100 0.830300
vn -0.520900 -0.087000 0.849200
vn -0.482400 -0.150300 0.863000
vn -0.442300 -0.210800 0.871700
vn -0.401400 -0.268000 0.875800
vn -0.360400 -0.321200 0.875700
vn -0.320200 -0.370300 0.872000
vn -0.695300 0.429800 0.576000
vn -0.664600 0.452000 0.595000
vn -0.687100 0.383400 0.617100
vn -0.656400 0.405700 0.636100
vn -0.650200 0.443100 0.617100
vn -0.616800 0.466100 0.634300
vn -0.675400 0.332600 0.658200
vn -0.644800 0.354700 0.677000
vn -0.639200 0.395100 0.659800
vn -0.605700 0.418100 0.677000
vn -0.599500 0.455400 0.658200
vn -0.563500 0.478900 0.673200
vn -0.660000 0.277300 0.698300
vn -0.629500 0.299400 0.717000
vn -0.624600 0.342200 0.702000
vn -0.591000 0.365300 0.719200
vn -0.585400 0.405600 0.702000
vn -0.549300 0.429100 0.717000
vn -0.543200 0.466300 0.698300
vn -0.504900 0.489900 0.710700
vn -0.640400 0.218000 0.736500
vn -0.610100 0.239900 0.755200
vn -0.606000 0.284900 0.742700
vn -0.572500 0.307800 0.759900
vn -0.567600 0.350800 0.744800
vn -0.531400 0.374400 0.759900
vn -0.525800 0.414600 0.742700
vn -0.487400 0.438400 0.755200
vn -0.481300 0.475300 0.736500
vn -0.441500 0.498700 0.746000
vn -0.616600 0.155200 0.771900
vn -0.586400 0.177000 0.790400
vn -0.583300 0.223400 0.780900
vn -0.549900 0.246300 0.798100
vn -0.545900 0.291400 0.785600
vn -0.509600 0.315000 0.800700
vn -0.504700 0.357900 0.785600
vn -0.466200 0.381700 0.798100
vn -0.460700 0.421800 0.780900
vn -0.420600 0.445300 0.790400
vn -0.414600 0.482100 0.771800
vn -0.373700 0.504800 0.778200
vn -0.588600 0.089900 0.803400
vn -0.558600 0.111700 0.821900
vn -0.556500 0.158600 0.815600
vn -0.523200 0.181400 0.832700
vn -0.520100 0.227900 0.823100
vn -0.483900 0.251500 0.838200
vn -0.479900 0.296600 0.825700
vn -0.441300 0.320400 0.838200
vn -0.436400 0.363300 0.823100
vn -0.396300 0.386800 0.832700
vn -0.390700 0.426900 0.815600
vn -0.349700 0.449700 0.821900
vn -0.343700 0.486300 0.803400
vn -0.302600 0.508000 0.806500
vn -0.556800 0.023200 0.830300
vn -0.526800 0.044900 0.848800
vn -0.525800 0.091400 0.845700
vn -0.492600 0.114300 0.862700
vn -0.490500 0.161200 0.856400
vn -0.454400 0.184800 0.871400
vn -0.451300 0.231300 0.861900
vn -0.412700 0.255100 0.874400
vn -0.408700 0.300200 0.861900
vn -0.368500 0.323800 0.871400
vn -0.363600 0.366600 0.856400
vn -0.322500 0.389500 0.862700
vn -0.317000 0.429400 0.845700
vn -0.275800 0.451100 0.848800
vn -0.269800 0.487700 0.830300
vn -0.229300 0.508000 0.830300
vn -0.521800 -0.043800 0.852000
vn -0.491700 -0.022000 0.870500
vn -0.491700 0.023200 0.870500
vn -0.458500 0.046000 0.887500
vn -0.457400 0.092600 0.884400
vn -0.421300 0.116100 0.899500
vn -0.419200 0.163100 0.893100
vn -0.380700 0.186900 0.905600
vn -0.377600 0.233400 0.896100
vn -0.337400 0.256900 0.905600
vn -0.333400 0.302000 0.893100
vn -0.292300 0.324900 0.899500
vn -0.287400 0.367800 0.884400
vn -0.246200 0.389500 0.887500
vn -0.240700 0.429400 0.870400
vn -0.200200 0.449700 0.870500
vn -0.194200 0.486300 0.852000
vn -0.155100 0.504800 0.849200
vn -0.484100 -0.109800 0.868100
vn -0.453900 -0.088000 0.886700
vn -0.454800 -0.044900 0.889500
vn -0.421500 -0.022000 0.906600
vn -0.421500 0.023200 0.906500
vn -0.385300 0.046700 0.921600
vn -0.384300 0.093200 0.918500
vn -0.345800 0.117000 0.931000
vn -0.343700 0.164000 0.924600
vn -0.303500 0.187600 0.934200
vn -0.300400 0.234100 0.924600
vn -0.259300 0.257000 0.931000
vn -0.255300 0.302000 0.918500
vn -0.214100 0.323800 0.921600
vn -0.209200 0.366600 0.906500
vn -0.168800 0.386800 0.906600
vn -0.163300 0.426900 0.889500
vn -0.124300 0.445300 0.886700
vn -0.118300 0.482100 0.868100
vn -0.081300 0.498700 0.863000
vn -0.444600 -0.173700 0.878800
vn -0.414200 -0.151700 0.897400
vn -0.415900 -0.111400 0.902600
vn -0.382500 -0.088500 0.919700
vn -0.383400 -0.045500 0.922500
vn -0.347200 -0.022000 0.937500
vn -0.347200 0.023200 0.937500
vn -0.308700 0.047000 0.950000
vn -0.307700 0.093500 0.946900
vn -0.267500 0.117000 0.956400
vn -0.265400 0.164000 0.950100
vn -0.224300 0.186900 0.956400
vn -0.221200 0.233400 0.946900
vn -0.180100 0.255100 0.950000
vn -0.176000 0.300200 0.937500
vn -0.135600 0.320400 0.937500
vn -0.130700 0.363300 0.922500
vn -0.091900 0.381700 0.919700
vn -0.086300 0.421800 0.902600
vn -0.049600 0.438400 0.897400
vn -0.043500 0.475300 0.878800
vn -0.009200 0.489900 0.871700
vn -0.404100 -0.234500 0.884200
vn -0.373600 -0.212400 0.903000
vn -0.375900 -0.175400 0.909900
vn -0.342400 -0.152400 0.927100
vn -0.344000 -0.112300 0.932200
vn -0.307800 -0.088700 0.947300
vn -0.308700 -0.045800 0.950100
vn -0.270200 -0.022000 0.962600
vn -0.270200 0.023200 0.962500
vn -0.230000 0.046700 0.972100
vn -0.229000 0.093200 0.969000
vn -0.187900 0.116100 0.975300
vn -0.185800 0.163100 0.969000
vn -0.144600 0.184800 0.972100
vn -0.141500 0.231300 0.962500
vn -0.101200 0.251500 0.962600
vn -0.097100 0.296600 0.950100
vn -0.058300 0.315000 0.947300
vn -0.053400 0.357900 0.932200
vn -0.016800 0.374400 0.927100
vn -0.011200 0.414600 0.909900
vn 0.022900 0.429100 0.902900
vn 0.029000 0.466300 0.884200
vn 0.060200 0.478900 0.875800
vn -0.363400 -0.291500 0.884900
vn -0.332800 -0.269300 0.903700
vn -0.335500 -0.236000 0.912000
vn -0.301900 -0.212900 0.929300
vn -0.304200 -0.176000 0.936200
vn -0.268000 -0.152400 0.951300
vn -0.269600 -0.112300 0.956400
vn -0.231100 -0.088500 0.968900
vn -0.232000 -0.045500 0.971600
vn -0.191900 -0.022000 0.981200
vn -0.191900 0.023200 0.981100
vn -0.150800 0.046000 0.987500
vn -0.149800 0.092600 0.984400
vn -0.108600 0.114300 0.987500
vn -0.106500 0.161200 0.981100
vn -0.066100 0.181400 0.981200
vn -0.063000 0.227900 0.971600
vn -0.024200 0.246300 0.968900
vn -0.020100 0.291400 0.956400
vn 0.016500 0.307800 0.951300
vn 0.021400 0.350800 0.936200
vn 0.055400 0.365300 0.929300
vn 0.061000 0.405600 0.912000
vn 0.092000 0.418100 0.903700
vn 0.098200 0.455400 0.884900
vn 0.126100 0.466100 0.875700
vn -0.323300 -0.344200 0.881500
vn -0.292600 -0.322000 0.900400
vn -0.295500 -0.292300 0.909500
vn -0.262000 -0.269300 0.926700
vn -0.264700 -0.235900 0.935000
vn -0.228500 -0.212400 0.950100
vn -0.230800 -0.175400 0.957100
vn -0.192400 -0.151700 0.969500
vn -0.194000 -0.111400 0.974600
vn -0.154000 -0.088000 0.984200
vn -0.154900 -0.044900 0.986900
vn -0.113800 -0.022000 0.993300
vn -0.113800 0.023200 0.993200
vn -0.072700 0.044900 0.996300
vn -0.071700 0.091400 0.993200
vn -0.031200 0.111700 0.993300
vn -0.029100 0.158600 0.986900
vn 0.009800 0.177000 0.984200
vn 0.012900 0.223400 0.974600
vn 0.049700 0.239900 0.969500
vn 0.053700 0.284900 0.957100
vn 0.087800 0.299400 0.950100
vn 0.092700 0.342200 0.935000
vn 0.123700 0.354700 0.926700
vn 0.129300 0.395100 0.909500
vn 0.157100 0.405700 0.900400
vn 0.163300 0.443100 0.881500
vn 0.188000 0.452000 0.872000
vn -0.284200 -0.392500 0.874700
vn -0.253500 -0.370300 0.893700
vn -0.256600 -0.344200 0.903100
vn -0.223100 -0.321200 0.920300
vn -0.226100 -0.291500 0.929500
vn -0.190100 -0.268000 0.944500
vn -0.192800 -0.234500 0.952800
vn -0.154600 -0.210800 0.965200
vn -0.156900 -0.173700 0.972200
vn -0.117000 -0.150300 0.981700
vn -0.118700 -0.109800 0.986800
vn -0.077800 -0.087000 0.993200
vn -0.078700 -0.043800 0.995900
vn -0.037500 -0.022100 0.999100
vn -0.037500 0.023200 0.999000
vn 0.003000 0.043500 0.999100
vn 0.004000 0.089900 0.995900
vn 0.043100 0.108500 0.993200
vn 0.045100 0.155200 0.986800
vn 0.082100 0.171800 0.981700
vn 0.085200 0.218000 0.972200
vn 0.119400 0.232600 0.965200
vn 0.123500 0.277300 0.952800
vn 0.154700 0.289900 0.944500
vn 0.159600 0.332600 0.929500
vn 0.187500 0.343200 0.920300
vn 0.193100 0.383400 0.903100
vn 0.217800 0.392300 0.893700
vn 0.224000 0.429800 0.874700
vn 0.245400 0.437100 0.865300
vn 0.310100 0.437100 0.844300
vn 0.349100 0.392300 0.851000
vn 0.389200 0.343200 0.854800
vn 0.430000 0.289900 0.855000
vn 0.470700 0.232600 0.851100
vn 0.510600 0.171800 0.842500
vn 0.548900 0.108500 0.828800
vn 0.584800 0.043500 0.810000
vn 0.617600 -0.022100 0.786200
vn 0.646700 -0.087000 0.757800
vn 0.671700 -0.150300 0.725400
vn 0.692400 -0.210800 0.690000
vn 0.708900 -0.268000 0.652400
vn 0.721500 -0.321200 0.613400
vn 0.730400 -0.370300 0.574000
vn 0.333000 0.429800 0.839300
vn 0.360500 0.452000 0.815900
vn 0.374600 0.383400 0.844200
vn 0.402100 0.405700 0.820800
vn 0.386000 0.443100 0.809100
vn 0.412700 0.466100 0.782600
vn 0.417200 0.332600 0.845800
vn 0.444700 0.354700 0.822500
vn 0.430000 0.395100 0.811800
vn 0.456800 0.418100 0.785200
vn 0.440700 0.455400 0.773600
vn 0.466100 0.478900 0.743900
vn 0.460100 0.277300 0.843400
vn 0.487400 0.299400 0.820200
vn 0.474600 0.342200 0.810900
vn 0.501400 0.365300 0.784300
vn 0.486700 0.405600 0.773700
vn 0.512200 0.429100 0.744000
vn 0.496200 0.466300 0.732300
vn 0.519800 0.489900 0.699800
vn 0.502600 0.218000 0.836600
vn 0.529700 0.239900 0.813600
vn 0.519100 0.284900 0.805900
vn 0.545800 0.307800 0.779300
vn 0.533000 0.350800 0.770000
vn 0.558500 0.374400 0.740200
vn 0.543900 0.414600 0.729600
vn 0.567600 0.438400 0.696900
vn 0.551700 0.475300 0.685400
vn 0.573000 0.498700 0.650400
vn 0.543500 0.155200 0.824900
vn 0.570500 0.177000 0.802000
vn 0.562400 0.223400 0.796100
vn 0.589100 0.246300 0.769600
vn 0.578400 0.291400 0.761900
vn 0.604000 0.315000 0.732100
vn 0.591200 0.357900 0.722800
vn 0.614900 0.381700 0.690000
vn 0.600300 0.421800 0.679400
vn 0.621800 0.445300 0.644300
vn 0.606000 0.482100 0.632800
vn 0.624600 0.504800 0.595900
vn 0.582200 0.089900 0.808100
vn 0.609100 0.111700 0.785200
vn 0.603700 0.158600 0.781300
vn 0.630200 0.181400 0.754900
vn 0.622100 0.227900 0.749000
vn 0.647600 0.251500 0.719300
vn 0.637000 0.296600 0.711500
vn 0.660800 0.320400 0.678700
vn 0.648000 0.363300 0.669400
vn 0.669500 0.386800 0.634200
vn 0.654900 0.426900 0.623600
vn 0.673600 0.449700 0.586600
vn 0.657900 0.486300 0.575100
vn 0.673500 0.507900 0.537000
vn 0.617600 0.023200 0.786200
vn 0.644400 0.044900 0.763300
vn 0.641800 0.091400 0.761400
vn 0.668300 0.114300 0.735100
vn 0.662900 0.161200 0.731100
vn 0.688400 0.184800 0.701400
vn 0.680300 0.231300 0.695500
vn 0.704100 0.255100 0.662700
vn 0.693400 0.300200 0.655000
vn 0.714900 0.323800 0.619700
vn 0.702100 0.366600 0.610400
vn 0.720900 0.389500 0.573300
vn 0.706300 0.429400 0.562800
vn 0.722000 0.451100 0.524600
vn 0.706300 0.487700 0.513100
vn 0.718800 0.507900 0.474600
vn 0.649000 -0.043800 0.759500
vn 0.675900 -0.022000 0.736600
vn 0.675900 0.023200 0.736600
vn 0.702400 0.046000 0.710300
vn 0.699800 0.092600 0.708300
vn 0.725300 0.116100 0.678600
vn 0.719900 0.163100 0.674700
vn 0.743600 0.186900 0.641900
vn 0.735500 0.233400 0.636000
vn 0.757000 0.256900 0.600700
vn 0.746400 0.302000 0.593000
vn 0.765100 0.324900 0.555900
vn 0.752300 0.367800 0.546600
vn 0.768000 0.389500 0.508400
vn 0.753500 0.429400 0.497900
vn 0.766000 0.449700 0.459400
vn 0.750300 0.486300 0.447900
vn 0.759700 0.504800 0.409900
vn 0.676100 -0.109800 0.728600
vn 0.703000 -0.088000 0.705700
vn 0.705400 -0.044900 0.707400
vn 0.731900 -0.022000 0.681000
vn 0.731900 0.023200 0.681000
vn 0.757400 0.046700 0.651300
vn 0.754800 0.093200 0.649300
vn 0.778600 0.117000 0.616600
vn 0.773200 0.164000 0.612600
vn 0.794700 0.187600 0.577300
vn 0.786500 0.234100 0.571500
vn 0.805300 0.256900 0.534300
vn 0.794600 0.302000 0.526600
vn 0.810300 0.323800 0.488400
vn 0.797500 0.366600 0.479100
vn 0.810000 0.386800 0.440700
vn 0.795500 0.426900 0.430100
vn 0.804900 0.445300 0.392200
vn 0.789100 0.482100 0.380800
vn 0.795600 0.498700 0.344000
vn 0.698400 -0.173700 0.694300
vn 0.725500 -0.151700 0.671300
vn 0.729900 -0.111400 0.674500
vn 0.756500 -0.088500 0.648000
vn 0.758800 -0.045500 0.649700
vn 0.784400 -0.022000 0.619900
vn 0.784300 0.023200 0.619900
vn 0.808100 0.047000 0.587100
vn 0.805500 0.093500 0.585200
vn 0.827000 0.117000 0.549900
vn 0.821600 0.164000 0.546000
vn 0.840300 0.186900 0.508900
vn 0.832200 0.233400 0.503000
vn 0.847900 0.255100 0.464800
vn 0.837200 0.300200 0.457100
vn 0.849700 0.320400 0.418700
vn 0.836900 0.363300 0.409400
vn 0.846300 0.381700 0.371600
vn 0.831700 0.421800 0.361000
vn 0.838200 0.438400 0.324500
vn 0.822300 0.475300 0.312900
vn 0.826200 0.489900 0.278100
vn 0.716000 -0.234500 0.657500
vn 0.743300 -0.212400 0.634300
vn 0.749200 -0.175400 0.638600
vn 0.775900 -0.152400 0.612100
vn 0.780300 -0.112300 0.615300
vn 0.805800 -0.088700 0.585500
vn 0.808200 -0.045800 0.587200
vn 0.832000 -0.022000 0.554400
vn 0.831900 0.023200 0.554400
vn 0.853400 0.046700 0.519100
vn 0.850800 0.093200 0.517200
vn 0.869500 0.116100 0.480000
vn 0.864100 0.163100 0.476100
vn 0.879800 0.184800 0.438000
vn 0.871700 0.231300 0.432100
vn 0.884200 0.251500 0.393700
vn 0.873500 0.296600 0.386000
vn 0.882900 0.315000 0.348200
vn 0.870100 0.357900 0.338900
vn 0.876600 0.374400 0.302400
vn 0.861900 0.414600 0.291800
vn 0.865800 0.429100 0.257300
vn 0.849900 0.466300 0.245600
vn 0.851600 0.478900 0.213400
vn 0.729200 -0.291500 0.619100
vn 0.756700 -0.269300 0.595800
vn 0.763700 -0.236000 0.600900
vn 0.790500 -0.212900 0.574300
vn 0.796400 -0.176000 0.578600
vn 0.821900 -0.152400 0.548800
vn 0.826300 -0.112300 0.552000
vn 0.850000 -0.088500 0.519200
vn 0.852400 -0.045500 0.520900
vn 0.873900 -0.022000 0.485700
vn 0.873800 0.023200 0.485700
vn 0.892600 0.046000 0.448500
vn 0.889900 0.092600 0.446600
vn 0.905600 0.114300 0.408400
vn 0.900200 0.161200 0.404500
vn 0.912700 0.181400 0.366100
vn 0.904600 0.227900 0.360200
vn 0.914000 0.246300 0.322400
vn 0.903400 0.291400 0.314700
vn 0.909800 0.307800 0.278300
vn 0.897000 0.350800 0.268900
vn 0.900900 0.365300 0.234500
vn 0.886200 0.405600 0.223800
vn 0.887900 0.418100 0.191700
vn 0.871900 0.455400 0.180100
vn 0.871800 0.466100 0.150700
vn 0.738400 -0.344200 0.579800
vn 0.765900 -0.322000 0.556500
vn 0.773700 -0.292300 0.562100
vn 0.800400 -0.269300 0.535500
vn 0.807500 -0.236000 0.540600
vn 0.833000 -0.212400 0.510900
vn 0.838900 -0.175400 0.515200
vn 0.862600 -0.151700 0.482500
vn 0.867000 -0.111400 0.485700
vn 0.888400 -0.088000 0.450500
vn 0.890800 -0.044900 0.452300
vn 0.909500 -0.022000 0.415200
vn 0.909400 0.023200 0.415200
vn 0.925100 0.044900 0.377000
vn 0.922500 0.091400 0.375100
vn 0.935000 0.111700 0.336600
vn 0.929600 0.158600 0.332700
vn 0.939000 0.177000 0.294800
vn 0.930900 0.223400 0.288900
vn 0.937400 0.239900 0.252400
vn 0.926800 0.284900 0.244700
vn 0.930700 0.299400 0.210100
vn 0.917900 0.342200 0.200800
vn 0.919600 0.354700 0.168700
vn 0.905000 0.395100 0.158100
vn 0.904900 0.405700 0.128800
vn 0.888800 0.443100 0.117100
vn 0.887400 0.452000 0.090700
vn 0.744100 -0.392500 0.540600
vn 0.771600 -0.370300 0.517200
vn 0.779700 -0.344200 0.523100
vn 0.806300 -0.321200 0.496600
vn 0.814100 -0.291500 0.502200
vn 0.839500 -0.268000 0.472600
vn 0.846600 -0.234500 0.477800
vn 0.870200 -0.210800 0.445300
vn 0.876200 -0.173700 0.449600
vn 0.897500 -0.150300 0.414600
vn 0.901900 -0.109800 0.417800
vn 0.920500 -0.087000 0.380900
vn 0.922900 -0.043800 0.382600
vn 0.938600 -0.022100 0.344400
vn 0.938500 0.023200 0.344400
vn 0.951100 0.043500 0.305900
vn 0.948400 0.089900 0.304000
vn 0.957900 0.108500 0.265900
vn 0.952500 0.155200 0.262000
vn 0.959000 0.171800 0.225300
vn 0.951000 0.218000 0.219400
vn 0.954900 0.232600 0.184700
vn 0.944300 0.277300 0.177000
vn 0.946100 0.289900 0.144700
vn 0.933300 0.332600 0.135400
vn 0.933200 0.343200 0.106000
vn 0.918600 0.383400 0.095400
vn 0.917200 0.392300 0.069000
vn 0.901100 0.429700 0.057300
vn 0.898800 0.437100 0.034000
vn 0.281100 0.415000 -0.865300
vn 0.320200 0.370300 -0.872000
vn 0.360400 0.321200 -0.875700
vn 0.401400 0.268000 -0.875800
vn 0.442300 0.210800 -0.871700
vn 0.482400 0.150300 -0.863000
vn 0.520900 0.087000 -0.849200
vn 0.556900 0.022100 -0.830300
vn 0.589600 -0.043500 -0.806500
vn 0.618600 -0.108500 -0.778200
vn 0.643400 -0.171800 -0.746000
vn 0.664000 -0.232600 -0.710700
vn 0.680300 -0.289900 -0.673200
vn 0.692700 -0.343200 -0.634300
vn 0.701500 -0.392300 -0.595000
vn 0.284200 0.392500 -0.874700
vn 0.253500 0.370300 -0.893700
vn 0.323300 0.344200 -0.881500
vn 0.292600 0.322000 -0.900400
vn 0.256600 0.344200 -0.903100
vn 0.223100 0.321200 -0.920300
vn 0.363400 0.291500 -0.884900
vn 0.332800 0.269300 -0.903700
vn 0.295500 0.292300 -0.909500
vn 0.262000 0.269300 -0.926700
vn 0.226100 0.291500 -0.929500
vn 0.190100 0.268000 -0.944500
vn 0.404100 0.234500 -0.884200
vn 0.373600 0.212400 -0.903000
vn 0.335500 0.236000 -0.912000
vn 0.301900 0.212900 -0.929300
vn 0.264700 0.236000 -0.935000
vn 0.228500 0.212400 -0.950100
vn 0.192800 0.234500 -0.952800
vn 0.154600 0.210800 -0.965200
vn 0.444600 0.173700 -0.878800
vn 0.414200 0.151700 -0.897400
vn 0.375900 0.175400 -0.909900
vn 0.342400 0.152400 -0.927100
vn 0.304200 0.176000 -0.936200
vn 0.268000 0.152400 -0.951300
vn 0.230800 0.175400 -0.957100
vn 0.192400 0.151700 -0.969500
vn 0.156900 0.173700 -0.972200
vn 0.117000 0.150300 -0.981700
vn 0.484100 0.109800 -0.868100
vn 0.453900 0.088000 -0.886700
vn 0.415900 0.111400 -0.902600
vn 0.382500 0.088500 -0.919700
vn 0.344000 0.112300 -0.932200
vn 0.307800 0.088700 -0.947300
vn 0.269600 0.112300 -0.956400
vn 0.231100 0.088500 -0.968900
vn 0.194000 0.111400 -0.974600
vn 0.154000 0.088000 -0.984200
vn 0.118700 0.109800 -0.986800
vn 0.077800 0.087000 -0.993200
vn 0.521800 0.043800 -0.852000
vn 0.491700 0.022000 -0.870500
vn 0.454800 0.044900 -0.889500
vn 0.421500 0.022000 -0.906600
vn 0.383400 0.045500 -0.922500
vn 0.347200 0.022000 -0.937500
vn 0.308700 0.045800 -0.950100
vn 0.270200 0.022000 -0.962600
vn 0.232000 0.045500 -0.971600
vn 0.191900 0.022000 -0.981200
vn 0.154900 0.044900 -0.986900
vn 0.113800 0.022000 -0.993300
vn 0.078700 0.043800 -0.995900
vn 0.037500 0.022100 -0.999100
vn 0.556800 -0.023200 -0.830300
vn 0.526800 -0.044900 -0.848800
vn 0.491700 -0.023200 -0.870500
vn 0.458500 -0.046000 -0.887500
vn 0.421500 -0.023200 -0.906500
vn 0.385300 -0.046700 -0.921600
vn 0.347200 -0.023200 -0.937500
vn 0.308700 -0.047000 -0.950000
vn 0.270200 -0.023200 -0.962500
vn 0.230000 -0.046700 -0.972100
vn 0.191900 -0.023200 -0.981100
vn 0.150800 -0.046000 -0.987500
vn 0.113800 -0.023200 -0.993200
vn 0.072700 -0.044900 -0.996300
vn 0.037500 -0.023200 -0.999000
vn -0.003000 -0.043500 -0.999100
vn 0.588600 -0.089900 -0.803400
vn 0.558600 -0.111700 -0.821900
vn 0.525800 -0.091400 -0.845700
vn 0.492600 -0.114300 -0.862700
vn 0.457400 -0.092600 -0.884400
vn 0.421300 -0.116100 -0.899500
vn 0.384300 -0.093200 -0.918500
vn 0.345800 -0.117000 -0.931000
vn 0.307700 -0.093500 -0.946900
vn 0.267500 -0.117000 -0.956400
vn 0.229000 -0.093200 -0.969000
vn 0.187900 -0.116100 -0.975300
vn 0.149800 -0.092600 -0.984400
vn 0.108600 -0.114300 -0.987500
vn 0.071700 -0.091400 -0.993200
vn 0.031200 -0.111700 -0.993300
vn -0.004000 -0.089900 -0.995900
vn -0.043100 -0.108500 -0.993200
vn 0.616600 -0.155200 -0.771900
vn 0.586400 -0.177000 -0.790400
vn 0.556500 -0.158600 -0.815600
vn 0.523200 -0.181400 -0.832700
vn 0.490500 -0.161200 -0.856400
vn 0.454400 -0.184800 -0.871400
vn 0.419200 -0.163100 -0.893100
vn 0.380700 -0.186900 -0.905600
vn 0.343700 -0.164000 -0.924600
vn 0.303500 -0.187600 -0.934200
vn 0.265400 -0.164000 -0.950100
vn 0.224300 -0.186900 -0.956400
vn 0.185800 -0.163100 -0.969000
vn 0.144600 -0.184800 -0.972100
vn 0.106500 -0.161200 -0.981100
vn 0.066100 -0.181400 -0.981200
vn 0.029100 -0.158600 -0.986900
vn -0.009800 -0.177000 -0.984200
vn -0.045100 -0.155200 -0.986800
vn -0.082100 -0.171800 -0.981700
vn 0.640400 -0.218000 -0.736500
vn 0.610100 -0.239900 -0.755200
vn 0.583300 -0.223400 -0.780900
vn 0.549900 -0.246300 -0.798100
vn 0.520100 -0.227900 -0.823100
vn 0.483900 -0.251500 -0.838200
vn 0.451300 -0.231300 -0.861900
vn 0.412700 -0.255100 -0.874400
vn 0.377600 -0.233400 -0.896100
vn 0.337400 -0.257000 -0.905600
vn 0.300400 -0.234100 -0.924600
vn 0.259300 -0.257000 -0.931000
vn 0.221200 -0.233400 -0.946900
vn 0.180100 -0.255100 -0.950000
vn 0.141500 -0.231300 -0.962500
vn 0.101200 -0.251500 -0.962600
vn 0.063100 -0.227900 -0.971600
vn 0.024200 -0.246300 -0.968900
vn -0.012900 -0.223400 -0.974600
vn -0.049700 -0.239900 -0.969500
vn -0.085200 -0.218000 -0.972200
vn -0.119400 -0.232600 -0.965200
vn 0.660000 -0.277300 -0.698300
vn 0.629500 -0.299400 -0.717000
vn 0.606000 -0.284900 -0.742700
vn 0.572500 -0.307900 -0.759900
vn 0.545900 -0.291400 -0.785600
vn 0.509600 -0.315000 -0.800700
vn 0.479900 -0.296600 -0.825700
vn 0.441300 -0.320400 -0.838200
vn 0.408700 -0.300200 -0.861900
vn 0.368500 -0.323800 -0.871400
vn 0.333300 -0.302000 -0.893100
vn 0.292300 -0.324900 -0.899500
vn 0.255300 -0.302000 -0.918500
vn 0.214100 -0.323800 -0.921600
vn 0.176000 -0.300200 -0.937500
vn 0.135600 -0.320400 -0.937500
vn 0.097100 -0.296600 -0.950100
vn 0.058300 -0.315000 -0.947300
vn 0.020100 -0.291400 -0.956400
vn -0.016500 -0.307900 -0.951300
vn -0.053700 -0.284900 -0.957100
vn -0.087800 -0.299400 -0.950100
vn -0.123500 -0.277300 -0.952800
vn -0.154700 -0.289900 -0.944500
vn 0.675400 -0.332600 -0.658200
vn 0.644800 -0.354700 -0.677000
vn 0.624600 -0.342200 -0.702000
vn 0.591000 -0.365300 -0.719200
vn 0.567600 -0.350800 -0.744800
vn 0.531400 -0.374400 -0.759900
vn 0.504700 -0.357900 -0.785600
vn 0.466200 -0.381700 -0.798100
vn 0.436400 -0.363300 -0.823100
vn 0.396300 -0.386800 -0.832700
vn 0.363600 -0.366600 -0.856400
vn 0.322500 -0.389500 -0.862700
vn 0.287400 -0.367800 -0.884400
vn 0.246200 -0.389500 -0.887500
vn 0.209200 -0.366600 -0.906500
vn 0.168800 -0.386800 -0.906600
vn 0.130700 -0.363300 -0.922500
vn 0.091900 -0.381700 -0.919700
vn 0.053400 -0.357900 -0.932200
vn 0.016800 -0.374400 -0.927100
vn -0.021400 -0.350800 -0.936200
vn -0.055400 -0.365300 -0.929300
vn -0.092700 -0.342200 -0.935000
vn -0.123700 -0.354700 -0.926700
vn -0.159600 -0.332600 -0.929500
vn -0.187500 -0.343200 -0.920300
vn 0.687100 -0.383400 -0.617100
vn 0.656400 -0.405700 -0.636100
vn 0.639200 -0.395100 -0.659800
vn 0.605700 -0.418100 -0.677000
vn 0.585400 -0.405600 -0.702000
vn 0.549300 -0.429100 -0.717000
vn 0.525800 -0.414600 -0.742700
vn 0.487400 -0.438400 -0.755200
vn 0.460700 -0.421800 -0.780900
vn 0.420600 -0.445300 -0.790400
vn 0.390700 -0.426900 -0.815600
vn 0.349700 -0.449700 -0.821900
vn 0.316900 -0.429400 -0.845700
vn 0.275800 -0.451100 -0.848800
vn 0.240700 -0.429400 -0.870400
vn 0.200200 -0.449700 -0.870500
vn 0.163300 -0.426900 -0.889500
vn 0.124300 -0.445300 -0.886700
vn 0.086300 -0.421800 -0.902600
vn 0.049600 -0.438400 -0.897400
vn 0.011200 -0.414600 -0.909900
vn -0.022900 -0.429100 -0.902900
vn -0.061000 -0.405600 -0.912000
vn -0.092000 -0.418100 -0.903700
vn -0.129300 -0.395100 -0.909500
vn -0.157100 -0.405700 -0.900400
vn -0.193100 -0.383400 -0.903100
vn -0.217800 -0.392300 -0.893700
vn 0.695300 -0.429700 -0.576000
vn 0.664600 -0.452000 -0.595000
vn 0.650200 -0.443100 -0.617100
vn 0.616800 -0.466100 -0.634300
vn 0.599500 -0.455400 -0.658200
vn 0.563500 -0.478900 -0.673200
vn 0.543200 -0.466300 -0.698300
vn 0.504900 -0.489900 -0.710700
vn 0.481300 -0.475300 -0.736500
vn 0.441500 -0.498700 -0.746000
vn 0.414600 -0.482100 -0.771800
vn 0.373700 -0.504800 -0.778200
vn 0.343700 -0.486300 -0.803400
vn 0.302600 -0.508000 -0.806500
vn 0.269800 -0.487700 -0.830300
vn 0.229300 -0.507900 -0.830300
vn 0.194200 -0.486300 -0.852000
vn 0.155100 -0.504800 -0.849200
vn 0.118300 -0.482100 -0.868100
vn 0.081300 -0.498700 -0.863000
vn 0.043500 -0.475300 -0.878800
vn 0.009200 -0.489900 -0.871700
vn -0.029000 -0.466300 -0.884200
vn -0.060200 -0.478900 -0.875800
vn -0.098200 -0.455400 -0.884900
vn -0.126100 -0.466100 -0.875700
vn -0.163300 -0.443100 -0.881500
vn -0.188000 -0.452000 -0.872000
vn -0.224000 -0.429800 -0.874700
vn -0.245400 -0.437100 -0.865300
vn -0.736100 0.415000 -0.534800
vn -0.730400 0.370300 -0.574000
vn -0.721500 0.321200 -0.613400
vn -0.708900 0.268000 -0.652400
vn -0.692400 0.210800 -0.690000
vn -0.671700 0.150300 -0.725500
vn -0.646700 0.087000 -0.757800
vn -0.617600 0.022100 -0.786200
vn -0.584800 -0.043500 -0.810000
vn -0.548900 -0.108500 -0.828800
vn -0.510600 -0.171800 -0.842500
vn -0.470700 -0.232600 -0.851100
vn -0.430000 -0.289900 -0.855000
vn -0.389200 -0.343200 -0.854800
vn -0.349100 -0.392300 -0.851000
vn -0.744100 0.392500 -0.540600
vn -0.771600 0.370300 -0.517300
vn -0.738400 0.344200 -0.579800
vn -0.765900 0.322000 -0.556500
vn -0.779700 0.344200 -0.523100
vn -0.806300 0.321200 -0.496600
vn -0.729300 0.291500 -0.619100
vn -0.756700 0.269300 -0.595800
vn -0.773700 0.292300 -0.562100
vn -0.800400 0.269300 -0.535500
vn -0.814100 0.291500 -0.502200
vn -0.839500 0.268000 -0.472600
vn -0.716000 0.234500 -0.657500
vn -0.743300 0.212400 -0.634300
vn -0.763700 0.236000 -0.600900
vn -0.790500 0.212900 -0.574300
vn -0.807500 0.236000 -0.540600
vn -0.833000 0.212400 -0.510900
vn -0.846600 0.234500 -0.477800
vn -0.870200 0.210800 -0.445300
vn -0.698400 0.173700 -0.694300
vn -0.725500 0.151700 -0.671300
vn -0.749200 0.175400 -0.638600
vn -0.775900 0.152400 -0.612100
vn -0.796400 0.176000 -0.578600
vn -0.821900 0.152400 -0.548800
vn -0.838900 0.175400 -0.515200
vn -0.862600 0.151700 -0.482500
vn -0.876200 0.173700 -0.449600
vn -0.897500 0.150300 -0.414600
vn -0.676100 0.109800 -0.728600
vn -0.703000 0.088000 -0.705700
vn -0.729900 0.111400 -0.674500
vn -0.756500 0.088500 -0.648000
vn -0.780300 0.112300 -0.615300
vn -0.805800 0.088700 -0.585500
vn -0.826300 0.112300 -0.552000
vn -0.850000 0.088500 -0.519200
vn -0.867000 0.111400 -0.485700
vn -0.888400 0.088000 -0.450500
vn -0.901900 0.109800 -0.417800
vn -0.920500 0.087000 -0.380900
vn -0.649000 0.043800 -0.759500
vn -0.675900 0.022000 -0.736600
vn -0.705400 0.044800 -0.707400
vn -0.731900 0.022000 -0.681000
vn -0.758800 0.045500 -0.649700
vn -0.784400 0.022000 -0.619900
vn -0.808200 0.045800 -0.587200
vn -0.832000 0.022000 -0.554400
vn -0.852400 0.045500 -0.520900
vn -0.873900 0.022000 -0.485700
vn -0.890800 0.044900 -0.452300
vn -0.909500 0.022000 -0.415200
vn -0.922900 0.043800 -0.382600
vn -0.938600 0.022100 -0.344400
vn -0.617600 -0.023200 -0.786200
vn -0.644400 -0.044900 -0.763300
vn -0.675900 -0.023200 -0.736600
vn -0.702400 -0.046000 -0.710300
vn -0.731900 -0.023200 -0.681000
vn -0.757400 -0.046700 -0.651300
vn -0.784300 -0.023200 -0.619900
vn -0.808100 -0.047000 -0.587100
vn -0.831900 -0.023200 -0.554400
vn -0.853400 -0.046700 -0.519100
vn -0.873800 -0.023200 -0.485700
vn -0.892600 -0.046000 -0.448500
vn -0.909400 -0.023200 -0.415200
vn -0.925100 -0.044900 -0.377000
vn -0.938500 -0.023200 -0.344400
vn -0.951100 -0.043500 -0.305900
vn -0.582200 -0.089900 -0.808100
vn -0.609100 -0.111700 -0.785200
vn -0.641800 -0.091400 -0.761400
vn -0.668300 -0.114300 -0.735100
vn -0.699800 -0.092600 -0.708300
vn -0.725300 -0.116100 -0.678600
vn -0.754800 -0.093200 -0.649300
vn -0.778600 -0.117000 -0.616600
vn -0.805500 -0.093500 -0.585200
vn -0.827000 -0.117000 -0.549900
vn -0.850800 -0.093200 -0.517200
vn -0.869500 -0.116100 -0.480000
vn -0.889900 -0.092600 -0.446600
vn -0.905600 -0.114300 -0.408400
vn -0.922500 -0.091400 -0.375100
vn -0.935000 -0.111700 -0.336600
vn -0.948400 -0.089900 -0.304000
vn -0.957900 -0.108500 -0.265900
vn -0.543500 -0.155200 -0.824900
vn -0.570500 -0.177000 -0.802000
vn -0.603700 -0.158600 -0.781300
vn -0.630200 -0.181400 -0.754900
vn -0.662900 -0.161200 -0.731100
vn -0.688400 -0.184800 -0.701400
vn -0.719800 -0.163100 -0.674700
vn -0.743600 -0.186900 -0.641900
vn -0.773200 -0.164000 -0.612600
vn -0.794700 -0.187600 -0.577300
vn -0.821600 -0.164000 -0.546000
vn -0.840300 -0.186900 -0.508900
vn -0.864100 -0.163100 -0.476100
vn -0.879800 -0.184800 -0.438000
vn -0.900200 -0.161200 -0.404500
vn -0.912700 -0.181400 -0.366100
vn -0.929600 -0.158600 -0.332700
vn -0.939000 -0.177000 -0.294800
vn -0.952500 -0.155200 -0.262000
vn -0.959000 -0.171800 -0.225300
vn -0.502600 -0.218000 -0.836600
vn -0.529700 -0.239900 -0.813600
vn -0.562400 -0.223400 -0.796100
vn -0.589100 -0.246300 -0.769600
vn -0.622100 -0.227900 -0.749000
vn -0.647600 -0.251500 -0.719300
vn -0.680300 -0.231300 -0.695500
vn -0.704100 -0.255100 -0.662700
vn -0.735500 -0.233400 -0.636000
vn -0.757000 -0.256900 -0.600700
vn -0.786500 -0.234100 -0.571500
vn -0.805300 -0.257000 -0.534300
vn -0.832200 -0.233400 -0.503000
vn -0.847900 -0.255100 -0.464800
vn -0.871700 -0.231300 -0.432100
vn -0.884200 -0.251500 -0.393700
vn -0.904600 -0.227900 -0.360200
vn -0.914000 -0.246300 -0.322400
vn -0.930900 -0.223400 -0.288900
vn -0.937400 -0.239900 -0.252400
vn -0.951000 -0.218000 -0.219400
vn -0.954900 -0.232600 -0.184700
vn -0.460100 -0.277300 -0.843400
vn -0.487400 -0.299400 -0.820200
vn -0.519100 -0.284900 -0.805900
vn -0.545800 -0.307900 -0.779300
vn -0.578400 -0.291400 -0.761900
vn -0.604000 -0.315000 -0.732100
vn -0.637000 -0.296600 -0.711500
vn -0.660800 -0.320400 -0.678700
vn -0.693400 -0.300200 -0.655000
vn -0.714900 -0.323800 -0.619700
vn -0.746400 -0.302000 -0.593000
vn -0.765100 -0.324900 -0.555900
vn -0.794600 -0.302000 -0.526600
vn -0.810300 -0.323800 -0.488400
vn -0.837200 -0.300200 -0.457100
vn -0.849700 -0.320400 -0.418700
vn -0.873500 -0.296600 -0.386000
vn -0.882900 -0.315000 -0.348200
vn -0.903400 -0.291400 -0.314700
vn -0.909800 -0.307800 -0.278300
vn -0.926800 -0.284900 -0.244700
vn -0.930700 -0.299400 -0.210100
vn -0.944300 -0.277300 -0.177000
vn -0.946100 -0.289900 -0.144700
vn -0.417200 -0.332600 -0.845800
vn -0.444700 -0.354700 -0.822500
vn -0.474600 -0.342200 -0.810900
vn -0.501400 -0.365300 -0.784300
vn -0.532900 -0.350800 -0.770000
vn -0.558500 -0.374400 -0.740200
vn -0.591200 -0.357900 -0.722800
vn -0.614900 -0.381700 -0.690000
vn -0.648000 -0.363300 -0.669400
vn -0.669500 -0.386800 -0.634200
vn -0.702100 -0.366600 -0.610400
vn -0.720900 -0.389500 -0.573300
vn -0.752300 -0.367800 -0.546600
vn -0.768000 -0.389500 -0.508400
vn -0.797500 -0.366600 -0.479100
vn -0.810000 -0.386800 -0.440700
vn -0.836900 -0.363300 -0.409400
vn -0.846300 -0.381700 -0.371600
vn -0.870100 -0.357900 -0.338900
vn -0.876600 -0.374400 -0.302400
vn -0.897000 -0.350800 -0.268900
vn -0.900900 -0.365300 -0.234500
vn -0.917900 -0.342200 -0.200800
vn -0.919600 -0.354700 -0.168700
vn -0.933300 -0.332600 -0.135400
vn -0.933200 -0.343200 -0.106000
vn -0.374600 -0.383400 -0.844200
vn -0.402100 -0.405700 -0.820800
vn -0.430000 -0.395100 -0.811800
vn -0.456800 -0.418100 -0.785200
vn -0.486700 -0.405600 -0.773700
vn -0.512200 -0.429100 -0.744000
vn -0.543900 -0.414600 -0.729600
vn -0.567600 -0.438400 -0.696900
vn -0.600300 -0.421800 -0.679400
vn -0.621800 -0.445300 -0.644300
vn -0.654900 -0.426900 -0.623600
vn -0.673600 -0.449700 -0.586600
vn -0.706300 -0.429400 -0.562800
vn -0.722000 -0.451100 -0.524600
vn -0.753500 -0.429400 -0.497900
vn -0.766000 -0.449700 -0.459400
vn -0.795500 -0.426900 -0.430100
vn -0.804900 -0.445300 -0.392200
vn -0.831700 -0.421800 -0.361000
vn -0.838200 -0.438400 -0.324500
vn -0.861900 -0.414600 -0.291800
vn -0.865800 -0.429100 -0.257300
vn -0.886200 -0.405600 -0.223800
vn -0.887900 -0.418100 -0.191800
vn -0.905000 -0.395100 -0.158100
vn -0.904900 -0.405700 -0.128800
vn -0.918600 -0.383400 -0.095400
vn -0.917200 -0.392300 -0.069000
vn -0.333000 -0.429800 -0.839300
vn -0.360500 -0.452000 -0.815900
vn -0.386000 -0.443100 -0.809100
vn -0.412700 -0.466100 -0.782600
vn -0.440700 -0.455400 -0.773600
vn -0.466100 -0.478900 -0.743900
vn -0.496200 -0.466300 -0.732300
vn -0.519800 -0.489900 -0.699800
vn -0.551700 -0.475300 -0.685400
vn -0.573000 -0.498700 -0.650400
vn -0.606000 -0.482100 -0.632800
vn -0.624600 -0.504800 -0.595900
vn -0.657900 -0.486300 -0.575100
vn -0.673500 -0.507900 -0.537000
vn -0.706300 -0.487700 -0.513100
vn -0.718800 -0.507900 -0.474600
vn -0.750300 -0.486300 -0.447900
vn -0.759700 -0.504800 -0.409900
vn -0.789100 -0.482100 -0.380800
vn -0.795600 -0.498700 -0.344000
vn -0.822300 -0.475300 -0.312900
vn -0.826200 -0.489900 -0.278100
vn -0.849900 -0.466300 -0.245600
vn -0.851600 -0.478900 -0.213400
vn -0.871900 -0.455400 -0.180100
vn -0.871800 -0.466100 -0.150700
vn -0.888800 -0.443100 -0.117100
vn -0.887400 -0.452000 -0.090700
vn -0.901100 -0.429700 -0.057300
vn -0.898800 -0.437100 -0.034000
vn -0.736100 0.415000 0.534800
vn -0.771600 0.370300 0.517300
vn -0.806300 0.321200 0.496600
vn -0.839500 0.268000 0.472600
vn -0.870200 0.210800 0.445300
vn -0.897500 0.150300 0.414600
vn -0.920500 0.087000 0.380900
vn -0.938600 0.022100 0.344400
vn -0.951100 -0.043500 0.305900
vn -0.957900 -0.108500 0.265900
vn -0.959000 -0.171800 0.225300
vn -0.954900 -0.232600 0.184700
vn -0.946100 -0.289900 0.144700
vn -0.933200 -0.343200 0.106000
vn -0.917200 -0.392300 0.069000
vn -0.744100 0.392500 0.540600
vn -0.730400 0.370300 0.574000
vn -0.779700 0.344200 0.523100
vn -0.765900 0.322000 0.556500
vn -0.738400 0.344200 0.579800
vn -0.721500 0.321200 0.613400
vn -0.814100 0.291500 0.502200
vn -0.800400 0.269300 0.535500
vn -0.773700 0.292300 0.562100
vn -0.756700 0.269300 0.595800
vn -0.729200 0.291500 0.619100
vn -0.708900 0.268000 0.652400
vn -0.846600 0.234500 0.477800
vn -0.833000 0.212400 0.510900
vn -0.807500 0.236000 0.540600
vn -0.790500 0.212900 0.574300
vn -0.763700 0.235900 0.600900
vn -0.743300 0.212400 0.634300
vn -0.716000 0.234500 0.657500
vn -0.692400 0.210800 0.690000
vn -0.876200 0.173700 0.449600
vn -0.862600 0.151700 0.482500
vn -0.838900 0.175400 0.515200
vn -0.821900 0.152400 0.548800
vn -0.796400 0.176000 0.578600
vn -0.775900 0.152400 0.612100
vn -0.749200 0.175400 0.638600
vn -0.725500 0.151700 0.671300
vn -0.698400 0.173700 0.694300
vn -0.671700 0.150300 0.725500
vn -0.901900 0.109800 0.417800
vn -0.888400 0.088000 0.450500
vn -0.867000 0.111400 0.485700
vn -0.850000 0.088500 0.519200
vn -0.826300 0.112300 0.552000
vn -0.805800 0.088700 0.585500
vn -0.780300 0.112300 0.615300
vn -0.756500 0.088500 0.648000
vn -0.729900 0.111400 0.674500
vn -0.703000 0.088000 0.705700
vn -0.676100 0.109800 0.728600
vn -0.646700 0.087000 0.757800
vn -0.922900 0.043800 0.382600
vn -0.909500 0.022000 0.415200
vn -0.890800 0.044900 0.452300
vn -0.873900 0.022000 0.485700
vn -0.852400 0.045500 0.520900
vn -0.832000 0.022000 0.554400
vn -0.808200 0.045800 0.587200
vn -0.784400 0.022000 0.619900
vn -0.758800 0.045500 0.649700
vn -0.731900 0.022000 0.681000
vn -0.705400 0.044900 0.707400
vn -0.675900 0.022000 0.736600
vn -0.649000 0.043800 0.759500
vn -0.617600 0.022100 0.786200
vn -0.938500 -0.023200 0.344400
vn -0.925100 -0.044900 0.377000
vn -0.909400 -0.023200 0.415200
vn -0.892600 -0.046000 0.448500
vn -0.873800 -0.023200 0.485700
vn -0.853400 -0.046700 0.519100
vn -0.831900 -0.023200 0.554400
vn -0.808100 -0.047000 0.587100
vn -0.784300 -0.023200 0.619900
vn -0.757400 -0.046700 0.651300
vn -0.731900 -0.023200 0.681000
vn -0.702400 -0.046000 0.710300
vn -0.675900 -0.023200 0.736600
vn -0.644400 -0.044900 0.763300
vn -0.617600 -0.023200 0.786200
vn -0.584800 -0.043500 0.810000
vn -0.948400 -0.089900 0.304000
vn -0.935000 -0.111700 0.336600
vn -0.922500 -0.091400 0.375100
vn -0.905600 -0.114300 0.408400
vn -0.889900 -0.092600 0.446600
vn -0.869500 -0.116100 0.480000
vn -0.850800 -0.093200 0.517200
vn -0.827000 -0.117000 0.549900
vn -0.805500 -0.093500 0.585200
vn -0.778600 -0.117000 0.616600
vn -0.754800 -0.093200 0.649300
vn -0.725300 -0.116100 0.678600
vn -0.699800 -0.092600 0.708300
vn -0.668300 -0.114300 0.735100
vn -0.641800 -0.091400 0.761400
vn -0.609100 -0.111700 0.785200
vn -0.582200 -0.089900 0.808100
vn -0.548900 -0.108500 0.828800
vn -0.952500 -0.155200 0.262000
vn -0.939000 -0.177000 0.294800
vn -0.929600 -0.158600 0.332700
vn -0.912700 -0.181400 0.366100
vn -0.900200 -0.161200 0.404500
vn -0.879800 -0.184800 0.438000
vn -0.864100 -0.163100 0.476100
vn -0.840300 -0.186900 0.508900
vn -0.821600 -0.164000 0.546000
vn -0.794700 -0.187600 0.577300
vn -0.773200 -0.164000 0.612600
vn -0.743600 -0.186900 0.641900
vn -0.719900 -0.163100 0.674700
vn -0.688400 -0.184800 0.701400
vn -0.662900 -0.161200 0.731100
vn -0.630200 -0.181400 0.754900
vn -0.603700 -0.158600 0.781300
vn -0.570500 -0.177000 0.802000
vn -0.543500 -0.155200 0.824900
vn -0.510600 -0.171800 0.842500
vn -0.951000 -0.218000 0.219400
vn -0.937400 -0.239900 0.252400
vn -0.930900 -0.223400 0.288900
vn -0.914000 -0.246300 0.322400
vn -0.904600 -0.227900 0.360200
vn -0.884200 -0.251500 0.393700
vn -0.871700 -0.231300 0.432100
vn -0.847900 -0.255100 0.464800
vn -0.832200 -0.233400 0.503000
vn -0.805300 -0.257000 0.534300
vn -0.786500 -0.234100 0.571500
vn -0.757000 -0.257000 0.600700
vn -0.735500 -0.233400 0.636000
vn -0.704100 -0.255100 0.662700
vn -0.680300 -0.231300 0.695500
vn -0.647600 -0.251500 0.719300
vn -0.622100 -0.227900 0.749000
vn -0.589100 -0.246300 0.769600
vn -0.562400 -0.223400 0.796100
vn -0.529700 -0.239900 0.813600
vn -0.502600 -0.218000 0.836600
vn -0.470700 -0.232600 0.851100
vn -0.944300 -0.277300 0.177000
vn -0.930700 -0.299400 0.210100
vn -0.926800 -0.284900 0.244700
vn -0.909800 -0.307800 0.278300
vn -0.903400 -0.291400 0.314700
vn -0.882900 -0.315000 0.348200
vn -0.873500 -0.296600 0.386000
vn -0.849700 -0.320400 0.418700
vn -0.837200 -0.300200 0.457100
vn -0.810300 -0.323800 0.488400
vn -0.794600 -0.302000 0.526600
vn -0.765100 -0.324900 0.555900
vn -0.746400 -0.302000 0.593000
vn -0.714900 -0.323800 0.619700
vn -0.693400 -0.300200 0.655000
vn -0.660800 -0.320400 0.678700
vn -0.637000 -0.296600 0.711500
vn -0.604000 -0.315000 0.732100
vn -0.578400 -0.291400 0.761900
vn -0.545800 -0.307900 0.779300
vn -0.519100 -0.284900 0.805900
vn -0.487400 -0.299400 0.820200
vn -0.460100 -0.277300 0.843400
vn -0.430000 -0.289900 0.855000
vn -0.933300 -0.332600 0.135500
vn -0.919600 -0.354700 0.168700
vn -0.917900 -0.342200 0.200800
vn -0.900900 -0.365300 0.234500
vn -0.897000 -0.350800 0.268900
vn -0.876600 -0.374400 0.302400
vn -0.870100 -0.357900 0.338900
vn -0.846300 -0.381700 0.371600
vn -0.836900 -0.363300 0.409400
vn -0.810000 -0.386800 0.440700
vn -0.797500 -0.366600 0.479100
vn -0.768000 -0.389500 0.508400
vn -0.752300 -0.367800 0.546600
vn -0.720900 -0.389500 0.573300
vn -0.702100 -0.366600 0.610400
vn -0.669500 -0.386800 0.634200
vn -0.648000 -0.363300 0.669400
vn -0.614900 -0.381700 0.690000
vn -0.591200 -0.357900 0.722800
vn -0.558500 -0.374400 0.740200
vn -0.533000 -0.350800 0.770000
vn -0.501400 -0.365300 0.784300
vn -0.474600 -0.342200 0.810900
vn -0.444700 -0.354700 0.822500
vn -0.417200 -0.332600 0.845800
vn -0.389200 -0.343200 0.854800
vn -0.918600 -0.383400 0.095400
vn -0.904900 -0.405700 0.128800
vn -0.905000 -0.395100 0.158100
vn -0.887900 -0.418100 0.191700
vn -0.886200 -0.405600 0.223800
vn -0.865800 -0.429100 0.257300
vn -0.861900 -0.414600 0.291800
vn -0.838200 -0.438400 0.324500
vn -0.831700 -0.421800 0.361000
vn -0.804900 -0.445300 0.392200
vn -0.795500 -0.426900 0.430100
vn -0.766000 -0.449700 0.459400
vn -0.753500 -0.429400 0.497900
vn -0.722000 -0.451100 0.524600
vn -0.706300 -0.429400 0.562800
vn -0.673600 -0.449700 0.586600
vn -0.654900 -0.426900 0.623600
vn -0.621800 -0.445300 0.644300
vn -0.600300 -0.421800 0.679400
vn -0.567600 -0.438400 0.696900
vn -0.543900 -0.414600 0.729600
vn -0.512200 -0.429100 0.744000
vn -0.486700 -0.405600 0.773700
vn -0.456800 -0.418100 0.785200
vn -0.430000 -0.395100 0.811800
vn -0.402100 -0.405700 0.820800
vn -0.374600 -0.383400 0.844200
vn -0.349100 -0.392300 0.851000
vn -0.901100 -0.429700 0.057300
vn -0.887400 -0.452000 0.090700
vn -0.888800 -0.443100 0.117100
vn -0.871800 -0.466100 0.150700
vn -0.871900 -0.455400 0.180100
vn -0.851600 -0.478900 0.213400
vn -0.849900 -0.466300 0.245600
vn -0.826200 -0.489900 0.278100
vn -0.822300 -0.475300 0.312900
vn -0.795600 -0.498700 0.344000
vn -0.789100 -0.482100 0.380800
vn -0.759700 -0.504800 0.409900
vn -0.750300 -0.486300 0.447900
vn -0.718800 -0.507900 0.474600
vn -0.706300 -0.487700 0.513200
vn -0.673500 -0.507900 0.537000
vn -0.657900 -0.486300 0.575100
vn -0.624600 -0.504800 0.595900
vn -0.606000 -0.482100 0.632800
vn -0.573000 -0.498700 0.650400
vn -0.551700 -0.475300 0.685400
vn -0.519800 -0.489900 0.699800
vn -0.496200 -0.466300 0.732300
vn -0.466100 -0.478900 0.743900
vn -0.440700 -0.455400 0.773600
vn -0.412700 -0.466100 0.782600
vn -0.386000 -0.443100 0.809100
vn -0.360500 -0.452000 0.815900
vn -0.333000 -0.429800 0.839300
vn -0.310100 -0.437100 0.844300
vn 0.281100 0.415000 0.865300
vn 0.253500 0.370300 0.893700
vn 0.223100 0.321200 0.920300
vn 0.190100 0.268000 0.944500
vn 0.154600 0.210800 0.965200
vn 0.117000 0.150300 0.981700
vn 0.077800 0.087000 0.993200
vn 0.037500 0.022100 0.999100
vn -0.003000 -0.043500 0.999100
vn -0.043100 -0.108500 0.993200
vn -0.082100 -0.171800 0.981700
vn -0.119500 -0.232600 0.965200
vn -0.154700 -0.289900 0.944500
vn -0.187500 -0.343200 0.920300
vn -0.217800 -0.392300 0.893700
vn 0.284200 0.392500 0.874700
vn 0.320200 0.370300 0.872000
vn 0.256600 0.344200 0.903100
vn 0.292600 0.322000 0.900400
vn 0.323300 0.344200 0.881500
vn 0.360400 0.321200 0.875700
vn 0.226100 0.291500 0.929500
vn 0.262000 0.269300 0.926700
vn 0.295500 0.292300 0.909500
vn 0.332800 0.269300 0.903700
vn 0.363400 0.291500 0.884900
vn 0.401400 0.268000 0.875800
vn 0.192800 0.234500 0.952800
vn 0.228500 0.212400 0.950100
vn 0.264700 0.236000 0.935000
vn 0.301900 0.212900 0.929300
vn 0.335500 0.235900 0.912000
vn 0.373600 0.212400 0.903000
vn 0.404100 0.234500 0.884200
vn 0.442300 0.210800 0.871700
vn 0.156900 0.173700 0.972200
vn 0.192400 0.151700 0.969500
vn 0.230800 0.175400 0.957100
vn 0.268000 0.152400 0.951300
vn 0.304200 0.176000 0.936200
vn 0.342400 0.152400 0.927100
vn 0.375900 0.175400 0.909900
vn 0.414200 0.151700 0.897400
vn 0.444600 0.173700 0.878800
vn 0.482400 0.150300 0.863000
vn 0.118700 0.109800 0.986800
vn 0.154000 0.088000 0.984200
vn 0.194000 0.111400 0.974600
vn 0.231100 0.088500 0.968900
vn 0.269600 0.112300 0.956400
vn 0.307800 0.088700 0.947300
vn 0.344000 0.112300 0.932200
vn 0.382500 0.088500 0.919700
vn 0.415900 0.111400 0.902600
vn 0.453900 0.088000 0.886700
vn 0.484100 0.109800 0.868100
vn 0.520900 0.087000 0.849200
vn 0.078700 0.043800 0.995900
vn 0.113800 0.022000 0.993300
vn 0.154900 0.044900 0.986900
vn 0.191900 0.022000 0.981200
vn 0.232000 0.045500 0.971600
vn 0.270200 0.022000 0.962600
vn 0.308700 0.045800 0.950100
vn 0.347200 0.022000 0.937500
vn 0.383400 0.045500 0.922500
vn 0.421500 0.022000 0.906600
vn 0.454800 0.044900 0.889500
vn 0.491700 0.022000 0.870500
vn 0.521800 0.043800 0.852000
vn 0.556900 0.022100 0.830300
vn 0.037500 -0.023200 0.999000
vn 0.072700 -0.044900 0.996300
vn 0.113800 -0.023200 0.993200
vn 0.150800 -0.046000 0.987500
vn 0.191900 -0.023200 0.981100
vn 0.230000 -0.046700 0.972100
vn 0.270200 -0.023200 0.962500
vn 0.308700 -0.047000 0.950000
vn 0.347200 -0.023200 0.937500
vn 0.385300 -0.046700 0.921600
vn 0.421500 -0.023200 0.906500
vn 0.458500 -0.046000 0.887500
vn 0.491700 -0.023200 0.870400
vn 0.526800 -0.044900 0.848800
vn 0.556800 -0.023200 0.830300
vn 0.589600 -0.043500 0.806500
vn -0.004000 -0.089900 0.995900
vn 0.031200 -0.111700 0.993300
vn 0.071700 -0.091400 0.993200
vn 0.108600 -0.114300 0.987500
vn 0.149800 -0.092600 0.984400
vn 0.187900 -0.116100 0.975300
vn 0.229000 -0.093200 0.969000
vn 0.267500 -0.117000 0.956400
vn 0.307700 -0.093500 0.946900
vn 0.345800 -0.117000 0.931000
vn 0.384300 -0.093200 0.918500
vn 0.421300 -0.116100 0.899500
vn 0.457400 -0.092600 0.884400
vn 0.492600 -0.114300 0.862700
vn 0.525800 -0.091400 0.845700
vn 0.558600 -0.111700 0.821900
vn 0.588600 -0.089900 0.803400
vn 0.618600 -0.108500 0.778200
vn -0.045100 -0.155200 0.986800
vn -0.009800 -0.177000 0.984200
vn 0.029100 -0.158600 0.986900
vn 0.066100 -0.181400 0.981200
vn 0.106500 -0.161200 0.981100
vn 0.144600 -0.184800 0.972100
vn 0.185800 -0.163100 0.969000
vn 0.224300 -0.186900 0.956400
vn 0.265400 -0.164000 0.950100
vn 0.303500 -0.187600 0.934200
vn 0.343700 -0.164000 0.924600
vn 0.380700 -0.186900 0.905600
vn 0.419200 -0.163100 0.893100
vn 0.454400 -0.184800 0.871400
vn 0.490500 -0.161200 0.856400
vn 0.523200 -0.181400 0.832700
vn 0.556500 -0.158600 0.815600
vn 0.586400 -0.177000 0.790400
vn 0.616600 -0.155200 0.771900
vn 0.643400 -0.171800 0.746000
vn -0.085200 -0.218000 0.972200
vn -0.049700 -0.239900 0.969500
vn -0.012900 -0.223400 0.974600
vn 0.024200 -0.246300 0.968900
vn 0.063000 -0.227900 0.971600
vn 0.101200 -0.251500 0.962600
vn 0.141500 -0.231300 0.962500
vn 0.180100 -0.255100 0.950000
vn 0.221200 -0.233400 0.946900
vn 0.259300 -0.257000 0.931000
vn 0.300400 -0.234100 0.924600
vn 0.337400 -0.257000 0.905600
vn 0.377600 -0.233400 0.896100
vn 0.412700 -0.255100 0.874400
vn 0.451300 -0.231300 0.861900
vn 0.483900 -0.251500 0.838200
vn 0.520100 -0.227900 0.823100
vn 0.549900 -0.246300 0.798100
vn 0.583300 -0.223400 0.780900
vn 0.610100 -0.239900 0.755200
vn 0.640400 -0.218000 0.736500
vn 0.664000 -0.232600 0.710700
vn -0.123500 -0.277300 0.952800
vn -0.087800 -0.299400 0.950100
vn -0.053700 -0.284900 0.957100
vn -0.016500 -0.307900 0.951300
vn 0.020100 -0.291400 0.956400
vn 0.058300 -0.315000 0.947300
vn 0.097100 -0.296600 0.950100
vn 0.135600 -0.320400 0.937500
vn 0.176000 -0.300200 0.937500
vn 0.214100 -0.323800 0.921600
vn 0.255300 -0.302000 0.918500
vn 0.292300 -0.324900 0.899500
vn 0.333300 -0.302000 0.893100
vn 0.368500 -0.323800 0.871400
vn 0.408700 -0.300200 0.861900
vn 0.441300 -0.320400 0.838200
vn 0.479900 -0.296600 0.825700
vn 0.509600 -0.315000 0.800700
vn 0.545900 -0.291400 0.785600
vn 0.572500 -0.307900 0.759900
vn 0.606000 -0.284900 0.742700
vn 0.629500 -0.299400 0.717000
vn 0.660000 -0.277300 0.698300
vn 0.680300 -0.289900 0.673200
vn -0.159600 -0.332600 0.929500
vn -0.123700 -0.354700 0.926700
vn -0.092700 -0.342200 0.935000
vn -0.055400 -0.365300 0.929300
vn -0.021400 -0.350800 0.936200
vn 0.016800 -0.374400 0.927100
vn 0.053400 -0.357900 0.932200
vn 0.091900 -0.381700 0.919700
vn 0.130700 -0.363300 0.922500
vn 0.168800 -0.386800 0.906600
vn 0.209200 -0.366600 0.906500
vn 0.246200 -0.389500 0.887500
vn 0.287400 -0.367800 0.884400
vn 0.322500 -0.389500 0.862700
vn 0.363600 -0.366600 0.856400
vn 0.396300 -0.386800 0.832700
vn 0.436400 -0.363300 0.823100
vn 0.466200 -0.381700 0.798100
vn 0.504700 -0.357900 0.785600
vn 0.531400 -0.374400 0.759900
vn 0.567600 -0.350800 0.744800
vn 0.591000 -0.365300 0.719200
vn 0.624600 -0.342200 0.702000
vn 0.644800 -0.354700 0.677000
vn 0.675400 -0.332600 0.658200
vn 0.692700 -0.343200 0.634300
vn -0.193100 -0.383400 0.903100
vn -0.157100 -0.405700 0.900400
vn -0.129300 -0.395100 0.909500
vn -0.092000 -0.418100 0.903700
vn -0.061000 -0.405600 0.912000
vn -0.022900 -0.429100 0.902900
vn 0.011200 -0.414600 0.909900
vn 0.049600 -0.438400 0.897400
vn 0.086300 -0.421800 0.902600
vn 0.124300 -0.445300 0.886700
vn 0.163300 -0.426900 0.889500
vn 0.200200 -0.449700 0.870500
vn 0.240700 -0.429400 0.870400
vn 0.275800 -0.451100 0.848800
vn 0.317000 -0.429400 0.845700
vn 0.349700 -0.449700 0.821900
vn 0.390700 -0.426900 0.815600
vn 0.420600 -0.445300 0.790400
vn 0.460700 -0.421800 0.780900
vn 0.487400 -0.438400 0.755200
vn 0.525800 -0.414600 0.742700
vn 0.549300 -0.429100 0.717000
vn 0.585400 -0.405600 0.702000
vn 0.605700 -0.418100 0.677000
vn 0.639200 -0.395100 0.659800
vn 0.656400 -0.405700 0.636100
vn 0.687100 -0.383400 0.617100
vn 0.701500 -0.392300 0.595000
vn -0.224000 -0.429800 0.874700
vn -0.188000 -0.452000 0.872000
vn -0.163300 -0.443100 0.881500
vn -0.126100 -0.466100 0.875700
vn -0.098200 -0.455400 0.884900
vn -0.060200 -0.478900 0.875800
vn -0.029000 -0.466300 0.884200
vn 0.009200 -0.489900 0.871700
vn 0.043500 -0.475300 0.878800
vn 0.081300 -0.498700 0.863000
vn 0.118300 -0.482100 0.868100
vn 0.155100 -0.504800 0.849200
vn 0.194200 -0.486300 0.852000
vn 0.229300 -0.507900 0.830300
vn 0.269800 -0.487700 0.830300
vn 0.302600 -0.508000 0.806500
vn 0.343700 -0.486300 0.803400
vn 0.373700 -0.504800 0.778200
vn 0.414600 -0.482100 0.771800
vn 0.441500 -0.498700 0.746000
vn 0.481300 -0.475300 0.736500
vn 0.504900 -0.489900 0.710700
vn 0.543200 -0.466300 0.698300
vn 0.563500 -0.478900 0.673200
vn 0.599500 -0.455400 0.658200
vn 0.616800 -0.466100 0.634300
vn 0.650200 -0.443100 0.617100
vn 0.664600 -0.452000 0.595000
vn 0.695300 -0.429700 0.576000
vn 0.707200 -0.437100 0.555800
vn 0.909800 0.415000 -0.000000
vn 0.928300 0.370300 0.035100
vn 0.944200 0.321200 0.072200
vn 0.957000 0.268000 0.111100
vn 0.965700 0.210800 0.151200
vn 0.969800 0.150300 0.192100
vn 0.968600 0.087000 0.232900
vn 0.961800 0.022100 0.273000
vn 0.949200 -0.043500 0.311500
vn 0.931200 -0.108500 0.347900
vn 0.908300 -0.171800 0.381400
vn 0.881100 -0.232600 0.411900
vn 0.850500 -0.289900 0.439000
vn 0.817300 -0.343200 0.462800
vn 0.782600 -0.392300 0.483300
vn 0.919800 0.392500 -0.000000
vn 0.928300 0.370300 -0.035100
vn 0.938200 0.344200 0.035100
vn 0.946700 0.322000 0.000000
vn 0.938200 0.344200 -0.035100
vn 0.944200 0.321200 -0.072200
vn 0.953900 0.291500 0.072200
vn 0.962300 0.269300 0.037200
vn 0.956300 0.292300 0.000000
vn 0.962300 0.269300 -0.037200
vn 0.953900 0.291500 -0.072200
vn 0.957000 0.268000 -0.111100
vn 0.965800 0.234500 0.111100
vn 0.974200 0.212400 0.076300
vn 0.971100 0.235900 0.037200
vn 0.977100 0.212900 -0.000000
vn 0.971100 0.235900 -0.037200
vn 0.974200 0.212400 -0.076300
vn 0.965800 0.234500 -0.111100
vn 0.965700 0.210800 -0.151200
vn 0.973100 0.173700 0.151200
vn 0.981500 0.151700 0.116600
vn 0.981500 0.175400 0.076300
vn 0.987500 0.152400 0.039100
vn 0.984400 0.176000 0.000000
vn 0.987500 0.152400 -0.039100
vn 0.981500 0.175400 -0.076300
vn 0.981500 0.151700 -0.116600
vn 0.973100 0.173700 -0.151200
vn 0.969800 0.150300 -0.192100
vn 0.975200 0.109800 0.192100
vn 0.983600 0.088000 0.157700
vn 0.986900 0.111400 0.116600
vn 0.992900 0.088500 0.079600
vn 0.992900 0.112300 0.039100
vn 0.996100 0.088700 0.000000
vn 0.992900 0.112300 -0.039100
vn 0.992900 0.088500 -0.079600
vn 0.986900 0.111400 -0.116600
vn 0.983600 0.088000 -0.157700
vn 0.975200 0.109800 -0.192100
vn 0.968600 0.087000 -0.232900
vn 0.971500 0.043800 0.232900
vn 0.979800 0.022000 0.198700
vn 0.986500 0.044900 0.157700
vn 0.992400 0.022000 0.120700
vn 0.995800 0.045500 0.079600
vn 0.998900 0.022000 0.040500
vn 0.999000 0.045800 0.000000
vn 0.998900 0.022000 -0.040500
vn 0.995800 0.045500 -0.079600
vn 0.992400 0.022000 -0.120700
vn 0.986500 0.044800 -0.157700
vn 0.979800 0.022000 -0.198700
vn 0.971500 0.043800 -0.232900
vn 0.961800 0.022100 -0.273000
vn 0.961700 -0.023200 0.273000
vn 0.970000 -0.044900 0.238800
vn 0.979800 -0.023200 0.198700
vn 0.985800 -0.046000 0.161800
vn 0.992400 -0.023200 0.120700
vn 0.995600 -0.046700 0.081700
vn 0.998900 -0.023200 0.040500
vn 0.998900 -0.047000 0.000000
vn 0.998900 -0.023200 -0.040500
vn 0.995600 -0.046700 -0.081700
vn 0.992400 -0.023200 -0.120700
vn 0.985800 -0.046000 -0.161800
vn 0.979800 -0.023200 -0.198700
vn 0.970000 -0.044900 -0.238800
vn 0.961700 -0.023200 -0.273000
vn 0.949200 -0.043500 -0.311500
vn 0.946000 -0.089900 0.311500
vn 0.954300 -0.111700 0.277300
vn 0.966800 -0.091400 0.238800
vn 0.972700 -0.114300 0.201900
vn 0.982500 -0.092600 0.161800
vn 0.985600 -0.116100 0.122700
vn 0.992300 -0.093200 0.081700
vn 0.992300 -0.117000 0.041200
vn 0.995600 -0.093500 0.000000
vn 0.992300 -0.117000 -0.041200
vn 0.992300 -0.093200 -0.081700
vn 0.985600 -0.116100 -0.122700
vn 0.982500 -0.092600 -0.161800
vn 0.972700 -0.114300 -0.201900
vn 0.966800 -0.091400 -0.238800
vn 0.954300 -0.111700 -0.277300
vn 0.946000 -0.089900 -0.311500
vn 0.931200 -0.108500 -0.347900
vn 0.924600 -0.155200 0.347900
vn 0.933000 -0.177000 0.313400
vn 0.947600 -0.158600 0.277300
vn 0.953600 -0.181400 0.240300
vn 0.966100 -0.161200 0.201900
vn 0.969200 -0.184800 0.162800
vn 0.978900 -0.163100 0.122700
vn 0.978900 -0.186900 0.082200
vn 0.985600 -0.164000 0.041200
vn 0.982200 -0.187600 0.000000
vn 0.985600 -0.164000 -0.041200
vn 0.978900 -0.186900 -0.082200
vn 0.979000 -0.163100 -0.122700
vn 0.969200 -0.184800 -0.162800
vn 0.966100 -0.161200 -0.201900
vn 0.953600 -0.181400 -0.240300
vn 0.947600 -0.158600 -0.277300
vn 0.933000 -0.177000 -0.313400
vn 0.924600 -0.155200 -0.347900
vn 0.908300 -0.171800 -0.381400
vn 0.898300 -0.218000 0.381400
vn 0.906700 -0.239900 0.346800
vn 0.923000 -0.223400 0.313400
vn 0.928900 -0.246300 0.276400
vn 0.943600 -0.227900 0.240300
vn 0.946700 -0.251500 0.201200
vn 0.959200 -0.231300 0.162800
vn 0.959200 -0.255100 0.122300
vn 0.968900 -0.233400 0.082200
vn 0.965600 -0.256900 0.041000
vn 0.972200 -0.234100 0.000000
vn 0.965600 -0.256900 -0.041000
vn 0.968900 -0.233400 -0.082200
vn 0.959200 -0.255100 -0.122300
vn 0.959200 -0.231300 -0.162800
vn 0.946700 -0.251500 -0.201200
vn 0.943600 -0.227900 -0.240300
vn 0.928900 -0.246300 -0.276400
vn 0.923000 -0.223400 -0.313400
vn 0.906700 -0.239900 -0.346800
vn 0.898300 -0.218000 -0.381400
vn 0.881100 -0.232600 -0.411900
vn 0.868000 -0.277300 0.411900
vn 0.876500 -0.299400 0.377100
vn 0.893600 -0.284900 0.346800
vn 0.899600 -0.307800 0.309700
vn 0.915800 -0.291400 0.276400
vn 0.919000 -0.315000 0.237300
vn 0.933600 -0.296600 0.201200
vn 0.933600 -0.320400 0.160700
vn 0.946000 -0.300200 0.122300
vn 0.942700 -0.323800 0.081100
vn 0.952400 -0.302000 0.041000
vn 0.945700 -0.324900 0.000000
vn 0.952400 -0.302000 -0.041000
vn 0.942700 -0.323700 -0.081100
vn 0.946000 -0.300200 -0.122300
vn 0.933600 -0.320400 -0.160700
vn 0.933600 -0.296600 -0.201200
vn 0.919000 -0.315000 -0.237300
vn 0.915800 -0.291400 -0.276400
vn 0.899600 -0.307800 -0.309700
vn 0.893600 -0.284900 -0.346800
vn 0.876500 -0.299400 -0.377100
vn 0.868000 -0.277300 -0.411900
vn 0.850500 -0.289900 -0.439000
vn 0.834700 -0.332600 0.439000
vn 0.843200 -0.354700 0.404000
vn 0.860600 -0.342200 0.377100
vn 0.866700 -0.365300 0.339800
vn 0.883800 -0.350800 0.309700
vn 0.886900 -0.374400 0.270500
vn 0.903100 -0.357900 0.237300
vn 0.903100 -0.381700 0.196800
vn 0.917700 -0.363300 0.160700
vn 0.914400 -0.386800 0.119600
vn 0.926800 -0.366600 0.081100
vn 0.920200 -0.389500 0.040100
vn 0.929900 -0.367800 0.000000
vn 0.920200 -0.389500 -0.040100
vn 0.926800 -0.366600 -0.081100
vn 0.914400 -0.386800 -0.119600
vn 0.917700 -0.363300 -0.160700
vn 0.903100 -0.381700 -0.196800
vn 0.903100 -0.357900 -0.237300
vn 0.886900 -0.374400 -0.270500
vn 0.883800 -0.350800 -0.309700
vn 0.866700 -0.365300 -0.339800
vn 0.860600 -0.342200 -0.377100
vn 0.843200 -0.354700 -0.404000
vn 0.834700 -0.332600 -0.439000
vn 0.817300 -0.343200 -0.462700
vn 0.799300 -0.383400 0.462800
vn 0.807800 -0.405700 0.427700
vn 0.825000 -0.395100 0.404000
vn 0.831100 -0.418100 0.366800
vn 0.848500 -0.405600 0.339800
vn 0.851700 -0.429100 0.300800
vn 0.868800 -0.414600 0.270600
vn 0.868800 -0.438400 0.230200
vn 0.885100 -0.421800 0.196800
vn 0.881700 -0.445300 0.155800
vn 0.896400 -0.426900 0.119600
vn 0.889700 -0.449700 0.078600
vn 0.902200 -0.429400 0.040100
vn 0.892500 -0.451100 -0.000000
vn 0.902200 -0.429400 -0.040100
vn 0.889700 -0.449700 -0.078600
vn 0.896400 -0.426800 -0.119600
vn 0.881700 -0.445300 -0.155800
vn 0.885100 -0.421800 -0.196800
vn 0.868800 -0.438400 -0.230200
vn 0.868800 -0.414600 -0.270600
vn 0.851700 -0.429100 -0.300800
vn 0.848500 -0.405600 -0.339800
vn 0.831100 -0.418100 -0.366800
vn 0.825000 -0.395100 -0.404000
vn 0.807800 -0.405700 -0.427700
vn 0.799300 -0.383400 -0.462800
vn 0.782600 -0.392300 -0.483300
vn 0.762700 -0.429800 0.483300
vn 0.771200 -0.452000 0.448200
vn 0.787900 -0.443100 0.427700
vn 0.793900 -0.466100 0.390600
vn 0.811200 -0.455400 0.366800
vn 0.814400 -0.478900 0.327900
vn 0.831900 -0.466300 0.300800
vn 0.831900 -0.489900 0.260600
vn 0.849200 -0.475300 0.230200
vn 0.845900 -0.498700 0.189300
vn 0.862200 -0.482100 0.155800
vn 0.855600 -0.504800 0.114900
vn 0.870300 -0.486300 0.078600
vn 0.860500 -0.507900 0.038500
vn 0.873000 -0.487700 -0.000000
vn 0.860500 -0.507900 -0.038500
vn 0.870300 -0.486300 -0.078600
vn 0.855600 -0.504800 -0.114900
vn 0.862200 -0.482100 -0.155800
vn 0.845900 -0.498700 -0.189300
vn 0.849200 -0.475300 -0.230200
vn 0.831900 -0.489900 -0.260600
vn 0.831900 -0.466300 -0.300800
vn 0.814400 -0.478900 -0.327900
vn 0.811200 -0.455400 -0.366800
vn 0.793900 -0.466100 -0.390600
vn 0.787900 -0.443100 -0.427700
vn 0.771200 -0.452000 -0.448200
vn 0.762700 -0.429800 -0.483300
vn 0.747100 -0.437100 -0.500800
vn 0.700300 -0.472800 -0.534800
vn 0.676200 -0.524600 -0.517300
vn 0.647900 -0.577600 -0.496600
vn 0.615100 -0.631000 -0.472600
vn 0.577800 -0.684100 -0.445300
vn 0.535800 -0.735600 -0.414600
vn 0.489500 -0.784400 -0.380900
vn 0.439500 -0.829600 -0.344400
vn 0.386500 -0.870100 -0.305900
vn 0.331300 -0.905300 -0.265900
vn 0.275200 -0.934600 -0.225300
vn 0.219000 -0.958100 -0.184700
vn 0.163800 -0.975800 -0.144700
vn 0.110400 -0.988200 -0.106000
vn 0.059300 -0.995900 -0.069000
vn 0.683800 -0.490000 -0.540600
vn 0.657800 -0.487700 -0.574000
vn 0.656600 -0.543400 -0.523100
vn 0.630500 -0.541100 -0.556500
vn 0.638100 -0.506500 -0.579800
vn 0.610000 -0.501700 -0.613400
vn 0.624800 -0.597800 -0.502200
vn 0.598800 -0.595500 -0.535500
vn 0.607500 -0.561300 -0.562100
vn 0.579200 -0.556400 -0.595800
vn 0.586800 -0.521900 -0.619100
vn 0.556800 -0.514200 -0.652400
vn 0.588300 -0.652400 -0.477800
vn 0.562500 -0.650100 -0.510900
vn 0.572200 -0.616700 -0.540600
vn 0.543900 -0.611800 -0.574300
vn 0.552600 -0.577600 -0.600900
vn 0.522400 -0.569900 -0.634300
vn 0.529900 -0.535600 -0.657500
vn 0.498200 -0.525000 -0.690000
vn 0.547200 -0.706000 -0.449600
vn 0.521500 -0.703700 -0.482500
vn 0.532100 -0.671900 -0.515200
vn 0.503900 -0.667000 -0.548800
vn 0.513600 -0.633600 -0.578600
vn 0.483400 -0.625900 -0.612100
vn 0.492000 -0.591700 -0.638600
vn 0.460200 -0.581100 -0.671300
vn 0.467600 -0.547000 -0.694300
vn 0.434800 -0.533600 -0.725400
vn 0.501500 -0.757600 -0.417800
vn 0.476000 -0.755300 -0.450500
vn 0.487400 -0.725600 -0.485700
vn 0.459300 -0.720700 -0.519200
vn 0.470000 -0.688800 -0.552000
vn 0.439700 -0.681100 -0.585500
vn 0.449400 -0.647700 -0.615300
vn 0.417500 -0.637000 -0.648000
vn 0.426100 -0.603000 -0.674400
vn 0.393100 -0.589500 -0.705700
vn 0.400500 -0.555600 -0.728600
vn 0.367100 -0.539500 -0.757800
vn 0.451900 -0.805900 -0.382600
vn 0.426400 -0.803600 -0.415200
vn 0.438500 -0.776700 -0.452300
vn 0.410500 -0.771800 -0.485700
vn 0.421900 -0.742000 -0.520900
vn 0.391700 -0.734300 -0.554400
vn 0.402400 -0.702400 -0.587200
vn 0.370400 -0.691700 -0.619900
vn 0.380100 -0.658400 -0.649700
vn 0.347000 -0.644800 -0.681000
vn 0.355600 -0.610900 -0.707400
vn 0.322000 -0.594700 -0.736600
vn 0.329400 -0.560900 -0.759500
vn 0.296000 -0.542500 -0.786200
vn 0.399000 -0.849800 -0.344400
vn 0.373600 -0.847500 -0.377000
vn 0.386000 -0.823800 -0.415200
vn 0.358000 -0.818900 -0.448500
vn 0.370100 -0.792000 -0.485700
vn 0.339900 -0.784200 -0.519100
vn 0.351300 -0.754500 -0.554400
vn 0.319400 -0.743800 -0.587100
vn 0.330000 -0.711900 -0.619900
vn 0.296900 -0.698400 -0.651300
vn 0.306600 -0.665000 -0.681000
vn 0.273000 -0.648800 -0.710300
vn 0.281500 -0.614900 -0.736600
vn 0.248000 -0.596500 -0.763300
vn 0.255400 -0.562800 -0.786200
vn 0.222700 -0.542500 -0.810000
vn 0.343700 -0.888500 -0.304000
vn 0.318300 -0.886200 -0.336600
vn 0.330700 -0.866000 -0.375100
vn 0.302800 -0.861100 -0.408400
vn 0.315200 -0.837400 -0.446600
vn 0.285000 -0.829700 -0.480000
vn 0.297100 -0.802700 -0.517200
vn 0.265100 -0.792000 -0.549900
vn 0.276600 -0.762200 -0.585200
vn 0.243500 -0.748700 -0.616600
vn 0.254100 -0.716800 -0.649300
vn 0.220500 -0.700600 -0.678600
vn 0.230200 -0.667300 -0.708300
vn 0.196700 -0.648800 -0.735100
vn 0.205200 -0.614900 -0.761400
vn 0.172500 -0.594700 -0.785200
vn 0.179900 -0.560900 -0.808100
vn 0.148500 -0.539500 -0.828800
vn 0.287100 -0.921400 -0.262000
vn 0.261600 -0.919100 -0.294800
vn 0.273900 -0.902400 -0.332700
vn 0.245900 -0.897500 -0.366100
vn 0.258400 -0.877300 -0.404500
vn 0.228200 -0.869600 -0.437900
vn 0.240600 -0.845800 -0.476100
vn 0.208600 -0.835200 -0.508900
vn 0.220700 -0.808200 -0.546000
vn 0.187600 -0.794700 -0.577300
vn 0.199100 -0.764900 -0.612600
vn 0.165400 -0.748700 -0.641900
vn 0.176100 -0.716800 -0.674700
vn 0.142600 -0.698400 -0.701400
vn 0.152200 -0.665000 -0.731100
vn 0.119600 -0.644800 -0.754900
vn 0.128100 -0.610900 -0.781300
vn 0.096800 -0.589500 -0.802000
vn 0.104200 -0.555600 -0.824900
vn 0.074700 -0.533600 -0.842500
vn 0.230300 -0.948100 -0.219400
vn 0.204600 -0.945700 -0.252400
vn 0.216500 -0.932600 -0.288900
vn 0.188400 -0.927700 -0.322400
vn 0.200700 -0.911000 -0.360200
vn 0.170500 -0.903300 -0.393700
vn 0.183000 -0.883100 -0.432100
vn 0.151000 -0.872400 -0.464800
vn 0.163400 -0.848700 -0.503000
vn 0.130300 -0.835200 -0.534300
vn 0.142400 -0.808200 -0.571400
vn 0.108700 -0.792000 -0.600700
vn 0.120200 -0.762200 -0.636000
vn 0.086700 -0.743800 -0.662700
vn 0.097400 -0.711900 -0.695500
vn 0.064700 -0.691700 -0.719200
vn 0.074400 -0.658400 -0.749000
vn 0.043100 -0.637000 -0.769600
vn 0.051700 -0.603000 -0.796100
vn 0.022300 -0.581100 -0.813600
vn 0.029800 -0.547000 -0.836600
vn 0.002500 -0.525000 -0.851100
vn 0.174300 -0.968700 -0.177000
vn 0.148500 -0.966300 -0.210100
vn 0.159700 -0.956400 -0.244700
vn 0.131500 -0.951500 -0.278300
vn 0.143400 -0.938300 -0.314700
vn 0.113100 -0.930600 -0.348200
vn 0.125400 -0.914000 -0.385900
vn 0.093500 -0.903300 -0.418700
vn 0.105900 -0.883100 -0.457100
vn 0.072800 -0.869600 -0.488400
vn 0.085200 -0.845800 -0.526600
vn 0.051600 -0.829700 -0.555900
vn 0.063600 -0.802700 -0.593000
vn 0.030200 -0.784200 -0.619700
vn 0.041600 -0.754500 -0.655000
vn 0.009000 -0.734300 -0.678700
vn 0.019600 -0.702400 -0.711500
vn -0.011600 -0.681100 -0.732100
vn -0.001900 -0.647700 -0.761900
vn -0.031300 -0.625900 -0.779300
vn -0.022600 -0.591700 -0.805900
vn -0.049800 -0.569900 -0.820200
vn -0.042200 -0.535600 -0.843400
vn -0.067000 -0.514200 -0.855000
vn 0.119900 -0.983500 -0.135400
vn 0.094000 -0.981200 -0.168700
vn 0.104400 -0.974100 -0.200800
vn 0.076200 -0.969100 -0.234500
vn 0.087400 -0.959200 -0.268900
vn 0.057100 -0.951500 -0.302400
vn 0.069000 -0.938300 -0.338900
vn 0.037100 -0.927700 -0.371600
vn 0.049300 -0.911000 -0.409400
vn 0.016300 -0.897500 -0.440700
vn 0.028700 -0.877300 -0.479100
vn -0.004900 -0.861100 -0.508400
vn 0.007500 -0.837400 -0.546600
vn -0.026000 -0.818900 -0.573300
vn -0.013900 -0.792000 -0.610400
vn -0.046600 -0.771800 -0.634200
vn -0.035100 -0.742000 -0.669400
vn -0.066400 -0.720700 -0.690000
vn -0.055800 -0.688800 -0.722800
vn -0.085100 -0.667000 -0.740200
vn -0.075400 -0.633600 -0.770000
vn -0.102500 -0.611800 -0.784300
vn -0.093800 -0.577600 -0.810900
vn -0.118400 -0.556400 -0.822500
vn -0.110900 -0.521900 -0.845800
vn -0.132900 -0.501700 -0.854800
vn 0.067900 -0.993100 -0.095400
vn 0.041800 -0.990800 -0.128800
vn 0.051400 -0.986100 -0.158100
vn 0.023200 -0.981200 -0.191800
vn 0.033600 -0.974100 -0.223800
vn 0.003400 -0.966300 -0.257300
vn 0.014600 -0.956400 -0.291800
vn -0.017200 -0.945700 -0.324500
vn -0.005300 -0.932600 -0.361000
vn -0.038400 -0.919100 -0.392200
vn -0.026000 -0.902400 -0.430100
vn -0.059600 -0.886200 -0.459400
vn -0.047100 -0.866000 -0.497900
vn -0.080600 -0.847500 -0.524600
vn -0.068200 -0.823800 -0.562800
vn -0.100900 -0.803600 -0.586600
vn -0.088900 -0.776700 -0.623600
vn -0.120200 -0.755300 -0.644300
vn -0.108800 -0.725600 -0.679400
vn -0.138200 -0.703700 -0.696900
vn -0.127600 -0.671900 -0.729600
vn -0.154700 -0.650100 -0.744000
vn -0.145100 -0.616700 -0.773700
vn -0.169700 -0.595500 -0.785200
vn -0.161000 -0.561300 -0.811800
vn -0.183000 -0.541100 -0.820800
vn -0.175400 -0.506500 -0.844200
vn -0.194800 -0.487700 -0.851000
vn 0.018600 -0.998200 -0.057300
vn -0.007400 -0.995900 -0.090700
vn 0.001200 -0.993100 -0.117100
vn -0.027000 -0.988200 -0.150700
vn -0.017400 -0.983500 -0.180100
vn -0.047500 -0.975800 -0.213400
vn -0.037000 -0.968700 -0.245600
vn -0.068700 -0.958100 -0.278100
vn -0.057400 -0.948100 -0.312900
vn -0.090200 -0.934600 -0.344000
vn -0.078300 -0.921400 -0.380800
vn -0.111700 -0.905300 -0.409900
vn -0.099400 -0.888500 -0.447900
vn -0.132800 -0.870100 -0.474600
vn -0.120300 -0.849800 -0.513200
vn -0.153100 -0.829600 -0.537000
vn -0.140700 -0.805900 -0.575100
vn -0.172200 -0.784400 -0.595900
vn -0.160200 -0.757600 -0.632800
vn -0.189700 -0.735600 -0.650400
vn -0.178400 -0.706000 -0.685400
vn -0.205700 -0.684100 -0.699800
vn -0.195100 -0.652400 -0.732300
vn -0.219900 -0.631000 -0.743900
vn -0.210200 -0.597800 -0.773600
vn -0.232300 -0.577600 -0.782600
vn -0.223700 -0.543400 -0.809100
vn -0.243000 -0.524600 -0.815900
vn -0.235500 -0.490000 -0.839300
vn -0.252200 -0.472800 -0.844300
vn -0.292200 -0.472800 -0.831300
vn -0.283000 -0.524600 -0.803000
vn -0.272100 -0.577600 -0.769700
vn -0.259400 -0.631000 -0.731100
vn -0.245000 -0.684100 -0.687100
vn -0.228800 -0.735600 -0.637700
vn -0.210900 -0.784400 -0.583300
vn -0.191800 -0.829600 -0.524400
vn -0.171500 -0.870100 -0.462100
vn -0.150500 -0.905300 -0.397300
vn -0.129200 -0.934600 -0.331300
vn -0.107900 -0.958100 -0.265400
vn -0.087000 -0.975800 -0.200500
vn -0.066700 -0.988200 -0.137700
vn -0.047300 -0.995900 -0.077700
vn -0.302800 -0.490000 -0.817400
vn -0.342600 -0.487700 -0.803000
vn -0.294600 -0.543400 -0.786100
vn -0.334400 -0.541100 -0.771600
vn -0.354300 -0.506500 -0.786100
vn -0.394900 -0.501700 -0.769700
vn -0.284600 -0.597800 -0.749400
vn -0.324300 -0.595500 -0.735000
vn -0.346900 -0.561300 -0.751400
vn -0.387600 -0.556400 -0.735000
vn -0.407400 -0.521900 -0.749400
vn -0.448400 -0.514200 -0.731100
vn -0.272600 -0.652400 -0.707200
vn -0.312100 -0.650100 -0.692800
vn -0.337400 -0.616700 -0.711200
vn -0.378100 -0.611800 -0.694800
vn -0.400700 -0.577600 -0.711200
vn -0.441900 -0.569900 -0.692800
vn -0.461600 -0.535600 -0.707200
vn -0.502300 -0.525000 -0.687100
vn -0.258500 -0.706000 -0.659300
vn -0.297800 -0.703700 -0.645100
vn -0.325600 -0.671900 -0.665300
vn -0.366200 -0.667000 -0.648900
vn -0.391600 -0.633600 -0.667300
vn -0.432800 -0.625900 -0.648900
vn -0.455300 -0.591700 -0.665300
vn -0.496200 -0.581100 -0.645100
vn -0.515800 -0.547000 -0.659300
vn -0.555600 -0.533600 -0.637700
vn -0.242400 -0.757600 -0.606100
vn -0.281400 -0.755300 -0.591900
vn -0.311300 -0.725600 -0.613600
vn -0.351900 -0.720700 -0.597300
vn -0.379700 -0.688800 -0.617500
vn -0.420900 -0.681100 -0.599100
vn -0.446300 -0.647700 -0.617500
vn -0.487300 -0.637000 -0.597300
vn -0.509800 -0.603000 -0.613600
vn -0.549700 -0.589500 -0.591900
vn -0.569200 -0.555600 -0.606100
vn -0.607300 -0.539500 -0.583300
vn -0.224200 -0.805900 -0.548000
vn -0.263100 -0.803600 -0.533900
vn -0.294600 -0.776700 -0.556800
vn -0.335100 -0.771800 -0.540500
vn -0.365000 -0.742000 -0.562200
vn -0.406200 -0.734300 -0.543800
vn -0.434100 -0.702400 -0.564100
vn -0.475100 -0.691700 -0.543800
vn -0.500400 -0.658400 -0.562200
vn -0.540500 -0.644800 -0.540500
vn -0.562900 -0.610900 -0.556800
vn -0.601100 -0.594700 -0.533900
vn -0.620500 -0.560900 -0.548000
vn -0.656200 -0.542500 -0.524400
vn -0.204300 -0.849800 -0.485900
vn -0.243100 -0.847500 -0.471800
vn -0.275600 -0.823800 -0.495400
vn -0.316000 -0.818900 -0.479100
vn -0.347500 -0.792000 -0.502000
vn -0.388700 -0.784200 -0.483600
vn -0.418700 -0.754500 -0.505400
vn -0.459700 -0.743800 -0.485200
vn -0.487600 -0.711900 -0.505400
vn -0.527600 -0.698400 -0.483600
vn -0.552900 -0.665000 -0.502000
vn -0.591200 -0.648800 -0.479100
vn -0.613600 -0.614900 -0.495400
vn -0.649300 -0.596500 -0.471800
vn -0.668700 -0.562800 -0.485900
vn -0.701500 -0.542500 -0.462100
vn -0.182900 -0.888500 -0.420800
vn -0.221800 -0.886200 -0.406700
vn -0.254500 -0.866000 -0.430500
vn -0.294900 -0.861100 -0.414200
vn -0.327400 -0.837400 -0.437800
vn -0.368500 -0.829700 -0.419400
vn -0.400100 -0.802700 -0.442400
vn -0.441100 -0.792000 -0.422100
vn -0.471100 -0.762200 -0.443900
vn -0.511100 -0.748700 -0.422100
vn -0.539000 -0.716800 -0.442400
vn -0.577300 -0.700600 -0.419400
vn -0.602600 -0.667300 -0.437800
vn -0.638300 -0.648800 -0.414200
vn -0.660700 -0.614900 -0.430500
vn -0.693500 -0.594700 -0.406700
vn -0.712900 -0.560900 -0.420800
vn -0.742400 -0.539500 -0.397300
vn -0.160500 -0.921400 -0.354000
vn -0.199500 -0.919100 -0.339900
vn -0.231800 -0.902400 -0.363300
vn -0.272200 -0.897500 -0.347000
vn -0.304900 -0.877300 -0.370700
vn -0.346000 -0.869600 -0.352300
vn -0.378500 -0.845800 -0.375900
vn -0.419500 -0.835200 -0.355700
vn -0.451100 -0.808200 -0.378600
vn -0.491100 -0.794700 -0.356800
vn -0.521100 -0.764900 -0.378600
vn -0.559400 -0.748700 -0.355700
vn -0.587300 -0.716800 -0.375900
vn -0.623000 -0.698400 -0.352300
vn -0.648300 -0.665000 -0.370700
vn -0.681000 -0.644800 -0.347000
vn -0.703500 -0.610900 -0.363300
vn -0.732800 -0.589500 -0.339900
vn -0.752300 -0.555600 -0.354000
vn -0.778200 -0.533600 -0.331300
vn -0.137500 -0.948100 -0.286900
vn -0.176800 -0.945700 -0.272600
vn -0.207900 -0.932600 -0.295200
vn -0.248400 -0.927700 -0.278800
vn -0.280600 -0.911000 -0.302200
vn -0.321700 -0.903300 -0.283800
vn -0.354400 -0.883100 -0.307500
vn -0.395400 -0.872400 -0.287300
vn -0.427900 -0.848700 -0.310900
vn -0.467900 -0.835200 -0.289000
vn -0.499500 -0.808200 -0.312000
vn -0.537700 -0.792000 -0.289000
vn -0.567800 -0.762200 -0.310900
vn -0.603500 -0.743800 -0.287300
vn -0.631400 -0.711900 -0.307500
vn -0.664000 -0.691700 -0.283800
vn -0.689400 -0.658400 -0.302200
vn -0.718600 -0.637000 -0.278800
vn -0.741100 -0.603000 -0.295200
vn -0.766800 -0.581100 -0.272600
vn -0.786500 -0.547000 -0.286900
vn -0.808700 -0.525000 -0.265400
vn -0.114500 -0.968700 -0.220500
vn -0.154000 -0.966300 -0.206100
vn -0.183300 -0.956400 -0.227500
vn -0.224000 -0.951500 -0.211100
vn -0.255000 -0.938300 -0.233600
vn -0.296200 -0.930600 -0.215200
vn -0.328300 -0.914000 -0.238500
vn -0.369300 -0.903300 -0.218300
vn -0.402000 -0.883100 -0.242000
vn -0.442000 -0.869600 -0.220200
vn -0.474500 -0.845800 -0.243800
vn -0.512800 -0.829700 -0.220800
vn -0.544300 -0.802700 -0.243800
vn -0.580100 -0.784200 -0.220200
vn -0.610100 -0.754500 -0.242000
vn -0.642800 -0.734300 -0.218300
vn -0.670600 -0.702400 -0.238500
vn -0.699900 -0.681100 -0.215200
vn -0.725200 -0.647700 -0.233600
vn -0.750800 -0.625800 -0.211100
vn -0.773400 -0.591700 -0.227500
vn -0.795500 -0.569900 -0.206100
vn -0.815200 -0.535600 -0.220500
vn -0.833900 -0.514200 -0.200500
vn -0.091800 -0.983500 -0.155900
vn -0.131400 -0.981200 -0.141500
vn -0.158700 -0.974100 -0.161300
vn -0.199500 -0.969100 -0.144900
vn -0.228800 -0.959200 -0.166200
vn -0.270000 -0.951500 -0.147800
vn -0.301000 -0.938300 -0.170300
vn -0.342000 -0.927700 -0.150100
vn -0.374100 -0.911000 -0.173400
vn -0.414100 -0.897500 -0.151700
vn -0.446800 -0.877300 -0.175400
vn -0.485000 -0.861100 -0.152500
vn -0.517500 -0.837400 -0.176100
vn -0.553300 -0.818900 -0.152500
vn -0.584800 -0.792000 -0.175400
vn -0.617500 -0.771800 -0.151600
vn -0.647500 -0.742000 -0.173400
vn -0.676800 -0.720700 -0.150100
vn -0.704600 -0.688800 -0.170300
vn -0.730300 -0.667000 -0.147800
vn -0.755600 -0.633600 -0.166200
vn -0.777600 -0.611800 -0.144900
vn -0.800200 -0.577600 -0.161300
vn -0.818800 -0.556400 -0.141500
vn -0.838600 -0.521900 -0.155900
vn -0.854000 -0.501600 -0.137700
vn -0.069800 -0.993100 -0.094000
vn -0.109600 -0.990800 -0.079600
vn -0.134500 -0.986100 -0.097700
vn -0.175200 -0.981200 -0.081300
vn -0.202500 -0.974100 -0.101100
vn -0.243600 -0.966300 -0.082700
vn -0.273000 -0.956400 -0.104100
vn -0.313900 -0.945700 -0.083900
vn -0.345000 -0.932600 -0.106500
vn -0.384900 -0.919100 -0.084700
vn -0.417100 -0.902400 -0.108200
vn -0.455300 -0.886200 -0.085300
vn -0.488000 -0.866000 -0.109000
vn -0.523800 -0.847500 -0.085400
vn -0.556300 -0.823800 -0.109000
vn -0.589000 -0.803600 -0.085300
vn -0.620600 -0.776700 -0.108200
vn -0.649900 -0.755300 -0.084700
vn -0.679800 -0.725600 -0.106500
vn -0.705500 -0.703700 -0.083900
vn -0.733300 -0.671900 -0.104100
vn -0.755400 -0.650100 -0.082700
vn -0.780700 -0.616700 -0.101100
vn -0.799200 -0.595500 -0.081300
vn -0.821800 -0.561300 -0.097700
vn -0.837200 -0.541100 -0.079600
vn -0.857100 -0.506500 -0.094000
vn -0.869500 -0.487700 -0.077700
vn -0.048800 -0.998200 -0.035400
vn -0.088500 -0.995900 -0.021000
vn -0.111000 -0.993100 -0.037300
vn -0.151600 -0.988200 -0.020900
vn -0.176600 -0.983500 -0.039100
vn -0.217600 -0.975800 -0.020800
vn -0.245000 -0.968700 -0.040700
vn -0.285700 -0.958100 -0.020700
vn -0.315300 -0.948000 -0.042100
vn -0.355100 -0.934600 -0.020500
vn -0.386300 -0.921400 -0.043200
vn -0.424400 -0.905300 -0.020400
vn -0.456700 -0.888500 -0.043900
vn -0.492500 -0.870100 -0.020300
vn -0.525200 -0.849800 -0.044100
vn -0.558000 -0.829600 -0.020300
vn -0.590500 -0.805900 -0.043900
vn -0.619900 -0.784400 -0.020400
vn -0.651300 -0.757600 -0.043200
vn -0.677200 -0.735500 -0.020500
vn -0.706900 -0.706000 -0.042100
vn -0.729100 -0.684000 -0.020600
vn -0.756800 -0.652400 -0.040700
vn -0.775500 -0.631000 -0.020800
vn -0.800700 -0.597800 -0.039100
vn -0.816100 -0.577600 -0.020900
vn -0.838600 -0.543400 -0.037300
vn -0.851100 -0.524600 -0.021000
vn -0.871000 -0.490000 -0.035400
vn -0.880900 -0.472800 -0.021000
vn -0.880900 -0.472800 0.021000
vn -0.851100 -0.524600 0.021000
vn -0.816100 -0.577600 0.020900
vn -0.775500 -0.631000 0.020800
vn -0.729100 -0.684000 0.020600
vn -0.677200 -0.735500 0.020500
vn -0.619900 -0.784400 0.020400
vn -0.558000 -0.829600 0.020300
vn -0.492500 -0.870100 0.020300
vn -0.424400 -0.905300 0.020400
vn -0.355100 -0.934600 0.020500
vn -0.285700 -0.958100 0.020700
vn -0.217600 -0.975800 0.020800
vn -0.151600 -0.988200 0.020900
vn -0.088500 -0.995900 0.021000
vn -0.871000 -0.490000 0.035400
vn -0.869500 -0.487700 0.077700
vn -0.838600 -0.543400 0.037300
vn -0.837200 -0.541100 0.079600
vn -0.857100 -0.506500 0.094000
vn -0.854000 -0.501600 0.137700
vn -0.800700 -0.597800 0.039100
vn -0.799200 -0.595500 0.081300
vn -0.821800 -0.561300 0.097700
vn -0.818800 -0.556400 0.141500
vn -0.838600 -0.521900 0.155900
vn -0.833900 -0.514200 0.200500
vn -0.756800 -0.652400 0.040700
vn -0.755400 -0.650100 0.082700
vn -0.780700 -0.616700 0.101100
vn -0.777600 -0.611800 0.144900
vn -0.800200 -0.577600 0.161300
vn -0.795500 -0.569900 0.206100
vn -0.815200 -0.535600 0.220500
vn -0.808700 -0.525000 0.265400
vn -0.706900 -0.706000 0.042100
vn -0.705500 -0.703700 0.083900
vn -0.733300 -0.671900 0.104100
vn -0.730300 -0.667000 0.147800
vn -0.755600 -0.633600 0.166200
vn -0.750800 -0.625900 0.211100
vn -0.773400 -0.591700 0.227500
vn -0.766800 -0.581100 0.272600
vn -0.786500 -0.547000 0.286900
vn -0.778200 -0.533600 0.331300
vn -0.651300 -0.757600 0.043200
vn -0.649900 -0.755300 0.084700
vn -0.679800 -0.725600 0.106500
vn -0.676800 -0.720700 0.150100
vn -0.704600 -0.688800 0.170300
vn -0.699900 -0.681100 0.215200
vn -0.725200 -0.647700 0.233600
vn -0.718600 -0.637000 0.278800
vn -0.741100 -0.603000 0.295200
vn -0.732800 -0.589500 0.339900
vn -0.752300 -0.555600 0.354000
vn -0.742400 -0.539500 0.397300
vn -0.590500 -0.805900 0.043900
vn -0.589000 -0.803600 0.085300
vn -0.620600 -0.776700 0.108200
vn -0.617500 -0.771800 0.151600
vn -0.647500 -0.742000 0.173400
vn -0.642800 -0.734300 0.218300
vn -0.670600 -0.702400 0.238500
vn -0.664000 -0.691700 0.283800
vn -0.689400 -0.658400 0.302200
vn -0.681000 -0.644800 0.347000
vn -0.703500 -0.610900 0.363300
vn -0.693500 -0.594700 0.406700
vn -0.712900 -0.560900 0.420800
vn -0.701500 -0.542500 0.462100
vn -0.525200 -0.849800 0.044100
vn -0.523800 -0.847500 0.085400
vn -0.556300 -0.823800 0.109000
vn -0.553300 -0.818900 0.152500
vn -0.584800 -0.792000 0.175400
vn -0.580100 -0.784200 0.220200
vn -0.610100 -0.754500 0.242000
vn -0.603500 -0.743800 0.287300
vn -0.631400 -0.711900 0.307500
vn -0.623000 -0.698400 0.352300
vn -0.648300 -0.665000 0.370700
vn -0.638300 -0.648800 0.414200
vn -0.660700 -0.614900 0.430500
vn -0.649300 -0.596500 0.471800
vn -0.668700 -0.562800 0.485900
vn -0.656200 -0.542500 0.524400
vn -0.456700 -0.888500 0.043900
vn -0.455300 -0.886200 0.085300
vn -0.488000 -0.866000 0.109000
vn -0.485000 -0.861100 0.152500
vn -0.517500 -0.837400 0.176100
vn -0.512700 -0.829700 0.220800
vn -0.544300 -0.802700 0.243800
vn -0.537700 -0.792000 0.289000
vn -0.567800 -0.762200 0.310900
vn -0.559400 -0.748700 0.355700
vn -0.587300 -0.716800 0.375900
vn -0.577300 -0.700600 0.419400
vn -0.602600 -0.667300 0.437800
vn -0.591200 -0.648800 0.479100
vn -0.613600 -0.614900 0.495400
vn -0.601100 -0.594700 0.533900
vn -0.620500 -0.560900 0.548000
vn -0.607300 -0.539500 0.583300
vn -0.386300 -0.921400 0.043200
vn -0.384900 -0.919100 0.084700
vn -0.417100 -0.902400 0.108200
vn -0.414100 -0.897500 0.151600
vn -0.446800 -0.877300 0.175400
vn -0.442000 -0.869600 0.220200
vn -0.474500 -0.845800 0.243800
vn -0.467900 -0.835200 0.289000
vn -0.499500 -0.808200 0.312000
vn -0.491100 -0.794700 0.356800
vn -0.521100 -0.764900 0.378600
vn -0.511100 -0.748700 0.422100
vn -0.539000 -0.716800 0.442400
vn -0.527600 -0.698400 0.483600
vn -0.552900 -0.665000 0.502000
vn -0.540500 -0.644800 0.540500
vn -0.562900 -0.610900 0.556800
vn -0.549700 -0.589500 0.591900
vn -0.569200 -0.555600 0.606100
vn -0.555600 -0.533600 0.637700
vn -0.315300 -0.948000 0.042100
vn -0.313900 -0.945700 0.083900
vn -0.345000 -0.932600 0.106500
vn -0.342000 -0.927700 0.150100
vn -0.374100 -0.911000 0.173400
vn -0.369300 -0.903300 0.218300
vn -0.402000 -0.883100 0.242000
vn -0.395400 -0.872400 0.287300
vn -0.427900 -0.848700 0.310900
vn -0.419500 -0.835200 0.355700
vn -0.451100 -0.808200 0.378600
vn -0.441100 -0.792000 0.422100
vn -0.471100 -0.762200 0.443900
vn -0.459700 -0.743800 0.485200
vn -0.487600 -0.711900 0.505400
vn -0.475100 -0.691700 0.543800
vn -0.500400 -0.658400 0.562200
vn -0.487300 -0.637000 0.597300
vn -0.509800 -0.603000 0.613600
vn -0.496200 -0.581100 0.645100
vn -0.515900 -0.547000 0.659300
vn -0.502300 -0.525000 0.687100
vn -0.245000 -0.968700 0.040700
vn -0.243600 -0.966300 0.082700
vn -0.273000 -0.956400 0.104100
vn -0.270000 -0.951500 0.147800
vn -0.301000 -0.938300 0.170300
vn -0.296200 -0.930600 0.215200
vn -0.328300 -0.914000 0.238500
vn -0.321700 -0.903300 0.283800
vn -0.354400 -0.883100 0.307500
vn -0.346000 -0.869600 0.352400
vn -0.378500 -0.845800 0.375900
vn -0.368500 -0.829700 0.419400
vn -0.400100 -0.802700 0.442400
vn -0.388700 -0.784200 0.483600
vn -0.418700 -0.754500 0.505400
vn -0.406200 -0.734300 0.543800
vn -0.434100 -0.702400 0.564100
vn -0.420900 -0.681100 0.599100
vn -0.446300 -0.647700 0.617500
vn -0.432800 -0.625900 0.648900
vn -0.455300 -0.591700 0.665300
vn -0.441900 -0.569900 0.692800
vn -0.461600 -0.535600 0.707200
vn -0.448400 -0.514200 0.731100
vn -0.176600 -0.983500 0.039100
vn -0.175200 -0.981200 0.081300
vn -0.202500 -0.974100 0.101100
vn -0.199500 -0.969100 0.144900
vn -0.228800 -0.959200 0.166200
vn -0.224000 -0.951500 0.211100
vn -0.255000 -0.938300 0.233600
vn -0.248400 -0.927700 0.278900
vn -0.280600 -0.911000 0.302200
vn -0.272200 -0.897500 0.347000
vn -0.304900 -0.877300 0.370700
vn -0.294900 -0.861100 0.414200
vn -0.327400 -0.837400 0.437800
vn -0.316000 -0.818900 0.479100
vn -0.347500 -0.792000 0.502000
vn -0.335100 -0.771800 0.540500
vn -0.365000 -0.742000 0.562200
vn -0.351900 -0.720700 0.597300
vn -0.379700 -0.688800 0.617500
vn -0.366200 -0.667000 0.648900
vn -0.391600 -0.633600 0.667300
vn -0.378100 -0.611800 0.694800
vn -0.400700 -0.577600 0.711200
vn -0.387600 -0.556400 0.735000
vn -0.407400 -0.521900 0.749400
vn -0.394900 -0.501700 0.769700
vn -0.111000 -0.993100 0.037300
vn -0.109600 -0.990800 0.079600
vn -0.134500 -0.986100 0.097700
vn -0.131400 -0.981200 0.141500
vn -0.158700 -0.974100 0.161300
vn -0.154000 -0.966300 0.206100
vn -0.183300 -0.956400 0.227500
vn -0.176800 -0.945700 0.272600
vn -0.207900 -0.932600 0.295200
vn -0.199500 -0.919100 0.339900
vn -0.231800 -0.902400 0.363300
vn -0.221800 -0.886200 0.406700
vn -0.254500 -0.866000 0.430500
vn -0.243100 -0.847500 0.471800
vn -0.275600 -0.823800 0.495400
vn -0.263100 -0.803600 0.533900
vn -0.294600 -0.776700 0.556800
vn -0.281400 -0.755300 0.591900
vn -0.311300 -0.725600 0.613600
vn -0.297800 -0.703700 0.645100
vn -0.325600 -0.671900 0.665300
vn -0.312100 -0.650100 0.692800
vn -0.337400 -0.616700 0.711200
vn -0.324300 -0.595500 0.735000
vn -0.346900 -0.561300 0.751400
vn -0.334400 -0.541100 0.771600
vn -0.354300 -0.506500 0.786100
vn -0.342600 -0.487700 0.803000
vn -0.048800 -0.998200 0.035400
vn -0.047300 -0.995900 0.077700
vn -0.069800 -0.993100 0.094000
vn -0.066700 -0.988200 0.137700
vn -0.091800 -0.983500 0.155900
vn -0.087000 -0.975800 0.200500
vn -0.114500 -0.968700 0.220500
vn -0.107900 -0.958100 0.265400
vn -0.137500 -0.948100 0.286900
vn -0.129200 -0.934600 0.331300
vn -0.160500 -0.921400 0.354000
vn -0.150500 -0.905300 0.397300
vn -0.182900 -0.888500 0.420800
vn -0.171500 -0.870100 0.462100
vn -0.204300 -0.849800 0.485900
vn -0.191800 -0.829600 0.524400
vn -0.224200 -0.805900 0.548000
vn -0.210900 -0.784400 0.583200
vn -0.242400 -0.757600 0.606100
vn -0.228800 -0.735600 0.637700
vn -0.258500 -0.706000 0.659300
vn -0.245000 -0.684100 0.687100
vn -0.272600 -0.652400 0.707200
vn -0.259400 -0.631000 0.731100
vn -0.284600 -0.597800 0.749400
vn -0.272100 -0.577600 0.769700
vn -0.294600 -0.543400 0.786100
vn -0.283000 -0.524600 0.803000
vn -0.302800 -0.490000 0.817400
vn -0.292200 -0.472800 0.831300
vn 0.725000 -0.472800 -0.500800
vn 0.749200 -0.487700 -0.448200
vn 0.771900 -0.501700 -0.390600
vn 0.792500 -0.514200 -0.327900
vn 0.810200 -0.525000 -0.260600
vn 0.824300 -0.533600 -0.189300
vn 0.834100 -0.539500 -0.114900
vn 0.839200 -0.542500 -0.038500
vn 0.839200 -0.542500 0.038500
vn 0.834100 -0.539500 0.114900
vn 0.824300 -0.533600 0.189300
vn 0.810200 -0.525000 0.260600
vn 0.792500 -0.514200 0.327900
vn 0.771900 -0.501700 0.390600
vn 0.749200 -0.487700 0.448200
vn 0.725500 -0.490000 -0.483300
vn 0.700900 -0.524600 -0.483300
vn 0.748700 -0.506500 -0.427700
vn 0.724100 -0.541100 -0.427700
vn 0.700400 -0.543400 -0.462800
vn 0.672500 -0.577600 -0.462700
vn 0.770100 -0.521900 -0.366800
vn 0.745600 -0.556400 -0.366800
vn 0.722300 -0.561300 -0.404000
vn 0.694400 -0.595500 -0.404000
vn 0.670700 -0.597800 -0.439000
vn 0.639600 -0.631000 -0.439000
vn 0.789100 -0.535600 -0.300800
vn 0.764700 -0.569900 -0.300800
vn 0.742200 -0.577600 -0.339800
vn 0.714300 -0.611800 -0.339800
vn 0.691000 -0.616700 -0.377100
vn 0.659700 -0.650100 -0.377100
vn 0.636200 -0.652400 -0.411900
vn 0.602000 -0.684100 -0.411900
vn 0.804900 -0.547000 -0.230200
vn 0.780600 -0.581100 -0.230200
vn 0.759400 -0.591700 -0.270600
vn 0.731500 -0.625900 -0.270500
vn 0.709000 -0.633600 -0.309700
vn 0.677700 -0.667000 -0.309700
vn 0.654400 -0.671900 -0.346800
vn 0.620100 -0.703700 -0.346800
vn 0.596700 -0.706000 -0.381400
vn 0.559900 -0.735600 -0.381400
vn 0.816700 -0.555600 -0.155800
vn 0.792600 -0.589500 -0.155800
vn 0.773100 -0.603000 -0.196800
vn 0.745300 -0.637000 -0.196800
vn 0.724000 -0.647700 -0.237300
vn 0.692700 -0.681100 -0.237300
vn 0.670200 -0.688800 -0.276400
vn 0.635700 -0.720700 -0.276400
vn 0.612600 -0.725600 -0.313400
vn 0.575600 -0.755300 -0.313400
vn 0.552300 -0.757600 -0.347900
vn 0.513500 -0.784400 -0.347900
vn 0.824100 -0.560900 -0.078600
vn 0.800100 -0.594700 -0.078600
vn 0.782700 -0.610900 -0.119600
vn 0.754900 -0.644800 -0.119600
vn 0.735300 -0.658400 -0.160700
vn 0.704000 -0.691700 -0.160700
vn 0.682800 -0.702400 -0.201200
vn 0.648300 -0.734300 -0.201200
vn 0.625800 -0.742000 -0.240300
vn 0.588700 -0.771800 -0.240300
vn 0.565600 -0.776700 -0.277300
vn 0.526700 -0.803600 -0.277300
vn 0.503500 -0.805900 -0.311500
vn 0.463400 -0.829600 -0.311500
vn 0.826600 -0.562800 0.000000
vn 0.802600 -0.596500 0.000000
vn 0.787600 -0.614900 -0.040100
vn 0.759900 -0.648800 -0.040100
vn 0.742400 -0.665000 -0.081100
vn 0.711100 -0.698400 -0.081100
vn 0.691600 -0.711900 -0.122300
vn 0.657100 -0.743800 -0.122300
vn 0.635800 -0.754500 -0.162800
vn 0.598700 -0.784200 -0.162800
vn 0.576200 -0.792000 -0.201900
vn 0.537200 -0.818900 -0.201900
vn 0.514100 -0.823800 -0.238800
vn 0.474000 -0.847500 -0.238800
vn 0.450900 -0.849800 -0.273000
vn 0.410300 -0.870100 -0.273000
vn 0.824100 -0.560900 0.078600
vn 0.800100 -0.594700 0.078600
vn 0.787600 -0.614900 0.040100
vn 0.759900 -0.648800 0.040100
vn 0.744800 -0.667300 -0.000000
vn 0.713500 -0.700600 0.000000
vn 0.696100 -0.716800 -0.041000
vn 0.661600 -0.748700 -0.041000
vn 0.642000 -0.762200 -0.082200
vn 0.604900 -0.792000 -0.082200
vn 0.583700 -0.802700 -0.122700
vn 0.544600 -0.829700 -0.122700
vn 0.522200 -0.837400 -0.161800
vn 0.482000 -0.861100 -0.161800
vn 0.458900 -0.866000 -0.198700
vn 0.418500 -0.886200 -0.198700
vn 0.395300 -0.888500 -0.232900
vn 0.355300 -0.905300 -0.232900
vn 0.816700 -0.555600 0.155800
vn 0.792600 -0.589500 0.155800
vn 0.782700 -0.610900 0.119600
vn 0.754900 -0.644800 0.119600
vn 0.742400 -0.665000 0.081100
vn 0.711100 -0.698400 0.081100
vn 0.696100 -0.716800 0.041000
vn 0.661600 -0.748700 0.041000
vn 0.644200 -0.764900 0.000000
vn 0.607100 -0.794700 0.000000
vn 0.587500 -0.808200 -0.041200
vn 0.548400 -0.835200 -0.041200
vn 0.527200 -0.845800 -0.081700
vn 0.487000 -0.869600 -0.081700
vn 0.464600 -0.877300 -0.120700
vn 0.424200 -0.897500 -0.120700
vn 0.401000 -0.902400 -0.157700
vn 0.361200 -0.919100 -0.157700
vn 0.337900 -0.921400 -0.192100
vn 0.299300 -0.934600 -0.192100
vn 0.804900 -0.547000 0.230200
vn 0.780600 -0.581100 0.230200
vn 0.773100 -0.603000 0.196800
vn 0.745300 -0.637000 0.196800
vn 0.735300 -0.658400 0.160700
vn 0.704000 -0.691700 0.160700
vn 0.691600 -0.711900 0.122300
vn 0.657100 -0.743800 0.122300
vn 0.642000 -0.762200 0.082200
vn 0.604900 -0.792000 0.082200
vn 0.587500 -0.808200 0.041200
vn 0.548400 -0.835200 0.041200
vn 0.528900 -0.848700 -0.000000
vn 0.488700 -0.872400 0.000000
vn 0.467400 -0.883100 -0.040500
vn 0.427100 -0.903300 -0.040500
vn 0.404600 -0.911000 -0.079600
vn 0.364900 -0.927700 -0.079600
vn 0.341700 -0.932600 -0.116600
vn 0.303300 -0.945700 -0.116600
vn 0.279900 -0.948100 -0.151200
vn 0.243300 -0.958100 -0.151200
vn 0.789100 -0.535600 0.300800
vn 0.764700 -0.569900 0.300800
vn 0.759400 -0.591700 0.270600
vn 0.731500 -0.625900 0.270500
vn 0.724000 -0.647700 0.237300
vn 0.692700 -0.681100 0.237300
vn 0.682800 -0.702400 0.201200
vn 0.648300 -0.734300 0.201200
vn 0.635800 -0.754500 0.162800
vn 0.598700 -0.784200 0.162800
vn 0.583700 -0.802700 0.122700
vn 0.544600 -0.829700 0.122700
vn 0.527200 -0.845800 0.081700
vn 0.487000 -0.869600 0.081700
vn 0.467400 -0.883100 0.040500
vn 0.427100 -0.903300 0.040500
vn 0.405800 -0.914000 -0.000000
vn 0.366100 -0.930600 0.000000
vn 0.343600 -0.938300 -0.039100
vn 0.305300 -0.951500 -0.039100
vn 0.282000 -0.956400 -0.076300
vn 0.245700 -0.966300 -0.076300
vn 0.222200 -0.968700 -0.111100
vn 0.188300 -0.975800 -0.111100
vn 0.770100 -0.521900 0.366800
vn 0.745600 -0.556400 0.366800
vn 0.742200 -0.577600 0.339800
vn 0.714300 -0.611800 0.339800
vn 0.709000 -0.633600 0.309700
vn 0.677700 -0.667000 0.309700
vn 0.670200 -0.688800 0.276400
vn 0.635700 -0.720700 0.276400
vn 0.625800 -0.742000 0.240300
vn 0.588700 -0.771800 0.240300
vn 0.576200 -0.792000 0.201900
vn 0.537200 -0.818900 0.201900
vn 0.522200 -0.837400 0.161800
vn 0.482000 -0.861100 0.161800
vn 0.464600 -0.877300 0.120700
vn 0.424200 -0.897500 0.120700
vn 0.404600 -0.911000 0.079600
vn 0.364900 -0.927700 0.079600
vn 0.343600 -0.938300 0.039100
vn 0.305300 -0.951500 0.039100
vn 0.282800 -0.959200 -0.000000
vn 0.246500 -0.969100 0.000000
vn 0.223200 -0.974100 -0.037200
vn 0.189500 -0.981200 -0.037200
vn 0.165900 -0.983500 -0.072200
vn 0.135000 -0.988200 -0.072200
vn 0.748700 -0.506500 0.427700
vn 0.724100 -0.541100 0.427700
vn 0.722300 -0.561300 0.404000
vn 0.694400 -0.595500 0.404000
vn 0.691000 -0.616700 0.377100
vn 0.659700 -0.650100 0.377100
vn 0.654400 -0.671900 0.346800
vn 0.620100 -0.703700 0.346800
vn 0.612600 -0.725600 0.313400
vn 0.575600 -0.755300 0.313400
vn 0.565600 -0.776700 0.277300
vn 0.526700 -0.803600 0.277300
vn 0.514100 -0.823800 0.238800
vn 0.474000 -0.847500 0.238800
vn 0.458900 -0.866000 0.198700
vn 0.418500 -0.886200 0.198700
vn 0.401000 -0.902400 0.157700
vn 0.361200 -0.919100 0.157700
vn 0.341700 -0.932600 0.116600
vn 0.303300 -0.945700 0.116600
vn 0.282000 -0.956400 0.076300
vn 0.245700 -0.966300 0.076300
vn 0.223200 -0.974100 0.037200
vn 0.189500 -0.981200 0.037200
vn 0.166200 -0.986100 0.000000
vn 0.135400 -0.990800 0.000000
vn 0.111700 -0.993100 -0.035100
vn 0.084000 -0.995900 -0.035100
vn 0.725500 -0.490000 0.483300
vn 0.700900 -0.524600 0.483300
vn 0.700400 -0.543400 0.462800
vn 0.672500 -0.577600 0.462700
vn 0.670700 -0.597800 0.439000
vn 0.639600 -0.631000 0.439000
vn 0.636200 -0.652400 0.411900
vn 0.602000 -0.684100 0.411900
vn 0.596700 -0.706000 0.381400
vn 0.559900 -0.735600 0.381400
vn 0.552300 -0.757600 0.347900
vn 0.513500 -0.784400 0.347900
vn 0.503500 -0.805900 0.311500
vn 0.463400 -0.829600 0.311500
vn 0.450900 -0.849800 0.273000
vn 0.410300 -0.870100 0.273000
vn 0.395300 -0.888500 0.232900
vn 0.355300 -0.905300 0.232900
vn 0.337900 -0.921400 0.192100
vn 0.299300 -0.934600 0.192100
vn 0.279900 -0.948100 0.151200
vn 0.243300 -0.958100 0.151300
vn 0.222200 -0.968700 0.111100
vn 0.188300 -0.975800 0.111100
vn 0.165900 -0.983500 0.072200
vn 0.135000 -0.988200 0.072200
vn 0.111700 -0.993100 0.035100
vn 0.084000 -0.995900 0.035100
vn 0.060300 -0.998200 0.000000
vn 0.035700 -0.999400 0.000000
vn -0.252200 -0.472800 0.844300
vn -0.243000 -0.524600 0.815900
vn -0.232300 -0.577600 0.782600
vn -0.219900 -0.631000 0.743900
vn -0.205700 -0.684100 0.699800
vn -0.189800 -0.735600 0.650400
vn -0.172200 -0.784400 0.595900
vn -0.153100 -0.829600 0.537000
vn -0.132800 -0.870100 0.474600
vn -0.111700 -0.905300 0.409900
vn -0.090200 -0.934600 0.344000
vn -0.068700 -0.958100 0.278100
vn -0.047500 -0.975800 0.213400
vn -0.027000 -0.988200 0.150700
vn -0.007400 -0.995900 0.090700
vn -0.235500 -0.490000 0.839300
vn -0.194800 -0.487700 0.851000
vn -0.223700 -0.543400 0.809100
vn -0.183000 -0.541100 0.820800
vn -0.175400 -0.506500 0.844200
vn -0.132900 -0.501700 0.854800
vn -0.210200 -0.597800 0.773600
vn -0.169700 -0.595500 0.785200
vn -0.161000 -0.561300 0.811800
vn -0.118400 -0.556400 0.822500
vn -0.110900 -0.521900 0.845800
vn -0.067000 -0.514200 0.855000
vn -0.195100 -0.652400 0.732300
vn -0.154700 -0.650100 0.743900
vn -0.145100 -0.616700 0.773700
vn -0.102500 -0.611800 0.784300
vn -0.093800 -0.577600 0.810900
vn -0.049800 -0.569900 0.820200
vn -0.042200 -0.535600 0.843400
vn 0.002500 -0.525000 0.851100
vn -0.178400 -0.706000 0.685400
vn -0.138200 -0.703700 0.696900
vn -0.127600 -0.671900 0.729600
vn -0.085100 -0.667000 0.740200
vn -0.075400 -0.633600 0.770000
vn -0.031300 -0.625900 0.779300
vn -0.022600 -0.591700 0.805900
vn 0.022300 -0.581100 0.813500
vn 0.029800 -0.547000 0.836600
vn 0.074700 -0.533600 0.842500
vn -0.160200 -0.757600 0.632800
vn -0.120200 -0.755300 0.644300
vn -0.108800 -0.725600 0.679400
vn -0.066400 -0.720700 0.690000
vn -0.055800 -0.688800 0.722800
vn -0.011600 -0.681100 0.732100
vn -0.001900 -0.647700 0.761900
vn 0.043100 -0.637000 0.769600
vn 0.051700 -0.603000 0.796100
vn 0.096800 -0.589500 0.802000
vn 0.104200 -0.555600 0.824900
vn 0.148500 -0.539500 0.828800
vn -0.140700 -0.805900 0.575100
vn -0.100900 -0.803600 0.586600
vn -0.088900 -0.776700 0.623600
vn -0.046600 -0.771800 0.634200
vn -0.035100 -0.742000 0.669400
vn 0.009000 -0.734300 0.678700
vn 0.019600 -0.702400 0.711500
vn 0.064700 -0.691700 0.719200
vn 0.074400 -0.658400 0.749000
vn 0.119600 -0.644800 0.754900
vn 0.128100 -0.610900 0.781300
vn 0.172500 -0.594700 0.785200
vn 0.179900 -0.560900 0.808100
vn 0.222700 -0.542500 0.810000
vn -0.120300 -0.849800 0.513100
vn -0.080600 -0.847500 0.524600
vn -0.068200 -0.823800 0.562800
vn -0.026000 -0.818900 0.573300
vn -0.013900 -0.792000 0.610400
vn 0.030200 -0.784200 0.619700
vn 0.041600 -0.754500 0.655000
vn 0.086700 -0.743800 0.662700
vn 0.097400 -0.711900 0.695500
vn 0.142600 -0.698400 0.701400
vn 0.152200 -0.665000 0.731100
vn 0.196700 -0.648800 0.735100
vn 0.205200 -0.614900 0.761400
vn 0.248000 -0.596500 0.763300
vn 0.255400 -0.562800 0.786200
vn 0.296000 -0.542500 0.786200
vn -0.099400 -0.888500 0.447900
vn -0.059600 -0.886200 0.459400
vn -0.047100 -0.866000 0.497900
vn -0.004900 -0.861100 0.508400
vn 0.007500 -0.837400 0.546600
vn 0.051600 -0.829700 0.555900
vn 0.063600 -0.802700 0.593000
vn 0.108700 -0.792000 0.600700
vn 0.120200 -0.762200 0.636000
vn 0.165400 -0.748700 0.641900
vn 0.176100 -0.716800 0.674700
vn 0.220500 -0.700600 0.678600
vn 0.230200 -0.667300 0.708300
vn 0.273000 -0.648800 0.710300
vn 0.281500 -0.614900 0.736600
vn 0.322000 -0.594700 0.736600
vn 0.329400 -0.560900 0.759500
vn 0.367100 -0.539500 0.757800
vn -0.078300 -0.921400 0.380800
vn -0.038400 -0.919100 0.392200
vn -0.026000 -0.902400 0.430100
vn 0.016300 -0.897500 0.440700
vn 0.028700 -0.877300 0.479100
vn 0.072800 -0.869600 0.488400
vn 0.085200 -0.845800 0.526600
vn 0.130300 -0.835200 0.534300
vn 0.142400 -0.808200 0.571400
vn 0.187600 -0.794700 0.577300
vn 0.199100 -0.764900 0.612600
vn 0.243500 -0.748700 0.616600
vn 0.254100 -0.716800 0.649300
vn 0.296900 -0.698400 0.651300
vn 0.306600 -0.665000 0.681000
vn 0.347000 -0.644800 0.681000
vn 0.355600 -0.610900 0.707400
vn 0.393100 -0.589500 0.705700
vn 0.400500 -0.555600 0.728600
vn 0.434800 -0.533600 0.725400
vn -0.057400 -0.948100 0.312900
vn -0.017200 -0.945700 0.324500
vn -0.005300 -0.932600 0.361000
vn 0.037100 -0.927700 0.371600
vn 0.049300 -0.911000 0.409400
vn 0.093500 -0.903300 0.418700
vn 0.105900 -0.883100 0.457100
vn 0.151000 -0.872400 0.464800
vn 0.163400 -0.848700 0.503000
vn 0.208700 -0.835200 0.508900
vn 0.220700 -0.808200 0.546000
vn 0.265100 -0.792000 0.549900
vn 0.276600 -0.762200 0.585200
vn 0.319400 -0.743800 0.587100
vn 0.330000 -0.711900 0.619900
vn 0.370400 -0.691700 0.619900
vn 0.380100 -0.658400 0.649700
vn 0.417500 -0.637000 0.648000
vn 0.426100 -0.603000 0.674400
vn 0.460100 -0.581100 0.671300
vn 0.467600 -0.547000 0.694300
vn 0.498200 -0.525000 0.690000
vn -0.037000 -0.968700 0.245600
vn 0.003400 -0.966300 0.257300
vn 0.014600 -0.956400 0.291800
vn 0.057100 -0.951500 0.302400
vn 0.069000 -0.938300 0.338900
vn 0.113100 -0.930600 0.348200
vn 0.125400 -0.914000 0.386000
vn 0.170500 -0.903300 0.393700
vn 0.183000 -0.883100 0.432100
vn 0.228200 -0.869600 0.437900
vn 0.240600 -0.845800 0.476100
vn 0.285000 -0.829700 0.480000
vn 0.297100 -0.802700 0.517200
vn 0.339900 -0.784200 0.519100
vn 0.351300 -0.754500 0.554400
vn 0.391700 -0.734300 0.554400
vn 0.402400 -0.702400 0.587200
vn 0.439700 -0.681100 0.585500
vn 0.449400 -0.647700 0.615300
vn 0.483400 -0.625900 0.612100
vn 0.492000 -0.591700 0.638600
vn 0.522400 -0.569900 0.634300
vn 0.529900 -0.535600 0.657500
vn 0.556800 -0.514200 0.652400
vn -0.017400 -0.983500 0.180100
vn 0.023200 -0.981200 0.191800
vn 0.033600 -0.974100 0.223800
vn 0.076200 -0.969100 0.234500
vn 0.087400 -0.959200 0.268900
vn 0.131500 -0.951500 0.278300
vn 0.143400 -0.938300 0.314700
vn 0.188400 -0.927700 0.322400
vn 0.200700 -0.911000 0.360200
vn 0.245900 -0.897500 0.366100
vn 0.258400 -0.877300 0.404500
vn 0.302800 -0.861100 0.408400
vn 0.315200 -0.837400 0.446600
vn 0.358000 -0.818900 0.448500
vn 0.370100 -0.792000 0.485700
vn 0.410500 -0.771800 0.485700
vn 0.421900 -0.742000 0.520900
vn 0.459300 -0.720700 0.519200
vn 0.470000 -0.688800 0.552000
vn 0.503900 -0.667000 0.548800
vn 0.513600 -0.633600 0.578600
vn 0.543900 -0.611800 0.574300
vn 0.552600 -0.577600 0.600900
vn 0.579200 -0.556400 0.595800
vn 0.586800 -0.521900 0.619100
vn 0.610000 -0.501700 0.613400
vn 0.001200 -0.993100 0.117100
vn 0.041800 -0.990800 0.128800
vn 0.051400 -0.986100 0.158100
vn 0.094000 -0.981200 0.168700
vn 0.104400 -0.974100 0.200800
vn 0.148500 -0.966300 0.210100
vn 0.159700 -0.956400 0.244700
vn 0.204600 -0.945700 0.252400
vn 0.216500 -0.932600 0.288900
vn 0.261600 -0.919100 0.294800
vn 0.273900 -0.902400 0.332700
vn 0.318300 -0.886200 0.336600
vn 0.330800 -0.866000 0.375100
vn 0.373600 -0.847500 0.377000
vn 0.386000 -0.823800 0.415200
vn 0.426400 -0.803600 0.415200
vn 0.438500 -0.776700 0.452300
vn 0.476000 -0.755300 0.450500
vn 0.487400 -0.725600 0.485700
vn 0.521500 -0.703700 0.482500
vn 0.532100 -0.671900 0.515200
vn 0.562500 -0.650100 0.510900
vn 0.572200 -0.616700 0.540600
vn 0.598800 -0.595500 0.535500
vn 0.607500 -0.561300 0.562100
vn 0.630500 -0.541100 0.556500
vn 0.638100 -0.506500 0.579800
vn 0.657800 -0.487700 0.574000
vn 0.018600 -0.998200 0.057300
vn 0.059300 -0.995900 0.069000
vn 0.067900 -0.993100 0.095400
vn 0.110400 -0.988200 0.106000
vn 0.119900 -0.983500 0.135500
vn 0.163800 -0.975800 0.144700
vn 0.174300 -0.968700 0.177000
vn 0.219000 -0.958100 0.184700
vn 0.230300 -0.948100 0.219400
vn 0.275200 -0.934600 0.225300
vn 0.287100 -0.921400 0.262000
vn 0.331300 -0.905300 0.265900
vn 0.343700 -0.888500 0.304000
vn 0.386500 -0.870100 0.305900
vn 0.399000 -0.849800 0.344400
vn 0.439500 -0.829600 0.344400
vn 0.451900 -0.805900 0.382600
vn 0.489500 -0.784400 0.380900
vn 0.501500 -0.757600 0.417800
vn 0.535800 -0.735600 0.414600
vn 0.547200 -0.706000 0.449600
vn 0.577800 -0.684100 0.445300
vn 0.588300 -0.652400 0.477800
vn 0.615100 -0.631000 0.472600
vn 0.624800 -0.597800 0.502200
vn 0.647900 -0.577600 0.496600
vn 0.656600 -0.543400 0.523100
vn 0.676200 -0.524600 0.517300
vn 0.683800 -0.490000 0.540600
vn 0.700300 -0.472800 0.534800
usemtl None
s off
f 1//1 28//1 27//1
f 2//2 42//2 72//2
f 1//3 27//3 102//3
f 1//4 102//4 132//4
f 1//5 132//5 73//5
f 2//6 72//6 177//6
f 3//7 57//7 207//7
f 4//8 117//8 237//8
f 5//9 147//9 267//9
f 6//10 162//10 297//10
f 2//11 177//11 208//11
f 3//12 207//12 238//12
f 4//13 237//13 268//13
f 5//14 267//14 298//14
f 6//15 297//15 178//15
f 7//16 327//16 402//16
f 8//17 342//17 432//17
f 9//18 357//18 447//18
f 10//19 372//19 462//19
f 11//20 387//20 403//20
f 417//21 448//21 12//21
f 416//22 463//22 417//22
f 415//23 464//23 416//23
f 414//24 466//24 415//24
f 413//25 469//25 414//25
f 412//26 473//26 413//26
f 411//27 478//27 412//27
f 410//28 484//28 411//28
f 409//29 491//29 410//29
f 408//30 499//30 409//30
f 407//31 508//31 408//31
f 406//32 518//32 407//32
f 405//33 529//33 406//33
f 404//34 541//34 405//34
f 403//35 554//35 404//35
f 417//36 463//36 448//36
f 463//37 449//37 448//37
f 416//38 464//38 463//38
f 464//39 465//39 463//39
f 463//40 465//40 449//40
f 465//41 450//41 449//41
f 415//42 466//42 464//42
f 466//43 467//43 464//43
f 464//44 467//44 465//44
f 467//45 468//45 465//45
f 465//46 468//46 450//46
f 468//47 451//47 450//47
f 414//48 469//48 466//48
f 469//49 470//49 466//49
f 466//50 470//50 467//50
f 470//51 471//51 467//51
f 467//52 471//52 468//52
f 471//53 472//53 468//53
f 468//54 472//54 451//54
f 472//55 452//55 451//55
f 413//56 473//56 469//56
f 473//57 474//57 469//57
f 469//58 474//58 470//58
f 474//59 475//59 470//59
f 470//60 475//60 471//60
f 475//61 476//61 471//61
f 471//62 476//62 472//62
f 476//63 477//63 472//63
f 472//64 477//64 452//64
f 477//65 453//65 452//65
f 412//66 478//66 473//66
f 478//67 479//67 473//67
f 473//68 479//68 474//68
f 479//69 480//69 474//69
f 474//70 480//70 475//70
f 480//71 481//71 475//71
f 475//72 481//72 476//72
f 481//73 482//73 476//73
f 476//74 482//74 477//74
f 482//75 483//75 477//75
f 477//76 483//76 453//76
f 483//77 454//77 453//77
f 411//78 484//78 478//78
f 484//79 485//79 478//79
f 478//80 485//80 479//80
f 485//81 486//81 479//81
f 479//82 486//82 480//82
f 486//83 487//83 480//83
f 480//84 487//84 481//84
f 487//85 488//85 481//85
f 481//86 488//86 482//86
f 488//87 489//87 482//87
f 482//88 489//88 483//88
f 489//89 490//89 483//89
f 483//90 490//90 454//90
f 490//91 455//91 454//91
f 410//92 491//92 484//92
f 491//93 492//93 484//93
f 484//94 492//94 485//94
f 492//95 493//95 485//95
f 485//96 493//96 486//96
f 493//97 494//97 486//97
f 486//98 494//98 487//98
f 494//99 495//99 487//99
f 487//100 495//100 488//100
f 495//101 496//101 488//101
f 488//102 496//102 489//102
f 496//103 497//103 489//103
f 489//104 497//104 490//104
f 497//105 498//105 490//105
f 490//106 498//106 455//106
f 498//107 456//107 455//107
f 409//108 499//108 491//108
f 499//109 500//109 491//109
f 491//110 500//110 492//110
f 500//111 501//111 492//111
f 492//112 501//112 493//112
f 501//113 502//113 493//113
f 493//114 502//114 494//114
f 502//115 503//115 494//115
f 494//116 503//116 495//116
f 503//117 504//117 495//117
f 495//118 504//118 496//118
f 504//119 505//119 496//119
f 496//120 505//120 497//120
f 505//121 506//121 497//121
f 497//122 506//122 498//122
f 506//123 507//123 498//123
f 498//124 507//124 456//124
f 507//125 457//125 456//125
f 408//126 508//126 499//126
f 508//127 509//127 499//127
f 499//128 509//128 500//128
f 509//129 510//129 500//129
f 500//130 510//130 501//130
f 510//131 511//131 501//131
f 501//132 511//132 502//132
f 511//133 512//133 502//133
f 502//134 512//134 503//134
f 512//135 513//135 503//135
f 503//136 513//136 504//136
f 513//137 514//137 504//137
f 504//138 514//138 505//138
f 514//139 515//139 505//139
f 505//140 515//140 506//140
f 515//141 516//141 506//141
f 506//142 516//142 507//142
f 516//143 517//143 507//143
f 507//144 517//144 457//144
f 517//145 458//145 457//145
f 407//146 518//146 508//146
f 518//147 519//147 508//147
f 508//148 519//148 509//148
f 519//149 520//149 509//149
f 509//150 520//150 510//150
f 520//151 521//151 510//151
f 510//152 521//152 511//152
f 521//153 522//153 511//153
f 511//154 522//154 512//154
f 522//155 523//155 512//155
f 512//156 523//156 513//156
f 523//157 524//157 513//157
f 513//158 524//158 514//158
f 524//159 525//159 514//159
f 514//160 525//160 515//160
f 525//161 526//161 515//161
f 515//162 526//162 516//162
f 526//163 527//163 516//163
f 516//164 527//164 517//164
f 527//165 528//165 517//165
f 517//166 528//166 458//166
f 528//167 459//167 458//167
f 406//168 529//168 518//168
f 529//169 530//169 518//169
f 518//170 530//170 519//170
f 530//171 531//171 519//171
f 519//172 531//172 520//172
f 531//173 532//173 520//173
f 520//174 532//174 521//174
f 532//175 533//175 521//175
f 521//176 533//176 522//176
f 533//177 534//177 522//177
f 522//178 534//178 523//178
f 534//179 535//179 523//179
f 523//180 535//180 524//180
f 535//181 536//181 524//181
f 524//182 536//182 525//182
f 536//183 537//183 525//183
f 525//184 537//184 526//184
f 537//185 538//185 526//185
f 526//186 538//186 527//186
f 538//187 539//187 527//187
f 527//188 539//188 528//188
f 539//189 540//189 528//189
f 528//190 540//190 459//190
f 540//191 460//191 459//191
f 405//192 541//192 529//192
f 541//193 542//193 529//193
f 529//194 542//194 530//194
f 542//195 543//195 530//195
f 530//196 543//196 531//196
f 543//197 544//197 531//197
f 531//198 544//198 532//198
f 544//199 545//199 532//199
f 532//200 545//200 533//200
f 545//201 546//201 533//201
f 533//202 546//202 534//202
f 546//203 547//203 534//203
f 534//204 547//204 535//204
f 547//205 548//205 535//205
f 535//206 548//206 536//206
f 548//207 549//207 536//207
f 536//208 549//208 537//208
f 549//209 550//209 537//209
f 537//210 550//210 538//210
f 550//211 551//211 538//211
f 538//212 551//212 539//212
f 551//213 552//213 539//213
f 539//214 552//214 540//214
f 552//215 553//215 540//215
f 540//216 553//216 460//216
f 553//217 461//217 460//217
f 404//218 554//218 541//218
f 554//219 555//219 541//219
f 541//220 555//220 542//220
f 555//221 556//221 542//221
f 542//222 556//222 543//222
f 556//223 557//223 543//223
f 543//224 557//224 544//224
f 557//225 558//225 544//225
f 544//226 558//226 545//226
f 558//227 559//227 545//227
f 545//228 559//228 546//228
f 559//229 560//229 546//229
f 546//230 560//230 547//230
f 560//231 561//231 547//231
f 547//232 561//232 548//232
f 561//233 562//233 548//233
f 548//234 562//234 549//234
f 562//235 563//235 549//235
f 549//236 563//236 550//236
f 563//237 564//237 550//237
f 550//238 564//238 551//238
f 564//239 565//239 551//239
f 551//240 565//240 552//240
f 565//241 566//241 552//241
f 552//242 566//242 553//242
f 566//243 567//243 553//243
f 553//244 567//244 461//244
f 567//245 462//245 461//245
f 403//246 387//246 554//246
f 387//247 386//247 554//247
f 554//248 386//248 555//248
f 386//249 385//249 555//249
f 555//250 385//250 556//250
f 385//251 384//251 556//251
f 556//252 384//252 557//252
f 384//253 383//253 557//253
f 557//254 383//254 558//254
f 383//255 382//255 558//255
f 558//256 382//256 559//256
f 382//257 381//257 559//257
f 559//258 381//258 560//258
f 381//259 380//259 560//259
f 560//260 380//260 561//260
f 380//261 379//261 561//261
f 561//262 379//262 562//262
f 379//263 378//263 562//263
f 562//264 378//264 563//264
f 378//265 377//265 563//265
f 563//266 377//266 564//266
f 377//267 376//267 564//267
f 564//268 376//268 565//268
f 376//269 375//269 565//269
f 565//270 375//270 566//270
f 375//271 374//271 566//271
f 566//272 374//272 567//272
f 374//273 373//273 567//273
f 567//274 373//274 462//274
f 373//275 10//275 462//275
f 448//276 433//276 12//276
f 449//277 568//277 448//277
f 450//278 569//278 449//278
f 451//279 571//279 450//279
f 452//280 574//280 451//280
f 453//281 578//281 452//281
f 454//282 583//282 453//282
f 455//283 589//283 454//283
f 456//284 596//284 455//284
f 457//285 604//285 456//285
f 458//286 613//286 457//286
f 459//287 623//287 458//287
f 460//288 634//288 459//288
f 461//289 646//289 460//289
f 462//290 659//290 461//290
f 448//291 568//291 433//291
f 568//292 434//292 433//292
f 449//293 569//293 568//293
f 569//294 570//294 568//294
f 568//295 570//295 434//295
f 570//296 435//296 434//296
f 450//297 571//297 569//297
f 571//298 572//298 569//298
f 569//299 572//299 570//299
f 572//300 573//300 570//300
f 570//301 573//301 435//301
f 573//302 436//302 435//302
f 451//303 574//303 571//303
f 574//304 575//304 571//304
f 571//305 575//305 572//305
f 575//306 576//306 572//306
f 572//307 576//307 573//307
f 576//308 577//308 573//308
f 573//309 577//309 436//309
f 577//310 437//310 436//310
f 452//311 578//311 574//311
f 578//312 579//312 574//312
f 574//313 579//313 575//313
f 579//314 580//314 575//314
f 575//315 580//315 576//315
f 580//316 581//316 576//316
f 576//317 581//317 577//317
f 581//318 582//318 577//318
f 577//319 582//319 437//319
f 582//320 438//320 437//320
f 453//321 583//321 578//321
f 583//322 584//322 578//322
f 578//323 584//323 579//323
f 584//324 585//324 579//324
f 579//325 585//325 580//325
f 585//326 586//326 580//326
f 580//327 586//327 581//327
f 586//328 587//328 581//328
f 581//329 587//329 582//329
f 587//330 588//330 582//330
f 582//331 588//331 438//331
f 588//332 439//332 438//332
f 454//333 589//333 583//333
f 589//334 590//334 583//334
f 583//335 590//335 584//335
f 590//336 591//336 584//336
f 584//337 591//337 585//337
f 591//338 592//338 585//338
f 585//339 592//339 586//339
f 592//340 593//340 586//340
f 586//341 593//341 587//341
f 593//342 594//342 587//342
f 587//343 594//343 588//343
f 594//344 595//344 588//344
f 588//345 595//345 439//345
f 595//346 440//346 439//346
f 455//347 596//347 589//347
f 596//348 597//348 589//348
f 589//349 597//349 590//349
f 597//350 598//350 590//350
f 590//351 598//351 591//351
f 598//352 599//352 591//352
f 591//353 599//353 592//353
f 599//354 600//354 592//354
f 592//355 600//355 593//355
f 600//356 601//356 593//356
f 593//357 601//357 594//357
f 601//358 602//358 594//358
f 594//359 602//359 595//359
f 602//360 603//360 595//360
f 595//361 603//361 440//361
f 603//362 441//362 440//362
f 456//363 604//363 596//363
f 604//364 605//364 596//364
f 596//365 605//365 597//365
f 605//366 606//366 597//366
f 597//367 606//367 598//367
f 606//368 607//368 598//368
f 598//369 607//369 599//369
f 607//370 608//370 599//370
f 599//371 608//371 600//371
f 608//372 609//372 600//372
f 600//373 609//373 601//373
f 609//374 610//374 601//374
f 601//375 610//375 602//375
f 610//376 611//376 602//376
f 602//377 611//377 603//377
f 611//378 612//378 603//378
f 603//379 612//379 441//379
f 612//380 442//380 441//380
f 457//381 613//381 604//381
f 613//382 614//382 604//382
f 604//383 614//383 605//383
f 614//384 615//384 605//384
f 605//385 615//385 606//385
f 615//386 616//386 606//386
f 606//387 616//387 607//387
f 616//388 617//388 607//388
f 607//389 617//389 608//389
f 617//390 618//390 608//390
f 608//391 618//391 609//391
f 618//392 619//392 609//392
f 609//393 619//393 610//393
f 619//394 620//394 610//394
f 610//395 620//395 611//395
f 620//396 621//396 611//396
f 611//397 621//397 612//397
f 621//398 622//398 612//398
f 612//399 622//399 442//399
f 622//400 443//400 442//400
f 458//401 623//401 613//401
f 623//402 624//402 613//402
f 613//403 624//403 614//403
f 624//404 625//404 614//404
f 614//405 625//405 615//405
f 625//406 626//406 615//406
f 615//407 626//407 616//407
f 626//408 627//408 616//408
f 616//409 627//409 617//409
f 627//410 628//410 617//410
f 617//411 628//411 618//411
f 628//412 629//412 618//412
f 618//413 629//413 619//413
f 629//414 630//414 619//414
f 619//415 630//415 620//415
f 630//416 631//416 620//416
f 620//417 631//417 621//417
f 631//418 632//418 621//418
f 621//419 632//419 622//419
f 632//420 633//420 622//420
f 622//421 633//421 443//421
f 633//422 444//422 443//422
f 459//423 634//423 623//423
f 634//424 635//424 623//424
f 623//425 635//425 624//425
f 635//426 636//426 624//426
f 624//427 636//427 625//427
f 636//428 637//428 625//428
f 625//429 637//429 626//429
f 637//430 638//430 626//430
f 626//431 638//431 627//431
f 638//432 639//432 627//432
f 627//433 639//433 628//433
f 639//434 640//434 628//434
f 628//435 640//435 629//435
f 640//436 641//436 629//436
f 629//437 641//437 630//437
f 641//438 642//438 630//438
f 630//439 642//439 631//439
f 642//440 643//440 631//440
f 631//441 643//441 632//441
f 643//442 644//442 632//442
f 632//443 644//443 633//443
f 644//444 645//444 633//444
f 633//445 645//445 444//445
f 645//446 445//446 444//446
f 460//447 646//447 634//447
f 646//448 647//448 634//448
f 634//449 647//449 635//449
f 647//450 648//450 635//450
f 635//451 648//451 636//451
f 648//452 649//452 636//452
f 636//453 649//453 637//453
f 649//454 650//454 637//454
f 637//455 650//455 638//455
f 650//456 651//456 638//456
f 638//457 651//457 639//457
f 651//458 652//458 639//458
f 639//459 652//459 640//459
f 652//460 653//460 640//460
f 640//461 653//461 641//461
f 653//462 654//462 641//462
f 641//463 654//463 642//463
f 654//464 655//464 642//464
f 642//465 655//465 643//465
f 655//466 656//466 643//466
f 643//467 656//467 644//467
f 656//468 657//468 644//468
f 644//469 657//469 645//469
f 657//470 658//470 645//470
f 645//471 658//471 445//471
f 658//472 446//472 445//472
f 461//473 659//473 646//473
f 659//474 660//474 646//474
f 646//475 660//475 647//475
f 660//476 661//476 647//476
f 647//477 661//477 648//477
f 661//478 662//478 648//478
f 648//479 662//479 649//479
f 662//480 663//480 649//480
f 649//481 663//481 650//481
f 663//482 664//482 650//482
f 650//483 664//483 651//483
f 664//484 665//484 651//484
f 651//485 665//485 652//485
f 665//486 666//486 652//486
f 652//487 666//487 653//487
f 666//488 667//488 653//488
f 653//489 667//489 654//489
f 667//490 668//490 654//490
f 654//491 668//491 655//491
f 668//492 669//492 655//492
f 655//493 669//493 656//493
f 669//494 670//494 656//494
f 656//495 670//495 657//495
f 670//496 671//496 657//496
f 657//497 671//497 658//497
f 671//498 672//498 658//498
f 658//499 672//499 446//499
f 672//500 447//500 446//500
f 462//501 372//501 659//501
f 372//502 371//502 659//502
f 659//503 371//503 660//503
f 371//504 370//504 660//504
f 660//505 370//505 661//505
f 370//506 369//506 661//506
f 661//507 369//507 662//507
f 369//508 368//508 662//508
f 662//509 368//509 663//509
f 368//510 367//510 663//510
f 663//511 367//511 664//511
f 367//512 366//512 664//512
f 664//513 366//513 665//513
f 366//514 365//514 665//514
f 665//515 365//515 666//515
f 365//516 364//516 666//516
f 666//517 364//517 667//517
f 364//518 363//518 667//518
f 667//519 363//519 668//519
f 363//520 362//520 668//520
f 668//521 362//521 669//521
f 362//522 361//522 669//522
f 669//523 361//523 670//523
f 361//524 360//524 670//524
f 670//525 360//525 671//525
f 360//526 359//526 671//526
f 671//527 359//527 672//527
f 359//528 358//528 672//528
f 672//529 358//529 447//529
f 358//530 9//530 447//530
f 433//531 418//531 12//531
f 434//532 673//532 433//532
f 435//533 674//533 434//533
f 436//534 676//534 435//534
f 437//535 679//535 436//535
f 438//536 683//536 437//536
f 439//537 688//537 438//537
f 440//538 694//538 439//538
f 441//539 701//539 440//539
f 442//540 709//540 441//540
f 443//541 718//541 442//541
f 444//542 728//542 443//542
f 445//543 739//543 444//543
f 446//544 751//544 445//544
f 447//545 764//545 446//545
f 433//546 673//546 418//546
f 673//547 419//547 418//547
f 434//548 674//548 673//548
f 674//549 675//549 673//549
f 673//550 675//550 419//550
f 675//551 420//551 419//551
f 435//552 676//552 674//552
f 676//553 677//553 674//553
f 674//554 677//554 675//554
f 677//555 678//555 675//555
f 675//556 678//556 420//556
f 678//557 421//557 420//557
f 436//558 679//558 676//558
f 679//559 680//559 676//559
f 676//560 680//560 677//560
f 680//561 681//561 677//561
f 677//562 681//562 678//562
f 681//563 682//563 678//563
f 678//564 682//564 421//564
f 682//565 422//565 421//565
f 437//566 683//566 679//566
f 683//567 684//567 679//567
f 679//568 684//568 680//568
f 684//569 685//569 680//569
f 680//570 685//570 681//570
f 685//571 686//571 681//571
f 681//572 686//572 682//572
f 686//573 687//573 682//573
f 682//574 687//574 422//574
f 687//575 423//575 422//575
f 438//576 688//576 683//576
f 688//577 689//577 683//577
f 683//578 689//578 684//578
f 689//579 690//579 684//579
f 684//580 690//580 685//580
f 690//581 691//581 685//581
f 685//582 691//582 686//582
f 691//583 692//583 686//583
f 686//584 692//584 687//584
f 692//585 693//585 687//585
f 687//586 693//586 423//586
f 693//587 424//587 423//587
f 439//588 694//588 688//588
f 694//589 695//589 688//589
f 688//590 695//590 689//590
f 695//591 696//591 689//591
f 689//592 696//592 690//592
f 696//593 697//593 690//593
f 690//594 697//594 691//594
f 697//595 698//595 691//595
f 691//596 698//596 692//596
f 698//597 699//597 692//597
f 692//598 699//598 693//598
f 699//599 700//599 693//599
f 693//600 700//600 424//600
f 700//601 425//601 424//601
f 440//602 701//602 694//602
f 701//603 702//603 694//603
f 694//604 702//604 695//604
f 702//605 703//605 695//605
f 695//606 703//606 696//606
f 703//607 704//607 696//607
f 696//608 704//608 697//608
f 704//609 705//609 697//609
f 697//610 705//610 698//610
f 705//611 706//611 698//611
f 698//612 706//612 699//612
f 706//613 707//613 699//613
f 699//614 707//614 700//614
f 707//615 708//615 700//615
f 700//616 708//616 425//616
f 708//617 426//617 425//617
f 441//618 709//618 701//618
f 709//619 710//619 701//619
f 701//620 710//620 702//620
f 710//621 711//621 702//621
f 702//622 711//622 703//622
f 711//623 712//623 703//623
f 703//624 712//624 704//624
f 712//625 713//625 704//625
f 704//626 713//626 705//626
f 713//627 714//627 705//627
f 705//628 714//628 706//628
f 714//629 715//629 706//629
f 706//630 715//630 707//630
f 715//631 716//631 707//631
f 707//632 716//632 708//632
f 716//633 717//633 708//633
f 708//634 717//634 426//634
f 717//635 427//635 426//635
f 442//636 718//636 709//636
f 718//637 719//637 709//637
f 709//638 719//638 710//638
f 719//639 720//639 710//639
f 710//640 720//640 711//640
f 720//641 721//641 711//641
f 711//642 721//642 712//642
f 721//643 722//643 712//643
f 712//644 722//644 713//644
f 722//645 723//645 713//645
f 713//646 723//646 714//646
f 723//647 724//647 714//647
f 714//648 724//648 715//648
f 724//649 725//649 715//649
f 715//650 725//650 716//650
f 725//651 726//651 716//651
f 716//652 726//652 717//652
f 726//653 727//653 717//653
f 717//654 727//654 427//654
f 727//655 428//655 427//655
f 443//656 728//656 718//656
f 728//657 729//657 718//657
f 718//658 729//658 719//658
f 729//659 730//659 719//659
f 719//660 730//660 720//660
f 730//661 731//661 720//661
f 720//662 731//662 721//662
f 731//663 732//663 721//663
f 721//664 732//664 722//664
f 732//665 733//665 722//665
f 722//666 733//666 723//666
f 733//667 734//667 723//667
f 723//668 734//668 724//668
f 734//669 735//669 724//669
f 724//670 735//670 725//670
f 735//671 736//671 725//671
f 725//672 736//672 726//672
f 736//673 737//673 726//673
f 726//674 737//674 727//674
f 737//675 738//675 727//675
f 727//676 738//676 428//676
f 738//677 429//677 428//677
f 444//678 739//678 728//678
f 739//679 740//679 728//679
f 728//680 740//680 729//680
f 740//681 741//681 729//681
f 729//682 741//682 730//682
f 741//683 742//683 730//683
f 730//684 742//684 731//684
f 742//685 743//685 731//685
f 731//686 743//686 732//686
f 743//687 744//687 732//687
f 732//688 744//688 733//688
f 744//689 745//689 733//689
f 733//690 745//690 734//690
f 745//691 746//691 734//691
f 734//692 746//692 735//692
f 746//693 747//693 735//693
f 735//694 747//694 736//694
f 747//695 748//695 736//695
f 736//696 748//696 737//696
f 748//697 749//697 737//697
f 737//698 749//698 738//698
f 749//699 750//699 738//699
f 738//700 750//700 429//700
f 750//701 430//701 429//701
f 445//702 751//702 739//702
f 751//703 752//703 739//703
f 739//704 752//704 740//704
f 752//705 753//705 740//705
f 740//706 753//706 741//706
f 753//707 754//707 741//707
f 741//708 754//708 742//708
f 754//709 755//709 742//709
f 742//710 755//710 743//710
f 755//711 756//711 743//711
f 743//712 756//712 744//712
f 756//713 757//713 744//713
f 744//714 757//714 745//714
f 757//715 758//715 745//715
f 745//716 758//716 746//716
f 758//717 759//717 746//717
f 746//718 759//718 747//718
f 759//719 760//719 747//719
f 747//720 760//720 748//720
f 760//721 761//721 748//721
f 748//722 761//722 749//722
f 761//723 762//723 749//723
f 749//724 762//724 750//724
f 762//725 763//725 750//725
f 750//726 763//726 430//726
f 763//727 431//727 430//727
f 446//728 764//728 751//728
f 764//729 765//729 751//729
f 751//730 765//730 752//730
f 765//731 766//731 752//731
f 752//732 766//732 753//732
f 766//733 767//733 753//733
f 753//734 767//734 754//734
f 767//735 768//735 754//735
f 754//736 768//736 755//736
f 768//737 769//737 755//737
f 755//738 769//738 756//738
f 769//739 770//739 756//739
f 756//740 770//740 757//740
f 770//741 771//741 757//741
f 757//742 771//742 758//742
f 771//743 772//743 758//743
f 758//744 772//744 759//744
f 772//745 773//745 759//745
f 759//746 773//746 760//746
f 773//747 774//747 760//747
f 760//748 774//748 761//748
f 774//749 775//749 761//749
f 761//750 775//750 762//750
f 775//751 776//751 762//751
f 762//752 776//752 763//752
f 776//753 777//753 763//753
f 763//754 777//754 431//754
f 777//755 432//755 431//755
f 447//756 357//756 764//756
f 357//757 356//757 764//757
f 764//758 356//758 765//758
f 356//759 355//759 765//759
f 765//760 355//760 766//760
f 355//761 354//761 766//761
f 766//762 354//762 767//762
f 354//763 353//763 767//763
f 767//764 353//764 768//764
f 353//765 352//765 768//765
f 768//766 352//766 769//766
f 352//767 351//767 769//767
f 769//768 351//768 770//768
f 351//769 350//769 770//769
f 770//770 350//770 771//770
f 350//771 349//771 771//771
f 771//772 349//772 772//772
f 349//773 348//773 772//773
f 772//774 348//774 773//774
f 348//775 347//775 773//775
f 773//776 347//776 774//776
f 347//777 346//777 774//777
f 774//778 346//778 775//778
f 346//779 345//779 775//779
f 775//780 345//780 776//780
f 345//781 344//781 776//781
f 776//782 344//782 777//782
f 344//783 343//783 777//783
f 777//784 343//784 432//784
f 343//785 8//785 432//785
f 418//786 388//786 12//786
f 419//787 778//787 418//787
f 420//788 779//788 419//788
f 421//789 781//789 420//789
f 422//790 784//790 421//790
f 423//791 788//791 422//791
f 424//792 793//792 423//792
f 425//793 799//793 424//793
f 426//794 806//794 425//794
f 427//795 814//795 426//795
f 428//796 823//796 427//796
f 429//797 833//797 428//797
f 430//798 844//798 429//798
f 431//799 856//799 430//799
f 432//800 869//800 431//800
f 418//801 778//801 388//801
f 778//802 389//802 388//802
f 419//803 779//803 778//803
f 779//804 780//804 778//804
f 778//805 780//805 389//805
f 780//806 390//806 389//806
f 420//807 781//807 779//807
f 781//808 782//808 779//808
f 779//809 782//809 780//809
f 782//810 783//810 780//810
f 780//811 783//811 390//811
f 783//812 391//812 390//812
f 421//813 784//813 781//813
f 784//814 785//814 781//814
f 781//815 785//815 782//815
f 785//816 786//816 782//816
f 782//817 786//817 783//817
f 786//818 787//818 783//818
f 783//819 787//819 391//819
f 787//820 392//820 391//820
f 422//821 788//821 784//821
f 788//822 789//822 784//822
f 784//823 789//823 785//823
f 789//824 790//824 785//824
f 785//825 790//825 786//825
f 790//826 791//826 786//826
f 786//827 791//827 787//827
f 791//828 792//828 787//828
f 787//829 792//829 392//829
f 792//830 393//830 392//830
f 423//831 793//831 788//831
f 793//832 794//832 788//832
f 788//833 794//833 789//833
f 794//834 795//834 789//834
f 789//835 795//835 790//835
f 795//836 796//836 790//836
f 790//837 796//837 791//837
f 796//838 797//838 791//838
f 791//839 797//839 792//839
f 797//840 798//840 792//840
f 792//841 798//841 393//841
f 798//842 394//842 393//842
f 424//843 799//843 793//843
f 799//844 800//844 793//844
f 793//845 800//845 794//845
f 800//846 801//846 794//846
f 794//847 801//847 795//847
f 801//848 802//848 795//848
f 795//849 802//849 796//849
f 802//850 803//850 796//850
f 796//851 803//851 797//851
f 803//852 804//852 797//852
f 797//853 804//853 798//853
f 804//854 805//854 798//854
f 798//855 805//855 394//855
f 805//856 395//856 394//856
f 425//857 806//857 799//857
f 806//858 807//858 799//858
f 799//859 807//859 800//859
f 807//860 808//860 800//860
f 800//861 808//861 801//861
f 808//862 809//862 801//862
f 801//863 809//863 802//863
f 809//864 810//864 802//864
f 802//865 810//865 803//865
f 810//866 811//866 803//866
f 803//867 811//867 804//867
f 811//868 812//868 804//868
f 804//869 812//869 805//869
f 812//870 813//870 805//870
f 805//871 813//871 395//871
f 813//872 396//872 395//872
f 426//873 814//873 806//873
f 814//874 815//874 806//874
f 806//875 815//875 807//875
f 815//876 816//876 807//876
f 807//877 816//877 808//877
f 816//878 817//878 808//878
f 808//879 817//879 809//879
f 817//880 818//880 809//880
f 809//881 818//881 810//881
f 818//882 819//882 810//882
f 810//883 819//883 811//883
f 819//884 820//884 811//884
f 811//885 820//885 812//885
f 820//886 821//886 812//886
f 812//887 821//887 813//887
f 821//888 822//888 813//888
f 813//889 822//889 396//889
f 822//890 397//890 396//890
f 427//891 823//891 814//891
f 823//892 824//892 814//892
f 814//893 824//893 815//893
f 824//894 825//894 815//894
f 815//895 825//895 816//895
f 825//896 826//896 816//896
f 816//897 826//897 817//897
f 826//898 827//898 817//898
f 817//899 827//899 818//899
f 827//900 828//900 818//900
f 818//901 828//901 819//901
f 828//902 829//902 819//902
f 819//903 829//903 820//903
f 829//904 830//904 820//904
f 820//905 830//905 821//905
f 830//906 831//906 821//906
f 821//907 831//907 822//907
f 831//908 832//908 822//908
f 822//909 832//909 397//909
f 832//910 398//910 397//910
f 428//911 833//911 823//911
f 833//912 834//912 823//912
f 823//913 834//913 824//913
f 834//914 835//914 824//914
f 824//915 835//915 825//915
f 835//916 836//916 825//916
f 825//917 836//917 826//917
f 836//918 837//918 826//918
f 826//919 837//919 827//919
f 837//920 838//920 827//920
f 827//921 838//921 828//921
f 838//922 839//922 828//922
f 828//923 839//923 829//923
f 839//924 840//924 829//924
f 829//925 840//925 830//925
f 840//926 841//926 830//926
f 830//927 841//927 831//927
f 841//928 842//928 831//928
f 831//929 842//929 832//929
f 842//930 843//930 832//930
f 832//931 843//931 398//931
f 843//932 399//932 398//932
f 429//933 844//933 833//933
f 844//934 845//934 833//934
f 833//935 845//935 834//935
f 845//936 846//936 834//936
f 834//937 846//937 835//937
f 846//938 847//938 835//938
f 835//939 847//939 836//939
f 847//940 848//940 836//940
f 836//941 848//941 837//941
f 848//942 849//942 837//942
f 837//943 849//943 838//943
f 849//944 850//944 838//944
f 838//945 850//945 839//945
f 850//946 851//946 839//946
f 839//947 851//947 840//947
f 851//948 852//948 840//948
f 840//949 852//949 841//949
f 852//950 853//950 841//950
f 841//951 853//951 842//951
f 853//952 854//952 842//952
f 842//953 854//953 843//953
f 854//954 855//954 843//954
f 843//955 855//955 399//955
f 855//956 400//956 399//956
f 430//957 856//957 844//957
f 856//958 857//958 844//958
f 844//959 857//959 845//959
f 857//960 858//960 845//960
f 845//961 858//961 846//961
f 858//962 859//962 846//962
f 846//963 859//963 847//963
f 859//964 860//964 847//964
f 847//965 860//965 848//965
f 860//966 861//966 848//966
f 848//967 861//967 849//967
f 861//968 862//968 849//968
f 849//969 862//969 850//969
f 862//970 863//970 850//970
f 850//971 863//971 851//971
f 863//972 864//972 851//972
f 851//973 864//973 852//973
f 864//974 865//974 852//974
f 852//975 865//975 853//975
f 865//976 866//976 853//976
f 853//977 866//977 854//977
f 866//978 867//978 854//978
f 854//979 867//979 855//979
f 867//980 868//980 855//980
f 855//981 868//981 400//981
f 868//982 401//982 400//982
f 431//983 869//983 856//983
f 869//984 870//984 856//984
f 856//985 870//985 857//985
f 870//986 871//986 857//986
f 857//987 871//987 858//987
f 871//988 872//988 858//988
f 858//989 872//989 859//989
f 872//990 873//990 859//990
f 859//991 873//991 860//991
f 873//992 874//992 860//992
f 860//993 874//993 861//993
f 874//994 875//994 861//994
f 861//995 875//995 862//995
f 875//996 876//996 862//996
f 862//997 876//997 863//997
f 876//998 877//998 863//998
f 863//999 877//999 864//999
f 877//1000 878//1000 864//1000
f 864//1001 878//1001 865//1001
f 878//1002 879//1002 865//1002
f 865//1003 879//1003 866//1003
f 879//1004 880//1004 866//1004
f 866//1005 880//1005 867//1005
f 880//1006 881//1006 867//1006
f 867//1007 881//1007 868//1007
f 881//1008 882//1008 868//1008
f 868//1009 882//1009 401//1009
f 882//1010 402//1010 401//1010
f 432//1011 342//1011 869//1011
f 342//1012 341//1012 869//1012
f 869//1013 341//1013 870//1013
f 341//1014 340//1014 870//1014
f 870//1015 340//1015 871//1015
f 340//1016 339//1016 871//1016
f 871//1017 339//1017 872//1017
f 339//1018 338//1018 872//1018
f 872//1019 338//1019 873//1019
f 338//1020 337//1020 873//1020
f 873//1021 337//1021 874//1021
f 337//1022 336//1022 874//1022
f 874//1023 336//1023 875//1023
f 336//1024 335//1024 875//1024
f 875//1025 335//1025 876//1025
f 335//1026 334//1026 876//1026
f 876//1027 334//1027 877//1027
f 334//1028 333//1028 877//1028
f 877//1029 333//1029 878//1029
f 333//1030 332//1030 878//1030
f 878//1031 332//1031 879//1031
f 332//1032 331//1032 879//1032
f 879//1033 331//1033 880//1033
f 331//1034 330//1034 880//1034
f 880//1035 330//1035 881//1035
f 330//1036 329//1036 881//1036
f 881//1037 329//1037 882//1037
f 329//1038 328//1038 882//1038
f 882//1039 328//1039 402//1039
f 328//1040 7//1040 402//1040
f 388//1041 417//1041 12//1041
f 389//1042 883//1042 388//1042
f 390//1043 884//1043 389//1043
f 391//1044 886//1044 390//1044
f 392//1045 889//1045 391//1045
f 393//1046 893//1046 392//1046
f 394//1047 898//1047 393//1047
f 395//1048 904//1048 394//1048
f 396//1049 911//1049 395//1049
f 397//1050 919//1050 396//1050
f 398//1051 928//1051 397//1051
f 399//1052 938//1052 398//1052
f 400//1053 949//1053 399//1053
f 401//1054 961//1054 400//1054
f 402//1055 974//1055 401//1055
f 388//1056 883//1056 417//1056
f 883//1057 416//1057 417//1057
f 389//1058 884//1058 883//1058
f 884//1059 885//1059 883//1059
f 883//1060 885//1060 416//1060
f 885//1061 415//1061 416//1061
f 390//1062 886//1062 884//1062
f 886//1063 887//1063 884//1063
f 884//1064 887//1064 885//1064
f 887//1065 888//1065 885//1065
f 885//1066 888//1066 415//1066
f 888//1067 414//1067 415//1067
f 391//1068 889//1068 886//1068
f 889//1069 890//1069 886//1069
f 886//1070 890//1070 887//1070
f 890//1071 891//1071 887//1071
f 887//1072 891//1072 888//1072
f 891//1073 892//1073 888//1073
f 888//1074 892//1074 414//1074
f 892//1075 413//1075 414//1075
f 392//1076 893//1076 889//1076
f 893//1077 894//1077 889//1077
f 889//1078 894//1078 890//1078
f 894//1079 895//1079 890//1079
f 890//1080 895//1080 891//1080
f 895//1081 896//1081 891//1081
f 891//1082 896//1082 892//1082
f 896//1083 897//1083 892//1083
f 892//1084 897//1084 413//1084
f 897//1085 412//1085 413//1085
f 393//1086 898//1086 893//1086
f 898//1087 899//1087 893//1087
f 893//1088 899//1088 894//1088
f 899//1089 900//1089 894//1089
f 894//1090 900//1090 895//1090
f 900//1091 901//1091 895//1091
f 895//1092 901//1092 896//1092
f 901//1093 902//1093 896//1093
f 896//1094 902//1094 897//1094
f 902//1095 903//1095 897//1095
f 897//1096 903//1096 412//1096
f 903//1097 411//1097 412//1097
f 394//1098 904//1098 898//1098
f 904//1099 905//1099 898//1099
f 898//1100 905//1100 899//1100
f 905//1101 906//1101 899//1101
f 899//1102 906//1102 900//1102
f 906//1103 907//1103 900//1103
f 900//1104 907//1104 901//1104
f 907//1105 908//1105 901//1105
f 901//1106 908//1106 902//1106
f 908//1107 909//1107 902//1107
f 902//1108 909//1108 903//1108
f 909//1109 910//1109 903//1109
f 903//1110 910//1110 411//1110
f 910//1111 410//1111 411//1111
f 395//1112 911//1112 904//1112
f 911//1113 912//1113 904//1113
f 904//1114 912//1114 905//1114
f 912//1115 913//1115 905//1115
f 905//1116 913//1116 906//1116
f 913//1117 914//1117 906//1117
f 906//1118 914//1118 907//1118
f 914//1119 915//1119 907//1119
f 907//1120 915//1120 908//1120
f 915//1121 916//1121 908//1121
f 908//1122 916//1122 909//1122
f 916//1123 917//1123 909//1123
f 909//1124 917//1124 910//1124
f 917//1125 918//1125 910//1125
f 910//1126 918//1126 410//1126
f 918//1127 409//1127 410//1127
f 396//1128 919//1128 911//1128
f 919//1129 920//1129 911//1129
f 911//1130 920//1130 912//1130
f 920//1131 921//1131 912//1131
f 912//1132 921//1132 913//1132
f 921//1133 922//1133 913//1133
f 913//1134 922//1134 914//1134
f 922//1135 923//1135 914//1135
f 914//1136 923//1136 915//1136
f 923//1137 924//1137 915//1137
f 915//1138 924//1138 916//1138
f 924//1139 925//1139 916//1139
f 916//1140 925//1140 917//1140
f 925//1141 926//1141 917//1141
f 917//1142 926//1142 918//1142
f 926//1143 927//1143 918//1143
f 918//1144 927//1144 409//1144
f 927//1145 408//1145 409//1145
f 397//1146 928//1146 919//1146
f 928//1147 929//1147 919//1147
f 919//1148 929//1148 920//1148
f 929//1149 930//1149 920//1149
f 920//1150 930//1150 921//1150
f 930//1151 931//1151 921//1151
f 921//1152 931//1152 922//1152
f 931//1153 932//1153 922//1153
f 922//1154 932//1154 923//1154
f 932//1155 933//1155 923//1155
f 923//1156 933//1156 924//1156
f 933//1157 934//1157 924//1157
f 924//1158 934//1158 925//1158
f 934//1159 935//1159 925//1159
f 925//1160 935//1160 926//1160
f 935//1161 936//1161 926//1161
f 926//1162 936//1162 927//1162
f 936//1163 937//1163 927//1163
f 927//1164 937//1164 408//1164
f 937//1165 407//1165 408//1165
f 398//1166 938//1166 928//1166
f 938//1167 939//1167 928//1167
f 928//1168 939//1168 929//1168
f 939//1169 940//1169 929//1169
f 929//1170 940//1170 930//1170
f 940//1171 941//1171 930//1171
f 930//1172 941//1172 931//1172
f 941//1173 942//1173 931//1173
f 931//1174 942//1174 932//1174
f 942//1175 943//1175 932//1175
f 932//1176 943//1176 933//1176
f 943//1177 944//1177 933//1177
f 933//1178 944//1178 934//1178
f 944//1179 945//1179 934//1179
f 934//1180 945//1180 935//1180
f 945//1181 946//1181 935//1181
f 935//1182 946//1182 936//1182
f 946//1183 947//1183 936//1183
f 936//1184 947//1184 937//1184
f 947//1185 948//1185 937//1185
f 937//1186 948//1186 407//1186
f 948//1187 406//1187 407//1187
f 399//1188 949//1188 938//1188
f 949//1189 950//1189 938//1189
f 938//1190 950//1190 939//1190
f 950//1191 951//1191 939//1191
f 939//1192 951//1192 940//1192
f 951//1193 952//1193 940//1193
f 940//1194 952//1194 941//1194
f 952//1195 953//1195 941//1195
f 941//1196 953//1196 942//1196
f 953//1197 954//1197 942//1197
f 942//1198 954//1198 943//1198
f 954//1199 955//1199 943//1199
f 943//1200 955//1200 944//1200
f 955//1201 956//1201 944//1201
f 944//1202 956//1202 945//1202
f 956//1203 957//1203 945//1203
f 945//1204 957//1204 946//1204
f 957//1205 958//1205 946//1205
f 946//1206 958//1206 947//1206
f 958//1207 959//1207 947//1207
f 947//1208 959//1208 948//1208
f 959//1209 960//1209 948//1209
f 948//1210 960//1210 406//1210
f 960//1211 405//1211 406//1211
f 400//1212 961//1212 949//1212
f 961//1213 962//1213 949//1213
f 949//1214 962//1214 950//1214
f 962//1215 963//1215 950//1215
f 950//1216 963//1216 951//1216
f 963//1217 964//1217 951//1217
f 951//1218 964//1218 952//1218
f 964//1219 965//1219 952//1219
f 952//1220 965//1220 953//1220
f 965//1221 966//1221 953//1221
f 953//1222 966//1222 954//1222
f 966//1223 967//1223 954//1223
f 954//1224 967//1224 955//1224
f 967//1225 968//1225 955//1225
f 955//1226 968//1226 956//1226
f 968//1227 969//1227 956//1227
f 956//1228 969//1228 957//1228
f 969//1229 970//1229 957//1229
f 957//1230 970//1230 958//1230
f 970//1231 971//1231 958//1231
f 958//1232 971//1232 959//1232
f 971//1233 972//1233 959//1233
f 959//1234 972//1234 960//1234
f 972//1235 973//1235 960//1235
f 960//1236 973//1236 405//1236
f 973//1237 404//1237 405//1237
f 401//1238 974//1238 961//1238
f 974//1239 975//1239 961//1239
f 961//1240 975//1240 962//1240
f 975//1241 976//1241 962//1241
f 962//1242 976//1242 963//1242
f 976//1243 977//1243 963//1243
f 963//1244 977//1244 964//1244
f 977//1245 978//1245 964//1245
f 964//1246 978//1246 965//1246
f 978//1247 979//1247 965//1247
f 965//1248 979//1248 966//1248
f 979//1249 980//1249 966//1249
f 966//1250 980//1250 967//1250
f 980//1251 981//1251 967//1251
f 967//1252 981//1252 968//1252
f 981//1253 982//1253 968//1253
f 968//1254 982//1254 969//1254
f 982//1255 983//1255 969//1255
f 969//1256 983//1256 970//1256
f 983//1257 984//1257 970//1257
f 970//1258 984//1258 971//1258
f 984//1259 985//1259 971//1259
f 971//1260 985//1260 972//1260
f 985//1261 986//1261 972//1261
f 972//1262 986//1262 973//1262
f 986//1263 987//1263 973//1263
f 973//1264 987//1264 404//1264
f 987//1265 403//1265 404//1265
f 402//1266 327//1266 974//1266
f 327//1267 326//1267 974//1267
f 974//1268 326//1268 975//1268
f 326//1269 325//1269 975//1269
f 975//1270 325//1270 976//1270
f 325//1271 324//1271 976//1271
f 976//1272 324//1272 977//1272
f 324//1273 323//1273 977//1273
f 977//1274 323//1274 978//1274
f 323//1275 322//1275 978//1275
f 978//1276 322//1276 979//1276
f 322//1277 321//1277 979//1277
f 979//1278 321//1278 980//1278
f 321//1279 320//1279 980//1279
f 980//1280 320//1280 981//1280
f 320//1281 319//1281 981//1281
f 981//1282 319//1282 982//1282
f 319//1283 318//1283 982//1283
f 982//1284 318//1284 983//1284
f 318//1285 317//1285 983//1285
f 983//1286 317//1286 984//1286
f 317//1287 316//1287 984//1287
f 984//1288 316//1288 985//1288
f 316//1289 315//1289 985//1289
f 985//1290 315//1290 986//1290
f 315//1291 314//1291 986//1291
f 986//1292 314//1292 987//1292
f 314//1293 313//1293 987//1293
f 987//1294 313//1294 403//1294
f 313//1295 11//1295 403//1295
f 192//1296 387//1296 11//1296
f 191//1297 988//1297 192//1297
f 190//1298 989//1298 191//1298
f 189//1299 991//1299 190//1299
f 188//1300 994//1300 189//1300
f 187//1301 998//1301 188//1301
f 186//1302 1003//1302 187//1302
f 185//1303 1009//1303 186//1303
f 184//1304 1016//1304 185//1304
f 183//1305 1024//1305 184//1305
f 182//1306 1033//1306 183//1306
f 181//1307 1043//1307 182//1307
f 180//1308 1054//1308 181//1308
f 179//1309 1066//1309 180//1309
f 178//1310 1079//1310 179//1310
f 192//1311 988//1311 387//1311
f 988//1312 386//1312 387//1312
f 191//1313 989//1313 988//1313
f 989//1314 990//1314 988//1314
f 988//1315 990//1315 386//1315
f 990//1316 385//1316 386//1316
f 190//1317 991//1317 989//1317
f 991//1318 992//1318 989//1318
f 989//1319 992//1319 990//1319
f 992//1320 993//1320 990//1320
f 990//1321 993//1321 385//1321
f 993//1322 384//1322 385//1322
f 189//1323 994//1323 991//1323
f 994//1324 995//1324 991//1324
f 991//1325 995//1325 992//1325
f 995//1326 996//1326 992//1326
f 992//1327 996//1327 993//1327
f 996//1328 997//1328 993//1328
f 993//1329 997//1329 384//1329
f 997//1330 383//1330 384//1330
f 188//1331 998//1331 994//1331
f 998//1332 999//1332 994//1332
f 994//1333 999//1333 995//1333
f 999//1334 1000//1334 995//1334
f 995//1335 1000//1335 996//1335
f 1000//1336 1001//1336 996//1336
f 996//1337 1001//1337 997//1337
f 1001//1338 1002//1338 997//1338
f 997//1339 1002//1339 383//1339
f 1002//1340 382//1340 383//1340
f 187//1341 1003//1341 998//1341
f 1003//1342 1004//1342 998//1342
f 998//1343 1004//1343 999//1343
f 1004//1344 1005//1344 999//1344
f 999//1345 1005//1345 1000//1345
f 1005//1346 1006//1346 1000//1346
f 1000//1347 1006//1347 1001//1347
f 1006//1348 1007//1348 1001//1348
f 1001//1349 1007//1349 1002//1349
f 1007//1350 1008//1350 1002//1350
f 1002//1351 1008//1351 382//1351
f 1008//1352 381//1352 382//1352
f 186//1353 1009//1353 1003//1353
f 1009//1354 1010//1354 1003//1354
f 1003//1355 1010//1355 1004//1355
f 1010//1356 1011//1356 1004//1356
f 1004//1357 1011//1357 1005//1357
f 1011//1358 1012//1358 1005//1358
f 1005//1359 1012//1359 1006//1359
f 1012//1360 1013//1360 1006//1360
f 1006//1361 1013//1361 1007//1361
f 1013//1362 1014//1362 1007//1362
f 1007//1363 1014//1363 1008//1363
f 1014//1364 1015//1364 1008//1364
f 1008//1365 1015//1365 381//1365
f 1015//1366 380//1366 381//1366
f 185//1367 1016//1367 1009//1367
f 1016//1368 1017//1368 1009//1368
f 1009//1369 1017//1369 1010//1369
f 1017//1370 1018//1370 1010//1370
f 1010//1371 1018//1371 1011//1371
f 1018//1372 1019//1372 1011//1372
f 1011//1373 1019//1373 1012//1373
f 1019//1374 1020//1374 1012//1374
f 1012//1375 1020//1375 1013//1375
f 1020//1376 1021//1376 1013//1376
f 1013//1377 1021//1377 1014//1377
f 1021//1378 1022//1378 1014//1378
f 1014//1379 1022//1379 1015//1379
f 1022//1380 1023//1380 1015//1380
f 1015//1381 1023//1381 380//1381
f 1023//1382 379//1382 380//1382
f 184//1383 1024//1383 1016//1383
f 1024//1384 1025//1384 1016//1384
f 1016//1385 1025//1385 1017//1385
f 1025//1386 1026//1386 1017//1386
f 1017//1387 1026//1387 1018//1387
f 1026//1388 1027//1388 1018//1388
f 1018//1389 1027//1389 1019//1389
f 1027//1390 1028//1390 1019//1390
f 1019//1391 1028//1391 1020//1391
f 1028//1392 1029//1392 1020//1392
f 1020//1393 1029//1393 1021//1393
f 1029//1394 1030//1394 1021//1394
f 1021//1395 1030//1395 1022//1395
f 1030//1396 1031//1396 1022//1396
f 1022//1397 1031//1397 1023//1397
f 1031//1398 1032//1398 1023//1398
f 1023//1399 1032//1399 379//1399
f 1032//1400 378//1400 379//1400
f 183//1401 1033//1401 1024//1401
f 1033//1402 1034//1402 1024//1402
f 1024//1403 1034//1403 1025//1403
f 1034//1404 1035//1404 1025//1404
f 1025//1405 1035//1405 1026//1405
f 1035//1406 1036//1406 1026//1406
f 1026//1407 1036//1407 1027//1407
f 1036//1408 1037//1408 1027//1408
f 1027//1409 1037//1409 1028//1409
f 1037//1410 1038//1410 1028//1410
f 1028//1411 1038//1411 1029//1411
f 1038//1412 1039//1412 1029//1412
f 1029//1413 1039//1413 1030//1413
f 1039//1414 1040//1414 1030//1414
f 1030//1415 1040//1415 1031//1415
f 1040//1416 1041//1416 1031//1416
f 1031//1417 1041//1417 1032//1417
f 1041//1418 1042//1418 1032//1418
f 1032//1419 1042//1419 378//1419
f 1042//1420 377//1420 378//1420
f 182//1421 1043//1421 1033//1421
f 1043//1422 1044//1422 1033//1422
f 1033//1423 1044//1423 1034//1423
f 1044//1424 1045//1424 1034//1424
f 1034//1425 1045//1425 1035//1425
f 1045//1426 1046//1426 1035//1426
f 1035//1427 1046//1427 1036//1427
f 1046//1428 1047//1428 1036//1428
f 1036//1429 1047//1429 1037//1429
f 1047//1430 1048//1430 1037//1430
f 1037//1431 1048//1431 1038//1431
f 1048//1432 1049//1432 1038//1432
f 1038//1433 1049//1433 1039//1433
f 1049//1434 1050//1434 1039//1434
f 1039//1435 1050//1435 1040//1435
f 1050//1436 1051//1436 1040//1436
f 1040//1437 1051//1437 1041//1437
f 1051//1438 1052//1438 1041//1438
f 1041//1439 1052//1439 1042//1439
f 1052//1440 1053//1440 1042//1440
f 1042//1441 1053//1441 377//1441
f 1053//1442 376//1442 377//1442
f 181//1443 1054//1443 1043//1443
f 1054//1444 1055//1444 1043//1444
f 1043//1445 1055//1445 1044//1445
f 1055//1446 1056//1446 1044//1446
f 1044//1447 1056//1447 1045//1447
f 1056//1448 1057//1448 1045//1448
f 1045//1449 1057//1449 1046//1449
f 1057//1450 1058//1450 1046//1450
f 1046//1451 1058//1451 1047//1451
f 1058//1452 1059//1452 1047//1452
f 1047//1453 1059//1453 1048//1453
f 1059//1454 1060//1454 1048//1454
f 1048//1455 1060//1455 1049//1455
f 1060//1456 1061//1456 1049//1456
f 1049//1457 1061//1457 1050//1457
f 1061//1458 1062//1458 1050//1458
f 1050//1459 1062//1459 1051//1459
f 1062//1460 1063//1460 1051//1460
f 1051//1461 1063//1461 1052//1461
f 1063//1462 1064//1462 1052//1462
f 1052//1463 1064//1463 1053//1463
f 1064//1464 1065//1464 1053//1464
f 1053//1465 1065//1465 376//1465
f 1065//1466 375//1466 376//1466
f 180//1467 1066//1467 1054//1467
f 1066//1468 1067//1468 1054//1468
f 1054//1469 1067//1469 1055//1469
f 1067//1470 1068//1470 1055//1470
f 1055//1471 1068//1471 1056//1471
f 1068//1472 1069//1472 1056//1472
f 1056//1473 1069//1473 1057//1473
f 1069//1474 1070//1474 1057//1474
f 1057//1475 1070//1475 1058//1475
f 1070//1476 1071//1476 1058//1476
f 1058//1477 1071//1477 1059//1477
f 1071//1478 1072//1478 1059//1478
f 1059//1479 1072//1479 1060//1479
f 1072//1480 1073//1480 1060//1480
f 1060//1481 1073//1481 1061//1481
f 1073//1482 1074//1482 1061//1482
f 1061//1483 1074//1483 1062//1483
f 1074//1484 1075//1484 1062//1484
f 1062//1485 1075//1485 1063//1485
f 1075//1486 1076//1486 1063//1486
f 1063//1487 1076//1487 1064//1487
f 1076//1488 1077//1488 1064//1488
f 1064//1489 1077//1489 1065//1489
f 1077//1490 1078//1490 1065//1490
f 1065//1491 1078//1491 375//1491
f 1078//1492 374//1492 375//1492
f 179//1493 1079//1493 1066//1493
f 1079//1494 1080//1494 1066//1494
f 1066//1495 1080//1495 1067//1495
f 1080//1496 1081//1496 1067//1496
f 1067//1497 1081//1497 1068//1497
f 1081//1498 1082//1498 1068//1498
f 1068//1499 1082//1499 1069//1499
f 1082//1500 1083//1500 1069//1500
f 1069//1501 1083//1501 1070//1501
f 1083//1502 1084//1502 1070//1502
f 1070//1503 1084//1503 1071//1503
f 1084//1504 1085//1504 1071//1504
f 1071//1505 1085//1505 1072//1505
f 1085//1506 1086//1506 1072//1506
f 1072//1507 1086//1507 1073//1507
f 1086//1508 1087//1508 1073//1508
f 1073//1509 1087//1509 1074//1509
f 1087//1510 1088//1510 1074//1510
f 1074//1511 1088//1511 1075//1511
f 1088//1512 1089//1512 1075//1512
f 1075//1513 1089//1513 1076//1513
f 1089//1514 1090//1514 1076//1514
f 1076//1515 1090//1515 1077//1515
f 1090//1516 1091//1516 1077//1516
f 1077//1517 1091//1517 1078//1517
f 1091//1518 1092//1518 1078//1518
f 1078//1519 1092//1519 374//1519
f 1092//1520 373//1520 374//1520
f 178//1521 297//1521 1079//1521
f 297//1522 296//1522 1079//1522
f 1079//1523 296//1523 1080//1523
f 296//1524 295//1524 1080//1524
f 1080//1525 295//1525 1081//1525
f 295//1526 294//1526 1081//1526
f 1081//1527 294//1527 1082//1527
f 294//1528 293//1528 1082//1528
f 1082//1529 293//1529 1083//1529
f 293//1530 292//1530 1083//1530
f 1083//1531 292//1531 1084//1531
f 292//1532 291//1532 1084//1532
f 1084//1533 291//1533 1085//1533
f 291//1534 290//1534 1085//1534
f 1085//1535 290//1535 1086//1535
f 290//1536 289//1536 1086//1536
f 1086//1537 289//1537 1087//1537
f 289//1538 288//1538 1087//1538
f 1087//1539 288//1539 1088//1539
f 288//1540 287//1540 1088//1540
f 1088//1541 287//1541 1089//1541
f 287//1542 286//1542 1089//1542
f 1089//1543 286//1543 1090//1543
f 286//1544 285//1544 1090//1544
f 1090//1545 285//1545 1091//1545
f 285//1546 284//1546 1091//1546
f 1091//1547 284//1547 1092//1547
f 284//1548 283//1548 1092//1548
f 1092//1549 283//1549 373//1549
f 283//1550 10//1550 373//1550
f 312//1551 372//1551 10//1551
f 311//1552 1093//1552 312//1552
f 310//1553 1094//1553 311//1553
f 309//1554 1096//1554 310//1554
f 308//1555 1099//1555 309//1555
f 307//1556 1103//1556 308//1556
f 306//1557 1108//1557 307//1557
f 305//1558 1114//1558 306//1558
f 304//1559 1121//1559 305//1559
f 303//1560 1129//1560 304//1560
f 302//1561 1138//1561 303//1561
f 301//1562 1148//1562 302//1562
f 300//1563 1159//1563 301//1563
f 299//1564 1171//1564 300//1564
f 298//1565 1184//1565 299//1565
f 312//1566 1093//1566 372//1566
f 1093//1567 371//1567 372//1567
f 311//1568 1094//1568 1093//1568
f 1094//1569 1095//1569 1093//1569
f 1093//1570 1095//1570 371//1570
f 1095//1571 370//1571 371//1571
f 310//1572 1096//1572 1094//1572
f 1096//1573 1097//1573 1094//1573
f 1094//1574 1097//1574 1095//1574
f 1097//1575 1098//1575 1095//1575
f 1095//1576 1098//1576 370//1576
f 1098//1577 369//1577 370//1577
f 309//1578 1099//1578 1096//1578
f 1099//1579 1100//1579 1096//1579
f 1096//1580 1100//1580 1097//1580
f 1100//1581 1101//1581 1097//1581
f 1097//1582 1101//1582 1098//1582
f 1101//1583 1102//1583 1098//1583
f 1098//1584 1102//1584 369//1584
f 1102//1585 368//1585 369//1585
f 308//1586 1103//1586 1099//1586
f 1103//1587 1104//1587 1099//1587
f 1099//1588 1104//1588 1100//1588
f 1104//1589 1105//1589 1100//1589
f 1100//1590 1105//1590 1101//1590
f 1105//1591 1106//1591 1101//1591
f 1101//1592 1106//1592 1102//1592
f 1106//1593 1107//1593 1102//1593
f 1102//1594 1107//1594 368//1594
f 1107//1595 367//1595 368//1595
f 307//1596 1108//1596 1103//1596
f 1108//1597 1109//1597 1103//1597
f 1103//1598 1109//1598 1104//1598
f 1109//1599 1110//1599 1104//1599
f 1104//1600 1110//1600 1105//1600
f 1110//1601 1111//1601 1105//1601
f 1105//1602 1111//1602 1106//1602
f 1111//1603 1112//1603 1106//1603
f 1106//1604 1112//1604 1107//1604
f 1112//1605 1113//1605 1107//1605
f 1107//1606 1113//1606 367//1606
f 1113//1607 366//1607 367//1607
f 306//1608 1114//1608 1108//1608
f 1114//1609 1115//1609 1108//1609
f 1108//1610 1115//1610 1109//1610
f 1115//1611 1116//1611 1109//1611
f 1109//1612 1116//1612 1110//1612
f 1116//1613 1117//1613 1110//1613
f 1110//1614 1117//1614 1111//1614
f 1117//1615 1118//1615 1111//1615
f 1111//1616 1118//1616 1112//1616
f 1118//1617 1119//1617 1112//1617
f 1112//1618 1119//1618 1113//1618
f 1119//1619 1120//1619 1113//1619
f 1113//1620 1120//1620 366//1620
f 1120//1621 365//1621 366//1621
f 305//1622 1121//1622 1114//1622
f 1121//1623 1122//1623 1114//1623
f 1114//1624 1122//1624 1115//1624
f 1122//1625 1123//1625 1115//1625
f 1115//1626 1123//1626 1116//1626
f 1123//1627 1124//1627 1116//1627
f 1116//1628 1124//1628 1117//1628
f 1124//1629 1125//1629 1117//1629
f 1117//1630 1125//1630 1118//1630
f 1125//1631 1126//1631 1118//1631
f 1118//1632 1126//1632 1119//1632
f 1126//1633 1127//1633 1119//1633
f 1119//1634 1127//1634 1120//1634
f 1127//1635 1128//1635 1120//1635
f 1120//1636 1128//1636 365//1636
f 1128//1637 364//1637 365//1637
f 304//1638 1129//1638 1121//1638
f 1129//1639 1130//1639 1121//1639
f 1121//1640 1130//1640 1122//1640
f 1130//1641 1131//1641 1122//1641
f 1122//1642 1131//1642 1123//1642
f 1131//1643 1132//1643 1123//1643
f 1123//1644 1132//1644 1124//1644
f 1132//1645 1133//1645 1124//1645
f 1124//1646 1133//1646 1125//1646
f 1133//1647 1134//1647 1125//1647
f 1125//1648 1134//1648 1126//1648
f 1134//1649 1135//1649 1126//1649
f 1126//1650 1135//1650 1127//1650
f 1135//1651 1136//1651 1127//1651
f 1127//1652 1136//1652 1128//1652
f 1136//1653 1137//1653 1128//1653
f 1128//1654 1137//1654 364//1654
f 1137//1655 363//1655 364//1655
f 303//1656 1138//1656 1129//1656
f 1138//1657 1139//1657 1129//1657
f 1129//1658 1139//1658 1130//1658
f 1139//1659 1140//1659 1130//1659
f 1130//1660 1140//1660 1131//1660
f 1140//1661 1141//1661 1131//1661
f 1131//1662 1141//1662 1132//1662
f 1141//1663 1142//1663 1132//1663
f 1132//1664 1142//1664 1133//1664
f 1142//1665 1143//1665 1133//1665
f 1133//1666 1143//1666 1134//1666
f 1143//1667 1144//1667 1134//1667
f 1134//1668 1144//1668 1135//1668
f 1144//1669 1145//1669 1135//1669
f 1135//1670 1145//1670 1136//1670
f 1145//1671 1146//1671 1136//1671
f 1136//1672 1146//1672 1137//1672
f 1146//1673 1147//1673 1137//1673
f 1137//1674 1147//1674 363//1674
f 1147//1675 362//1675 363//1675
f 302//1676 1148//1676 1138//1676
f 1148//1677 1149//1677 1138//1677
f 1138//1678 1149//1678 1139//1678
f 1149//1679 1150//1679 1139//1679
f 1139//1680 1150//1680 1140//1680
f 1150//1681 1151//1681 1140//1681
f 1140//1682 1151//1682 1141//1682
f 1151//1683 1152//1683 1141//1683
f 1141//1684 1152//1684 1142//1684
f 1152//1685 1153//1685 1142//1685
f 1142//1686 1153//1686 1143//1686
f 1153//1687 1154//1687 1143//1687
f 1143//1688 1154//1688 1144//1688
f 1154//1689 1155//1689 1144//1689
f 1144//1690 1155//1690 1145//1690
f 1155//1691 1156//1691 1145//1691
f 1145//1692 1156//1692 1146//1692
f 1156//1693 1157//1693 1146//1693
f 1146//1694 1157//1694 1147//1694
f 1157//1695 1158//1695 1147//1695
f 1147//1696 1158//1696 362//1696
f 1158//1697 361//1697 362//1697
f 301//1698 1159//1698 1148//1698
f 1159//1699 1160//1699 1148//1699
f 1148//1700 1160//1700 1149//1700
f 1160//1701 1161//1701 1149//1701
f 1149//1702 1161//1702 1150//1702
f 1161//1703 1162//1703 1150//1703
f 1150//1704 1162//1704 1151//1704
f 1162//1705 1163//1705 1151//1705
f 1151//1706 1163//1706 1152//1706
f 1163//1707 1164//1707 1152//1707
f 1152//1708 1164//1708 1153//1708
f 1164//1709 1165//1709 1153//1709
f 1153//1710 1165//1710 1154//1710
f 1165//1711 1166//1711 1154//1711
f 1154//1712 1166//1712 1155//1712
f 1166//1713 1167//1713 1155//1713
f 1155//1714 1167//1714 1156//1714
f 1167//1715 1168//1715 1156//1715
f 1156//1716 1168//1716 1157//1716
f 1168//1717 1169//1717 1157//1717
f 1157//1718 1169//1718 1158//1718
f 1169//1719 1170//1719 1158//1719
f 1158//1720 1170//1720 361//1720
f 1170//1721 360//1721 361//1721
f 300//1722 1171//1722 1159//1722
f 1171//1723 1172//1723 1159//1723
f 1159//1724 1172//1724 1160//1724
f 1172//1725 1173//1725 1160//1725
f 1160//1726 1173//1726 1161//1726
f 1173//1727 1174//1727 1161//1727
f 1161//1728 1174//1728 1162//1728
f 1174//1729 1175//1729 1162//1729
f 1162//1730 1175//1730 1163//1730
f 1175//1731 1176//1731 1163//1731
f 1163//1732 1176//1732 1164//1732
f 1176//1733 1177//1733 1164//1733
f 1164//1734 1177//1734 1165//1734
f 1177//1735 1178//1735 1165//1735
f 1165//1736 1178//1736 1166//1736
f 1178//1737 1179//1737 1166//1737
f 1166//1738 1179//1738 1167//1738
f 1179//1739 1180//1739 1167//1739
f 1167//1740 1180//1740 1168//1740
f 1180//1741 1181//1741 1168//1741
f 1168//1742 1181//1742 1169//1742
f 1181//1743 1182//1743 1169//1743
f 1169//1744 1182//1744 1170//1744
f 1182//1745 1183//1745 1170//1745
f 1170//1746 1183//1746 360//1746
f 1183//1747 359//1747 360//1747
f 299//1748 1184//1748 1171//1748
f 1184//1749 1185//1749 1171//1749
f 1171//1750 1185//1750 1172//1750
f 1185//1751 1186//1751 1172//1751
f 1172//1752 1186//1752 1173//1752
f 1186//1753 1187//1753 1173//1753
f 1173//1754 1187//1754 1174//1754
f 1187//1755 1188//1755 1174//1755
f 1174//1756 1188//1756 1175//1756
f 1188//1757 1189//1757 1175//1757
f 1175//1758 1189//1758 1176//1758
f 1189//1759 1190//1759 1176//1759
f 1176//1760 1190//1760 1177//1760
f 1190//1761 1191//1761 1177//1761
f 1177//1762 1191//1762 1178//1762
f 1191//1763 1192//1763 1178//1763
f 1178//1764 1192//1764 1179//1764
f 1192//1765 1193//1765 1179//1765
f 1179//1766 1193//1766 1180//1766
f 1193//1767 1194//1767 1180//1767
f 1180//1768 1194//1768 1181//1768
f 1194//1769 1195//1769 1181//1769
f 1181//1770 1195//1770 1182//1770
f 1195//1771 1196//1771 1182//1771
f 1182//1772 1196//1772 1183//1772
f 1196//1773 1197//1773 1183//1773
f 1183//1774 1197//1774 359//1774
f 1197//1775 358//1775 359//1775
f 298//1776 267//1776 1184//1776
f 267//1777 266//1777 1184//1777
f 1184//1778 266//1778 1185//1778
f 266//1779 265//1779 1185//1779
f 1185//1780 265//1780 1186//1780
f 265//1781 264//1781 1186//1781
f 1186//1782 264//1782 1187//1782
f 264//1783 263//1783 1187//1783
f 1187//1784 263//1784 1188//1784
f 263//1785 262//1785 1188//1785
f 1188//1786 262//1786 1189//1786
f 262//1787 261//1787 1189//1787
f 1189//1788 261//1788 1190//1788
f 261//1789 260//1789 1190//1789
f 1190//1790 260//1790 1191//1790
f 260//1791 259//1791 1191//1791
f 1191//1792 259//1792 1192//1792
f 259//1793 258//1793 1192//1793
f 1192//1794 258//1794 1193//1794
f 258//1795 257//1795 1193//1795
f 1193//1796 257//1796 1194//1796
f 257//1797 256//1797 1194//1797
f 1194//1798 256//1798 1195//1798
f 256//1799 255//1799 1195//1799
f 1195//1800 255//1800 1196//1800
f 255//1801 254//1801 1196//1801
f 1196//1802 254//1802 1197//1802
f 254//1803 253//1803 1197//1803
f 1197//1804 253//1804 358//1804
f 253//1805 9//1805 358//1805
f 282//1806 357//1806 9//1806
f 281//1807 1198//1807 282//1807
f 280//1808 1199//1808 281//1808
f 279//1809 1201//1809 280//1809
f 278//1810 1204//1810 279//1810
f 277//1811 1208//1811 278//1811
f 276//1812 1213//1812 277//1812
f 275//1813 1219//1813 276//1813
f 274//1814 1226//1814 275//1814
f 273//1815 1234//1815 274//1815
f 272//1816 1243//1816 273//1816
f 271//1817 1253//1817 272//1817
f 270//1818 1264//1818 271//1818
f 269//1819 1276//1819 270//1819
f 268//1820 1289//1820 269//1820
f 282//1821 1198//1821 357//1821
f 1198//1822 356//1822 357//1822
f 281//1823 1199//1823 1198//1823
f 1199//1824 1200//1824 1198//1824
f 1198//1825 1200//1825 356//1825
f 1200//1826 355//1826 356//1826
f 280//1827 1201//1827 1199//1827
f 1201//1828 1202//1828 1199//1828
f 1199//1829 1202//1829 1200//1829
f 1202//1830 1203//1830 1200//1830
f 1200//1831 1203//1831 355//1831
f 1203//1832 354//1832 355//1832
f 279//1833 1204//1833 1201//1833
f 1204//1834 1205//1834 1201//1834
f 1201//1835 1205//1835 1202//1835
f 1205//1836 1206//1836 1202//1836
f 1202//1837 1206//1837 1203//1837
f 1206//1838 1207//1838 1203//1838
f 1203//1839 1207//1839 354//1839
f 1207//1840 353//1840 354//1840
f 278//1841 1208//1841 1204//1841
f 1208//1842 1209//1842 1204//1842
f 1204//1843 1209//1843 1205//1843
f 1209//1844 1210//1844 1205//1844
f 1205//1845 1210//1845 1206//1845
f 1210//1846 1211//1846 1206//1846
f 1206//1847 1211//1847 1207//1847
f 1211//1848 1212//1848 1207//1848
f 1207//1849 1212//1849 353//1849
f 1212//1850 352//1850 353//1850
f 277//1851 1213//1851 1208//1851
f 1213//1852 1214//1852 1208//1852
f 1208//1853 1214//1853 1209//1853
f 1214//1854 1215//1854 1209//1854
f 1209//1855 1215//1855 1210//1855
f 1215//1856 1216//1856 1210//1856
f 1210//1857 1216//1857 1211//1857
f 1216//1858 1217//1858 1211//1858
f 1211//1859 1217//1859 1212//1859
f 1217//1860 1218//1860 1212//1860
f 1212//1861 1218//1861 352//1861
f 1218//1862 351//1862 352//1862
f 276//1863 1219//1863 1213//1863
f 1219//1864 1220//1864 1213//1864
f 1213//1865 1220//1865 1214//1865
f 1220//1866 1221//1866 1214//1866
f 1214//1867 1221//1867 1215//1867
f 1221//1868 1222//1868 1215//1868
f 1215//1869 1222//1869 1216//1869
f 1222//1870 1223//1870 1216//1870
f 1216//1871 1223//1871 1217//1871
f 1223//1872 1224//1872 1217//1872
f 1217//1873 1224//1873 1218//1873
f 1224//1874 1225//1874 1218//1874
f 1218//1875 1225//1875 351//1875
f 1225//1876 350//1876 351//1876
f 275//1877 1226//1877 1219//1877
f 1226//1878 1227//1878 1219//1878
f 1219//1879 1227//1879 1220//1879
f 1227//1880 1228//1880 1220//1880
f 1220//1881 1228//1881 1221//1881
f 1228//1882 1229//1882 1221//1882
f 1221//1883 1229//1883 1222//1883
f 1229//1884 1230//1884 1222//1884
f 1222//1885 1230//1885 1223//1885
f 1230//1886 1231//1886 1223//1886
f 1223//1887 1231//1887 1224//1887
f 1231//1888 1232//1888 1224//1888
f 1224//1889 1232//1889 1225//1889
f 1232//1890 1233//1890 1225//1890
f 1225//1891 1233//1891 350//1891
f 1233//1892 349//1892 350//1892
f 274//1893 1234//1893 1226//1893
f 1234//1894 1235//1894 1226//1894
f 1226//1895 1235//1895 1227//1895
f 1235//1896 1236//1896 1227//1896
f 1227//1897 1236//1897 1228//1897
f 1236//1898 1237//1898 1228//1898
f 1228//1899 1237//1899 1229//1899
f 1237//1900 1238//1900 1229//1900
f 1229//1901 1238//1901 1230//1901
f 1238//1902 1239//1902 1230//1902
f 1230//1903 1239//1903 1231//1903
f 1239//1904 1240//1904 1231//1904
f 1231//1905 1240//1905 1232//1905
f 1240//1906 1241//1906 1232//1906
f 1232//1907 1241//1907 1233//1907
f 1241//1908 1242//1908 1233//1908
f 1233//1909 1242//1909 349//1909
f 1242//1910 348//1910 349//1910
f 273//1911 1243//1911 1234//1911
f 1243//1912 1244//1912 1234//1912
f 1234//1913 1244//1913 1235//1913
f 1244//1914 1245//1914 1235//1914
f 1235//1915 1245//1915 1236//1915
f 1245//1916 1246//1916 1236//1916
f 1236//1917 1246//1917 1237//1917
f 1246//1918 1247//1918 1237//1918
f 1237//1919 1247//1919 1238//1919
f 1247//1920 1248//1920 1238//1920
f 1238//1921 1248//1921 1239//1921
f 1248//1922 1249//1922 1239//1922
f 1239//1923 1249//1923 1240//1923
f 1249//1924 1250//1924 1240//1924
f 1240//1925 1250//1925 1241//1925
f 1250//1926 1251//1926 1241//1926
f 1241//1927 1251//1927 1242//1927
f 1251//1928 1252//1928 1242//1928
f 1242//1929 1252//1929 348//1929
f 1252//1930 347//1930 348//1930
f 272//1931 1253//1931 1243//1931
f 1253//1932 1254//1932 1243//1932
f 1243//1933 1254//1933 1244//1933
f 1254//1934 1255//1934 1244//1934
f 1244//1935 1255//1935 1245//1935
f 1255//1936 1256//1936 1245//1936
f 1245//1937 1256//1937 1246//1937
f 1256//1938 1257//1938 1246//1938
f 1246//1939 1257//1939 1247//1939
f 1257//1940 1258//1940 1247//1940
f 1247//1941 1258//1941 1248//1941
f 1258//1942 1259//1942 1248//1942
f 1248//1943 1259//1943 1249//1943
f 1259//1944 1260//1944 1249//1944
f 1249//1945 1260//1945 1250//1945
f 1260//1946 1261//1946 1250//1946
f 1250//1947 1261//1947 1251//1947
f 1261//1948 1262//1948 1251//1948
f 1251//1949 1262//1949 1252//1949
f 1262//1950 1263//1950 1252//1950
f 1252//1951 1263//1951 347//1951
f 1263//1952 346//1952 347//1952
f 271//1953 1264//1953 1253//1953
f 1264//1954 1265//1954 1253//1954
f 1253//1955 1265//1955 1254//1955
f 1265//1956 1266//1956 1254//1956
f 1254//1957 1266//1957 1255//1957
f 1266//1958 1267//1958 1255//1958
f 1255//1959 1267//1959 1256//1959
f 1267//1960 1268//1960 1256//1960
f 1256//1961 1268//1961 1257//1961
f 1268//1962 1269//1962 1257//1962
f 1257//1963 1269//1963 1258//1963
f 1269//1964 1270//1964 1258//1964
f 1258//1965 1270//1965 1259//1965
f 1270//1966 1271//1966 1259//1966
f 1259//1967 1271//1967 1260//1967
f 1271//1968 1272//1968 1260//1968
f 1260//1969 1272//1969 1261//1969
f 1272//1970 1273//1970 1261//1970
f 1261//1971 1273//1971 1262//1971
f 1273//1972 1274//1972 1262//1972
f 1262//1973 1274//1973 1263//1973
f 1274//1974 1275//1974 1263//1974
f 1263//1975 1275//1975 346//1975
f 1275//1976 345//1976 346//1976
f 270//1977 1276//1977 1264//1977
f 1276//1978 1277//1978 1264//1978
f 1264//1979 1277//1979 1265//1979
f 1277//1980 1278//1980 1265//1980
f 1265//1981 1278//1981 1266//1981
f 1278//1982 1279//1982 1266//1982
f 1266//1983 1279//1983 1267//1983
f 1279//1984 1280//1984 1267//1984
f 1267//1985 1280//1985 1268//1985
f 1280//1986 1281//1986 1268//1986
f 1268//1987 1281//1987 1269//1987
f 1281//1988 1282//1988 1269//1988
f 1269//1989 1282//1989 1270//1989
f 1282//1990 1283//1990 1270//1990
f 1270//1991 1283//1991 1271//1991
f 1283//1992 1284//1992 1271//1992
f 1271//1993 1284//1993 1272//1993
f 1284//1994 1285//1994 1272//1994
f 1272//1995 1285//1995 1273//1995
f 1285//1996 1286//1996 1273//1996
f 1273//1997 1286//1997 1274//1997
f 1286//1998 1287//1998 1274//1998
f 1274//1999 1287//1999 1275//1999
f 1287//2000 1288//2000 1275//2000
f 1275//2001 1288//2001 345//2001
f 1288//2002 344//2002 345//2002
f 269//2003 1289//2003 1276//2003
f 1289//2004 1290//2004 1276//2004
f 1276//2005 1290//2005 1277//2005
f 1290//2006 1291//2006 1277//2006
f 1277//2007 1291//2007 1278//2007
f 1291//2008 1292//2008 1278//2008
f 1278//2009 1292//2009 1279//2009
f 1292//2010 1293//2010 1279//2010
f 1279//2011 1293//2011 1280//2011
f 1293//2012 1294//2012 1280//2012
f 1280//2013 1294//2013 1281//2013
f 1294//2014 1295//2014 1281//2014
f 1281//2015 1295//2015 1282//2015
f 1295//2016 1296//2016 1282//2016
f 1282//2017 1296//2017 1283//2017
f 1296//2018 1297//2018 1283//2018
f 1283//2019 1297//2019 1284//2019
f 1297//2020 1298//2020 1284//2020
f 1284//2021 1298//2021 1285//2021
f 1298//2022 1299//2022 1285//2022
f 1285//2023 1299//2023 1286//2023
f 1299//2024 1300//2024 1286//2024
f 1286//2025 1300//2025 1287//2025
f 1300//2026 1301//2026 1287//2026
f 1287//2027 1301//2027 1288//2027
f 1301//2028 1302//2028 1288//2028
f 1288//2029 1302//2029 344//2029
f 1302//2030 343//2030 344//2030
f 268//2031 237//2031 1289//2031
f 237//2032 236//2032 1289//2032
f 1289//2033 236//2033 1290//2033
f 236//2034 235//2034 1290//2034
f 1290//2035 235//2035 1291//2035
f 235//2036 234//2036 1291//2036
f 1291//2037 234//2037 1292//2037
f 234//2038 233//2038 1292//2038
f 1292//2039 233//2039 1293//2039
f 233//2040 232//2040 1293//2040
f 1293//2041 232//2041 1294//2041
f 232//2042 231//2042 1294//2042
f 1294//2043 231//2043 1295//2043
f 231//2044 230//2044 1295//2044
f 1295//2045 230//2045 1296//2045
f 230//2046 229//2046 1296//2046
f 1296//2047 229//2047 1297//2047
f 229//2048 228//2048 1297//2048
f 1297//2049 228//2049 1298//2049
f 228//2050 227//2050 1298//2050
f 1298//2051 227//2051 1299//2051
f 227//2052 226//2052 1299//2052
f 1299//2053 226//2053 1300//2053
f 226//2054 225//2054 1300//2054
f 1300//2055 225//2055 1301//2055
f 225//2056 224//2056 1301//2056
f 1301//2057 224//2057 1302//2057
f 224//2058 223//2058 1302//2058
f 1302//2059 223//2059 343//2059
f 223//2060 8//2060 343//2060
f 252//2061 342//2061 8//2061
f 251//2062 1303//2062 252//2062
f 250//2063 1304//2063 251//2063
f 249//2064 1306//2064 250//2064
f 248//2065 1309//2065 249//2065
f 247//2066 1313//2066 248//2066
f 246//2067 1318//2067 247//2067
f 245//2068 1324//2068 246//2068
f 244//2069 1331//2069 245//2069
f 243//2070 1339//2070 244//2070
f 242//2071 1348//2071 243//2071
f 241//2072 1358//2072 242//2072
f 240//2073 1369//2073 241//2073
f 239//2074 1381//2074 240//2074
f 238//2075 1394//2075 239//2075
f 252//2076 1303//2076 342//2076
f 1303//2077 341//2077 342//2077
f 251//2078 1304//2078 1303//2078
f 1304//2079 1305//2079 1303//2079
f 1303//2080 1305//2080 341//2080
f 1305//2081 340//2081 341//2081
f 250//2082 1306//2082 1304//2082
f 1306//2083 1307//2083 1304//2083
f 1304//2084 1307//2084 1305//2084
f 1307//2085 1308//2085 1305//2085
f 1305//2086 1308//2086 340//2086
f 1308//2087 339//2087 340//2087
f 249//2088 1309//2088 1306//2088
f 1309//2089 1310//2089 1306//2089
f 1306//2090 1310//2090 1307//2090
f 1310//2091 1311//2091 1307//2091
f 1307//2092 1311//2092 1308//2092
f 1311//2093 1312//2093 1308//2093
f 1308//2094 1312//2094 339//2094
f 1312//2095 338//2095 339//2095
f 248//2096 1313//2096 1309//2096
f 1313//2097 1314//2097 1309//2097
f 1309//2098 1314//2098 1310//2098
f 1314//2099 1315//2099 1310//2099
f 1310//2100 1315//2100 1311//2100
f 1315//2101 1316//2101 1311//2101
f 1311//2102 1316//2102 1312//2102
f 1316//2103 1317//2103 1312//2103
f 1312//2104 1317//2104 338//2104
f 1317//2105 337//2105 338//2105
f 247//2106 1318//2106 1313//2106
f 1318//2107 1319//2107 1313//2107
f 1313//2108 1319//2108 1314//2108
f 1319//2109 1320//2109 1314//2109
f 1314//2110 1320//2110 1315//2110
f 1320//2111 1321//2111 1315//2111
f 1315//2112 1321//2112 1316//2112
f 1321//2113 1322//2113 1316//2113
f 1316//2114 1322//2114 1317//2114
f 1322//2115 1323//2115 1317//2115
f 1317//2116 1323//2116 337//2116
f 1323//2117 336//2117 337//2117
f 246//2118 1324//2118 1318//2118
f 1324//2119 1325//2119 1318//2119
f 1318//2120 1325//2120 1319//2120
f 1325//2121 1326//2121 1319//2121
f 1319//2122 1326//2122 1320//2122
f 1326//2123 1327//2123 1320//2123
f 1320//2124 1327//2124 1321//2124
f 1327//2125 1328//2125 1321//2125
f 1321//2126 1328//2126 1322//2126
f 1328//2127 1329//2127 1322//2127
f 1322//2128 1329//2128 1323//2128
f 1329//2129 1330//2129 1323//2129
f 1323//2130 1330//2130 336//2130
f 1330//2131 335//2131 336//2131
f 245//2132 1331//2132 1324//2132
f 1331//2133 1332//2133 1324//2133
f 1324//2134 1332//2134 1325//2134
f 1332//2135 1333//2135 1325//2135
f 1325//2136 1333//2136 1326//2136
f 1333//2137 1334//2137 1326//2137
f 1326//2138 1334//2138 1327//2138
f 1334//2139 1335//2139 1327//2139
f 1327//2140 1335//2140 1328//2140
f 1335//2141 1336//2141 1328//2141
f 1328//2142 1336//2142 1329//2142
f 1336//2143 1337//2143 1329//2143
f 1329//2144 1337//2144 1330//2144
f 1337//2145 1338//2145 1330//2145
f 1330//2146 1338//2146 335//2146
f 1338//2147 334//2147 335//2147
f 244//2148 1339//2148 1331//2148
f 1339//2149 1340//2149 1331//2149
f 1331//2150 1340//2150 1332//2150
f 1340//2151 1341//2151 1332//2151
f 1332//2152 1341//2152 1333//2152
f 1341//2153 1342//2153 1333//2153
f 1333//2154 1342//2154 1334//2154
f 1342//2155 1343//2155 1334//2155
f 1334//2156 1343//2156 1335//2156
f 1343//2157 1344//2157 1335//2157
f 1335//2158 1344//2158 1336//2158
f 1344//2159 1345//2159 1336//2159
f 1336//2160 1345//2160 1337//2160
f 1345//2161 1346//2161 1337//2161
f 1337//2162 1346//2162 1338//2162
f 1346//2163 1347//2163 1338//2163
f 1338//2164 1347//2164 334//2164
f 1347//2165 333//2165 334//2165
f 243//2166 1348//2166 1339//2166
f 1348//2167 1349//2167 1339//2167
f 1339//2168 1349//2168 1340//2168
f 1349//2169 1350//2169 1340//2169
f 1340//2170 1350//2170 1341//2170
f 1350//2171 1351//2171 1341//2171
f 1341//2172 1351//2172 1342//2172
f 1351//2173 1352//2173 1342//2173
f 1342//2174 1352//2174 1343//2174
f 1352//2175 1353//2175 1343//2175
f 1343//2176 1353//2176 1344//2176
f 1353//2177 1354//2177 1344//2177
f 1344//2178 1354//2178 1345//2178
f 1354//2179 1355//2179 1345//2179
f 1345//2180 1355//2180 1346//2180
f 1355//2181 1356//2181 1346//2181
f 1346//2182 1356//2182 1347//2182
f 1356//2183 1357//2183 1347//2183
f 1347//2184 1357//2184 333//2184
f 1357//2185 332//2185 333//2185
f 242//2186 1358//2186 1348//2186
f 1358//2187 1359//2187 1348//2187
f 1348//2188 1359//2188 1349//2188
f 1359//2189 1360//2189 1349//2189
f 1349//2190 1360//2190 1350//2190
f 1360//2191 1361//2191 1350//2191
f 1350//2192 1361//2192 1351//2192
f 1361//2193 1362//2193 1351//2193
f 1351//2194 1362//2194 1352//2194
f 1362//2195 1363//2195 1352//2195
f 1352//2196 1363//2196 1353//2196
f 1363//2197 1364//2197 1353//2197
f 1353//2198 1364//2198 1354//2198
f 1364//2199 1365//2199 1354//2199
f 1354//2200 1365//2200 1355//2200
f 1365//2201 1366//2201 1355//2201
f 1355//2202 1366//2202 1356//2202
f 1366//2203 1367//2203 1356//2203
f 1356//2204 1367//2204 1357//2204
f 1367//2205 1368//2205 1357//2205
f 1357//2206 1368//2206 332//2206
f 1368//2207 331//2207 332//2207
f 241//2208 1369//2208 1358//2208
f 1369//2209 1370//2209 1358//2209
f 1358//2210 1370//2210 1359//2210
f 1370//2211 1371//2211 1359//2211
f 1359//2212 1371//2212 1360//2212
f 1371//2213 1372//2213 1360//2213
f 1360//2214 1372//2214 1361//2214
f 1372//2215 1373//2215 1361//2215
f 1361//2216 1373//2216 1362//2216
f 1373//2217 1374//2217 1362//2217
f 1362//2218 1374//2218 1363//2218
f 1374//2219 1375//2219 1363//2219
f 1363//2220 1375//2220 1364//2220
f 1375//2221 1376//2221 1364//2221
f 1364//2222 1376//2222 1365//2222
f 1376//2223 1377//2223 1365//2223
f 1365//2224 1377//2224 1366//2224
f 1377//2225 1378//2225 1366//2225
f 1366//2226 1378//2226 1367//2226
f 1378//2227 1379//2227 1367//2227
f 1367//2228 1379//2228 1368//2228
f 1379//2229 1380//2229 1368//2229
f 1368//2230 1380//2230 331//2230
f 1380//2231 330//2231 331//2231
f 240//2232 1381//2232 1369//2232
f 1381//2233 1382//2233 1369//2233
f 1369//2234 1382//2234 1370//2234
f 1382//2235 1383//2235 1370//2235
f 1370//2236 1383//2236 1371//2236
f 1383//2237 1384//2237 1371//2237
f 1371//2238 1384//2238 1372//2238
f 1384//2239 1385//2239 1372//2239
f 1372//2240 1385//2240 1373//2240
f 1385//2241 1386//2241 1373//2241
f 1373//2242 1386//2242 1374//2242
f 1386//2243 1387//2243 1374//2243
f 1374//2244 1387//2244 1375//2244
f 1387//2245 1388//2245 1375//2245
f 1375//2246 1388//2246 1376//2246
f 1388//2247 1389//2247 1376//2247
f 1376//2248 1389//2248 1377//2248
f 1389//2249 1390//2249 1377//2249
f 1377//2250 1390//2250 1378//2250
f 1390//2251 1391//2251 1378//2251
f 1378//2252 1391//2252 1379//2252
f 1391//2253 1392//2253 1379//2253
f 1379//2254 1392//2254 1380//2254
f 1392//2255 1393//2255 1380//2255
f 1380//2256 1393//2256 330//2256
f 1393//2257 329//2257 330//2257
f 239//2258 1394//2258 1381//2258
f 1394//2259 1395//2259 1381//2259
f 1381//2260 1395//2260 1382//2260
f 1395//2261 1396//2261 1382//2261
f 1382//2262 1396//2262 1383//2262
f 1396//2263 1397//2263 1383//2263
f 1383//2264 1397//2264 1384//2264
f 1397//2265 1398//2265 1384//2265
f 1384//2266 1398//2266 1385//2266
f 1398//2267 1399//2267 1385//2267
f 1385//2268 1399//2268 1386//2268
f 1399//2269 1400//2269 1386//2269
f 1386//2270 1400//2270 1387//2270
f 1400//2271 1401//2271 1387//2271
f 1387//2272 1401//2272 1388//2272
f 1401//2273 1402//2273 1388//2273
f 1388//2274 1402//2274 1389//2274
f 1402//2275 1403//2275 1389//2275
f 1389//2276 1403//2276 1390//2276
f 1403//2277 1404//2277 1390//2277
f 1390//2278 1404//2278 1391//2278
f 1404//2279 1405//2279 1391//2279
f 1391//2280 1405//2280 1392//2280
f 1405//2281 1406//2281 1392//2281
f 1392//2282 1406//2282 1393//2282
f 1406//2283 1407//2283 1393//2283
f 1393//2284 1407//2284 329//2284
f 1407//2285 328//2285 329//2285
f 238//2286 207//2286 1394//2286
f 207//2287 206//2287 1394//2287
f 1394//2288 206//2288 1395//2288
f 206//2289 205//2289 1395//2289
f 1395//2290 205//2290 1396//2290
f 205//2291 204//2291 1396//2291
f 1396//2292 204//2292 1397//2292
f 204//2293 203//2293 1397//2293
f 1397//2294 203//2294 1398//2294
f 203//2295 202//2295 1398//2295
f 1398//2296 202//2296 1399//2296
f 202//2297 201//2297 1399//2297
f 1399//2298 201//2298 1400//2298
f 201//2299 200//2299 1400//2299
f 1400//2300 200//2300 1401//2300
f 200//2301 199//2301 1401//2301
f 1401//2302 199//2302 1402//2302
f 199//2303 198//2303 1402//2303
f 1402//2304 198//2304 1403//2304
f 198//2305 197//2305 1403//2305
f 1403//2306 197//2306 1404//2306
f 197//2307 196//2307 1404//2307
f 1404//2308 196//2308 1405//2308
f 196//2309 195//2309 1405//2309
f 1405//2310 195//2310 1406//2310
f 195//2311 194//2311 1406//2311
f 1406//2312 194//2312 1407//2312
f 194//2313 193//2313 1407//2313
f 1407//2314 193//2314 328//2314
f 193//2315 7//2315 328//2315
f 222//2316 327//2316 7//2316
f 221//2317 1408//2317 222//2317
f 220//2318 1409//2318 221//2318
f 219//2319 1411//2319 220//2319
f 218//2320 1414//2320 219//2320
f 217//2321 1418//2321 218//2321
f 216//2322 1423//2322 217//2322
f 215//2323 1429//2323 216//2323
f 214//2324 1436//2324 215//2324
f 213//2325 1444//2325 214//2325
f 212//2326 1453//2326 213//2326
f 211//2327 1463//2327 212//2327
f 210//2328 1474//2328 211//2328
f 209//2329 1486//2329 210//2329
f 208//2330 1499//2330 209//2330
f 222//2331 1408//2331 327//2331
f 1408//2332 326//2332 327//2332
f 221//2333 1409//2333 1408//2333
f 1409//2334 1410//2334 1408//2334
f 1408//2335 1410//2335 326//2335
f 1410//2336 325//2336 326//2336
f 220//2337 1411//2337 1409//2337
f 1411//2338 1412//2338 1409//2338
f 1409//2339 1412//2339 1410//2339
f 1412//2340 1413//2340 1410//2340
f 1410//2341 1413//2341 325//2341
f 1413//2342 324//2342 325//2342
f 219//2343 1414//2343 1411//2343
f 1414//2344 1415//2344 1411//2344
f 1411//2345 1415//2345 1412//2345
f 1415//2346 1416//2346 1412//2346
f 1412//2347 1416//2347 1413//2347
f 1416//2348 1417//2348 1413//2348
f 1413//2349 1417//2349 324//2349
f 1417//2350 323//2350 324//2350
f 218//2351 1418//2351 1414//2351
f 1418//2352 1419//2352 1414//2352
f 1414//2353 1419//2353 1415//2353
f 1419//2354 1420//2354 1415//2354
f 1415//2355 1420//2355 1416//2355
f 1420//2356 1421//2356 1416//2356
f 1416//2357 1421//2357 1417//2357
f 1421//2358 1422//2358 1417//2358
f 1417//2359 1422//2359 323//2359
f 1422//2360 322//2360 323//2360
f 217//2361 1423//2361 1418//2361
f 1423//2362 1424//2362 1418//2362
f 1418//2363 1424//2363 1419//2363
f 1424//2364 1425//2364 1419//2364
f 1419//2365 1425//2365 1420//2365
f 1425//2366 1426//2366 1420//2366
f 1420//2367 1426//2367 1421//2367
f 1426//2368 1427//2368 1421//2368
f 1421//2369 1427//2369 1422//2369
f 1427//2370 1428//2370 1422//2370
f 1422//2371 1428//2371 322//2371
f 1428//2372 321//2372 322//2372
f 216//2373 1429//2373 1423//2373
f 1429//2374 1430//2374 1423//2374
f 1423//2375 1430//2375 1424//2375
f 1430//2376 1431//2376 1424//2376
f 1424//2377 1431//2377 1425//2377
f 1431//2378 1432//2378 1425//2378
f 1425//2379 1432//2379 1426//2379
f 1432//2380 1433//2380 1426//2380
f 1426//2381 1433//2381 1427//2381
f 1433//2382 1434//2382 1427//2382
f 1427//2383 1434//2383 1428//2383
f 1434//2384 1435//2384 1428//2384
f 1428//2385 1435//2385 321//2385
f 1435//2386 320//2386 321//2386
f 215//2387 1436//2387 1429//2387
f 1436//2388 1437//2388 1429//2388
f 1429//2389 1437//2389 1430//2389
f 1437//2390 1438//2390 1430//2390
f 1430//2391 1438//2391 1431//2391
f 1438//2392 1439//2392 1431//2392
f 1431//2393 1439//2393 1432//2393
f 1439//2394 1440//2394 1432//2394
f 1432//2395 1440//2395 1433//2395
f 1440//2396 1441//2396 1433//2396
f 1433//2397 1441//2397 1434//2397
f 1441//2398 1442//2398 1434//2398
f 1434//2399 1442//2399 1435//2399
f 1442//2400 1443//2400 1435//2400
f 1435//2401 1443//2401 320//2401
f 1443//2402 319//2402 320//2402
f 214//2403 1444//2403 1436//2403
f 1444//2404 1445//2404 1436//2404
f 1436//2405 1445//2405 1437//2405
f 1445//2406 1446//2406 1437//2406
f 1437//2407 1446//2407 1438//2407
f 1446//2408 1447//2408 1438//2408
f 1438//2409 1447//2409 1439//2409
f 1447//2410 1448//2410 1439//2410
f 1439//2411 1448//2411 1440//2411
f 1448//2412 1449//2412 1440//2412
f 1440//2413 1449//2413 1441//2413
f 1449//2414 1450//2414 1441//2414
f 1441//2415 1450//2415 1442//2415
f 1450//2416 1451//2416 1442//2416
f 1442//2417 1451//2417 1443//2417
f 1451//2418 1452//2418 1443//2418
f 1443//2419 1452//2419 319//2419
f 1452//2420 318//2420 319//2420
f 213//2421 1453//2421 1444//2421
f 1453//2422 1454//2422 1444//2422
f 1444//2423 1454//2423 1445//2423
f 1454//2424 1455//2424 1445//2424
f 1445//2425 1455//2425 1446//2425
f 1455//2426 1456//2426 1446//2426
f 1446//2427 1456//2427 1447//2427
f 1456//2428 1457//2428 1447//2428
f 1447//2429 1457//2429 1448//2429
f 1457//2430 1458//2430 1448//2430
f 1448//2431 1458//2431 1449//2431
f 1458//2432 1459//2432 1449//2432
f 1449//2433 1459//2433 1450//2433
f 1459//2434 1460//2434 1450//2434
f 1450//2435 1460//2435 1451//2435
f 1460//2436 1461//2436 1451//2436
f 1451//2437 1461//2437 1452//2437
f 1461//2438 1462//2438 1452//2438
f 1452//2439 1462//2439 318//2439
f 1462//2440 317//2440 318//2440
f 212//2441 1463//2441 1453//2441
f 1463//2442 1464//2442 1453//2442
f 1453//2443 1464//2443 1454//2443
f 1464//2444 1465//2444 1454//2444
f 1454//2445 1465//2445 1455//2445
f 1465//2446 1466//2446 1455//2446
f 1455//2447 1466//2447 1456//2447
f 1466//2448 1467//2448 1456//2448
f 1456//2449 1467//2449 1457//2449
f 1467//2450 1468//2450 1457//2450
f 1457//2451 1468//2451 1458//2451
f 1468//2452 1469//2452 1458//2452
f 1458//2453 1469//2453 1459//2453
f 1469//2454 1470//2454 1459//2454
f 1459//2455 1470//2455 1460//2455
f 1470//2456 1471//2456 1460//2456
f 1460//2457 1471//2457 1461//2457
f 1471//2458 1472//2458 1461//2458
f 1461//2459 1472//2459 1462//2459
f 1472//2460 1473//2460 1462//2460
f 1462//2461 1473//2461 317//2461
f 1473//2462 316//2462 317//2462
f 211//2463 1474//2463 1463//2463
f 1474//2464 1475//2464 1463//2464
f 1463//2465 1475//2465 1464//2465
f 1475//2466 1476//2466 1464//2466
f 1464//2467 1476//2467 1465//2467
f 1476//2468 1477//2468 1465//2468
f 1465//2469 1477//2469 1466//2469
f 1477//2470 1478//2470 1466//2470
f 1466//2471 1478//2471 1467//2471
f 1478//2472 1479//2472 1467//2472
f 1467//2473 1479//2473 1468//2473
f 1479//2474 1480//2474 1468//2474
f 1468//2475 1480//2475 1469//2475
f 1480//2476 1481//2476 1469//2476
f 1469//2477 1481//2477 1470//2477
f 1481//2478 1482//2478 1470//2478
f 1470//2479 1482//2479 1471//2479
f 1482//2480 1483//2480 1471//2480
f 1471//2481 1483//2481 1472//2481
f 1483//2482 1484//2482 1472//2482
f 1472//2483 1484//2483 1473//2483
f 1484//2484 1485//2484 1473//2484
f 1473//2485 1485//2485 316//2485
f 1485//2486 315//2486 316//2486
f 210//2487 1486//2487 1474//2487
f 1486//2488 1487//2488 1474//2488
f 1474//2489 1487//2489 1475//2489
f 1487//2490 1488//2490 1475//2490
f 1475//2491 1488//2491 1476//2491
f 1488//2492 1489//2492 1476//2492
f 1476//2493 1489//2493 1477//2493
f 1489//2494 1490//2494 1477//2494
f 1477//2495 1490//2495 1478//2495
f 1490//2496 1491//2496 1478//2496
f 1478//2497 1491//2497 1479//2497
f 1491//2498 1492//2498 1479//2498
f 1479//2499 1492//2499 1480//2499
f 1492//2500 1493//2500 1480//2500
f 1480//2501 1493//2501 1481//2501
f 1493//2502 1494//2502 1481//2502
f 1481//2503 1494//2503 1482//2503
f 1494//2504 1495//2504 1482//2504
f 1482//2505 1495//2505 1483//2505
f 1495//2506 1496//2506 1483//2506
f 1483//2507 1496//2507 1484//2507
f 1496//2508 1497//2508 1484//2508
f 1484//2509 1497//2509 1485//2509
f 1497//2510 1498//2510 1485//2510
f 1485//2511 1498//2511 315//2511
f 1498//2512 314//2512 315//2512
f 209//2513 1499//2513 1486//2513
f 1499//2514 1500//2514 1486//2514
f 1486//2515 1500//2515 1487//2515
f 1500//2516 1501//2516 1487//2516
f 1487//2517 1501//2517 1488//2517
f 1501//2518 1502//2518 1488//2518
f 1488//2519 1502//2519 1489//2519
f 1502//2520 1503//2520 1489//2520
f 1489//2521 1503//2521 1490//2521
f 1503//2522 1504//2522 1490//2522
f 1490//2523 1504//2523 1491//2523
f 1504//2524 1505//2524 1491//2524
f 1491//2525 1505//2525 1492//2525
f 1505//2526 1506//2526 1492//2526
f 1492//2527 1506//2527 1493//2527
f 1506//2528 1507//2528 1493//2528
f 1493//2529 1507//2529 1494//2529
f 1507//2530 1508//2530 1494//2530
f 1494//2531 1508//2531 1495//2531
f 1508//2532 1509//2532 1495//2532
f 1495//2533 1509//2533 1496//2533
f 1509//2534 1510//2534 1496//2534
f 1496//2535 1510//2535 1497//2535
f 1510//2536 1511//2536 1497//2536
f 1497//2537 1511//2537 1498//2537
f 1511//2538 1512//2538 1498//2538
f 1498//2539 1512//2539 314//2539
f 1512//2540 313//2540 314//2540
f 208//2541 177//2541 1499//2541
f 177//2542 176//2542 1499//2542
f 1499//2543 176//2543 1500//2543
f 176//2544 175//2544 1500//2544
f 1500//2545 175//2545 1501//2545
f 175//2546 174//2546 1501//2546
f 1501//2547 174//2547 1502//2547
f 174//2548 173//2548 1502//2548
f 1502//2549 173//2549 1503//2549
f 173//2550 172//2550 1503//2550
f 1503//2551 172//2551 1504//2551
f 172//2552 171//2552 1504//2552
f 1504//2553 171//2553 1505//2553
f 171//2554 170//2554 1505//2554
f 1505//2555 170//2555 1506//2555
f 170//2556 169//2556 1506//2556
f 1506//2557 169//2557 1507//2557
f 169//2558 168//2558 1507//2558
f 1507//2559 168//2559 1508//2559
f 168//2560 167//2560 1508//2560
f 1508//2561 167//2561 1509//2561
f 167//2562 166//2562 1509//2562
f 1509//2563 166//2563 1510//2563
f 166//2564 165//2564 1510//2564
f 1510//2565 165//2565 1511//2565
f 165//2566 164//2566 1511//2566
f 1511//2567 164//2567 1512//2567
f 164//2568 163//2568 1512//2568
f 1512//2569 163//2569 313//2569
f 163//2570 11//2570 313//2570
f 283//2571 312//2571 10//2571
f 284//2572 1513//2572 283//2572
f 285//2573 1514//2573 284//2573
f 286//2574 1516//2574 285//2574
f 287//2575 1519//2575 286//2575
f 288//2576 1523//2576 287//2576
f 289//2577 1528//2577 288//2577
f 290//2578 1534//2578 289//2578
f 291//2579 1541//2579 290//2579
f 292//2580 1549//2580 291//2580
f 293//2581 1558//2581 292//2581
f 294//2582 1568//2582 293//2582
f 295//2583 1579//2583 294//2583
f 296//2584 1591//2584 295//2584
f 297//2585 1604//2585 296//2585
f 283//2586 1513//2586 312//2586
f 1513//2587 311//2587 312//2587
f 284//2588 1514//2588 1513//2588
f 1514//2589 1515//2589 1513//2589
f 1513//2590 1515//2590 311//2590
f 1515//2591 310//2591 311//2591
f 285//2592 1516//2592 1514//2592
f 1516//2593 1517//2593 1514//2593
f 1514//2594 1517//2594 1515//2594
f 1517//2595 1518//2595 1515//2595
f 1515//2596 1518//2596 310//2596
f 1518//2597 309//2597 310//2597
f 286//2598 1519//2598 1516//2598
f 1519//2599 1520//2599 1516//2599
f 1516//2600 1520//2600 1517//2600
f 1520//2601 1521//2601 1517//2601
f 1517//2602 1521//2602 1518//2602
f 1521//2603 1522//2603 1518//2603
f 1518//2604 1522//2604 309//2604
f 1522//2605 308//2605 309//2605
f 287//2606 1523//2606 1519//2606
f 1523//2607 1524//2607 1519//2607
f 1519//2608 1524//2608 1520//2608
f 1524//2609 1525//2609 1520//2609
f 1520//2610 1525//2610 1521//2610
f 1525//2611 1526//2611 1521//2611
f 1521//2612 1526//2612 1522//2612
f 1526//2613 1527//2613 1522//2613
f 1522//2614 1527//2614 308//2614
f 1527//2615 307//2615 308//2615
f 288//2616 1528//2616 1523//2616
f 1528//2617 1529//2617 1523//2617
f 1523//2618 1529//2618 1524//2618
f 1529//2619 1530//2619 1524//2619
f 1524//2620 1530//2620 1525//2620
f 1530//2621 1531//2621 1525//2621
f 1525//2622 1531//2622 1526//2622
f 1531//2623 1532//2623 1526//2623
f 1526//2624 1532//2624 1527//2624
f 1532//2625 1533//2625 1527//2625
f 1527//2626 1533//2626 307//2626
f 1533//2627 306//2627 307//2627
f 289//2628 1534//2628 1528//2628
f 1534//2629 1535//2629 1528//2629
f 1528//2630 1535//2630 1529//2630
f 1535//2631 1536//2631 1529//2631
f 1529//2632 1536//2632 1530//2632
f 1536//2633 1537//2633 1530//2633
f 1530//2634 1537//2634 1531//2634
f 1537//2635 1538//2635 1531//2635
f 1531//2636 1538//2636 1532//2636
f 1538//2637 1539//2637 1532//2637
f 1532//2638 1539//2638 1533//2638
f 1539//2639 1540//2639 1533//2639
f 1533//2640 1540//2640 306//2640
f 1540//2641 305//2641 306//2641
f 290//2642 1541//2642 1534//2642
f 1541//2643 1542//2643 1534//2643
f 1534//2644 1542//2644 1535//2644
f 1542//2645 1543//2645 1535//2645
f 1535//2646 1543//2646 1536//2646
f 1543//2647 1544//2647 1536//2647
f 1536//2648 1544//2648 1537//2648
f 1544//2649 1545//2649 1537//2649
f 1537//2650 1545//2650 1538//2650
f 1545//2651 1546//2651 1538//2651
f 1538//2652 1546//2652 1539//2652
f 1546//2653 1547//2653 1539//2653
f 1539//2654 1547//2654 1540//2654
f 1547//2655 1548//2655 1540//2655
f 1540//2656 1548//2656 305//2656
f 1548//2657 304//2657 305//2657
f 291//2658 1549//2658 1541//2658
f 1549//2659 1550//2659 1541//2659
f 1541//2660 1550//2660 1542//2660
f 1550//2661 1551//2661 1542//2661
f 1542//2662 1551//2662 1543//2662
f 1551//2663 1552//2663 1543//2663
f 1543//2664 1552//2664 1544//2664
f 1552//2665 1553//2665 1544//2665
f 1544//2666 1553//2666 1545//2666
f 1553//2667 1554//2667 1545//2667
f 1545//2668 1554//2668 1546//2668
f 1554//2669 1555//2669 1546//2669
f 1546//2670 1555//2670 1547//2670
f 1555//2671 1556//2671 1547//2671
f 1547//2672 1556//2672 1548//2672
f 1556//2673 1557//2673 1548//2673
f 1548//2674 1557//2674 304//2674
f 1557//2675 303//2675 304//2675
f 292//2676 1558//2676 1549//2676
f 1558//2677 1559//2677 1549//2677
f 1549//2678 1559//2678 1550//2678
f 1559//2679 1560//2679 1550//2679
f 1550//2680 1560//2680 1551//2680
f 1560//2681 1561//2681 1551//2681
f 1551//2682 1561//2682 1552//2682
f 1561//2683 1562//2683 1552//2683
f 1552//2684 1562//2684 1553//2684
f 1562//2685 1563//2685 1553//2685
f 1553//2686 1563//2686 1554//2686
f 1563//2687 1564//2687 1554//2687
f 1554//2688 1564//2688 1555//2688
f 1564//2689 1565//2689 1555//2689
f 1555//2690 1565//2690 1556//2690
f 1565//2691 1566//2691 1556//2691
f 1556//2692 1566//2692 1557//2692
f 1566//2693 1567//2693 1557//2693
f 1557//2694 1567//2694 303//2694
f 1567//2695 302//2695 303//2695
f 293//2696 1568//2696 1558//2696
f 1568//2697 1569//2697 1558//2697
f 1558//2698 1569//2698 1559//2698
f 1569//2699 1570//2699 1559//2699
f 1559//2700 1570//2700 1560//2700
f 1570//2701 1571//2701 1560//2701
f 1560//2702 1571//2702 1561//2702
f 1571//2703 1572//2703 1561//2703
f 1561//2704 1572//2704 1562//2704
f 1572//2705 1573//2705 1562//2705
f 1562//2706 1573//2706 1563//2706
f 1573//2707 1574//2707 1563//2707
f 1563//2708 1574//2708 1564//2708
f 1574//2709 1575//2709 1564//2709
f 1564//2710 1575//2710 1565//2710
f 1575//2711 1576//2711 1565//2711
f 1565//2712 1576//2712 1566//2712
f 1576//2713 1577//2713 1566//2713
f 1566//2714 1577//2714 1567//2714
f 1577//2715 1578//2715 1567//2715
f 1567//2716 1578//2716 302//2716
f 1578//2717 301//2717 302//2717
f 294//2718 1579//2718 1568//2718
f 1579//2719 1580//2719 1568//2719
f 1568//2720 1580//2720 1569//2720
f 1580//2721 1581//2721 1569//2721
f 1569//2722 1581//2722 1570//2722
f 1581//2723 1582//2723 1570//2723
f 1570//2724 1582//2724 1571//2724
f 1582//2725 1583//2725 1571//2725
f 1571//2726 1583//2726 1572//2726
f 1583//2727 1584//2727 1572//2727
f 1572//2728 1584//2728 1573//2728
f 1584//2729 1585//2729 1573//2729
f 1573//2730 1585//2730 1574//2730
f 1585//2731 1586//2731 1574//2731
f 1574//2732 1586//2732 1575//2732
f 1586//2733 1587//2733 1575//2733
f 1575//2734 1587//2734 1576//2734
f 1587//2735 1588//2735 1576//2735
f 1576//2736 1588//2736 1577//2736
f 1588//2737 1589//2737 1577//2737
f 1577//2738 1589//2738 1578//2738
f 1589//2739 1590//2739 1578//2739
f 1578//2740 1590//2740 301//2740
f 1590//2741 300//2741 301//2741
f 295//2742 1591//2742 1579//2742
f 1591//2743 1592//2743 1579//2743
f 1579//2744 1592//2744 1580//2744
f 1592//2745 1593//2745 1580//2745
f 1580//2746 1593//2746 1581//2746
f 1593//2747 1594//2747 1581//2747
f 1581//2748 1594//2748 1582//2748
f 1594//2749 1595//2749 1582//2749
f 1582//2750 1595//2750 1583//2750
f 1595//2751 1596//2751 1583//2751
f 1583//2752 1596//2752 1584//2752
f 1596//2753 1597//2753 1584//2753
f 1584//2754 1597//2754 1585//2754
f 1597//2755 1598//2755 1585//2755
f 1585//2756 1598//2756 1586//2756
f 1598//2757 1599//2757 1586//2757
f 1586//2758 1599//2758 1587//2758
f 1599//2759 1600//2759 1587//2759
f 1587//2760 1600//2760 1588//2760
f 1600//2761 1601//2761 1588//2761
f 1588//2762 1601//2762 1589//2762
f 1601//2763 1602//2763 1589//2763
f 1589//2764 1602//2764 1590//2764
f 1602//2765 1603//2765 1590//2765
f 1590//2766 1603//2766 300//2766
f 1603//2767 299//2767 300//2767
f 296//2768 1604//2768 1591//2768
f 1604//2769 1605//2769 1591//2769
f 1591//2770 1605//2770 1592//2770
f 1605//2771 1606//2771 1592//2771
f 1592//2772 1606//2772 1593//2772
f 1606//2773 1607//2773 1593//2773
f 1593//2774 1607//2774 1594//2774
f 1607//2775 1608//2775 1594//2775
f 1594//2776 1608//2776 1595//2776
f 1608//2777 1609//2777 1595//2777
f 1595//2778 1609//2778 1596//2778
f 1609//2779 1610//2779 1596//2779
f 1596//2780 1610//2780 1597//2780
f 1610//2781 1611//2781 1597//2781
f 1597//2782 1611//2782 1598//2782
f 1611//2783 1612//2783 1598//2783
f 1598//2784 1612//2784 1599//2784
f 1612//2785 1613//2785 1599//2785
f 1599//2786 1613//2786 1600//2786
f 1613//2787 1614//2787 1600//2787
f 1600//2788 1614//2788 1601//2788
f 1614//2789 1615//2789 1601//2789
f 1601//2790 1615//2790 1602//2790
f 1615//2791 1616//2791 1602//2791
f 1602//2792 1616//2792 1603//2792
f 1616//2793 1617//2793 1603//2793
f 1603//2794 1617//2794 299//2794
f 1617//2795 298//2795 299//2795
f 297//2796 162//2796 1604//2796
f 162//2797 161//2797 1604//2797
f 1604//2798 161//2798 1605//2798
f 161//2799 160//2799 1605//2799
f 1605//2800 160//2800 1606//2800
f 160//2801 159//2801 1606//2801
f 1606//2802 159//2802 1607//2802
f 159//2803 158//2803 1607//2803
f 1607//2804 158//2804 1608//2804
f 158//2805 157//2805 1608//2805
f 1608//2806 157//2806 1609//2806
f 157//2807 156//2807 1609//2807
f 1609//2808 156//2808 1610//2808
f 156//2809 155//2809 1610//2809
f 1610//2810 155//2810 1611//2810
f 155//2811 154//2811 1611//2811
f 1611//2812 154//2812 1612//2812
f 154//2813 153//2813 1612//2813
f 1612//2814 153//2814 1613//2814
f 153//2815 152//2815 1613//2815
f 1613//2816 152//2816 1614//2816
f 152//2817 151//2817 1614//2817
f 1614//2818 151//2818 1615//2818
f 151//2819 150//2819 1615//2819
f 1615//2820 150//2820 1616//2820
f 150//2821 149//2821 1616//2821
f 1616//2822 149//2822 1617//2822
f 149//2823 148//2823 1617//2823
f 1617//2824 148//2824 298//2824
f 148//2825 5//2825 298//2825
f 253//2826 282//2826 9//2826
f 254//2827 1618//2827 253//2827
f 255//2828 1619//2828 254//2828
f 256//2829 1621//2829 255//2829
f 257//2830 1624//2830 256//2830
f 258//2831 1628//2831 257//2831
f 259//2832 1633//2832 258//2832
f 260//2833 1639//2833 259//2833
f 261//2834 1646//2834 260//2834
f 262//2835 1654//2835 261//2835
f 263//2836 1663//2836 262//2836
f 264//2837 1673//2837 263//2837
f 265//2838 1684//2838 264//2838
f 266//2839 1696//2839 265//2839
f 267//2840 1709//2840 266//2840
f 253//2841 1618//2841 282//2841
f 1618//2842 281//2842 282//2842
f 254//2843 1619//2843 1618//2843
f 1619//2844 1620//2844 1618//2844
f 1618//2845 1620//2845 281//2845
f 1620//2846 280//2846 281//2846
f 255//2847 1621//2847 1619//2847
f 1621//2848 1622//2848 1619//2848
f 1619//2849 1622//2849 1620//2849
f 1622//2850 1623//2850 1620//2850
f 1620//2851 1623//2851 280//2851
f 1623//2852 279//2852 280//2852
f 256//2853 1624//2853 1621//2853
f 1624//2854 1625//2854 1621//2854
f 1621//2855 1625//2855 1622//2855
f 1625//2856 1626//2856 1622//2856
f 1622//2857 1626//2857 1623//2857
f 1626//2858 1627//2858 1623//2858
f 1623//2859 1627//2859 279//2859
f 1627//2860 278//2860 279//2860
f 257//2861 1628//2861 1624//2861
f 1628//2862 1629//2862 1624//2862
f 1624//2863 1629//2863 1625//2863
f 1629//2864 1630//2864 1625//2864
f 1625//2865 1630//2865 1626//2865
f 1630//2866 1631//2866 1626//2866
f 1626//2867 1631//2867 1627//2867
f 1631//2868 1632//2868 1627//2868
f 1627//2869 1632//2869 278//2869
f 1632//2870 277//2870 278//2870
f 258//2871 1633//2871 1628//2871
f 1633//2872 1634//2872 1628//2872
f 1628//2873 1634//2873 1629//2873
f 1634//2874 1635//2874 1629//2874
f 1629//2875 1635//2875 1630//2875
f 1635//2876 1636//2876 1630//2876
f 1630//2877 1636//2877 1631//2877
f 1636//2878 1637//2878 1631//2878
f 1631//2879 1637//2879 1632//2879
f 1637//2880 1638//2880 1632//2880
f 1632//2881 1638//2881 277//2881
f 1638//2882 276//2882 277//2882
f 259//2883 1639//2883 1633//2883
f 1639//2884 1640//2884 1633//2884
f 1633//2885 1640//2885 1634//2885
f 1640//2886 1641//2886 1634//2886
f 1634//2887 1641//2887 1635//2887
f 1641//2888 1642//2888 1635//2888
f 1635//2889 1642//2889 1636//2889
f 1642//2890 1643//2890 1636//2890
f 1636//2891 1643//2891 1637//2891
f 1643//2892 1644//2892 1637//2892
f 1637//2893 1644//2893 1638//2893
f 1644//2894 1645//2894 1638//2894
f 1638//2895 1645//2895 276//2895
f 1645//2896 275//2896 276//2896
f 260//2897 1646//2897 1639//2897
f 1646//2898 1647//2898 1639//2898
f 1639//2899 1647//2899 1640//2899
f 1647//2900 1648//2900 1640//2900
f 1640//2901 1648//2901 1641//2901
f 1648//2902 1649//2902 1641//2902
f 1641//2903 1649//2903 1642//2903
f 1649//2904 1650//2904 1642//2904
f 1642//2905 1650//2905 1643//2905
f 1650//2906 1651//2906 1643//2906
f 1643//2907 1651//2907 1644//2907
f 1651//2908 1652//2908 1644//2908
f 1644//2909 1652//2909 1645//2909
f 1652//2910 1653//2910 1645//2910
f 1645//2911 1653//2911 275//2911
f 1653//2912 274//2912 275//2912
f 261//2913 1654//2913 1646//2913
f 1654//2914 1655//2914 1646//2914
f 1646//2915 1655//2915 1647//2915
f 1655//2916 1656//2916 1647//2916
f 1647//2917 1656//2917 1648//2917
f 1656//2918 1657//2918 1648//2918
f 1648//2919 1657//2919 1649//2919
f 1657//2920 1658//2920 1649//2920
f 1649//2921 1658//2921 1650//2921
f 1658//2922 1659//2922 1650//2922
f 1650//2923 1659//2923 1651//2923
f 1659//2924 1660//2924 1651//2924
f 1651//2925 1660//2925 1652//2925
f 1660//2926 1661//2926 1652//2926
f 1652//2927 1661//2927 1653//2927
f 1661//2928 1662//2928 1653//2928
f 1653//2929 1662//2929 274//2929
f 1662//2930 273//2930 274//2930
f 262//2931 1663//2931 1654//2931
f 1663//2932 1664//2932 1654//2932
f 1654//2933 1664//2933 1655//2933
f 1664//2934 1665//2934 1655//2934
f 1655//2935 1665//2935 1656//2935
f 1665//2936 1666//2936 1656//2936
f 1656//2937 1666//2937 1657//2937
f 1666//2938 1667//2938 1657//2938
f 1657//2939 1667//2939 1658//2939
f 1667//2940 1668//2940 1658//2940
f 1658//2941 1668//2941 1659//2941
f 1668//2942 1669//2942 1659//2942
f 1659//2943 1669//2943 1660//2943
f 1669//2944 1670//2944 1660//2944
f 1660//2945 1670//2945 1661//2945
f 1670//2946 1671//2946 1661//2946
f 1661//2947 1671//2947 1662//2947
f 1671//2948 1672//2948 1662//2948
f 1662//2949 1672//2949 273//2949
f 1672//2950 272//2950 273//2950
f 263//2951 1673//2951 1663//2951
f 1673//2952 1674//2952 1663//2952
f 1663//2953 1674//2953 1664//2953
f 1674//2954 1675//2954 1664//2954
f 1664//2955 1675//2955 1665//2955
f 1675//2956 1676//2956 1665//2956
f 1665//2957 1676//2957 1666//2957
f 1676//2958 1677//2958 1666//2958
f 1666//2959 1677//2959 1667//2959
f 1677//2960 1678//2960 1667//2960
f 1667//2961 1678//2961 1668//2961
f 1678//2962 1679//2962 1668//2962
f 1668//2963 1679//2963 1669//2963
f 1679//2964 1680//2964 1669//2964
f 1669//2965 1680//2965 1670//2965
f 1680//2966 1681//2966 1670//2966
f 1670//2967 1681//2967 1671//2967
f 1681//2968 1682//2968 1671//2968
f 1671//2969 1682//2969 1672//2969
f 1682//2970 1683//2970 1672//2970
f 1672//2971 1683//2971 272//2971
f 1683//2972 271//2972 272//2972
f 264//2973 1684//2973 1673//2973
f 1684//2974 1685//2974 1673//2974
f 1673//2975 1685//2975 1674//2975
f 1685//2976 1686//2976 1674//2976
f 1674//2977 1686//2977 1675//2977
f 1686//2978 1687//2978 1675//2978
f 1675//2979 1687//2979 1676//2979
f 1687//2980 1688//2980 1676//2980
f 1676//2981 1688//2981 1677//2981
f 1688//2982 1689//2982 1677//2982
f 1677//2983 1689//2983 1678//2983
f 1689//2984 1690//2984 1678//2984
f 1678//2985 1690//2985 1679//2985
f 1690//2986 1691//2986 1679//2986
f 1679//2987 1691//2987 1680//2987
f 1691//2988 1692//2988 1680//2988
f 1680//2989 1692//2989 1681//2989
f 1692//2990 1693//2990 1681//2990
f 1681//2991 1693//2991 1682//2991
f 1693//2992 1694//2992 1682//2992
f 1682//2993 1694//2993 1683//2993
f 1694//2994 1695//2994 1683//2994
f 1683//2995 1695//2995 271//2995
f 1695//2996 270//2996 271//2996
f 265//2997 1696//2997 1684//2997
f 1696//2998 1697//2998 1684//2998
f 1684//2999 1697//2999 1685//2999
f 1697//3000 1698//3000 1685//3000
f 1685//3001 1698//3001 1686//3001
f 1698//3002 1699//3002 1686//3002
f 1686//3003 1699//3003 1687//3003
f 1699//3004 1700//3004 1687//3004
f 1687//3005 1700//3005 1688//3005
f 1700//3006 1701//3006 1688//3006
f 1688//3007 1701//3007 1689//3007
f 1701//3008 1702//3008 1689//3008
f 1689//3009 1702//3009 1690//3009
f 1702//3010 1703//3010 1690//3010
f 1690//3011 1703//3011 1691//3011
f 1703//3012 1704//3012 1691//3012
f 1691//3013 1704//3013 1692//3013
f 1704//3014 1705//3014 1692//3014
f 1692//3015 1705//3015 1693//3015
f 1705//3016 1706//3016 1693//3016
f 1693//3017 1706//3017 1694//3017
f 1706//3018 1707//3018 1694//3018
f 1694//3019 1707//3019 1695//3019
f 1707//3020 1708//3020 1695//3020
f 1695//3021 1708//3021 270//3021
f 1708//3022 269//3022 270//3022
f 266//3023 1709//3023 1696//3023
f 1709//3024 1710//3024 1696//3024
f 1696//3025 1710//3025 1697//3025
f 1710//3026 1711//3026 1697//3026
f 1697//3027 1711//3027 1698//3027
f 1711//3028 1712//3028 1698//3028
f 1698//3029 1712//3029 1699//3029
f 1712//3030 1713//3030 1699//3030
f 1699//3031 1713//3031 1700//3031
f 1713//3032 1714//3032 1700//3032
f 1700//3033 1714//3033 1701//3033
f 1714//3034 1715//3034 1701//3034
f 1701//3035 1715//3035 1702//3035
f 1715//3036 1716//3036 1702//3036
f 1702//3037 1716//3037 1703//3037
f 1716//3038 1717//3038 1703//3038
f 1703//3039 1717//3039 1704//3039
f 1717//3040 1718//3040 1704//3040
f 1704//3041 1718//3041 1705//3041
f 1718//3042 1719//3042 1705//3042
f 1705//3043 1719//3043 1706//3043
f 1719//3044 1720//3044 1706//3044
f 1706//3045 1720//3045 1707//3045
f 1720//3046 1721//3046 1707//3046
f 1707//3047 1721//3047 1708//3047
f 1721//3048 1722//3048 1708//3048
f 1708//3049 1722//3049 269//3049
f 1722//3050 268//3050 269//3050
f 267//3051 147//3051 1709//3051
f 147//3052 146//3052 1709//3052
f 1709//3053 146//3053 1710//3053
f 146//3054 145//3054 1710//3054
f 1710//3055 145//3055 1711//3055
f 145//3056 144//3056 1711//3056
f 1711//3057 144//3057 1712//3057
f 144//3058 143//3058 1712//3058
f 1712//3059 143//3059 1713//3059
f 143//3060 142//3060 1713//3060
f 1713//3061 142//3061 1714//3061
f 142//3062 141//3062 1714//3062
f 1714//3063 141//3063 1715//3063
f 141//3064 140//3064 1715//3064
f 1715//3065 140//3065 1716//3065
f 140//3066 139//3066 1716//3066
f 1716//3067 139//3067 1717//3067
f 139//3068 138//3068 1717//3068
f 1717//3069 138//3069 1718//3069
f 138//3070 137//3070 1718//3070
f 1718//3071 137//3071 1719//3071
f 137//3072 136//3072 1719//3072
f 1719//3073 136//3073 1720//3073
f 136//3074 135//3074 1720//3074
f 1720//3075 135//3075 1721//3075
f 135//3076 134//3076 1721//3076
f 1721//3077 134//3077 1722//3077
f 134//3078 133//3078 1722//3078
f 1722//3079 133//3079 268//3079
f 133//3080 4//3080 268//3080
f 223//3081 252//3081 8//3081
f 224//3082 1723//3082 223//3082
f 225//3083 1724//3083 224//3083
f 226//3084 1726//3084 225//3084
f 227//3085 1729//3085 226//3085
f 228//3086 1733//3086 227//3086
f 229//3087 1738//3087 228//3087
f 230//3088 1744//3088 229//3088
f 231//3089 1751//3089 230//3089
f 232//3090 1759//3090 231//3090
f 233//3091 1768//3091 232//3091
f 234//3092 1778//3092 233//3092
f 235//3093 1789//3093 234//3093
f 236//3094 1801//3094 235//3094
f 237//3095 1814//3095 236//3095
f 223//3096 1723//3096 252//3096
f 1723//3097 251//3097 252//3097
f 224//3098 1724//3098 1723//3098
f 1724//3099 1725//3099 1723//3099
f 1723//3100 1725//3100 251//3100
f 1725//3101 250//3101 251//3101
f 225//3102 1726//3102 1724//3102
f 1726//3103 1727//3103 1724//3103
f 1724//3104 1727//3104 1725//3104
f 1727//3105 1728//3105 1725//3105
f 1725//3106 1728//3106 250//3106
f 1728//3107 249//3107 250//3107
f 226//3108 1729//3108 1726//3108
f 1729//3109 1730//3109 1726//3109
f 1726//3110 1730//3110 1727//3110
f 1730//3111 1731//3111 1727//3111
f 1727//3112 1731//3112 1728//3112
f 1731//3113 1732//3113 1728//3113
f 1728//3114 1732//3114 249//3114
f 1732//3115 248//3115 249//3115
f 227//3116 1733//3116 1729//3116
f 1733//3117 1734//3117 1729//3117
f 1729//3118 1734//3118 1730//3118
f 1734//3119 1735//3119 1730//3119
f 1730//3120 1735//3120 1731//3120
f 1735//3121 1736//3121 1731//3121
f 1731//3122 1736//3122 1732//3122
f 1736//3123 1737//3123 1732//3123
f 1732//3124 1737//3124 248//3124
f 1737//3125 247//3125 248//3125
f 228//3126 1738//3126 1733//3126
f 1738//3127 1739//3127 1733//3127
f 1733//3128 1739//3128 1734//3128
f 1739//3129 1740//3129 1734//3129
f 1734//3130 1740//3130 1735//3130
f 1740//3131 1741//3131 1735//3131
f 1735//3132 1741//3132 1736//3132
f 1741//3133 1742//3133 1736//3133
f 1736//3134 1742//3134 1737//3134
f 1742//3135 1743//3135 1737//3135
f 1737//3136 1743//3136 247//3136
f 1743//3137 246//3137 247//3137
f 229//3138 1744//3138 1738//3138
f 1744//3139 1745//3139 1738//3139
f 1738//3140 1745//3140 1739//3140
f 1745//3141 1746//3141 1739//3141
f 1739//3142 1746//3142 1740//3142
f 1746//3143 1747//3143 1740//3143
f 1740//3144 1747//3144 1741//3144
f 1747//3145 1748//3145 1741//3145
f 1741//3146 1748//3146 1742//3146
f 1748//3147 1749//3147 1742//3147
f 1742//3148 1749//3148 1743//3148
f 1749//3149 1750//3149 1743//3149
f 1743//3150 1750//3150 246//3150
f 1750//3151 245//3151 246//3151
f 230//3152 1751//3152 1744//3152
f 1751//3153 1752//3153 1744//3153
f 1744//3154 1752//3154 1745//3154
f 1752//3155 1753//3155 1745//3155
f 1745//3156 1753//3156 1746//3156
f 1753//3157 1754//3157 1746//3157
f 1746//3158 1754//3158 1747//3158
f 1754//3159 1755//3159 1747//3159
f 1747//3160 1755//3160 1748//3160
f 1755//3161 1756//3161 1748//3161
f 1748//3162 1756//3162 1749//3162
f 1756//3163 1757//3163 1749//3163
f 1749//3164 1757//3164 1750//3164
f 1757//3165 1758//3165 1750//3165
f 1750//3166 1758//3166 245//3166
f 1758//3167 244//3167 245//3167
f 231//3168 1759//3168 1751//3168
f 1759//3169 1760//3169 1751//3169
f 1751//3170 1760//3170 1752//3170
f 1760//3171 1761//3171 1752//3171
f 1752//3172 1761//3172 1753//3172
f 1761//3173 1762//3173 1753//3173
f 1753//3174 1762//3174 1754//3174
f 1762//3175 1763//3175 1754//3175
f 1754//3176 1763//3176 1755//3176
f 1763//3177 1764//3177 1755//3177
f 1755//3178 1764//3178 1756//3178
f 1764//3179 1765//3179 1756//3179
f 1756//3180 1765//3180 1757//3180
f 1765//3181 1766//3181 1757//3181
f 1757//3182 1766//3182 1758//3182
f 1766//3183 1767//3183 1758//3183
f 1758//3184 1767//3184 244//3184
f 1767//3185 243//3185 244//3185
f 232//3186 1768//3186 1759//3186
f 1768//3187 1769//3187 1759//3187
f 1759//3188 1769//3188 1760//3188
f 1769//3189 1770//3189 1760//3189
f 1760//3190 1770//3190 1761//3190
f 1770//3191 1771//3191 1761//3191
f 1761//3192 1771//3192 1762//3192
f 1771//3193 1772//3193 1762//3193
f 1762//3194 1772//3194 1763//3194
f 1772//3195 1773//3195 1763//3195
f 1763//3196 1773//3196 1764//3196
f 1773//3197 1774//3197 1764//3197
f 1764//3198 1774//3198 1765//3198
f 1774//3199 1775//3199 1765//3199
f 1765//3200 1775//3200 1766//3200
f 1775//3201 1776//3201 1766//3201
f 1766//3202 1776//3202 1767//3202
f 1776//3203 1777//3203 1767//3203
f 1767//3204 1777//3204 243//3204
f 1777//3205 242//3205 243//3205
f 233//3206 1778//3206 1768//3206
f 1778//3207 1779//3207 1768//3207
f 1768//3208 1779//3208 1769//3208
f 1779//3209 1780//3209 1769//3209
f 1769//3210 1780//3210 1770//3210
f 1780//3211 1781//3211 1770//3211
f 1770//3212 1781//3212 1771//3212
f 1781//3213 1782//3213 1771//3213
f 1771//3214 1782//3214 1772//3214
f 1782//3215 1783//3215 1772//3215
f 1772//3216 1783//3216 1773//3216
f 1783//3217 1784//3217 1773//3217
f 1773//3218 1784//3218 1774//3218
f 1784//3219 1785//3219 1774//3219
f 1774//3220 1785//3220 1775//3220
f 1785//3221 1786//3221 1775//3221
f 1775//3222 1786//3222 1776//3222
f 1786//3223 1787//3223 1776//3223
f 1776//3224 1787//3224 1777//3224
f 1787//3225 1788//3225 1777//3225
f 1777//3226 1788//3226 242//3226
f 1788//3227 241//3227 242//3227
f 234//3228 1789//3228 1778//3228
f 1789//3229 1790//3229 1778//3229
f 1778//3230 1790//3230 1779//3230
f 1790//3231 1791//3231 1779//3231
f 1779//3232 1791//3232 1780//3232
f 1791//3233 1792//3233 1780//3233
f 1780//3234 1792//3234 1781//3234
f 1792//3235 1793//3235 1781//3235
f 1781//3236 1793//3236 1782//3236
f 1793//3237 1794//3237 1782//3237
f 1782//3238 1794//3238 1783//3238
f 1794//3239 1795//3239 1783//3239
f 1783//3240 1795//3240 1784//3240
f 1795//3241 1796//3241 1784//3241
f 1784//3242 1796//3242 1785//3242
f 1796//3243 1797//3243 1785//3243
f 1785//3244 1797//3244 1786//3244
f 1797//3245 1798//3245 1786//3245
f 1786//3246 1798//3246 1787//3246
f 1798//3247 1799//3247 1787//3247
f 1787//3248 1799//3248 1788//3248
f 1799//3249 1800//3249 1788//3249
f 1788//3250 1800//3250 241//3250
f 1800//3251 240//3251 241//3251
f 235//3252 1801//3252 1789//3252
f 1801//3253 1802//3253 1789//3253
f 1789//3254 1802//3254 1790//3254
f 1802//3255 1803//3255 1790//3255
f 1790//3256 1803//3256 1791//3256
f 1803//3257 1804//3257 1791//3257
f 1791//3258 1804//3258 1792//3258
f 1804//3259 1805//3259 1792//3259
f 1792//3260 1805//3260 1793//3260
f 1805//3261 1806//3261 1793//3261
f 1793//3262 1806//3262 1794//3262
f 1806//3263 1807//3263 1794//3263
f 1794//3264 1807//3264 1795//3264
f 1807//3265 1808//3265 1795//3265
f 1795//3266 1808//3266 1796//3266
f 1808//3267 1809//3267 1796//3267
f 1796//3268 1809//3268 1797//3268
f 1809//3269 1810//3269 1797//3269
f 1797//3270 1810//3270 1798//3270
f 1810//3271 1811//3271 1798//3271
f 1798//3272 1811//3272 1799//3272
f 1811//3273 1812//3273 1799//3273
f 1799//3274 1812//3274 1800//3274
f 1812//3275 1813//3275 1800//3275
f 1800//3276 1813//3276 240//3276
f 1813//3277 239//3277 240//3277
f 236//3278 1814//3278 1801//3278
f 1814//3279 1815//3279 1801//3279
f 1801//3280 1815//3280 1802//3280
f 1815//3281 1816//3281 1802//3281
f 1802//3282 1816//3282 1803//3282
f 1816//3283 1817//3283 1803//3283
f 1803//3284 1817//3284 1804//3284
f 1817//3285 1818//3285 1804//3285
f 1804//3286 1818//3286 1805//3286
f 1818//3287 1819//3287 1805//3287
f 1805//3288 1819//3288 1806//3288
f 1819//3289 1820//3289 1806//3289
f 1806//3290 1820//3290 1807//3290
f 1820//3291 1821//3291 1807//3291
f 1807//3292 1821//3292 1808//3292
f 1821//3293 1822//3293 1808//3293
f 1808//3294 1822//3294 1809//3294
f 1822//3295 1823//3295 1809//3295
f 1809//3296 1823//3296 1810//3296
f 1823//3297 1824//3297 1810//3297
f 1810//3298 1824//3298 1811//3298
f 1824//3299 1825//3299 1811//3299
f 1811//3300 1825//3300 1812//3300
f 1825//3301 1826//3301 1812//3301
f 1812//3302 1826//3302 1813//3302
f 1826//3303 1827//3303 1813//3303
f 1813//3304 1827//3304 239//3304
f 1827//3305 238//3305 239//3305
f 237//3306 117//3306 1814//3306
f 117//3307 116//3307 1814//3307
f 1814//3308 116//3308 1815//3308
f 116//3309 115//3309 1815//3309
f 1815//3310 115//3310 1816//3310
f 115//3311 114//3311 1816//3311
f 1816//3312 114//3312 1817//3312
f 114//3313 113//3313 1817//3313
f 1817//3314 113//3314 1818//3314
f 113//3315 112//3315 1818//3315
f 1818//3316 112//3316 1819//3316
f 112//3317 111//3317 1819//3317
f 1819//3318 111//3318 1820//3318
f 111//3319 110//3319 1820//3319
f 1820//3320 110//3320 1821//3320
f 110//3321 109//3321 1821//3321
f 1821//3322 109//3322 1822//3322
f 109//3323 108//3323 1822//3323
f 1822//3324 108//3324 1823//3324
f 108//3325 107//3325 1823//3325
f 1823//3326 107//3326 1824//3326
f 107//3327 106//3327 1824//3327
f 1824//3328 106//3328 1825//3328
f 106//3329 105//3329 1825//3329
f 1825//3330 105//3330 1826//3330
f 105//3331 104//3331 1826//3331
f 1826//3332 104//3332 1827//3332
f 104//3333 103//3333 1827//3333
f 1827//3334 103//3334 238//3334
f 103//3335 3//3335 238//3335
f 193//3336 222//3336 7//3336
f 194//3337 1828//3337 193//3337
f 195//3338 1829//3338 194//3338
f 196//3339 1831//3339 195//3339
f 197//3340 1834//3340 196//3340
f 198//3341 1838//3341 197//3341
f 199//3342 1843//3342 198//3342
f 200//3343 1849//3343 199//3343
f 201//3344 1856//3344 200//3344
f 202//3345 1864//3345 201//3345
f 203//3346 1873//3346 202//3346
f 204//3347 1883//3347 203//3347
f 205//3348 1894//3348 204//3348
f 206//3349 1906//3349 205//3349
f 207//3350 1919//3350 206//3350
f 193//3351 1828//3351 222//3351
f 1828//3352 221//3352 222//3352
f 194//3353 1829//3353 1828//3353
f 1829//3354 1830//3354 1828//3354
f 1828//3355 1830//3355 221//3355
f 1830//3356 220//3356 221//3356
f 195//3357 1831//3357 1829//3357
f 1831//3358 1832//3358 1829//3358
f 1829//3359 1832//3359 1830//3359
f 1832//3360 1833//3360 1830//3360
f 1830//3361 1833//3361 220//3361
f 1833//3362 219//3362 220//3362
f 196//3363 1834//3363 1831//3363
f 1834//3364 1835//3364 1831//3364
f 1831//3365 1835//3365 1832//3365
f 1835//3366 1836//3366 1832//3366
f 1832//3367 1836//3367 1833//3367
f 1836//3368 1837//3368 1833//3368
f 1833//3369 1837//3369 219//3369
f 1837//3370 218//3370 219//3370
f 197//3371 1838//3371 1834//3371
f 1838//3372 1839//3372 1834//3372
f 1834//3373 1839//3373 1835//3373
f 1839//3374 1840//3374 1835//3374
f 1835//3375 1840//3375 1836//3375
f 1840//3376 1841//3376 1836//3376
f 1836//3377 1841//3377 1837//3377
f 1841//3378 1842//3378 1837//3378
f 1837//3379 1842//3379 218//3379
f 1842//3380 217//3380 218//3380
f 198//3381 1843//3381 1838//3381
f 1843//3382 1844//3382 1838//3382
f 1838//3383 1844//3383 1839//3383
f 1844//3384 1845//3384 1839//3384
f 1839//3385 1845//3385 1840//3385
f 1845//3386 1846//3386 1840//3386
f 1840//3387 1846//3387 1841//3387
f 1846//3388 1847//3388 1841//3388
f 1841//3389 1847//3389 1842//3389
f 1847//3390 1848//3390 1842//3390
f 1842//3391 1848//3391 217//3391
f 1848//3392 216//3392 217//3392
f 199//3393 1849//3393 1843//3393
f 1849//3394 1850//3394 1843//3394
f 1843//3395 1850//3395 1844//3395
f 1850//3396 1851//3396 1844//3396
f 1844//3397 1851//3397 1845//3397
f 1851//3398 1852//3398 1845//3398
f 1845//3399 1852//3399 1846//3399
f 1852//3400 1853//3400 1846//3400
f 1846//3401 1853//3401 1847//3401
f 1853//3402 1854//3402 1847//3402
f 1847//3403 1854//3403 1848//3403
f 1854//3404 1855//3404 1848//3404
f 1848//3405 1855//3405 216//3405
f 1855//3406 215//3406 216//3406
f 200//3407 1856//3407 1849//3407
f 1856//3408 1857//3408 1849//3408
f 1849//3409 1857//3409 1850//3409
f 1857//3410 1858//3410 1850//3410
f 1850//3411 1858//3411 1851//3411
f 1858//3412 1859//3412 1851//3412
f 1851//3413 1859//3413 1852//3413
f 1859//3414 1860//3414 1852//3414
f 1852//3415 1860//3415 1853//3415
f 1860//3416 1861//3416 1853//3416
f 1853//3417 1861//3417 1854//3417
f 1861//3418 1862//3418 1854//3418
f 1854//3419 1862//3419 1855//3419
f 1862//3420 1863//3420 1855//3420
f 1855//3421 1863//3421 215//3421
f 1863//3422 214//3422 215//3422
f 201//3423 1864//3423 1856//3423
f 1864//3424 1865//3424 1856//3424
f 1856//3425 1865//3425 1857//3425
f 1865//3426 1866//3426 1857//3426
f 1857//3427 1866//3427 1858//3427
f 1866//3428 1867//3428 1858//3428
f 1858//3429 1867//3429 1859//3429
f 1867//3430 1868//3430 1859//3430
f 1859//3431 1868//3431 1860//3431
f 1868//3432 1869//3432 1860//3432
f 1860//3433 1869//3433 1861//3433
f 1869//3434 1870//3434 1861//3434
f 1861//3435 1870//3435 1862//3435
f 1870//3436 1871//3436 1862//3436
f 1862//3437 1871//3437 1863//3437
f 1871//3438 1872//3438 1863//3438
f 1863//3439 1872//3439 214//3439
f 1872//3440 213//3440 214//3440
f 202//3441 1873//3441 1864//3441
f 1873//3442 1874//3442 1864//3442
f 1864//3443 1874//3443 1865//3443
f 1874//3444 1875//3444 1865//3444
f 1865//3445 1875//3445 1866//3445
f 1875//3446 1876//3446 1866//3446
f 1866//3447 1876//3447 1867//3447
f 1876//3448 1877//3448 1867//3448
f 1867//3449 1877//3449 1868//3449
f 1877//3450 1878//3450 1868//3450
f 1868//3451 1878//3451 1869//3451
f 1878//3452 1879//3452 1869//3452
f 1869//3453 1879//3453 1870//3453
f 1879//3454 1880//3454 1870//3454
f 1870//3455 1880//3455 1871//3455
f 1880//3456 1881//3456 1871//3456
f 1871//3457 1881//3457 1872//3457
f 1881//3458 1882//3458 1872//3458
f 1872//3459 1882//3459 213//3459
f 1882//3460 212//3460 213//3460
f 203//3461 1883//3461 1873//3461
f 1883//3462 1884//3462 1873//3462
f 1873//3463 1884//3463 1874//3463
f 1884//3464 1885//3464 1874//3464
f 1874//3465 1885//3465 1875//3465
f 1885//3466 1886//3466 1875//3466
f 1875//3467 1886//3467 1876//3467
f 1886//3468 1887//3468 1876//3468
f 1876//3469 1887//3469 1877//3469
f 1887//3470 1888//3470 1877//3470
f 1877//3471 1888//3471 1878//3471
f 1888//3472 1889//3472 1878//3472
f 1878//3473 1889//3473 1879//3473
f 1889//3474 1890//3474 1879//3474
f 1879//3475 1890//3475 1880//3475
f 1890//3476 1891//3476 1880//3476
f 1880//3477 1891//3477 1881//3477
f 1891//3478 1892//3478 1881//3478
f 1881//3479 1892//3479 1882//3479
f 1892//3480 1893//3480 1882//3480
f 1882//3481 1893//3481 212//3481
f 1893//3482 211//3482 212//3482
f 204//3483 1894//3483 1883//3483
f 1894//3484 1895//3484 1883//3484
f 1883//3485 1895//3485 1884//3485
f 1895//3486 1896//3486 1884//3486
f 1884//3487 1896//3487 1885//3487
f 1896//3488 1897//3488 1885//3488
f 1885//3489 1897//3489 1886//3489
f 1897//3490 1898//3490 1886//3490
f 1886//3491 1898//3491 1887//3491
f 1898//3492 1899//3492 1887//3492
f 1887//3493 1899//3493 1888//3493
f 1899//3494 1900//3494 1888//3494
f 1888//3495 1900//3495 1889//3495
f 1900//3496 1901//3496 1889//3496
f 1889//3497 1901//3497 1890//3497
f 1901//3498 1902//3498 1890//3498
f 1890//3499 1902//3499 1891//3499
f 1902//3500 1903//3500 1891//3500
f 1891//3501 1903//3501 1892//3501
f 1903//3502 1904//3502 1892//3502
f 1892//3503 1904//3503 1893//3503
f 1904//3504 1905//3504 1893//3504
f 1893//3505 1905//3505 211//3505
f 1905//3506 210//3506 211//3506
f 205//3507 1906//3507 1894//3507
f 1906//3508 1907//3508 1894//3508
f 1894//3509 1907//3509 1895//3509
f 1907//3510 1908//3510 1895//3510
f 1895//3511 1908//3511 1896//3511
f 1908//3512 1909//3512 1896//3512
f 1896//3513 1909//3513 1897//3513
f 1909//3514 1910//3514 1897//3514
f 1897//3515 1910//3515 1898//3515
f 1910//3516 1911//3516 1898//3516
f 1898//3517 1911//3517 1899//3517
f 1911//3518 1912//3518 1899//3518
f 1899//3519 1912//3519 1900//3519
f 1912//3520 1913//3520 1900//3520
f 1900//3521 1913//3521 1901//3521
f 1913//3522 1914//3522 1901//3522
f 1901//3523 1914//3523 1902//3523
f 1914//3524 1915//3524 1902//3524
f 1902//3525 1915//3525 1903//3525
f 1915//3526 1916//3526 1903//3526
f 1903//3527 1916//3527 1904//3527
f 1916//3528 1917//3528 1904//3528
f 1904//3529 1917//3529 1905//3529
f 1917//3530 1918//3530 1905//3530
f 1905//3531 1918//3531 210//3531
f 1918//3532 209//3532 210//3532
f 206//3533 1919//3533 1906//3533
f 1919//3534 1920//3534 1906//3534
f 1906//3535 1920//3535 1907//3535
f 1920//3536 1921//3536 1907//3536
f 1907//3537 1921//3537 1908//3537
f 1921//3538 1922//3538 1908//3538
f 1908//3539 1922//3539 1909//3539
f 1922//3540 1923//3540 1909//3540
f 1909//3541 1923//3541 1910//3541
f 1923//3542 1924//3542 1910//3542
f 1910//3543 1924//3543 1911//3543
f 1924//3544 1925//3544 1911//3544
f 1911//3545 1925//3545 1912//3545
f 1925//3546 1926//3546 1912//3546
f 1912//3547 1926//3547 1913//3547
f 1926//3548 1927//3548 1913//3548
f 1913//3549 1927//3549 1914//3549
f 1927//3550 1928//3550 1914//3550
f 1914//3551 1928//3551 1915//3551
f 1928//3552 1929//3552 1915//3552
f 1915//3553 1929//3553 1916//3553
f 1929//3554 1930//3554 1916//3554
f 1916//3555 1930//3555 1917//3555
f 1930//3556 1931//3556 1917//3556
f 1917//3557 1931//3557 1918//3557
f 1931//3558 1932//3558 1918//3558
f 1918//3559 1932//3559 209//3559
f 1932//3560 208//3560 209//3560
f 207//3561 57//3561 1919//3561
f 57//3562 56//3562 1919//3562
f 1919//3563 56//3563 1920//3563
f 56//3564 55//3564 1920//3564
f 1920//3565 55//3565 1921//3565
f 55//3566 54//3566 1921//3566
f 1921//3567 54//3567 1922//3567
f 54//3568 53//3568 1922//3568
f 1922//3569 53//3569 1923//3569
f 53//3570 52//3570 1923//3570
f 1923//3571 52//3571 1924//3571
f 52//3572 51//3572 1924//3572
f 1924//3573 51//3573 1925//3573
f 51//3574 50//3574 1925//3574
f 1925//3575 50//3575 1926//3575
f 50//3576 49//3576 1926//3576
f 1926//3577 49//3577 1927//3577
f 49//3578 48//3578 1927//3578
f 1927//3579 48//3579 1928//3579
f 48//3580 47//3580 1928//3580
f 1928//3581 47//3581 1929//3581
f 47//3582 46//3582 1929//3582
f 1929//3583 46//3583 1930//3583
f 46//3584 45//3584 1930//3584
f 1930//3585 45//3585 1931//3585
f 45//3586 44//3586 1931//3586
f 1931//3587 44//3587 1932//3587
f 44//3588 43//3588 1932//3588
f 1932//3589 43//3589 208//3589
f 43//3590 2//3590 208//3590
f 163//3591 192//3591 11//3591
f 164//3592 1933//3592 163//3592
f 165//3593 1934//3593 164//3593
f 166//3594 1936//3594 165//3594
f 167//3595 1939//3595 166//3595
f 168//3596 1943//3596 167//3596
f 169//3597 1948//3597 168//3597
f 170//3598 1954//3598 169//3598
f 171//3599 1961//3599 170//3599
f 172//3600 1969//3600 171//3600
f 173//3601 1978//3601 172//3601
f 174//3602 1988//3602 173//3602
f 175//3603 1999//3603 174//3603
f 176//3604 2011//3604 175//3604
f 177//3605 2024//3605 176//3605
f 163//3606 1933//3606 192//3606
f 1933//3607 191//3607 192//3607
f 164//3608 1934//3608 1933//3608
f 1934//3609 1935//3609 1933//3609
f 1933//3610 1935//3610 191//3610
f 1935//3611 190//3611 191//3611
f 165//3612 1936//3612 1934//3612
f 1936//3613 1937//3613 1934//3613
f 1934//3614 1937//3614 1935//3614
f 1937//3615 1938//3615 1935//3615
f 1935//3616 1938//3616 190//3616
f 1938//3617 189//3617 190//3617
f 166//3618 1939//3618 1936//3618
f 1939//3619 1940//3619 1936//3619
f 1936//3620 1940//3620 1937//3620
f 1940//3621 1941//3621 1937//3621
f 1937//3622 1941//3622 1938//3622
f 1941//3623 1942//3623 1938//3623
f 1938//3624 1942//3624 189//3624
f 1942//3625 188//3625 189//3625
f 167//3626 1943//3626 1939//3626
f 1943//3627 1944//3627 1939//3627
f 1939//3628 1944//3628 1940//3628
f 1944//3629 1945//3629 1940//3629
f 1940//3630 1945//3630 1941//3630
f 1945//3631 1946//3631 1941//3631
f 1941//3632 1946//3632 1942//3632
f 1946//3633 1947//3633 1942//3633
f 1942//3634 1947//3634 188//3634
f 1947//3635 187//3635 188//3635
f 168//3636 1948//3636 1943//3636
f 1948//3637 1949//3637 1943//3637
f 1943//3638 1949//3638 1944//3638
f 1949//3639 1950//3639 1944//3639
f 1944//3640 1950//3640 1945//3640
f 1950//3641 1951//3641 1945//3641
f 1945//3642 1951//3642 1946//3642
f 1951//3643 1952//3643 1946//3643
f 1946//3644 1952//3644 1947//3644
f 1952//3645 1953//3645 1947//3645
f 1947//3646 1953//3646 187//3646
f 1953//3647 186//3647 187//3647
f 169//3648 1954//3648 1948//3648
f 1954//3649 1955//3649 1948//3649
f 1948//3650 1955//3650 1949//3650
f 1955//3651 1956//3651 1949//3651
f 1949//3652 1956//3652 1950//3652
f 1956//3653 1957//3653 1950//3653
f 1950//3654 1957//3654 1951//3654
f 1957//3655 1958//3655 1951//3655
f 1951//3656 1958//3656 1952//3656
f 1958//3657 1959//3657 1952//3657
f 1952//3658 1959//3658 1953//3658
f 1959//3659 1960//3659 1953//3659
f 1953//3660 1960//3660 186//3660
f 1960//3661 185//3661 186//3661
f 170//3662 1961//3662 1954//3662
f 1961//3663 1962//3663 1954//3663
f 1954//3664 1962//3664 1955//3664
f 1962//3665 1963//3665 1955//3665
f 1955//3666 1963//3666 1956//3666
f 1963//3667 1964//3667 1956//3667
f 1956//3668 1964//3668 1957//3668
f 1964//3669 1965//3669 1957//3669
f 1957//3670 1965//3670 1958//3670
f 1965//3671 1966//3671 1958//3671
f 1958//3672 1966//3672 1959//3672
f 1966//3673 1967//3673 1959//3673
f 1959//3674 1967//3674 1960//3674
f 1967//3675 1968//3675 1960//3675
f 1960//3676 1968//3676 185//3676
f 1968//3677 184//3677 185//3677
f 171//3678 1969//3678 1961//3678
f 1969//3679 1970//3679 1961//3679
f 1961//3680 1970//3680 1962//3680
f 1970//3681 1971//3681 1962//3681
f 1962//3682 1971//3682 1963//3682
f 1971//3683 1972//3683 1963//3683
f 1963//3684 1972//3684 1964//3684
f 1972//3685 1973//3685 1964//3685
f 1964//3686 1973//3686 1965//3686
f 1973//3687 1974//3687 1965//3687
f 1965//3688 1974//3688 1966//3688
f 1974//3689 1975//3689 1966//3689
f 1966//3690 1975//3690 1967//3690
f 1975//3691 1976//3691 1967//3691
f 1967//3692 1976//3692 1968//3692
f 1976//3693 1977//3693 1968//3693
f 1968//3694 1977//3694 184//3694
f 1977//3695 183//3695 184//3695
f 172//3696 1978//3696 1969//3696
f 1978//3697 1979//3697 1969//3697
f 1969//3698 1979//3698 1970//3698
f 1979//3699 1980//3699 1970//3699
f 1970//3700 1980//3700 1971//3700
f 1980//3701 1981//3701 1971//3701
f 1971//3702 1981//3702 1972//3702
f 1981//3703 1982//3703 1972//3703
f 1972//3704 1982//3704 1973//3704
f 1982//3705 1983//3705 1973//3705
f 1973//3706 1983//3706 1974//3706
f 1983//3707 1984//3707 1974//3707
f 1974//3708 1984//3708 1975//3708
f 1984//3709 1985//3709 1975//3709
f 1975//3710 1985//3710 1976//3710
f 1985//3711 1986//3711 1976//3711
f 1976//3712 1986//3712 1977//3712
f 1986//3713 1987//3713 1977//3713
f 1977//3714 1987//3714 183//3714
f 1987//3715 182//3715 183//3715
f 173//3716 1988//3716 1978//3716
f 1988//3717 1989//3717 1978//3717
f 1978//3718 1989//3718 1979//3718
f 1989//3719 1990//3719 1979//3719
f 1979//3720 1990//3720 1980//3720
f 1990//3721 1991//3721 1980//3721
f 1980//3722 1991//3722 1981//3722
f 1991//3723 1992//3723 1981//3723
f 1981//3724 1992//3724 1982//3724
f 1992//3725 1993//3725 1982//3725
f 1982//3726 1993//3726 1983//3726
f 1993//3727 1994//3727 1983//3727
f 1983//3728 1994//3728 1984//3728
f 1994//3729 1995//3729 1984//3729
f 1984//3730 1995//3730 1985//3730
f 1995//3731 1996//3731 1985//3731
f 1985//3732 1996//3732 1986//3732
f 1996//3733 1997//3733 1986//3733
f 1986//3734 1997//3734 1987//3734
f 1997//3735 1998//3735 1987//3735
f 1987//3736 1998//3736 182//3736
f 1998//3737 181//3737 182//3737
f 174//3738 1999//3738 1988//3738
f 1999//3739 2000//3739 1988//3739
f 1988//3740 2000//3740 1989//3740
f 2000//3741 2001//3741 1989//3741
f 1989//3742 2001//3742 1990//3742
f 2001//3743 2002//3743 1990//3743
f 1990//3744 2002//3744 1991//3744
f 2002//3745 2003//3745 1991//3745
f 1991//3746 2003//3746 1992//3746
f 2003//3747 2004//3747 1992//3747
f 1992//3748 2004//3748 1993//3748
f 2004//3749 2005//3749 1993//3749
f 1993//3750 2005//3750 1994//3750
f 2005//3751 2006//3751 1994//3751
f 1994//3752 2006//3752 1995//3752
f 2006//3753 2007//3753 1995//3753
f 1995//3754 2007//3754 1996//3754
f 2007//3755 2008//3755 1996//3755
f 1996//3756 2008//3756 1997//3756
f 2008//3757 2009//3757 1997//3757
f 1997//3758 2009//3758 1998//3758
f 2009//3759 2010//3759 1998//3759
f 1998//3760 2010//3760 181//3760
f 2010//3761 180//3761 181//3761
f 175//3762 2011//3762 1999//3762
f 2011//3763 2012//3763 1999//3763
f 1999//3764 2012//3764 2000//3764
f 2012//3765 2013//3765 2000//3765
f 2000//3766 2013//3766 2001//3766
f 2013//3767 2014//3767 2001//3767
f 2001//3768 2014//3768 2002//3768
f 2014//3769 2015//3769 2002//3769
f 2002//3770 2015//3770 2003//3770
f 2015//3771 2016//3771 2003//3771
f 2003//3772 2016//3772 2004//3772
f 2016//3773 2017//3773 2004//3773
f 2004//3774 2017//3774 2005//3774
f 2017//3775 2018//3775 2005//3775
f 2005//3776 2018//3776 2006//3776
f 2018//3777 2019//3777 2006//3777
f 2006//3778 2019//3778 2007//3778
f 2019//3779 2020//3779 2007//3779
f 2007//3780 2020//3780 2008//3780
f 2020//3781 2021//3781 2008//3781
f 2008//3782 2021//3782 2009//3782
f 2021//3783 2022//3783 2009//3783
f 2009//3784 2022//3784 2010//3784
f 2022//3785 2023//3785 2010//3785
f 2010//3786 2023//3786 180//3786
f 2023//3787 179//3787 180//3787
f 176//3788 2024//3788 2011//3788
f 2024//3789 2025//3789 2011//3789
f 2011//3790 2025//3790 2012//3790
f 2025//3791 2026//3791 2012//3791
f 2012//3792 2026//3792 2013//3792
f 2026//3793 2027//3793 2013//3793
f 2013//3794 2027//3794 2014//3794
f 2027//3795 2028//3795 2014//3795
f 2014//3796 2028//3796 2015//3796
f 2028//3797 2029//3797 2015//3797
f 2015//3798 2029//3798 2016//3798
f 2029//3799 2030//3799 2016//3799
f 2016//3800 2030//3800 2017//3800
f 2030//3801 2031//3801 2017//3801
f 2017//3802 2031//3802 2018//3802
f 2031//3803 2032//3803 2018//3803
f 2018//3804 2032//3804 2019//3804
f 2032//3805 2033//3805 2019//3805
f 2019//3806 2033//3806 2020//3806
f 2033//3807 2034//3807 2020//3807
f 2020//3808 2034//3808 2021//3808
f 2034//3809 2035//3809 2021//3809
f 2021//3810 2035//3810 2022//3810
f 2035//3811 2036//3811 2022//3811
f 2022//3812 2036//3812 2023//3812
f 2036//3813 2037//3813 2023//3813
f 2023//3814 2037//3814 179//3814
f 2037//3815 178//3815 179//3815
f 177//3816 72//3816 2024//3816
f 72//3817 71//3817 2024//3817
f 2024//3818 71//3818 2025//3818
f 71//3819 70//3819 2025//3819
f 2025//3820 70//3820 2026//3820
f 70//3821 69//3821 2026//3821
f 2026//3822 69//3822 2027//3822
f 69//3823 68//3823 2027//3823
f 2027//3824 68//3824 2028//3824
f 68//3825 67//3825 2028//3825
f 2028//3826 67//3826 2029//3826
f 67//3827 66//3827 2029//3827
f 2029//3828 66//3828 2030//3828
f 66//3829 65//3829 2030//3829
f 2030//3830 65//3830 2031//3830
f 65//3831 64//3831 2031//3831
f 2031//3832 64//3832 2032//3832
f 64//3833 63//3833 2032//3833
f 2032//3834 63//3834 2033//3834
f 63//3835 62//3835 2033//3835
f 2033//3836 62//3836 2034//3836
f 62//3837 61//3837 2034//3837
f 2034//3838 61//3838 2035//3838
f 61//3839 60//3839 2035//3839
f 2035//3840 60//3840 2036//3840
f 60//3841 59//3841 2036//3841
f 2036//3842 59//3842 2037//3842
f 59//3843 58//3843 2037//3843
f 2037//3844 58//3844 178//3844
f 58//3845 6//3845 178//3845
f 87//3846 162//3846 6//3846
f 86//3847 2038//3847 87//3847
f 85//3848 2039//3848 86//3848
f 84//3849 2041//3849 85//3849
f 83//3850 2044//3850 84//3850
f 82//3851 2048//3851 83//3851
f 81//3852 2053//3852 82//3852
f 80//3853 2059//3853 81//3853
f 79//3854 2066//3854 80//3854
f 78//3855 2074//3855 79//3855
f 77//3856 2083//3856 78//3856
f 76//3857 2093//3857 77//3857
f 75//3858 2104//3858 76//3858
f 74//3859 2116//3859 75//3859
f 73//3860 2129//3860 74//3860
f 87//3861 2038//3861 162//3861
f 2038//3862 161//3862 162//3862
f 86//3863 2039//3863 2038//3863
f 2039//3864 2040//3864 2038//3864
f 2038//3865 2040//3865 161//3865
f 2040//3866 160//3866 161//3866
f 85//3867 2041//3867 2039//3867
f 2041//3868 2042//3868 2039//3868
f 2039//3869 2042//3869 2040//3869
f 2042//3870 2043//3870 2040//3870
f 2040//3871 2043//3871 160//3871
f 2043//3872 159//3872 160//3872
f 84//3873 2044//3873 2041//3873
f 2044//3874 2045//3874 2041//3874
f 2041//3875 2045//3875 2042//3875
f 2045//3876 2046//3876 2042//3876
f 2042//3877 2046//3877 2043//3877
f 2046//3878 2047//3878 2043//3878
f 2043//3879 2047//3879 159//3879
f 2047//3880 158//3880 159//3880
f 83//3881 2048//3881 2044//3881
f 2048//3882 2049//3882 2044//3882
f 2044//3883 2049//3883 2045//3883
f 2049//3884 2050//3884 2045//3884
f 2045//3885 2050//3885 2046//3885
f 2050//3886 2051//3886 2046//3886
f 2046//3887 2051//3887 2047//3887
f 2051//3888 2052//3888 2047//3888
f 2047//3889 2052//3889 158//3889
f 2052//3890 157//3890 158//3890
f 82//3891 2053//3891 2048//3891
f 2053//3892 2054//3892 2048//3892
f 2048//3893 2054//3893 2049//3893
f 2054//3894 2055//3894 2049//3894
f 2049//3895 2055//3895 2050//3895
f 2055//3896 2056//3896 2050//3896
f 2050//3897 2056//3897 2051//3897
f 2056//3898 2057//3898 2051//3898
f 2051//3899 2057//3899 2052//3899
f 2057//3900 2058//3900 2052//3900
f 2052//3901 2058//3901 157//3901
f 2058//3902 156//3902 157//3902
f 81//3903 2059//3903 2053//3903
f 2059//3904 2060//3904 2053//3904
f 2053//3905 2060//3905 2054//3905
f 2060//3906 2061//3906 2054//3906
f 2054//3907 2061//3907 2055//3907
f 2061//3908 2062//3908 2055//3908
f 2055//3909 2062//3909 2056//3909
f 2062//3910 2063//3910 2056//3910
f 2056//3911 2063//3911 2057//3911
f 2063//3912 2064//3912 2057//3912
f 2057//3913 2064//3913 2058//3913
f 2064//3914 2065//3914 2058//3914
f 2058//3915 2065//3915 156//3915
f 2065//3916 155//3916 156//3916
f 80//3917 2066//3917 2059//3917
f 2066//3918 2067//3918 2059//3918
f 2059//3919 2067//3919 2060//3919
f 2067//3920 2068//3920 2060//3920
f 2060//3921 2068//3921 2061//3921
f 2068//3922 2069//3922 2061//3922
f 2061//3923 2069//3923 2062//3923
f 2069//3924 2070//3924 2062//3924
f 2062//3925 2070//3925 2063//3925
f 2070//3926 2071//3926 2063//3926
f 2063//3927 2071//3927 2064//3927
f 2071//3928 2072//3928 2064//3928
f 2064//3929 2072//3929 2065//3929
f 2072//3930 2073//3930 2065//3930
f 2065//3931 2073//3931 155//3931
f 2073//3932 154//3932 155//3932
f 79//3933 2074//3933 2066//3933
f 2074//3934 2075//3934 2066//3934
f 2066//3935 2075//3935 2067//3935
f 2075//3936 2076//3936 2067//3936
f 2067//3937 2076//3937 2068//3937
f 2076//3938 2077//3938 2068//3938
f 2068//3939 2077//3939 2069//3939
f 2077//3940 2078//3940 2069//3940
f 2069//3941 2078//3941 2070//3941
f 2078//3942 2079//3942 2070//3942
f 2070//3943 2079//3943 2071//3943
f 2079//3944 2080//3944 2071//3944
f 2071//3945 2080//3945 2072//3945
f 2080//3946 2081//3946 2072//3946
f 2072//3947 2081//3947 2073//3947
f 2081//3948 2082//3948 2073//3948
f 2073//3949 2082//3949 154//3949
f 2082//3950 153//3950 154//3950
f 78//3951 2083//3951 2074//3951
f 2083//3952 2084//3952 2074//3952
f 2074//3953 2084//3953 2075//3953
f 2084//3954 2085//3954 2075//3954
f 2075//3955 2085//3955 2076//3955
f 2085//3956 2086//3956 2076//3956
f 2076//3957 2086//3957 2077//3957
f 2086//3958 2087//3958 2077//3958
f 2077//3959 2087//3959 2078//3959
f 2087//3960 2088//3960 2078//3960
f 2078//3961 2088//3961 2079//3961
f 2088//3962 2089//3962 2079//3962
f 2079//3963 2089//3963 2080//3963
f 2089//3964 2090//3964 2080//3964
f 2080//3965 2090//3965 2081//3965
f 2090//3966 2091//3966 2081//3966
f 2081//3967 2091//3967 2082//3967
f 2091//3968 2092//3968 2082//3968
f 2082//3969 2092//3969 153//3969
f 2092//3970 152//3970 153//3970
f 77//3971 2093//3971 2083//3971
f 2093//3972 2094//3972 2083//3972
f 2083//3973 2094//3973 2084//3973
f 2094//3974 2095//3974 2084//3974
f 2084//3975 2095//3975 2085//3975
f 2095//3976 2096//3976 2085//3976
f 2085//3977 2096//3977 2086//3977
f 2096//3978 2097//3978 2086//3978
f 2086//3979 2097//3979 2087//3979
f 2097//3980 2098//3980 2087//3980
f 2087//3981 2098//3981 2088//3981
f 2098//3982 2099//3982 2088//3982
f 2088//3983 2099//3983 2089//3983
f 2099//3984 2100//3984 2089//3984
f 2089//3985 2100//3985 2090//3985
f 2100//3986 2101//3986 2090//3986
f 2090//3987 2101//3987 2091//3987
f 2101//3988 2102//3988 2091//3988
f 2091//3989 2102//3989 2092//3989
f 2102//3990 2103//3990 2092//3990
f 2092//3991 2103//3991 152//3991
f 2103//3992 151//3992 152//3992
f 76//3993 2104//3993 2093//3993
f 2104//3994 2105//3994 2093//3994
f 2093//3995 2105//3995 2094//3995
f 2105//3996 2106//3996 2094//3996
f 2094//3997 2106//3997 2095//3997
f 2106//3998 2107//3998 2095//3998
f 2095//3999 2107//3999 2096//3999
f 2107//4000 2108//4000 2096//4000
f 2096//4001 2108//4001 2097//4001
f 2108//4002 2109//4002 2097//4002
f 2097//4003 2109//4003 2098//4003
f 2109//4004 2110//4004 2098//4004
f 2098//4005 2110//4005 2099//4005
f 2110//4006 2111//4006 2099//4006
f 2099//4007 2111//4007 2100//4007
f 2111//4008 2112//4008 2100//4008
f 2100//4009 2112//4009 2101//4009
f 2112//4010 2113//4010 2101//4010
f 2101//4011 2113//4011 2102//4011
f 2113//4012 2114//4012 2102//4012
f 2102//4013 2114//4013 2103//4013
f 2114//4014 2115//4014 2103//4014
f 2103//4015 2115//4015 151//4015
f 2115//4016 150//4016 151//4016
f 75//4017 2116//4017 2104//4017
f 2116//4018 2117//4018 2104//4018
f 2104//4019 2117//4019 2105//4019
f 2117//4020 2118//4020 2105//4020
f 2105//4021 2118//4021 2106//4021
f 2118//4022 2119//4022 2106//4022
f 2106//4023 2119//4023 2107//4023
f 2119//4024 2120//4024 2107//4024
f 2107//4025 2120//4025 2108//4025
f 2120//4026 2121//4026 2108//4026
f 2108//4027 2121//4027 2109//4027
f 2121//4028 2122//4028 2109//4028
f 2109//4029 2122//4029 2110//4029
f 2122//4030 2123//4030 2110//4030
f 2110//4031 2123//4031 2111//4031
f 2123//4032 2124//4032 2111//4032
f 2111//4033 2124//4033 2112//4033
f 2124//4034 2125//4034 2112//4034
f 2112//4035 2125//4035 2113//4035
f 2125//4036 2126//4036 2113//4036
f 2113//4037 2126//4037 2114//4037
f 2126//4038 2127//4038 2114//4038
f 2114//4039 2127//4039 2115//4039
f 2127//4040 2128//4040 2115//4040
f 2115//4041 2128//4041 150//4041
f 2128//4042 149//4042 150//4042
f 74//4043 2129//4043 2116//4043
f 2129//4044 2130//4044 2116//4044
f 2116//4045 2130//4045 2117//4045
f 2130//4046 2131//4046 2117//4046
f 2117//4047 2131//4047 2118//4047
f 2131//4048 2132//4048 2118//4048
f 2118//4049 2132//4049 2119//4049
f 2132//4050 2133//4050 2119//4050
f 2119//4051 2133//4051 2120//4051
f 2133//4052 2134//4052 2120//4052
f 2120//4053 2134//4053 2121//4053
f 2134//4054 2135//4054 2121//4054
f 2121//4055 2135//4055 2122//4055
f 2135//4056 2136//4056 2122//4056
f 2122//4057 2136//4057 2123//4057
f 2136//4058 2137//4058 2123//4058
f 2123//4059 2137//4059 2124//4059
f 2137//4060 2138//4060 2124//4060
f 2124//4061 2138//4061 2125//4061
f 2138//4062 2139//4062 2125//4062
f 2125//4063 2139//4063 2126//4063
f 2139//4064 2140//4064 2126//4064
f 2126//4065 2140//4065 2127//4065
f 2140//4066 2141//4066 2127//4066
f 2127//4067 2141//4067 2128//4067
f 2141//4068 2142//4068 2128//4068
f 2128//4069 2142//4069 149//4069
f 2142//4070 148//4070 149//4070
f 73//4071 132//4071 2129//4071
f 132//4072 131//4072 2129//4072
f 2129//4073 131//4073 2130//4073
f 131//4074 130//4074 2130//4074
f 2130//4075 130//4075 2131//4075
f 130//4076 129//4076 2131//4076
f 2131//4077 129//4077 2132//4077
f 129//4078 128//4078 2132//4078
f 2132//4079 128//4079 2133//4079
f 128//4080 127//4080 2133//4080
f 2133//4081 127//4081 2134//4081
f 127//4082 126//4082 2134//4082
f 2134//4083 126//4083 2135//4083
f 126//4084 125//4084 2135//4084
f 2135//4085 125//4085 2136//4085
f 125//4086 124//4086 2136//4086
f 2136//4087 124//4087 2137//4087
f 124//4088 123//4088 2137//4088
f 2137//4089 123//4089 2138//4089
f 123//4090 122//4090 2138//4090
f 2138//4091 122//4091 2139//4091
f 122//4092 121//4092 2139//4092
f 2139//4093 121//4093 2140//4093
f 121//4094 120//4094 2140//4094
f 2140//4095 120//4095 2141//4095
f 120//4096 119//4096 2141//4096
f 2141//4097 119//4097 2142//4097
f 119//4098 118//4098 2142//4098
f 2142//4099 118//4099 148//4099
f 118//4100 5//4100 148//4100
f 118//4101 147//4101 5//4101
f 119//4102 2143//4102 118//4102
f 120//4103 2144//4103 119//4103
f 121//4104 2146//4104 120//4104
f 122//4105 2149//4105 121//4105
f 123//4106 2153//4106 122//4106
f 124//4107 2158//4107 123//4107
f 125//4108 2164//4108 124//4108
f 126//4109 2171//4109 125//4109
f 127//4110 2179//4110 126//4110
f 128//4111 2188//4111 127//4111
f 129//4112 2198//4112 128//4112
f 130//4113 2209//4113 129//4113
f 131//4114 2221//4114 130//4114
f 132//4115 2234//4115 131//4115
f 118//4116 2143//4116 147//4116
f 2143//4117 146//4117 147//4117
f 119//4118 2144//4118 2143//4118
f 2144//4119 2145//4119 2143//4119
f 2143//4120 2145//4120 146//4120
f 2145//4121 145//4121 146//4121
f 120//4122 2146//4122 2144//4122
f 2146//4123 2147//4123 2144//4123
f 2144//4124 2147//4124 2145//4124
f 2147//4125 2148//4125 2145//4125
f 2145//4126 2148//4126 145//4126
f 2148//4127 144//4127 145//4127
f 121//4128 2149//4128 2146//4128
f 2149//4129 2150//4129 2146//4129
f 2146//4130 2150//4130 2147//4130
f 2150//4131 2151//4131 2147//4131
f 2147//4132 2151//4132 2148//4132
f 2151//4133 2152//4133 2148//4133
f 2148//4134 2152//4134 144//4134
f 2152//4135 143//4135 144//4135
f 122//4136 2153//4136 2149//4136
f 2153//4137 2154//4137 2149//4137
f 2149//4138 2154//4138 2150//4138
f 2154//4139 2155//4139 2150//4139
f 2150//4140 2155//4140 2151//4140
f 2155//4141 2156//4141 2151//4141
f 2151//4142 2156//4142 2152//4142
f 2156//4143 2157//4143 2152//4143
f 2152//4144 2157//4144 143//4144
f 2157//4145 142//4145 143//4145
f 123//4146 2158//4146 2153//4146
f 2158//4147 2159//4147 2153//4147
f 2153//4148 2159//4148 2154//4148
f 2159//4149 2160//4149 2154//4149
f 2154//4150 2160//4150 2155//4150
f 2160//4151 2161//4151 2155//4151
f 2155//4152 2161//4152 2156//4152
f 2161//4153 2162//4153 2156//4153
f 2156//4154 2162//4154 2157//4154
f 2162//4155 2163//4155 2157//4155
f 2157//4156 2163//4156 142//4156
f 2163//4157 141//4157 142//4157
f 124//4158 2164//4158 2158//4158
f 2164//4159 2165//4159 2158//4159
f 2158//4160 2165//4160 2159//4160
f 2165//4161 2166//4161 2159//4161
f 2159//4162 2166//4162 2160//4162
f 2166//4163 2167//4163 2160//4163
f 2160//4164 2167//4164 2161//4164
f 2167//4165 2168//4165 2161//4165
f 2161//4166 2168//4166 2162//4166
f 2168//4167 2169//4167 2162//4167
f 2162//4168 2169//4168 2163//4168
f 2169//4169 2170//4169 2163//4169
f 2163//4170 2170//4170 141//4170
f 2170//4171 140//4171 141//4171
f 125//4172 2171//4172 2164//4172
f 2171//4173 2172//4173 2164//4173
f 2164//4174 2172//4174 2165//4174
f 2172//4175 2173//4175 2165//4175
f 2165//4176 2173//4176 2166//4176
f 2173//4177 2174//4177 2166//4177
f 2166//4178 2174//4178 2167//4178
f 2174//4179 2175//4179 2167//4179
f 2167//4180 2175//4180 2168//4180
f 2175//4181 2176//4181 2168//4181
f 2168//4182 2176//4182 2169//4182
f 2176//4183 2177//4183 2169//4183
f 2169//4184 2177//4184 2170//4184
f 2177//4185 2178//4185 2170//4185
f 2170//4186 2178//4186 140//4186
f 2178//4187 139//4187 140//4187
f 126//4188 2179//4188 2171//4188
f 2179//4189 2180//4189 2171//4189
f 2171//4190 2180//4190 2172//4190
f 2180//4191 2181//4191 2172//4191
f 2172//4192 2181//4192 2173//4192
f 2181//4193 2182//4193 2173//4193
f 2173//4194 2182//4194 2174//4194
f 2182//4195 2183//4195 2174//4195
f 2174//4196 2183//4196 2175//4196
f 2183//4197 2184//4197 2175//4197
f 2175//4198 2184//4198 2176//4198
f 2184//4199 2185//4199 2176//4199
f 2176//4200 2185//4200 2177//4200
f 2185//4201 2186//4201 2177//4201
f 2177//4202 2186//4202 2178//4202
f 2186//4203 2187//4203 2178//4203
f 2178//4204 2187//4204 139//4204
f 2187//4205 138//4205 139//4205
f 127//4206 2188//4206 2179//4206
f 2188//4207 2189//4207 2179//4207
f 2179//4208 2189//4208 2180//4208
f 2189//4209 2190//4209 2180//4209
f 2180//4210 2190//4210 2181//4210
f 2190//4211 2191//4211 2181//4211
f 2181//4212 2191//4212 2182//4212
f 2191//4213 2192//4213 2182//4213
f 2182//4214 2192//4214 2183//4214
f 2192//4215 2193//4215 2183//4215
f 2183//4216 2193//4216 2184//4216
f 2193//4217 2194//4217 2184//4217
f 2184//4218 2194//4218 2185//4218
f 2194//4219 2195//4219 2185//4219
f 2185//4220 2195//4220 2186//4220
f 2195//4221 2196//4221 2186//4221
f 2186//4222 2196//4222 2187//4222
f 2196//4223 2197//4223 2187//4223
f 2187//4224 2197//4224 138//4224
f 2197//4225 137//4225 138//4225
f 128//4226 2198//4226 2188//4226
f 2198//4227 2199//4227 2188//4227
f 2188//4228 2199//4228 2189//4228
f 2199//4229 2200//4229 2189//4229
f 2189//4230 2200//4230 2190//4230
f 2200//4231 2201//4231 2190//4231
f 2190//4232 2201//4232 2191//4232
f 2201//4233 2202//4233 2191//4233
f 2191//4234 2202//4234 2192//4234
f 2202//4235 2203//4235 2192//4235
f 2192//4236 2203//4236 2193//4236
f 2203//4237 2204//4237 2193//4237
f 2193//4238 2204//4238 2194//4238
f 2204//4239 2205//4239 2194//4239
f 2194//4240 2205//4240 2195//4240
f 2205//4241 2206//4241 2195//4241
f 2195//4242 2206//4242 2196//4242
f 2206//4243 2207//4243 2196//4243
f 2196//4244 2207//4244 2197//4244
f 2207//4245 2208//4245 2197//4245
f 2197//4246 2208//4246 137//4246
f 2208//4247 136//4247 137//4247
f 129//4248 2209//4248 2198//4248
f 2209//4249 2210//4249 2198//4249
f 2198//4250 2210//4250 2199//4250
f 2210//4251 2211//4251 2199//4251
f 2199//4252 2211//4252 2200//4252
f 2211//4253 2212//4253 2200//4253
f 2200//4254 2212//4254 2201//4254
f 2212//4255 2213//4255 2201//4255
f 2201//4256 2213//4256 2202//4256
f 2213//4257 2214//4257 2202//4257
f 2202//4258 2214//4258 2203//4258
f 2214//4259 2215//4259 2203//4259
f 2203//4260 2215//4260 2204//4260
f 2215//4261 2216//4261 2204//4261
f 2204//4262 2216//4262 2205//4262
f 2216//4263 2217//4263 2205//4263
f 2205//4264 2217//4264 2206//4264
f 2217//4265 2218//4265 2206//4265
f 2206//4266 2218//4266 2207//4266
f 2218//4267 2219//4267 2207//4267
f 2207//4268 2219//4268 2208//4268
f 2219//4269 2220//4269 2208//4269
f 2208//4270 2220//4270 136//4270
f 2220//4271 135//4271 136//4271
f 130//4272 2221//4272 2209//4272
f 2221//4273 2222//4273 2209//4273
f 2209//4274 2222//4274 2210//4274
f 2222//4275 2223//4275 2210//4275
f 2210//4276 2223//4276 2211//4276
f 2223//4277 2224//4277 2211//4277
f 2211//4278 2224//4278 2212//4278
f 2224//4279 2225//4279 2212//4279
f 2212//4280 2225//4280 2213//4280
f 2225//4281 2226//4281 2213//4281
f 2213//4282 2226//4282 2214//4282
f 2226//4283 2227//4283 2214//4283
f 2214//4284 2227//4284 2215//4284
f 2227//4285 2228//4285 2215//4285
f 2215//4286 2228//4286 2216//4286
f 2228//4287 2229//4287 2216//4287
f 2216//4288 2229//4288 2217//4288
f 2229//4289 2230//4289 2217//4289
f 2217//4290 2230//4290 2218//4290
f 2230//4291 2231//4291 2218//4291
f 2218//4292 2231//4292 2219//4292
f 2231//4293 2232//4293 2219//4293
f 2219//4294 2232//4294 2220//4294
f 2232//4295 2233//4295 2220//4295
f 2220//4296 2233//4296 135//4296
f 2233//4297 134//4297 135//4297
f 131//4298 2234//4298 2221//4298
f 2234//4299 2235//4299 2221//4299
f 2221//4300 2235//4300 2222//4300
f 2235//4301 2236//4301 2222//4301
f 2222//4302 2236//4302 2223//4302
f 2236//4303 2237//4303 2223//4303
f 2223//4304 2237//4304 2224//4304
f 2237//4305 2238//4305 2224//4305
f 2224//4306 2238//4306 2225//4306
f 2238//4307 2239//4307 2225//4307
f 2225//4308 2239//4308 2226//4308
f 2239//4309 2240//4309 2226//4309
f 2226//4310 2240//4310 2227//4310
f 2240//4311 2241//4311 2227//4311
f 2227//4312 2241//4312 2228//4312
f 2241//4313 2242//4313 2228//4313
f 2228//4314 2242//4314 2229//4314
f 2242//4315 2243//4315 2229//4315
f 2229//4316 2243//4316 2230//4316
f 2243//4317 2244//4317 2230//4317
f 2230//4318 2244//4318 2231//4318
f 2244//4319 2245//4319 2231//4319
f 2231//4320 2245//4320 2232//4320
f 2245//4321 2246//4321 2232//4321
f 2232//4322 2246//4322 2233//4322
f 2246//4323 2247//4323 2233//4323
f 2233//4324 2247//4324 134//4324
f 2247//4325 133//4325 134//4325
f 132//4326 102//4326 2234//4326
f 102//4327 101//4327 2234//4327
f 2234//4328 101//4328 2235//4328
f 101//4329 100//4329 2235//4329
f 2235//4330 100//4330 2236//4330
f 100//4331 99//4331 2236//4331
f 2236//4332 99//4332 2237//4332
f 99//4333 98//4333 2237//4333
f 2237//4334 98//4334 2238//4334
f 98//4335 97//4335 2238//4335
f 2238//4336 97//4336 2239//4336
f 97//4337 96//4337 2239//4337
f 2239//4338 96//4338 2240//4338
f 96//4339 95//4339 2240//4339
f 2240//4340 95//4340 2241//4340
f 95//4341 94//4341 2241//4341
f 2241//4342 94//4342 2242//4342
f 94//4343 93//4343 2242//4343
f 2242//4344 93//4344 2243//4344
f 93//4345 92//4345 2243//4345
f 2243//4346 92//4346 2244//4346
f 92//4347 91//4347 2244//4347
f 2244//4348 91//4348 2245//4348
f 91//4349 90//4349 2245//4349
f 2245//4350 90//4350 2246//4350
f 90//4351 89//4351 2246//4351
f 2246//4352 89//4352 2247//4352
f 89//4353 88//4353 2247//4353
f 2247//4354 88//4354 133//4354
f 88//4355 4//4355 133//4355
f 88//4356 117//4356 4//4356
f 89//4357 2248//4357 88//4357
f 90//4358 2249//4358 89//4358
f 91//4359 2251//4359 90//4359
f 92//4360 2254//4360 91//4360
f 93//4361 2258//4361 92//4361
f 94//4362 2263//4362 93//4362
f 95//4363 2269//4363 94//4363
f 96//4364 2276//4364 95//4364
f 97//4365 2284//4365 96//4365
f 98//4366 2293//4366 97//4366
f 99//4367 2303//4367 98//4367
f 100//4368 2314//4368 99//4368
f 101//4369 2326//4369 100//4369
f 102//4370 2339//4370 101//4370
f 88//4371 2248//4371 117//4371
f 2248//4372 116//4372 117//4372
f 89//4373 2249//4373 2248//4373
f 2249//4374 2250//4374 2248//4374
f 2248//4375 2250//4375 116//4375
f 2250//4376 115//4376 116//4376
f 90//4377 2251//4377 2249//4377
f 2251//4378 2252//4378 2249//4378
f 2249//4379 2252//4379 2250//4379
f 2252//4380 2253//4380 2250//4380
f 2250//4381 2253//4381 115//4381
f 2253//4382 114//4382 115//4382
f 91//4383 2254//4383 2251//4383
f 2254//4384 2255//4384 2251//4384
f 2251//4385 2255//4385 2252//4385
f 2255//4386 2256//4386 2252//4386
f 2252//4387 2256//4387 2253//4387
f 2256//4388 2257//4388 2253//4388
f 2253//4389 2257//4389 114//4389
f 2257//4390 113//4390 114//4390
f 92//4391 2258//4391 2254//4391
f 2258//4392 2259//4392 2254//4392
f 2254//4393 2259//4393 2255//4393
f 2259//4394 2260//4394 2255//4394
f 2255//4395 2260//4395 2256//4395
f 2260//4396 2261//4396 2256//4396
f 2256//4397 2261//4397 2257//4397
f 2261//4398 2262//4398 2257//4398
f 2257//4399 2262//4399 113//4399
f 2262//4400 112//4400 113//4400
f 93//4401 2263//4401 2258//4401
f 2263//4402 2264//4402 2258//4402
f 2258//4403 2264//4403 2259//4403
f 2264//4404 2265//4404 2259//4404
f 2259//4405 2265//4405 2260//4405
f 2265//4406 2266//4406 2260//4406
f 2260//4407 2266//4407 2261//4407
f 2266//4408 2267//4408 2261//4408
f 2261//4409 2267//4409 2262//4409
f 2267//4410 2268//4410 2262//4410
f 2262//4411 2268//4411 112//4411
f 2268//4412 111//4412 112//4412
f 94//4413 2269//4413 2263//4413
f 2269//4414 2270//4414 2263//4414
f 2263//4415 2270//4415 2264//4415
f 2270//4416 2271//4416 2264//4416
f 2264//4417 2271//4417 2265//4417
f 2271//4418 2272//4418 2265//4418
f 2265//4419 2272//4419 2266//4419
f 2272//4420 2273//4420 2266//4420
f 2266//4421 2273//4421 2267//4421
f 2273//4422 2274//4422 2267//4422
f 2267//4423 2274//4423 2268//4423
f 2274//4424 2275//4424 2268//4424
f 2268//4425 2275//4425 111//4425
f 2275//4426 110//4426 111//4426
f 95//4427 2276//4427 2269//4427
f 2276//4428 2277//4428 2269//4428
f 2269//4429 2277//4429 2270//4429
f 2277//4430 2278//4430 2270//4430
f 2270//4431 2278//4431 2271//4431
f 2278//4432 2279//4432 2271//4432
f 2271//4433 2279//4433 2272//4433
f 2279//4434 2280//4434 2272//4434
f 2272//4435 2280//4435 2273//4435
f 2280//4436 2281//4436 2273//4436
f 2273//4437 2281//4437 2274//4437
f 2281//4438 2282//4438 2274//4438
f 2274//4439 2282//4439 2275//4439
f 2282//4440 2283//4440 2275//4440
f 2275//4441 2283//4441 110//4441
f 2283//4442 109//4442 110//4442
f 96//4443 2284//4443 2276//4443
f 2284//4444 2285//4444 2276//4444
f 2276//4445 2285//4445 2277//4445
f 2285//4446 2286//4446 2277//4446
f 2277//4447 2286//4447 2278//4447
f 2286//4448 2287//4448 2278//4448
f 2278//4449 2287//4449 2279//4449
f 2287//4450 2288//4450 2279//4450
f 2279//4451 2288//4451 2280//4451
f 2288//4452 2289//4452 2280//4452
f 2280//4453 2289//4453 2281//4453
f 2289//4454 2290//4454 2281//4454
f 2281//4455 2290//4455 2282//4455
f 2290//4456 2291//4456 2282//4456
f 2282//4457 2291//4457 2283//4457
f 2291//4458 2292//4458 2283//4458
f 2283//4459 2292//4459 109//4459
f 2292//4460 108//4460 109//4460
f 97//4461 2293//4461 2284//4461
f 2293//4462 2294//4462 2284//4462
f 2284//4463 2294//4463 2285//4463
f 2294//4464 2295//4464 2285//4464
f 2285//4465 2295//4465 2286//4465
f 2295//4466 2296//4466 2286//4466
f 2286//4467 2296//4467 2287//4467
f 2296//4468 2297//4468 2287//4468
f 2287//4469 2297//4469 2288//4469
f 2297//4470 2298//4470 2288//4470
f 2288//4471 2298//4471 2289//4471
f 2298//4472 2299//4472 2289//4472
f 2289//4473 2299//4473 2290//4473
f 2299//4474 2300//4474 2290//4474
f 2290//4475 2300//4475 2291//4475
f 2300//4476 2301//4476 2291//4476
f 2291//4477 2301//4477 2292//4477
f 2301//4478 2302//4478 2292//4478
f 2292//4479 2302//4479 108//4479
f 2302//4480 107//4480 108//4480
f 98//4481 2303//4481 2293//4481
f 2303//4482 2304//4482 2293//4482
f 2293//4483 2304//4483 2294//4483
f 2304//4484 2305//4484 2294//4484
f 2294//4485 2305//4485 2295//4485
f 2305//4486 2306//4486 2295//4486
f 2295//4487 2306//4487 2296//4487
f 2306//4488 2307//4488 2296//4488
f 2296//4489 2307//4489 2297//4489
f 2307//4490 2308//4490 2297//4490
f 2297//4491 2308//4491 2298//4491
f 2308//4492 2309//4492 2298//4492
f 2298//4493 2309//4493 2299//4493
f 2309//4494 2310//4494 2299//4494
f 2299//4495 2310//4495 2300//4495
f 2310//4496 2311//4496 2300//4496
f 2300//4497 2311//4497 2301//4497
f 2311//4498 2312//4498 2301//4498
f 2301//4499 2312//4499 2302//4499
f 2312//4500 2313//4500 2302//4500
f 2302//4501 2313//4501 107//4501
f 2313//4502 106//4502 107//4502
f 99//4503 2314//4503 2303//4503
f 2314//4504 2315//4504 2303//4504
f 2303//4505 2315//4505 2304//4505
f 2315//4506 2316//4506 2304//4506
f 2304//4507 2316//4507 2305//4507
f 2316//4508 2317//4508 2305//4508
f 2305//4509 2317//4509 2306//4509
f 2317//4510 2318//4510 2306//4510
f 2306//4511 2318//4511 2307//4511
f 2318//4512 2319//4512 2307//4512
f 2307//4513 2319//4513 2308//4513
f 2319//4514 2320//4514 2308//4514
f 2308//4515 2320//4515 2309//4515
f 2320//4516 2321//4516 2309//4516
f 2309//4517 2321//4517 2310//4517
f 2321//4518 2322//4518 2310//4518
f 2310//4519 2322//4519 2311//4519
f 2322//4520 2323//4520 2311//4520
f 2311//4521 2323//4521 2312//4521
f 2323//4522 2324//4522 2312//4522
f 2312//4523 2324//4523 2313//4523
f 2324//4524 2325//4524 2313//4524
f 2313//4525 2325//4525 106//4525
f 2325//4526 105//4526 106//4526
f 100//4527 2326//4527 2314//4527
f 2326//4528 2327//4528 2314//4528
f 2314//4529 2327//4529 2315//4529
f 2327//4530 2328//4530 2315//4530
f 2315//4531 2328//4531 2316//4531
f 2328//4532 2329//4532 2316//4532
f 2316//4533 2329//4533 2317//4533
f 2329//4534 2330//4534 2317//4534
f 2317//4535 2330//4535 2318//4535
f 2330//4536 2331//4536 2318//4536
f 2318//4537 2331//4537 2319//4537
f 2331//4538 2332//4538 2319//4538
f 2319//4539 2332//4539 2320//4539
f 2332//4540 2333//4540 2320//4540
f 2320//4541 2333//4541 2321//4541
f 2333//4542 2334//4542 2321//4542
f 2321//4543 2334//4543 2322//4543
f 2334//4544 2335//4544 2322//4544
f 2322//4545 2335//4545 2323//4545
f 2335//4546 2336//4546 2323//4546
f 2323//4547 2336//4547 2324//4547
f 2336//4548 2337//4548 2324//4548
f 2324//4549 2337//4549 2325//4549
f 2337//4550 2338//4550 2325//4550
f 2325//4551 2338//4551 105//4551
f 2338//4552 104//4552 105//4552
f 101//4553 2339//4553 2326//4553
f 2339//4554 2340//4554 2326//4554
f 2326//4555 2340//4555 2327//4555
f 2340//4556 2341//4556 2327//4556
f 2327//4557 2341//4557 2328//4557
f 2341//4558 2342//4558 2328//4558
f 2328//4559 2342//4559 2329//4559
f 2342//4560 2343//4560 2329//4560
f 2329//4561 2343//4561 2330//4561
f 2343//4562 2344//4562 2330//4562
f 2330//4563 2344//4563 2331//4563
f 2344//4564 2345//4564 2331//4564
f 2331//4565 2345//4565 2332//4565
f 2345//4566 2346//4566 2332//4566
f 2332//4567 2346//4567 2333//4567
f 2346//4568 2347//4568 2333//4568
f 2333//4569 2347//4569 2334//4569
f 2347//4570 2348//4570 2334//4570
f 2334//4571 2348//4571 2335//4571
f 2348//4572 2349//4572 2335//4572
f 2335//4573 2349//4573 2336//4573
f 2349//4574 2350//4574 2336//4574
f 2336//4575 2350//4575 2337//4575
f 2350//4576 2351//4576 2337//4576
f 2337//4577 2351//4577 2338//4577
f 2351//4578 2352//4578 2338//4578
f 2338//4579 2352//4579 104//4579
f 2352//4580 103//4580 104//4580
f 102//4581 27//4581 2339//4581
f 27//4582 26//4582 2339//4582
f 2339//4583 26//4583 2340//4583
f 26//4584 25//4584 2340//4584
f 2340//4585 25//4585 2341//4585
f 25//4586 24//4586 2341//4586
f 2341//4587 24//4587 2342//4587
f 24//4588 23//4588 2342//4588
f 2342//4589 23//4589 2343//4589
f 23//4590 22//4590 2343//4590
f 2343//4591 22//4591 2344//4591
f 22//4592 21//4592 2344//4592
f 2344//4593 21//4593 2345//4593
f 21//4594 20//4594 2345//4594
f 2345//4595 20//4595 2346//4595
f 20//4596 19//4596 2346//4596
f 2346//4597 19//4597 2347//4597
f 19//4598 18//4598 2347//4598
f 2347//4599 18//4599 2348//4599
f 18//4600 17//4600 2348//4600
f 2348//4601 17//4601 2349//4601
f 17//4602 16//4602 2349//4602
f 2349//4603 16//4603 2350//4603
f 16//4604 15//4604 2350//4604
f 2350//4605 15//4605 2351//4605
f 15//4606 14//4606 2351//4606
f 2351//4607 14//4607 2352//4607
f 14//4608 13//4608 2352//4608
f 2352//4609 13//4609 103//4609
f 13//4610 3//4610 103//4610
f 58//4611 87//4611 6//4611
f 59//4612 2353//4612 58//4612
f 60//4613 2354//4613 59//4613
f 61//4614 2356//4614 60//4614
f 62//4615 2359//4615 61//4615
f 63//4616 2363//4616 62//4616
f 64//4617 2368//4617 63//4617
f 65//4618 2374//4618 64//4618
f 66//4619 2381//4619 65//4619
f 67//4620 2389//4620 66//4620
f 68//4621 2398//4621 67//4621
f 69//4622 2408//4622 68//4622
f 70//4623 2419//4623 69//4623
f 71//4624 2431//4624 70//4624
f 72//4625 2444//4625 71//4625
f 58//4626 2353//4626 87//4626
f 2353//4627 86//4627 87//4627
f 59//4628 2354//4628 2353//4628
f 2354//4629 2355//4629 2353//4629
f 2353//4630 2355//4630 86//4630
f 2355//4631 85//4631 86//4631
f 60//4632 2356//4632 2354//4632
f 2356//4633 2357//4633 2354//4633
f 2354//4634 2357//4634 2355//4634
f 2357//4635 2358//4635 2355//4635
f 2355//4636 2358//4636 85//4636
f 2358//4637 84//4637 85//4637
f 61//4638 2359//4638 2356//4638
f 2359//4639 2360//4639 2356//4639
f 2356//4640 2360//4640 2357//4640
f 2360//4641 2361//4641 2357//4641
f 2357//4642 2361//4642 2358//4642
f 2361//4643 2362//4643 2358//4643
f 2358//4644 2362//4644 84//4644
f 2362//4645 83//4645 84//4645
f 62//4646 2363//4646 2359//4646
f 2363//4647 2364//4647 2359//4647
f 2359//4648 2364//4648 2360//4648
f 2364//4649 2365//4649 2360//4649
f 2360//4650 2365//4650 2361//4650
f 2365//4651 2366//4651 2361//4651
f 2361//4652 2366//4652 2362//4652
f 2366//4653 2367//4653 2362//4653
f 2362//4654 2367//4654 83//4654
f 2367//4655 82//4655 83//4655
f 63//4656 2368//4656 2363//4656
f 2368//4657 2369//4657 2363//4657
f 2363//4658 2369//4658 2364//4658
f 2369//4659 2370//4659 2364//4659
f 2364//4660 2370//4660 2365//4660
f 2370//4661 2371//4661 2365//4661
f 2365//4662 2371//4662 2366//4662
f 2371//4663 2372//4663 2366//4663
f 2366//4664 2372//4664 2367//4664
f 2372//4665 2373//4665 2367//4665
f 2367//4666 2373//4666 82//4666
f 2373//4667 81//4667 82//4667
f 64//4668 2374//4668 2368//4668
f 2374//4669 2375//4669 2368//4669
f 2368//4670 2375//4670 2369//4670
f 2375//4671 2376//4671 2369//4671
f 2369//4672 2376//4672 2370//4672
f 2376//4673 2377//4673 2370//4673
f 2370//4674 2377//4674 2371//4674
f 2377//4675 2378//4675 2371//4675
f 2371//4676 2378//4676 2372//4676
f 2378//4677 2379//4677 2372//4677
f 2372//4678 2379//4678 2373//4678
f 2379//4679 2380//4679 2373//4679
f 2373//4680 2380//4680 81//4680
f 2380//4681 80//4681 81//4681
f 65//4682 2381//4682 2374//4682
f 2381//4683 2382//4683 2374//4683
f 2374//4684 2382//4684 2375//4684
f 2382//4685 2383//4685 2375//4685
f 2375//4686 2383//4686 2376//4686
f 2383//4687 2384//4687 2376//4687
f 2376//4688 2384//4688 2377//4688
f 2384//4689 2385//4689 2377//4689
f 2377//4690 2385//4690 2378//4690
f 2385//4691 2386//4691 2378//4691
f 2378//4692 2386//4692 2379//4692
f 2386//4693 2387//4693 2379//4693
f 2379//4694 2387//4694 2380//4694
f 2387//4695 2388//4695 2380//4695
f 2380//4696 2388//4696 80//4696
f 2388//4697 79//4697 80//4697
f 66//4698 2389//4698 2381//4698
f 2389//4699 2390//4699 2381//4699
f 2381//4700 2390//4700 2382//4700
f 2390//4701 2391//4701 2382//4701
f 2382//4702 2391//4702 2383//4702
f 2391//4703 2392//4703 2383//4703
f 2383//4704 2392//4704 2384//4704
f 2392//4705 2393//4705 2384//4705
f 2384//4706 2393//4706 2385//4706
f 2393//4707 2394//4707 2385//4707
f 2385//4708 2394//4708 2386//4708
f 2394//4709 2395//4709 2386//4709
f 2386//4710 2395//4710 2387//4710
f 2395//4711 2396//4711 2387//4711
f 2387//4712 2396//4712 2388//4712
f 2396//4713 2397//4713 2388//4713
f 2388//4714 2397//4714 79//4714
f 2397//4715 78//4715 79//4715
f 67//4716 2398//4716 2389//4716
f 2398//4717 2399//4717 2389//4717
f 2389//4718 2399//4718 2390//4718
f 2399//4719 2400//4719 2390//4719
f 2390//4720 2400//4720 2391//4720
f 2400//4721 2401//4721 2391//4721
f 2391//4722 2401//4722 2392//4722
f 2401//4723 2402//4723 2392//4723
f 2392//4724 2402//4724 2393//4724
f 2402//4725 2403//4725 2393//4725
f 2393//4726 2403//4726 2394//4726
f 2403//4727 2404//4727 2394//4727
f 2394//4728 2404//4728 2395//4728
f 2404//4729 2405//4729 2395//4729
f 2395//4730 2405//4730 2396//4730
f 2405//4731 2406//4731 2396//4731
f 2396//4732 2406//4732 2397//4732
f 2406//4733 2407//4733 2397//4733
f 2397//4734 2407//4734 78//4734
f 2407//4735 77//4735 78//4735
f 68//4736 2408//4736 2398//4736
f 2408//4737 2409//4737 2398//4737
f 2398//4738 2409//4738 2399//4738
f 2409//4739 2410//4739 2399//4739
f 2399//4740 2410//4740 2400//4740
f 2410//4741 2411//4741 2400//4741
f 2400//4742 2411//4742 2401//4742
f 2411//4743 2412//4743 2401//4743
f 2401//4744 2412//4744 2402//4744
f 2412//4745 2413//4745 2402//4745
f 2402//4746 2413//4746 2403//4746
f 2413//4747 2414//4747 2403//4747
f 2403//4748 2414//4748 2404//4748
f 2414//4749 2415//4749 2404//4749
f 2404//4750 2415//4750 2405//4750
f 2415//4751 2416//4751 2405//4751
f 2405//4752 2416//4752 2406//4752
f 2416//4753 2417//4753 2406//4753
f 2406//4754 2417//4754 2407//4754
f 2417//4755 2418//4755 2407//4755
f 2407//4756 2418//4756 77//4756
f 2418//4757 76//4757 77//4757
f 69//4758 2419//4758 2408//4758
f 2419//4759 2420//4759 2408//4759
f 2408//4760 2420//4760 2409//4760
f 2420//4761 2421//4761 2409//4761
f 2409//4762 2421//4762 2410//4762
f 2421//4763 2422//4763 2410//4763
f 2410//4764 2422//4764 2411//4764
f 2422//4765 2423//4765 2411//4765
f 2411//4766 2423//4766 2412//4766
f 2423//4767 2424//4767 2412//4767
f 2412//4768 2424//4768 2413//4768
f 2424//4769 2425//4769 2413//4769
f 2413//4770 2425//4770 2414//4770
f 2425//4771 2426//4771 2414//4771
f 2414//4772 2426//4772 2415//4772
f 2426//4773 2427//4773 2415//4773
f 2415//4774 2427//4774 2416//4774
f 2427//4775 2428//4775 2416//4775
f 2416//4776 2428//4776 2417//4776
f 2428//4777 2429//4777 2417//4777
f 2417//4778 2429//4778 2418//4778
f 2429//4779 2430//4779 2418//4779
f 2418//4780 2430//4780 76//4780
f 2430//4781 75//4781 76//4781
f 70//4782 2431//4782 2419//4782
f 2431//4783 2432//4783 2419//4783
f 2419//4784 2432//4784 2420//4784
f 2432//4785 2433//4785 2420//4785
f 2420//4786 2433//4786 2421//4786
f 2433//4787 2434//4787 2421//4787
f 2421//4788 2434//4788 2422//4788
f 2434//4789 2435//4789 2422//4789
f 2422//4790 2435//4790 2423//4790
f 2435//4791 2436//4791 2423//4791
f 2423//4792 2436//4792 2424//4792
f 2436//4793 2437//4793 2424//4793
f 2424//4794 2437//4794 2425//4794
f 2437//4795 2438//4795 2425//4795
f 2425//4796 2438//4796 2426//4796
f 2438//4797 2439//4797 2426//4797
f 2426//4798 2439//4798 2427//4798
f 2439//4799 2440//4799 2427//4799
f 2427//4800 2440//4800 2428//4800
f 2440//4801 2441//4801 2428//4801
f 2428//4802 2441//4802 2429//4802
f 2441//4803 2442//4803 2429//4803
f 2429//4804 2442//4804 2430//4804
f 2442//4805 2443//4805 2430//4805
f 2430//4806 2443//4806 75//4806
f 2443//4807 74//4807 75//4807
f 71//4808 2444//4808 2431//4808
f 2444//4809 2445//4809 2431//4809
f 2431//4810 2445//4810 2432//4810
f 2445//4811 2446//4811 2432//4811
f 2432//4812 2446//4812 2433//4812
f 2446//4813 2447//4813 2433//4813
f 2433//4814 2447//4814 2434//4814
f 2447//4815 2448//4815 2434//4815
f 2434//4816 2448//4816 2435//4816
f 2448//4817 2449//4817 2435//4817
f 2435//4818 2449//4818 2436//4818
f 2449//4819 2450//4819 2436//4819
f 2436//4820 2450//4820 2437//4820
f 2450//4821 2451//4821 2437//4821
f 2437//4822 2451//4822 2438//4822
f 2451//4823 2452//4823 2438//4823
f 2438//4824 2452//4824 2439//4824
f 2452//4825 2453//4825 2439//4825
f 2439//4826 2453//4826 2440//4826
f 2453//4827 2454//4827 2440//4827
f 2440//4828 2454//4828 2441//4828
f 2454//4829 2455//4829 2441//4829
f 2441//4830 2455//4830 2442//4830
f 2455//4831 2456//4831 2442//4831
f 2442//4832 2456//4832 2443//4832
f 2456//4833 2457//4833 2443//4833
f 2443//4834 2457//4834 74//4834
f 2457//4835 73//4835 74//4835
f 72//4836 42//4836 2444//4836
f 42//4837 41//4837 2444//4837
f 2444//4838 41//4838 2445//4838
f 41//4839 40//4839 2445//4839
f 2445//4840 40//4840 2446//4840
f 40//4841 39//4841 2446//4841
f 2446//4842 39//4842 2447//4842
f 39//4843 38//4843 2447//4843
f 2447//4844 38//4844 2448//4844
f 38//4845 37//4845 2448//4845
f 2448//4846 37//4846 2449//4846
f 37//4847 36//4847 2449//4847
f 2449//4848 36//4848 2450//4848
f 36//4849 35//4849 2450//4849
f 2450//4850 35//4850 2451//4850
f 35//4851 34//4851 2451//4851
f 2451//4852 34//4852 2452//4852
f 34//4853 33//4853 2452//4853
f 2452//4854 33//4854 2453//4854
f 33//4855 32//4855 2453//4855
f 2453//4856 32//4856 2454//4856
f 32//4857 31//4857 2454//4857
f 2454//4858 31//4858 2455//4858
f 31//4859 30//4859 2455//4859
f 2455//4860 30//4860 2456//4860
f 30//4861 29//4861 2456//4861
f 2456//4862 29//4862 2457//4862
f 29//4863 28//4863 2457//4863
f 2457//4864 28//4864 73//4864
f 28//4865 1//4865 73//4865
f 13//4866 57//4866 3//4866
f 14//4867 2458//4867 13//4867
f 15//4868 2459//4868 14//4868
f 16//4869 2461//4869 15//4869
f 17//4870 2464//4870 16//4870
f 18//4871 2468//4871 17//4871
f 19//4872 2473//4872 18//4872
f 20//4873 2479//4873 19//4873
f 21//4874 2486//4874 20//4874
f 22//4875 2494//4875 21//4875
f 23//4876 2503//4876 22//4876
f 24//4877 2513//4877 23//4877
f 25//4878 2524//4878 24//4878
f 26//4879 2536//4879 25//4879
f 27//4880 2549//4880 26//4880
f 13//4881 2458//4881 57//4881
f 2458//4882 56//4882 57//4882
f 14//4883 2459//4883 2458//4883
f 2459//4884 2460//4884 2458//4884
f 2458//4885 2460//4885 56//4885
f 2460//4886 55//4886 56//4886
f 15//4887 2461//4887 2459//4887
f 2461//4888 2462//4888 2459//4888
f 2459//4889 2462//4889 2460//4889
f 2462//4890 2463//4890 2460//4890
f 2460//4891 2463//4891 55//4891
f 2463//4892 54//4892 55//4892
f 16//4893 2464//4893 2461//4893
f 2464//4894 2465//4894 2461//4894
f 2461//4895 2465//4895 2462//4895
f 2465//4896 2466//4896 2462//4896
f 2462//4897 2466//4897 2463//4897
f 2466//4898 2467//4898 2463//4898
f 2463//4899 2467//4899 54//4899
f 2467//4900 53//4900 54//4900
f 17//4901 2468//4901 2464//4901
f 2468//4902 2469//4902 2464//4902
f 2464//4903 2469//4903 2465//4903
f 2469//4904 2470//4904 2465//4904
f 2465//4905 2470//4905 2466//4905
f 2470//4906 2471//4906 2466//4906
f 2466//4907 2471//4907 2467//4907
f 2471//4908 2472//4908 2467//4908
f 2467//4909 2472//4909 53//4909
f 2472//4910 52//4910 53//4910
f 18//4911 2473//4911 2468//4911
f 2473//4912 2474//4912 2468//4912
f 2468//4913 2474//4913 2469//4913
f 2474//4914 2475//4914 2469//4914
f 2469//4915 2475//4915 2470//4915
f 2475//4916 2476//4916 2470//4916
f 2470//4917 2476//4917 2471//4917
f 2476//4918 2477//4918 2471//4918
f 2471//4919 2477//4919 2472//4919
f 2477//4920 2478//4920 2472//4920
f 2472//4921 2478//4921 52//4921
f 2478//4922 51//4922 52//4922
f 19//4923 2479//4923 2473//4923
f 2479//4924 2480//4924 2473//4924
f 2473//4925 2480//4925 2474//4925
f 2480//4926 2481//4926 2474//4926
f 2474//4927 2481//4927 2475//4927
f 2481//4928 2482//4928 2475//4928
f 2475//4929 2482//4929 2476//4929
f 2482//4930 2483//4930 2476//4930
f 2476//4931 2483//4931 2477//4931
f 2483//4932 2484//4932 2477//4932
f 2477//4933 2484//4933 2478//4933
f 2484//4934 2485//4934 2478//4934
f 2478//4935 2485//4935 51//4935
f 2485//4936 50//4936 51//4936
f 20//4937 2486//4937 2479//4937
f 2486//4938 2487//4938 2479//4938
f 2479//4939 2487//4939 2480//4939
f 2487//4940 2488//4940 2480//4940
f 2480//4941 2488//4941 2481//4941
f 2488//4942 2489//4942 2481//4942
f 2481//4943 2489//4943 2482//4943
f 2489//4944 2490//4944 2482//4944
f 2482//4945 2490//4945 2483//4945
f 2490//4946 2491//4946 2483//4946
f 2483//4947 2491//4947 2484//4947
f 2491//4948 2492//4948 2484//4948
f 2484//4949 2492//4949 2485//4949
f 2492//4950 2493//4950 2485//4950
f 2485//4951 2493//4951 50//4951
f 2493//4952 49//4952 50//4952
f 21//4953 2494//4953 2486//4953
f 2494//4954 2495//4954 2486//4954
f 2486//4955 2495//4955 2487//4955
f 2495//4956 2496//4956 2487//4956
f 2487//4957 2496//4957 2488//4957
f 2496//4958 2497//4958 2488//4958
f 2488//4959 2497//4959 2489//4959
f 2497//4960 2498//4960 2489//4960
f 2489//4961 2498//4961 2490//4961
f 2498//4962 2499//4962 2490//4962
f 2490//4963 2499//4963 2491//4963
f 2499//4964 2500//4964 2491//4964
f 2491//4965 2500//4965 2492//4965
f 2500//4966 2501//4966 2492//4966
f 2492//4967 2501//4967 2493//4967
f 2501//4968 2502//4968 2493//4968
f 2493//4969 2502//4969 49//4969
f 2502//4970 48//4970 49//4970
f 22//4971 2503//4971 2494//4971
f 2503//4972 2504//4972 2494//4972
f 2494//4973 2504//4973 2495//4973
f 2504//4974 2505//4974 2495//4974
f 2495//4975 2505//4975 2496//4975
f 2505//4976 2506//4976 2496//4976
f 2496//4977 2506//4977 2497//4977
f 2506//4978 2507//4978 2497//4978
f 2497//4979 2507//4979 2498//4979
f 2507//4980 2508//4980 2498//4980
f 2498//4981 2508//4981 2499//4981
f 2508//4982 2509//4982 2499//4982
f 2499//4983 2509//4983 2500//4983
f 2509//4984 2510//4984 2500//4984
f 2500//4985 2510//4985 2501//4985
f 2510//4986 2511//4986 2501//4986
f 2501//4987 2511//4987 2502//4987
f 2511//4988 2512//4988 2502//4988
f 2502//4989 2512//4989 48//4989
f 2512//4990 47//4990 48//4990
f 23//4991 2513//4991 2503//4991
f 2513//4992 2514//4992 2503//4992
f 2503//4993 2514//4993 2504//4993
f 2514//4994 2515//4994 2504//4994
f 2504//4995 2515//4995 2505//4995
f 2515//4996 2516//4996 2505//4996
f 2505//4997 2516//4997 2506//4997
f 2516//4998 2517//4998 2506//4998
f 2506//4999 2517//4999 2507//4999
f 2517//5000 2518//5000 2507//5000
f 2507//5001 2518//5001 2508//5001
f 2518//5002 2519//5002 2508//5002
f 2508//5003 2519//5003 2509//5003
f 2519//5004 2520//5004 2509//5004
f 2509//5005 2520//5005 2510//5005
f 2520//5006 2521//5006 2510//5006
f 2510//5007 2521//5007 2511//5007
f 2521//5008 2522//5008 2511//5008
f 2511//5009 2522//5009 2512//5009
f 2522//5010 2523//5010 2512//5010
f 2512//5011 2523//5011 47//5011
f 2523//5012 46//5012 47//5012
f 24//5013 2524//5013 2513//5013
f 2524//5014 2525//5014 2513//5014
f 2513//5015 2525//5015 2514//5015
f 2525//5016 2526//5016 2514//5016
f 2514//5017 2526//5017 2515//5017
f 2526//5018 2527//5018 2515//5018
f 2515//5019 2527//5019 2516//5019
f 2527//5020 2528//5020 2516//5020
f 2516//5021 2528//5021 2517//5021
f 2528//5022 2529//5022 2517//5022
f 2517//5023 2529//5023 2518//5023
f 2529//5024 2530//5024 2518//5024
f 2518//5025 2530//5025 2519//5025
f 2530//5026 2531//5026 2519//5026
f 2519//5027 2531//5027 2520//5027
f 2531//5028 2532//5028 2520//5028
f 2520//5029 2532//5029 2521//5029
f 2532//5030 2533//5030 2521//5030
f 2521//5031 2533//5031 2522//5031
f 2533//5032 2534//5032 2522//5032
f 2522//5033 2534//5033 2523//5033
f 2534//5034 2535//5034 2523//5034
f 2523//5035 2535//5035 46//5035
f 2535//5036 45//5036 46//5036
f 25//5037 2536//5037 2524//5037
f 2536//5038 2537//5038 2524//5038
f 2524//5039 2537//5039 2525//5039
f 2537//5040 2538//5040 2525//5040
f 2525//5041 2538//5041 2526//5041
f 2538//5042 2539//5042 2526//5042
f 2526//5043 2539//5043 2527//5043
f 2539//5044 2540//5044 2527//5044
f 2527//5045 2540//5045 2528//5045
f 2540//5046 2541//5046 2528//5046
f 2528//5047 2541//5047 2529//5047
f 2541//5048 2542//5048 2529//5048
f 2529//5049 2542//5049 2530//5049
f 2542//5050 2543//5050 2530//5050
f 2530//5051 2543//5051 2531//5051
f 2543//5052 2544//5052 2531//5052
f 2531//5053 2544//5053 2532//5053
f 2544//5054 2545//5054 2532//5054
f 2532//5055 2545//5055 2533//5055
f 2545//5056 2546//5056 2533//5056
f 2533//5057 2546//5057 2534//5057
f 2546//5058 2547//5058 2534//5058
f 2534//5059 2547//5059 2535//5059
f 2547//5060 2548//5060 2535//5060
f 2535//5061 2548//5061 45//5061
f 2548//5062 44//5062 45//5062
f 26//5063 2549//5063 2536//5063
f 2549//5064 2550//5064 2536//5064
f 2536//5065 2550//5065 2537//5065
f 2550//5066 2551//5066 2537//5066
f 2537//5067 2551//5067 2538//5067
f 2551//5068 2552//5068 2538//5068
f 2538//5069 2552//5069 2539//5069
f 2552//5070 2553//5070 2539//5070
f 2539//5071 2553//5071 2540//5071
f 2553//5072 2554//5072 2540//5072
f 2540//5073 2554//5073 2541//5073
f 2554//5074 2555//5074 2541//5074
f 2541//5075 2555//5075 2542//5075
f 2555//5076 2556//5076 2542//5076
f 2542//5077 2556//5077 2543//5077
f 2556//5078 2557//5078 2543//5078
f 2543//5079 2557//5079 2544//5079
f 2557//5080 2558//5080 2544//5080
f 2544//5081 2558//5081 2545//5081
f 2558//5082 2559//5082 2545//5082
f 2545//5083 2559//5083 2546//5083
f 2559//5084 2560//5084 2546//5084
f 2546//5085 2560//5085 2547//5085
f 2560//5086 2561//5086 2547//5086
f 2547//5087 2561//5087 2548//5087
f 2561//5088 2562//5088 2548//5088
f 2548//5089 2562//5089 44//5089
f 2562//5090 43//5090 44//5090
f 27//5091 28//5091 2549//5091
f 28//5092 29//5092 2549//5092
f 2549//5093 29//5093 2550//5093
f 29//5094 30//5094 2550//5094
f 2550//5095 30//5095 2551//5095
f 30//5096 31//5096 2551//5096
f 2551//5097 31//5097 2552//5097
f 31//5098 32//5098 2552//5098
f 2552//5099 32//5099 2553//5099
f 32//5100 33//5100 2553//5100
f 2553//5101 33//5101 2554//5101
f 33//5102 34//5102 2554//5102
f 2554//5103 34//5103 2555//5103
f 34//5104 35//5104 2555//5104
f 2555//5105 35//5105 2556//5105
f 35//5106 36//5106 2556//5106
f 2556//5107 36//5107 2557//5107
f 36//5108 37//5108 2557//5108
f 2557//5109 37//5109 2558//5109
f 37//5110 38//5110 2558//5110
f 2558//5111 38//5111 2559//5111
f 38//5112 39//5112 2559//5112
f 2559//5113 39//5113 2560//5113
f 39//5114 40//5114 2560//5114
f 2560//5115 40//5115 2561//5115
f 40//5116 41//5116 2561//5116
f 2561//5117 41//5117 2562//5117
f 41//5118 42//5118 2562//5118
f 2562//5119 42//5119 43//5119
f 42//5120 2//5120 43//5120
`, `
# Blender v2.76 (sub 0) OBJ File: ''
# www.blender.org
mtllib untitled.mtl
o Suzanne
v 35.000000 13.125000 61.250000
v -35.000000 13.125000 61.250000
v 40.000000 7.500000 55.000000
v -40.000000 7.500000 55.000000
v 43.750000 4.375000 46.250000
v -43.750000 4.375000 46.250000
v 28.125000 -1.875000 49.375000
v -28.125000 -1.875000 49.375000
v 28.125000 2.500000 57.500000
v -28.125000 2.500000 57.500000
v 28.125000 10.625000 62.500000
v -28.125000 10.625000 62.500000
v 21.875000 13.125000 63.750000
v -21.875000 13.125000 63.750000
v 16.250000 7.500000 59.375000
v -16.250000 7.500000 59.375000
v 12.500000 4.375000 51.875000
v -12.500000 4.375000 51.875000
v 6.250000 19.375000 52.500000
v -6.250000 19.375000 52.500000
v 11.250000 19.375000 59.375000
v -11.250000 19.375000 59.375000
v 19.375000 19.375000 63.750000
v -19.375000 19.375000 63.750000
v 21.875000 26.250000 63.750000
v -21.875000 26.250000 63.750000
v 16.250000 31.250000 59.375000
v -16.250000 31.250000 59.375000
v 12.500000 35.000000 51.875000
v -12.500000 35.000000 51.875000
v 28.125000 41.250000 49.375000
v -28.125000 41.250000 49.375000
v 28.125000 36.250000 57.500000
v -28.125000 36.250000 57.500000
v 28.125000 28.750000 62.500000
v -28.125000 28.750000 62.500000
v 35.000000 26.250000 61.250000
v -35.000000 26.250000 61.250000
v 40.000000 31.250000 55.000000
v -40.000000 31.250000 55.000000
v 43.750000 35.000000 46.250000
v -43.750000 35.000000 46.250000
v 50.000000 19.375000 45.000000
v -50.000000 19.375000 45.000000
v 45.000000 19.375000 53.750000
v -45.000000 19.375000 53.750000
v 37.500000 19.375000 60.625000
v -37.500000 19.375000 60.625000
v 38.125000 19.375000 61.875000
v -38.125000 19.375000 61.875000
v 35.625000 26.875000 62.500000
v -35.625000 26.875000 62.500000
v 28.125000 30.000000 64.375000
v -28.125000 30.000000 64.375000
v 21.250000 26.875000 65.625000
v -21.250000 26.875000 65.625000
v 18.125000 19.375000 65.625000
v -18.125000 19.375000 65.625000
v 21.250000 12.500000 65.625000
v -21.250000 12.500000 65.625000
v 28.125000 19.375000 66.250000
v -28.125000 19.375000 66.250000
v 28.125000 9.375000 64.375000
v -28.125000 9.375000 64.375000
v 35.625000 12.500000 62.500000
v -35.625000 12.500000 62.500000
v 0.000000 34.375000 59.375000
v 0.000000 28.125000 65.625000
v 0.000000 -54.375000 58.750000
v 0.000000 -25.625000 62.500000
v 0.000000 -15.000000 63.750000
v 0.000000 -61.875000 57.500000
v 0.000000 32.500000 48.125000
v 0.000000 45.625000 45.625000
v 0.000000 71.875000 -43.750000
v 0.000000 45.000000 -68.125000
v 0.000000 5.625000 -66.250000
v 0.000000 -30.625000 -28.125000
v 16.250000 -15.000000 45.000000
v -16.250000 -15.000000 45.000000
v 25.000000 -35.000000 45.625000
v -25.000000 -35.000000 45.625000
v 28.125000 -55.625000 45.625000
v -28.125000 -55.625000 45.625000
v 29.375000 -71.250000 42.500000
v -29.375000 -71.250000 42.500000
v 26.250000 -75.625000 41.875000
v -26.250000 -75.625000 41.875000
v 14.375000 -77.500000 44.375000
v -14.375000 -77.500000 44.375000
v 0.000000 -78.750000 46.250000
v 35.000000 -11.250000 42.500000
v -35.000000 -11.250000 42.500000
v 50.625000 -3.125000 43.125000
v -50.625000 -3.125000 43.125000
v 66.250000 11.875000 35.625000
v -66.250000 11.875000 35.625000
v 68.750000 34.375000 47.500000
v -68.750000 34.375000 47.500000
v 56.875000 38.750000 50.000000
v -56.875000 38.750000 50.000000
v 39.375000 48.125000 55.000000
v -39.375000 48.125000 55.000000
v 25.625000 60.625000 58.750000
v -25.625000 60.625000 58.750000
v 12.500000 57.500000 60.625000
v -12.500000 57.500000 60.625000
v 5.000000 39.375000 60.000000
v -5.000000 39.375000 60.000000
v 13.125000 33.125000 61.875000
v -13.125000 33.125000 61.875000
v 10.000000 24.375000 61.250000
v -10.000000 24.375000 61.250000
v 16.250000 7.500000 59.375000
v -16.250000 7.500000 59.375000
v 30.000000 1.250000 56.250000
v -30.000000 1.250000 56.250000
v 39.375000 5.000000 53.750000
v -39.375000 5.000000 53.750000
v 50.000000 15.000000 51.875000
v -50.000000 15.000000 51.875000
v 51.250000 23.750000 51.875000
v -51.250000 23.750000 51.875000
v 48.125000 30.000000 53.125000
v -48.125000 30.000000 53.125000
v 34.375000 35.000000 57.500000
v -34.375000 35.000000 57.500000
v 20.000000 37.500000 60.625000
v -20.000000 37.500000 60.625000
v 0.000000 -61.250000 58.750000
v 8.750000 -57.500000 58.750000
v -8.750000 -57.500000 58.750000
v 9.375000 -66.875000 56.875000
v -9.375000 -66.875000 56.875000
v 5.000000 -70.625000 55.625000
v -5.000000 -70.625000 55.625000
v 0.000000 -71.250000 55.000000
v 0.000000 -15.625000 60.000000
v 0.000000 -11.250000 59.375000
v 8.125000 -11.875000 59.375000
v -8.125000 -11.875000 59.375000
v 10.000000 -18.125000 60.000000
v -10.000000 -18.125000 60.000000
v 6.875000 -23.125000 59.375000
v -6.875000 -23.125000 59.375000
v 31.875000 -3.750000 53.750000
v -31.875000 -3.750000 53.750000
v 49.375000 4.375000 50.000000
v -49.375000 4.375000 50.000000
v 58.125000 16.250000 48.125000
v -58.125000 16.250000 48.125000
v 59.375000 30.000000 52.500000
v -59.375000 30.000000 52.500000
v 55.000000 33.125000 58.125000
v -55.000000 33.125000 58.125000
v 35.000000 43.750000 63.750000
v -35.000000 43.750000 63.750000
v 25.000000 51.250000 66.875000
v -25.000000 51.250000 66.875000
v 16.250000 49.375000 68.125000
v -16.250000 49.375000 68.125000
v 8.125000 34.375000 67.500000
v -8.125000 34.375000 67.500000
v 10.000000 -8.125000 65.000000
v -10.000000 -8.125000 65.000000
v 16.875000 -35.625000 56.875000
v -16.875000 -35.625000 56.875000
v 20.000000 -56.250000 55.000000
v -20.000000 -56.250000 55.000000
v 21.250000 -65.625000 53.125000
v -21.250000 -65.625000 53.125000
v 18.750000 -73.125000 50.625000
v -18.750000 -73.125000 50.625000
v 13.125000 -74.375000 50.625000
v -13.125000 -74.375000 50.625000
v 0.000000 -75.625000 51.250000
v 0.000000 3.750000 58.125000
v 0.000000 16.875000 61.250000
v 26.250000 38.125000 59.375000
v -26.250000 38.125000 59.375000
v 13.125000 11.250000 60.000000
v -13.125000 11.250000 60.000000
v 10.625000 16.875000 60.625000
v -10.625000 16.875000 60.625000
v 9.375000 -55.000000 58.750000
v -9.375000 -55.000000 58.750000
v 6.250000 -35.625000 60.000000
v -6.250000 -35.625000 60.000000
v 0.000000 -35.625000 60.000000
v 0.000000 -26.250000 59.375000
v 7.500000 -21.875000 62.500000
v -7.500000 -21.875000 62.500000
v 10.625000 -18.125000 63.750000
v -10.625000 -18.125000 63.750000
v 8.750000 -10.625000 62.500000
v -8.750000 -10.625000 62.500000
v 3.125000 -10.000000 62.500000
v -3.125000 -10.000000 62.500000
v 0.000000 -16.250000 66.250000
v 3.750000 -11.875000 65.000000
v -3.750000 -11.875000 65.000000
v 7.500000 -12.500000 65.000000
v -7.500000 -12.500000 65.000000
v 8.750000 -18.125000 66.250000
v -8.750000 -18.125000 66.250000
v 6.250000 -20.000000 64.375000
v -6.250000 -20.000000 64.375000
v 0.000000 -23.125000 64.375000
v 20.625000 -25.000000 44.375000
v -20.625000 -25.000000 44.375000
v 13.125000 -19.375000 56.875000
v -13.125000 -19.375000 56.875000
v 14.375000 -25.000000 56.875000
v -14.375000 -25.000000 56.875000
v 18.750000 -20.000000 44.375000
v -18.750000 -20.000000 44.375000
v 0.000000 -70.000000 55.000000
v 3.750000 -69.375000 55.000000
v -3.750000 -69.375000 55.000000
v 7.500000 -65.625000 56.875000
v -7.500000 -65.625000 56.875000
v 7.500000 -59.375000 58.125000
v -7.500000 -59.375000 58.125000
v 0.000000 -62.500000 52.500000
v 7.500000 -60.000000 53.125000
v -7.500000 -60.000000 53.125000
v 7.500000 -65.000000 51.250000
v -7.500000 -65.000000 51.250000
v 3.750000 -68.125000 50.625000
v -3.750000 -68.125000 50.625000
v 0.000000 -68.750000 50.625000
v 13.750000 17.500000 62.500000
v -13.750000 17.500000 62.500000
v 15.000000 12.500000 61.875000
v -15.000000 12.500000 61.875000
v 26.875000 34.375000 60.625000
v -26.875000 34.375000 60.625000
v 21.875000 33.750000 61.875000
v -21.875000 33.750000 61.875000
v 33.750000 31.875000 61.875000
v -33.750000 31.875000 61.875000
v 45.000000 28.125000 55.625000
v -45.000000 28.125000 55.625000
v 46.875000 23.125000 55.000000
v -46.875000 23.125000 55.000000
v 46.250000 15.625000 54.375000
v -46.250000 15.625000 54.375000
v 38.125000 8.125000 57.500000
v -38.125000 8.125000 57.500000
v 30.000000 5.000000 59.375000
v -30.000000 5.000000 59.375000
v 18.125000 8.750000 62.500000
v -18.125000 8.750000 62.500000
v 14.375000 23.750000 62.500000
v -14.375000 23.750000 62.500000
v 16.875000 30.000000 62.500000
v -16.875000 30.000000 62.500000
v 18.750000 28.750000 60.625000
v -18.750000 28.750000 60.625000
v 15.625000 23.750000 60.625000
v -15.625000 23.750000 60.625000
v 19.375000 10.000000 60.625000
v -19.375000 10.000000 60.625000
v 30.000000 6.875000 58.125000
v -30.000000 6.875000 58.125000
v 36.875000 9.375000 56.250000
v -36.875000 9.375000 56.250000
v 43.750000 16.875000 53.750000
v -43.750000 16.875000 53.750000
v 44.375000 22.500000 53.750000
v -44.375000 22.500000 53.750000
v 42.500000 26.875000 54.375000
v -42.500000 26.875000 54.375000
v 33.125000 31.250000 60.000000
v -33.125000 31.250000 60.000000
v 22.500000 31.875000 61.250000
v -22.500000 31.875000 61.250000
v 26.875000 32.500000 60.000000
v -26.875000 32.500000 60.000000
v 16.250000 13.750000 60.000000
v -16.250000 13.750000 60.000000
v 15.625000 18.125000 60.000000
v -15.625000 18.125000 60.000000
v 8.750000 36.875000 48.750000
v -8.750000 36.875000 48.750000
v 15.625000 53.125000 49.375000
v -15.625000 53.125000 49.375000
v 26.875000 55.000000 47.500000
v -26.875000 55.000000 47.500000
v 38.750000 44.375000 44.375000
v -38.750000 44.375000 44.375000
v 54.375000 36.250000 39.375000
v -54.375000 36.250000 39.375000
v 63.750000 32.500000 36.875000
v -63.750000 32.500000 36.875000
v 61.875000 13.125000 30.000000
v -61.875000 13.125000 30.000000
v 48.125000 0.000000 33.125000
v -48.125000 0.000000 33.125000
v 35.000000 -7.500000 37.500000
v -35.000000 -7.500000 37.500000
v 0.000000 71.875000 23.125000
v 0.000000 78.750000 -6.250000
v 0.000000 -15.625000 -53.750000
v 0.000000 -36.875000 15.000000
v 0.000000 -78.125000 36.875000
v 0.000000 -64.375000 27.500000
v 0.000000 -45.625000 25.625000
v 0.000000 -38.750000 22.500000
v 68.125000 18.750000 4.375000
v -68.125000 18.750000 4.375000
v 68.750000 25.625000 -3.750000
v -68.750000 25.625000 -3.750000
v 61.875000 21.250000 -35.000000
v -61.875000 21.250000 -35.000000
v 36.875000 35.000000 -56.250000
v -36.875000 35.000000 -56.250000
v 58.750000 -3.750000 5.625000
v -58.750000 -3.750000 5.625000
v 47.500000 -10.000000 -13.125000
v -47.500000 -10.000000 -13.125000
v 51.250000 -0.625000 -34.375000
v -51.250000 -0.625000 -34.375000
v 26.875000 4.375000 -53.125000
v -26.875000 4.375000 -53.125000
v 18.750000 -28.125000 32.500000
v -18.750000 -28.125000 32.500000
v 14.375000 -33.125000 20.625000
v -14.375000 -33.125000 20.625000
v 23.125000 -56.875000 30.625000
v -23.125000 -56.875000 30.625000
v 20.000000 -40.000000 31.250000
v -20.000000 -40.000000 31.250000
v 26.250000 -73.125000 31.875000
v -26.250000 -73.125000 31.875000
v 11.250000 -60.625000 29.375000
v -11.250000 -60.625000 29.375000
v 10.000000 -43.125000 28.750000
v -10.000000 -43.125000 28.750000
v 13.125000 -75.625000 35.000000
v -13.125000 -75.625000 35.000000
v 17.500000 -22.500000 34.375000
v -17.500000 -22.500000 34.375000
v 16.875000 -18.125000 37.500000
v -16.875000 -18.125000 37.500000
v 16.250000 -13.750000 40.000000
v -16.250000 -13.750000 40.000000
v 16.875000 -31.250000 13.125000
v -16.875000 -31.250000 13.125000
v 23.750000 -25.000000 -21.250000
v -23.750000 -25.000000 -21.250000
v 27.500000 -11.875000 -43.125000
v -27.500000 -11.875000 -43.125000
v 36.250000 69.375000 -30.625000
v -36.250000 69.375000 -30.625000
v 36.250000 74.375000 -5.625000
v -36.250000 74.375000 -5.625000
v 36.250000 68.125000 18.750000
v -36.250000 68.125000 18.750000
v 36.875000 41.875000 34.375000
v -36.875000 41.875000 34.375000
v 58.125000 32.500000 26.875000
v -58.125000 32.500000 26.875000
v 50.625000 36.250000 22.500000
v -50.625000 36.250000 22.500000
v 51.250000 56.250000 4.375000
v -51.250000 56.250000 4.375000
v 63.750000 45.000000 10.000000
v -63.750000 45.000000 10.000000
v 63.750000 49.375000 -9.375000
v -63.750000 49.375000 -9.375000
v 51.250000 60.000000 -15.625000
v -51.250000 60.000000 -15.625000
v 51.250000 54.375000 -35.625000
v -51.250000 54.375000 -35.625000
v 63.750000 43.125000 -28.750000
v -63.750000 43.125000 -28.750000
v 49.375000 26.250000 -46.875000
v -49.375000 26.250000 -46.875000
v 38.750000 1.875000 -43.750000
v -38.750000 1.875000 -43.750000
v 65.625000 26.250000 -16.250000
v -65.625000 26.250000 -16.250000
v 32.500000 -13.750000 11.875000
v -32.500000 -13.750000 11.875000
v 34.375000 -15.625000 -16.875000
v -34.375000 -15.625000 -16.875000
v 71.250000 32.500000 -18.750000
v -71.250000 32.500000 -18.750000
v 61.875000 -11.250000 -10.000000
v -61.875000 -11.250000 -10.000000
v 83.125000 -8.125000 -26.250000
v -83.125000 -8.125000 -26.250000
v 102.500000 4.375000 -34.375000
v -102.500000 4.375000 -34.375000
v 108.125000 25.625000 -33.750000
v -108.125000 25.625000 -33.750000
v 98.750000 40.625000 -33.750000
v -98.750000 40.625000 -33.750000
v 81.875000 38.125000 -25.000000
v -81.875000 38.125000 -25.000000
v 81.250000 33.125000 -23.125000
v -81.250000 33.125000 -23.125000
v 95.000000 35.000000 -31.250000
v -95.000000 35.000000 -31.250000
v 101.250000 23.125000 -32.500000
v -101.250000 23.125000 -32.500000
v 96.875000 6.250000 -32.500000
v -96.875000 6.250000 -32.500000
v 82.500000 -3.125000 -24.375000
v -82.500000 -3.125000 -24.375000
v 66.250000 -5.625000 -10.625000
v -66.250000 -5.625000 -10.625000
v 73.750000 28.750000 -17.500000
v -73.750000 28.750000 -17.500000
v 75.625000 24.375000 -23.125000
v -75.625000 24.375000 -23.125000
v 70.625000 -1.875000 -16.875000
v -70.625000 -1.875000 -16.875000
v 83.125000 0.000000 -29.375000
v -83.125000 0.000000 -29.375000
v 95.000000 7.500000 -35.625000
v -95.000000 7.500000 -35.625000
v 98.750000 20.000000 -35.625000
v -98.750000 20.000000 -35.625000
v 93.750000 28.750000 -35.000000
v -93.750000 28.750000 -35.000000
v 81.875000 27.500000 -28.750000
v -81.875000 27.500000 -28.750000
v 67.500000 23.125000 -16.875000
v -67.500000 23.125000 -16.875000
v 66.875000 13.750000 -21.875000
v -66.875000 13.750000 -21.875000
v 60.625000 7.500000 -21.875000
v -60.625000 7.500000 -21.875000
v 65.625000 6.875000 -21.875000
v -65.625000 6.875000 -21.875000
v 67.500000 1.250000 -21.875000
v -67.500000 1.250000 -21.875000
v 65.000000 -1.250000 -21.875000
v -65.000000 -1.250000 -21.875000
v 58.125000 0.000000 -5.625000
v -58.125000 0.000000 -5.625000
v 57.500000 -1.875000 -13.750000
v -57.500000 -1.875000 -13.750000
v 57.500000 3.125000 -15.000000
v -57.500000 3.125000 -15.000000
v 63.750000 16.250000 -16.875000
v -63.750000 16.250000 -16.875000
v 71.250000 19.375000 -21.250000
v -71.250000 19.375000 -21.250000
v 71.250000 18.750000 -25.625000
v -71.250000 18.750000 -25.625000
v 65.000000 -1.250000 -25.625000
v -65.000000 -1.250000 -25.625000
v 68.125000 1.250000 -25.625000
v -68.125000 1.250000 -25.625000
v 66.250000 6.250000 -25.625000
v -66.250000 6.250000 -25.625000
v 61.250000 7.500000 -25.625000
v -61.250000 7.500000 -25.625000
v 67.500000 13.750000 -25.625000
v -67.500000 13.750000 -25.625000
v 83.125000 26.250000 -33.125000
v -83.125000 26.250000 -33.125000
v 95.000000 27.500000 -38.750000
v -95.000000 27.500000 -38.750000
v 100.625000 19.375000 -39.375000
v -100.625000 19.375000 -39.375000
v 96.875000 6.875000 -38.750000
v -96.875000 6.875000 -38.750000
v 83.750000 0.000000 -33.750000
v -83.750000 0.000000 -33.750000
v 70.625000 -1.250000 -21.250000
v -70.625000 -1.250000 -21.250000
v 76.250000 23.125000 -27.500000
v -76.250000 23.125000 -27.500000
v 71.250000 8.750000 -26.250000
v -71.250000 8.750000 -26.250000
v 75.000000 5.000000 -26.875000
v -75.000000 5.000000 -26.875000
v 80.000000 10.000000 -29.375000
v -80.000000 10.000000 -29.375000
v 76.875000 13.750000 -28.125000
v -76.875000 13.750000 -28.125000
v 81.250000 18.750000 -30.000000
v -81.250000 18.750000 -30.000000
v 84.375000 15.000000 -30.625000
v -84.375000 15.000000 -30.625000
v 88.750000 16.875000 -31.250000
v -88.750000 16.875000 -31.250000
v 86.875000 21.875000 -31.250000
v -86.875000 21.875000 -31.250000
v 81.875000 35.000000 -38.750000
v -81.875000 35.000000 -38.750000
v 100.000000 37.500000 -43.750000
v -100.000000 37.500000 -43.750000
v 109.375000 23.750000 -40.000000
v -109.375000 23.750000 -40.000000
v 105.000000 4.375000 -42.500000
v -105.000000 4.375000 -42.500000
v 83.125000 -6.875000 -39.375000
v -83.125000 -6.875000 -39.375000
v 63.125000 -10.000000 -26.250000
v -63.125000 -10.000000 -26.250000
v 68.750000 30.625000 -30.625000
v -68.750000 30.625000 -30.625000
vn 0.671300 -0.197100 0.714500
vn -0.671300 -0.197100 0.714500
vn 0.832600 -0.301700 0.464600
vn -0.832600 -0.301700 0.464600
vn 0.425800 -0.796700 0.429000
vn -0.425800 -0.796700 0.429000
vn 0.326500 -0.495400 0.805000
vn -0.326500 -0.495400 0.805000
vn -0.064900 -0.571400 0.818100
vn 0.064900 -0.571400 0.818100
vn -0.273800 -0.831500 0.483400
vn 0.273800 -0.831500 0.483400
vn -0.760600 -0.340000 0.553100
vn 0.782400 -0.329400 0.528500
vn -0.465800 -0.186300 0.865100
vn 0.465800 -0.186300 0.865100
vn -0.498300 0.181200 0.847800
vn 0.498300 0.181200 0.847800
vn -0.768300 0.329300 0.548800
vn 0.765600 0.322300 0.556800
vn -0.248700 0.824900 0.507600
vn 0.256000 0.807300 0.531700
vn -0.101700 0.551800 0.827700
vn 0.082100 0.602300 0.794000
vn 0.386100 0.544600 0.744500
vn -0.332900 0.523100 0.784600
vn 0.405900 0.764100 0.501400
vn -0.424600 0.771100 0.474500
vn 0.829900 0.294000 0.474200
vn -0.825100 0.296800 0.480800
vn 0.661700 0.202600 0.721900
vn -0.688800 0.186800 0.700500
vn 0.781600 0.305800 -0.543700
vn -0.840000 0.343600 -0.420000
vn 0.203700 0.814600 -0.543100
vn -0.207400 0.829600 -0.518500
vn -0.438100 0.798800 -0.412300
vn 0.405600 0.760500 -0.507000
vn -0.786100 0.327600 -0.524100
vn 0.864200 0.314300 -0.392800
vn -0.851900 -0.340800 -0.397600
vn 0.851900 -0.340800 -0.397600
vn -0.405600 -0.760500 -0.507000
vn 0.405600 -0.760500 -0.507000
vn 0.207400 -0.829600 -0.518500
vn -0.207400 -0.829600 -0.518500
vn 0.829700 -0.373400 -0.414900
vn -0.829700 -0.373400 -0.414900
vn 0.400000 -0.062300 0.914400
vn -0.400000 -0.062300 0.914400
vn 0.306900 -0.175400 0.935400
vn -0.306900 -0.175400 0.935400
vn 0.094500 -0.183500 0.978500
vn -0.094500 -0.183500 0.978500
vn -0.062400 -0.028300 0.997700
vn 0.062400 -0.028300 0.997700
vn -0.062400 0.026000 0.997700
vn 0.062400 0.026000 0.997700
vn 0.099600 0.172900 0.979900
vn -0.099600 0.172900 0.979900
vn 0.303600 0.165600 0.938300
vn -0.303600 0.165600 0.938300
vn 0.400200 0.057200 0.914700
vn -0.400200 0.057200 0.914700
vn 0.105400 -0.843300 0.527000
vn -0.136700 -0.874800 0.464800
vn 0.191600 -0.862000 0.469300
vn -0.230300 -0.865600 0.444700
vn 0.595900 -0.425600 0.681000
vn -0.595900 -0.425600 0.681000
vn 0.756300 -0.029900 0.653500
vn -0.756300 -0.029900 0.653500
vn 0.806900 0.068900 0.586600
vn -0.806900 0.068900 0.586600
vn 0.233400 -0.777900 0.583400
vn -0.233400 -0.777900 0.583400
vn 0.417700 -0.575100 0.703400
vn -0.355700 -0.729000 0.584800
vn 0.687200 -0.419100 0.593400
vn -0.687200 -0.419100 0.593400
vn 0.553700 -0.297800 0.777700
vn -0.702800 -0.391500 0.593900
vn 0.822700 0.360600 0.439500
vn -0.312700 0.342500 0.886000
vn 0.504100 0.644800 0.574500
vn -0.509100 0.648200 0.566300
vn 0.615500 0.492400 0.615500
vn -0.615500 0.492400 0.615500
vn -0.037100 0.668500 0.742800
vn 0.048600 0.656000 0.753200
vn -0.738600 0.376800 0.559000
vn 0.710400 0.271500 0.649400
vn -0.577400 0.577400 0.577400
vn 0.601300 0.526200 0.601300
vn 0.536400 -0.323000 0.779700
vn -0.507000 -0.628100 0.590300
vn 0.218100 -0.468500 0.856100
vn -0.218100 -0.468500 0.856100
vn -0.107300 -0.501000 0.858800
vn 0.034800 -0.579200 0.814400
vn -0.077000 -0.575900 0.813900
vn 0.089900 -0.784300 0.613800
vn 0.027900 -0.864500 0.501900
vn -0.054700 -0.169500 0.984000
vn 0.168700 -0.312800 0.934700
vn -0.426000 -0.060900 0.902700
vn 0.435000 -0.181200 0.882000
vn -0.335200 -0.182800 0.924300
vn 0.322300 -0.276200 0.905400
vn -0.357900 -0.306800 0.881900
vn 0.481500 -0.240800 0.842700
vn -0.306900 0.211300 0.928000
vn -0.031700 -0.189900 0.981300
vn 0.031700 -0.189900 0.981300
vn 0.185400 -0.495600 0.848500
vn -0.681900 -0.291500 0.670900
vn 0.262300 -0.349800 0.899400
vn -0.262300 -0.349800 0.899400
vn 0.058500 -0.084500 0.994700
vn 0.006600 -0.231600 0.972800
vn -0.013600 -0.650700 0.759200
vn 0.013600 -0.650700 0.759200
vn 0.240400 -0.547600 0.801400
vn -0.240400 -0.547600 0.801400
vn 0.314300 -0.392800 0.864200
vn -0.312800 -0.166200 0.935200
vn 0.282100 -0.016400 0.959200
vn -0.282100 -0.016400 0.959200
vn 0.327300 -0.143200 0.934000
vn -0.327300 -0.143200 0.934000
vn 0.000000 0.066500 0.997800
vn 0.023200 0.051100 0.998400
vn 0.000000 -0.066500 0.997800
vn 0.004300 -0.065100 0.997900
vn 0.000000 0.000000 1.000000
vn 0.782600 -0.608700 -0.130400
vn -0.782600 -0.608700 -0.130400
vn 0.944800 0.191900 -0.265700
vn -0.944800 0.191900 -0.265700
vn 0.101800 0.916500 -0.387000
vn -0.069300 0.900400 -0.429400
vn -0.690500 0.549200 0.470800
vn 1.000000 0.000000 0.000000
vn 0.431900 -0.863900 0.259200
vn -0.407100 -0.895600 0.179100
vn 0.287300 -0.574700 0.766300
vn -0.287300 -0.574700 0.766300
vn -0.666700 0.666700 0.333300
vn 0.666700 0.666700 0.333300
vn 0.134800 0.808600 0.572700
vn -0.134800 0.808600 0.572700
vn 0.763900 0.297100 0.572900
vn -0.753200 0.287000 0.591800
vn 0.411600 -0.857500 0.308700
vn -0.411600 -0.857500 0.308700
vn 0.037500 0.224700 0.973700
vn -0.050200 0.234300 0.970900
vn 0.130400 -0.260900 0.956500
vn -0.130400 -0.260900 0.956500
vn -0.063100 -0.820600 0.568100
vn 0.063100 -0.820600 0.568100
vn 0.732500 0.281700 0.619800
vn -0.732500 0.281700 0.619800
vn 0.331900 0.073800 0.940400
vn -0.546000 -0.431000 0.718400
vn 0.281500 0.066200 0.957300
vn -0.323100 0.031100 0.945900
vn 0.875300 0.205900 0.437600
vn -0.735700 0.391000 0.553100
vn 0.897300 0.199400 0.393800
vn -0.848000 0.318000 0.424000
vn 0.958600 0.066400 0.276700
vn -0.958600 0.066400 0.276700
vn 0.252400 -0.865500 0.432700
vn -0.178300 -0.416100 0.891700
vn -0.175100 -0.204300 0.963100
vn 0.175100 -0.204300 0.963100
vn -0.121900 -0.182900 0.975500
vn 0.121900 -0.182900 0.975500
vn -0.156200 0.312300 0.937000
vn 0.156200 0.312300 0.937000
vn -0.158200 0.949400 0.271300
vn 0.158200 0.949400 0.271300
vn -0.723800 0.685700 0.076200
vn 0.723800 0.685700 0.076200
vn -1.000000 0.000000 0.000000
vn 0.305100 -0.945000 0.118100
vn -0.305100 -0.945000 0.118100
vn 0.047800 -0.287000 0.956700
vn -0.047800 -0.287000 0.956700
vn 0.135300 -0.347900 0.927700
vn -0.135300 -0.347900 0.927700
vn -0.548800 -0.329300 0.768300
vn 0.548800 -0.329300 0.768300
vn -0.494500 -0.113000 0.861800
vn 0.494500 -0.113000 0.861800
vn -0.259500 0.103800 0.960100
vn 0.171700 -0.009000 0.985100
vn -0.668400 -0.459500 0.584900
vn 0.433200 -0.487400 0.758100
vn -0.115600 -0.635900 0.763100
vn 0.115600 -0.635900 0.763100
vn 0.424200 -0.621100 0.659000
vn -0.424200 -0.621100 0.659000
vn 0.476700 -0.355700 0.803900
vn -0.476700 -0.355700 0.803900
vn 0.587100 -0.083900 0.805200
vn -0.587100 -0.083900 0.805200
vn 0.577400 0.115500 0.808300
vn -0.565700 0.119700 0.815900
vn 0.521400 0.657400 0.544100
vn -0.408200 0.408200 0.816500
vn 0.335800 0.347800 0.875400
vn -0.335800 0.347800 0.875400
vn 0.145200 0.377400 0.914600
vn -0.145200 0.377400 0.914600
vn 0.030100 0.230600 0.972600
vn -0.030100 0.230600 0.972600
vn 0.355300 -0.573900 0.737900
vn -0.280400 -0.218100 0.934800
vn 0.262700 -0.225200 0.938200
vn -0.262700 -0.225200 0.938200
vn -0.063100 -0.315600 0.946800
vn 0.376600 -0.833900 0.403500
vn -0.201600 -0.907100 0.369600
vn -0.082300 -0.782200 0.617500
vn -0.335600 -0.239700 0.911000
vn 0.335600 -0.239700 0.911000
vn -0.456800 0.050800 0.888100
vn 0.269200 -0.057700 0.961400
vn -0.024700 0.407200 0.913000
vn 0.024700 0.407200 0.913000
vn -0.048700 0.681500 0.730200
vn 0.021300 0.554600 0.831900
vn 0.337800 0.522100 0.783100
vn -0.377800 0.634200 0.674600
vn 0.498800 0.530000 0.685800
vn -0.498800 0.530000 0.685800
vn 0.789500 -0.315800 0.526300
vn -0.789500 -0.315800 0.526300
vn 0.807000 -0.080700 0.585100
vn -0.807000 -0.080700 0.585100
vn 0.786800 0.121000 0.605200
vn -0.786800 0.121000 0.605200
vn -0.635700 0.681100 -0.363300
vn 0.635700 0.681100 -0.363300
vn -0.850700 0.365000 -0.378300
vn 0.850700 0.365000 -0.378300
vn -0.219700 0.862600 -0.455700
vn 0.266400 0.871000 -0.412700
vn 0.591400 0.748900 -0.299100
vn -0.593200 0.744500 -0.306300
vn 0.365300 0.883300 -0.293800
vn -0.371400 0.868500 -0.328400
vn 0.276000 0.915900 -0.291500
vn -0.276000 0.915900 -0.291500
vn 0.796400 0.132300 -0.590100
vn -0.887300 0.134300 -0.441200
vn 0.544200 -0.752400 -0.371200
vn -0.544200 -0.752400 -0.371200
vn 0.402700 -0.732300 -0.549200
vn -0.402700 -0.732300 -0.549200
vn 0.164900 -0.664400 -0.728900
vn -0.361700 -0.385800 -0.848700
vn 0.301100 -0.012500 -0.953500
vn -0.195200 -0.097600 -0.975900
vn 0.256200 -0.311200 -0.915200
vn 0.010700 -0.563300 -0.826200
vn 0.077900 -0.994800 -0.066300
vn -0.077900 -0.994800 -0.066300
vn 0.109400 -0.971800 -0.208900
vn -0.109400 -0.971800 -0.208900
vn 0.815000 -0.562100 -0.140500
vn -0.815000 -0.562100 -0.140500
vn 0.935800 0.139600 -0.323600
vn -0.935800 0.139600 -0.323600
vn 0.113200 -0.027400 -0.993200
vn -0.113200 -0.027400 -0.993200
vn -0.149700 -0.363500 -0.919500
vn -0.121100 -0.053000 -0.991200
vn 0.370600 -0.678000 -0.634900
vn -0.909400 0.137100 -0.392700
vn 0.919300 0.139300 -0.368200
vn -0.919300 0.139300 -0.368200
vn 0.945700 0.267300 -0.185000
vn -0.917300 0.344000 -0.200700
vn 0.933700 0.281300 -0.221500
vn -0.900400 0.364200 -0.238000
vn 0.950100 0.245500 -0.192200
vn -0.894500 0.433700 0.108400
vn 0.183500 -0.786400 -0.589800
vn -0.159600 -0.957700 -0.239400
vn 0.372700 -0.475900 -0.796600
vn -0.369300 -0.471200 -0.801000
vn 0.326300 -0.834200 -0.444600
vn -0.298600 -0.823600 -0.482100
vn 0.262000 -0.957400 -0.121700
vn -0.262000 -0.957400 -0.121700
vn 0.299600 -0.944300 -0.136200
vn -0.299600 -0.944300 -0.136200
vn 0.864200 -0.473700 0.169600
vn -0.830500 0.333300 -0.446300
vn 0.686900 -0.635800 0.352100
vn -0.686900 -0.635800 0.352100
vn 0.418900 -0.226500 -0.879300
vn -0.295000 -0.045400 -0.954400
vn 0.111900 0.962600 0.246800
vn -0.127200 0.965800 0.226000
vn 0.120800 0.973400 -0.194700
vn -0.120800 0.973400 -0.194700
vn 0.314000 0.571100 -0.758500
vn -0.314000 0.571100 -0.758500
vn 0.323100 0.928800 -0.181700
vn -0.323100 0.928800 -0.181700
vn 0.045200 0.795500 0.604300
vn -0.045200 0.795500 0.604300
vn 0.614400 0.769600 0.173800
vn -0.614400 0.769600 0.173800
vn 0.693500 0.685700 -0.221200
vn -0.693500 0.685700 -0.221200
vn 0.630400 0.251700 -0.734300
vn -0.710400 0.136400 -0.690400
vn 0.317900 0.570400 -0.757400
vn -0.317900 0.570400 -0.757400
vn 0.628900 0.762400 -0.152500
vn -0.628900 0.762400 -0.152500
vn 0.708800 0.683300 0.175200
vn -0.708800 0.683300 0.175200
vn 0.688500 0.383000 0.615800
vn -0.688500 0.383000 0.615800
vn 0.323800 0.943400 -0.072000
vn -0.366900 0.884000 -0.289800
vn 0.154800 0.508000 0.847300
vn -0.285400 0.623700 0.727700
vn -0.181900 0.114500 -0.976600
vn 0.181900 0.114500 -0.976600
vn -0.263800 0.946200 -0.187100
vn 0.263800 0.946200 -0.187100
vn -0.161600 0.184700 0.969400
vn 0.161600 0.184700 0.969400
vn 0.934000 0.225500 0.277300
vn -0.868100 0.089300 -0.488300
vn 0.975800 0.124100 0.180000
vn -0.975800 0.124100 0.180000
vn 0.961300 0.147200 -0.233000
vn -0.961300 0.147200 -0.233000
vn 0.995600 0.089300 -0.028800
vn -0.981700 -0.030400 -0.188200
vn 0.637400 -0.765100 0.091500
vn -0.746600 -0.664600 0.028500
vn 0.372000 -0.924400 0.084500
vn -0.372300 -0.924300 0.084700
vn 0.528100 -0.835400 0.152200
vn -0.528100 -0.835400 0.152200
vn 0.307000 -0.523700 0.794600
vn -0.307000 -0.523700 0.794600
vn 0.732500 -0.636800 0.240700
vn -0.732500 -0.636800 0.240700
vn 0.263700 -0.449900 0.853300
vn -0.263700 -0.449900 0.853300
vn 0.523600 -0.329000 -0.785900
vn -0.588100 -0.307000 -0.748300
vn 0.539600 -0.334300 -0.772700
vn -0.469400 -0.240000 -0.849800
vn 0.214400 -0.834100 -0.508200
vn -0.446300 -0.845200 -0.294100
vn 0.736500 -0.615400 -0.280800
vn -0.697300 -0.661000 -0.277100
vn 0.497200 -0.440800 -0.747300
vn -0.497200 -0.440800 -0.747300
vn 0.324400 0.486700 0.811100
vn -0.369100 0.285500 0.884400
vn 0.464900 0.259300 0.846500
vn -0.464900 0.259300 0.846500
vn 0.181700 -0.007900 0.983300
vn -0.318800 0.199300 0.926600
vn 0.292500 -0.075800 0.953300
vn -0.207600 -0.083600 0.974600
vn 0.584700 -0.219800 0.780900
vn -0.339800 0.082400 0.936900
vn 0.650900 -0.193900 0.734000
vn -0.650900 -0.193900 0.734000
vn 0.407500 0.750600 0.520100
vn -0.407500 0.750600 0.520100
vn -0.265500 0.829600 0.491100
vn 0.265500 0.829600 0.491100
vn -0.788500 0.236600 0.567700
vn 0.857600 0.222300 0.463700
vn -0.524200 -0.354800 0.774200
vn 0.525700 -0.357900 0.771700
vn 0.439000 -0.525200 0.729000
vn -0.466300 -0.599100 0.650900
vn 0.688800 -0.442800 0.574000
vn -0.688800 -0.442800 0.574000
vn 0.630200 -0.765800 0.128200
vn -0.750700 -0.613100 -0.246100
vn -0.217500 0.273300 0.937000
vn 0.178800 0.292300 0.939500
vn 0.904600 -0.386900 -0.179200
vn -0.904600 -0.386900 -0.179200
vn 0.178200 -0.089100 0.980000
vn -0.178200 -0.089100 0.980000
vn -0.233500 0.897200 0.374900
vn 0.233500 0.897200 0.374900
vn 0.717700 0.168900 0.675500
vn -0.448000 -0.448000 0.773700
vn 0.531300 0.584400 0.613400
vn -0.531300 0.584400 0.613400
vn 0.900800 -0.407500 0.150100
vn -0.553400 -0.553400 0.622500
vn 0.581500 -0.521700 0.624300
vn -0.572400 -0.312200 0.758200
vn 0.613800 -0.257100 0.746500
vn -0.559700 -0.553300 0.616900
vn 0.877900 -0.478800 0.007600
vn -0.877900 -0.478800 0.007600
vn 0.871700 -0.444600 -0.206300
vn -0.922700 -0.376500 -0.082500
vn 0.997200 -0.018100 -0.072500
vn -0.997200 -0.018100 -0.072500
vn 0.766100 -0.636300 0.090900
vn -0.766100 -0.636300 0.090900
vn 0.793000 -0.594700 0.132200
vn -0.781500 -0.617600 0.088200
vn 0.702200 -0.702200 0.117000
vn -0.702200 -0.702200 0.117000
vn 0.240800 0.963100 -0.120400
vn -0.124000 0.992100 0.020700
vn 0.925100 0.346900 0.154200
vn -0.943500 0.314500 0.104800
vn 0.707100 -0.707100 0.000000
vn -0.707100 -0.707100 0.000000
vn -0.015700 0.989800 0.141400
vn 0.015700 0.989800 0.141400
vn 0.626600 -0.721100 0.295600
vn -0.626600 -0.721100 0.295600
vn 0.271400 -0.902200 0.335300
vn -0.271400 -0.902200 0.335300
vn -0.865100 -0.485300 -0.126600
vn 0.865100 -0.485300 -0.126600
vn -0.853800 0.232800 -0.465700
vn 0.809600 0.242900 -0.534300
vn -0.543300 0.698500 -0.465700
vn 0.562100 0.823100 -0.080300
vn -0.109600 0.993900 -0.015700
vn 0.007100 0.989900 0.141400
vn 0.173800 0.009700 0.984700
vn -0.104600 0.039200 0.993700
vn 0.413400 0.041300 0.909600
vn -0.246100 0.085200 0.965500
vn 0.322800 -0.046100 0.945300
vn -0.322800 -0.046100 0.945300
vn 0.122000 0.045800 0.991500
vn -0.210400 0.012400 0.977500
vn 0.567900 0.191600 0.800500
vn -0.567900 0.191600 0.800500
vn 0.424400 -0.032000 0.904900
vn -0.378700 -0.036400 0.924800
vn 0.257000 0.072300 0.963700
vn -0.253000 -0.189700 0.948700
vn 0.135100 -0.022500 0.990600
vn -0.135100 -0.022500 0.990600
vn -0.298100 0.745400 0.596300
vn 0.487000 0.608800 0.626200
vn 0.557100 -0.148600 0.817100
vn -0.557100 -0.148600 0.817100
vn 0.472300 -0.198600 0.858800
vn -0.438800 -0.200800 0.875900
vn 0.297500 -0.406200 0.864000
vn -0.578600 -0.133400 0.804600
vn 0.577100 0.216400 0.787500
vn -0.577100 0.216400 0.787500
vn 0.298000 0.580200 0.758000
vn -0.298000 0.580200 0.758000
vn 0.093100 -0.993200 -0.069200
vn -0.093100 -0.993200 -0.069200
vn 0.516100 -0.852700 -0.081200
vn -0.516100 -0.852700 -0.081200
vn 0.926400 -0.246000 0.285100
vn -0.930900 -0.254100 0.262400
vn 0.826700 0.562700 -0.003500
vn -0.846500 0.529100 -0.059500
vn -0.214600 0.924300 -0.315700
vn 0.251100 0.943900 -0.214500
vn -0.419600 0.885100 -0.201200
vn 0.484100 0.874300 -0.036100
vn -0.547000 -0.014400 -0.837000
vn 0.525600 -0.003000 -0.850700
vn -0.255600 -0.074900 -0.963900
vn 0.255600 -0.074900 -0.963900
vn 0.404600 0.026600 -0.914100
vn -0.404600 0.026600 -0.914100
vn -0.733000 0.678600 0.047200
vn 0.807300 0.590100 0.004100
vn 0.684400 -0.171100 -0.708800
vn -0.684400 -0.171100 -0.708800
vn -0.360400 -0.828300 -0.429000
vn 0.360400 -0.828300 -0.429000
vn 0.661700 -0.202600 0.721900
vn -0.661700 -0.202600 0.721900
vn 0.826800 -0.305100 0.472500
vn -0.826800 -0.305100 0.472500
vn 0.407600 -0.790500 0.457000
vn -0.407600 -0.790500 0.457000
vn 0.379100 -0.516300 0.767900
vn -0.379100 -0.516300 0.767900
vn -0.085900 -0.522200 0.848500
vn 0.085900 -0.522200 0.848500
vn -0.266400 -0.848700 0.457000
vn 0.266400 -0.848700 0.457000
vn -0.782400 -0.329400 0.528500
vn 0.760600 -0.340000 0.553100
vn -0.470600 -0.198100 0.859800
vn 0.470600 -0.198100 0.859800
vn -0.464900 0.195800 0.863400
vn 0.464900 0.195800 0.863400
vn -0.765600 0.322300 0.556800
vn 0.768300 0.329300 0.548800
vn -0.256000 0.807300 0.531700
vn 0.248700 0.824900 0.507600
vn -0.082100 0.602300 0.794000
vn 0.101700 0.551800 0.827700
vn 0.332900 0.523100 0.784600
vn -0.386100 0.544600 0.744500
vn 0.424600 0.771100 0.474500
vn -0.405900 0.764100 0.501400
vn 0.825100 0.296800 0.480800
vn -0.829900 0.294000 0.474200
vn 0.688800 0.186800 0.700500
vn -0.661700 0.202600 0.721900
vn 0.840000 0.343600 -0.420000
vn -0.781600 0.305800 -0.543700
vn 0.207400 0.829600 -0.518500
vn -0.203700 0.814600 -0.543100
vn -0.405600 0.760500 -0.507000
vn 0.438100 0.798800 -0.412300
vn -0.864200 0.314300 -0.392800
vn 0.786100 0.327600 -0.524100
vn -0.778200 -0.353700 -0.518800
vn 0.778200 -0.353700 -0.518800
vn -0.438100 -0.798800 -0.412300
vn 0.438100 -0.798800 -0.412300
vn 0.203700 -0.814600 -0.543100
vn -0.203700 -0.814600 -0.543100
vn 0.768300 -0.329300 -0.548800
vn -0.768300 -0.329300 -0.548800
vn 0.136700 -0.874800 0.464800
vn -0.105400 -0.843300 0.527000
vn 0.230300 -0.865600 0.444700
vn -0.191600 -0.862000 0.469300
vn 0.578800 -0.504900 0.640400
vn -0.578800 -0.504900 0.640400
vn 0.776300 -0.063300 0.627200
vn -0.776300 -0.063300 0.627200
vn 0.747100 0.113200 0.655000
vn -0.747100 0.113200 0.655000
vn 0.374700 -0.834500 0.404000
vn -0.374700 -0.834500 0.404000
vn 0.355700 -0.729000 0.584800
vn -0.417700 -0.575100 0.703400
vn 0.694700 -0.419700 0.584100
vn -0.694700 -0.419700 0.584100
vn 0.702800 -0.391500 0.593900
vn -0.553700 -0.297800 0.777700
vn 0.312700 0.342500 0.886000
vn -0.822700 0.360600 0.439500
vn 0.509100 0.648200 0.566300
vn -0.504100 0.644800 0.574500
vn 0.597700 0.556500 0.577100
vn -0.597700 0.556500 0.577100
vn -0.048600 0.656000 0.753200
vn 0.037100 0.668500 0.742800
vn -0.710400 0.271500 0.649400
vn 0.738600 0.376800 0.559000
vn -0.601300 0.526200 0.601300
vn 0.577400 0.577400 0.577400
vn 0.507000 -0.628100 0.590300
vn -0.536400 -0.323000 0.779700
vn 0.222600 -0.469400 0.854500
vn -0.222600 -0.469400 0.854500
vn -0.034800 -0.579200 0.814400
vn 0.107300 -0.501000 0.858800
vn -0.089900 -0.784300 0.613800
vn 0.077000 -0.575900 0.813900
vn 0.054700 -0.169500 0.984000
vn -0.027900 -0.864500 0.501900
vn 0.426000 -0.060900 0.902700
vn -0.168700 -0.312800 0.934700
vn 0.335200 -0.182800 0.924300
vn -0.435000 -0.181200 0.882000
vn 0.357900 -0.306800 0.881900
vn -0.322300 -0.276200 0.905400
vn 0.306900 0.211300 0.928000
vn -0.481500 -0.240800 0.842700
vn -0.159800 0.390300 0.906700
vn 0.159800 0.390300 0.906700
vn 0.681900 -0.291500 0.670900
vn -0.185400 -0.495600 0.848500
vn 0.058500 -0.078100 0.995200
vn -0.058500 -0.078100 0.995200
vn -0.006600 -0.231600 0.972800
vn -0.058500 -0.084500 0.994700
vn 0.100800 -0.710300 0.696600
vn -0.100800 -0.710300 0.696600
vn 0.132200 -0.594700 0.793000
vn -0.132200 -0.594700 0.793000
vn 0.312800 -0.166200 0.935200
vn -0.314300 -0.392800 0.864200
vn 0.328800 -0.036000 0.943700
vn -0.328800 -0.036000 0.943700
vn 0.323300 -0.080800 0.942900
vn -0.323300 -0.080800 0.942900
vn -0.023200 0.051100 0.998400
vn -0.004300 -0.065100 0.997900
vn 0.844700 -0.533500 0.044500
vn -0.844700 -0.533500 0.044500
vn 0.950000 0.269200 -0.158300
vn -0.950000 0.269200 -0.158300
vn 0.069300 0.900400 -0.429400
vn -0.101800 0.916500 -0.387000
vn 0.690500 0.549200 0.470800
vn 0.407100 -0.895600 0.179100
vn -0.431900 -0.863900 0.259200
vn -0.632600 0.535300 0.559600
vn 0.632600 0.535300 0.559600
vn 0.086200 0.775900 0.625000
vn -0.086200 0.775900 0.625000
vn 0.753200 0.287000 0.591800
vn -0.763900 0.297100 0.572900
vn 0.341600 -0.540900 0.768600
vn -0.341600 -0.540900 0.768600
vn 0.050200 0.234300 0.970900
vn -0.037500 0.224700 0.973700
vn -0.130400 -0.608700 0.782600
vn 0.130400 -0.608700 0.782600
vn -0.505900 0.071600 0.859600
vn 0.505900 0.071600 0.859600
vn -0.577400 -0.577400 0.577400
vn 0.577400 -0.577400 0.577400
vn 0.546000 -0.431000 0.718400
vn -0.331900 0.073800 0.940400
vn 0.323100 0.031100 0.945900
vn -0.281500 0.066200 0.957300
vn 0.735700 0.391000 0.553100
vn -0.875300 0.205900 0.437600
vn 0.848000 0.318000 0.424000
vn -0.897300 0.199400 0.393800
vn 0.850500 0.379800 0.363800
vn -0.850500 0.379800 0.363800
vn 0.178300 -0.416100 0.891700
vn -0.252400 -0.865500 0.432700
vn -0.129600 -0.194500 0.972300
vn 0.129600 -0.194500 0.972300
vn -0.447200 0.000000 0.894400
vn 0.447200 0.000000 0.894400
vn -0.646300 0.733700 0.209600
vn 0.646300 0.733700 0.209600
vn 0.021700 -0.303100 0.952700
vn -0.021700 -0.303100 0.952700
vn -0.468100 -0.223900 0.854800
vn 0.468100 -0.223900 0.854800
vn -0.271000 0.027100 0.962200
vn 0.271000 0.027100 0.962200
vn -0.171700 -0.009000 0.985100
vn 0.259500 0.103800 0.960100
vn -0.433200 -0.487400 0.758100
vn 0.668400 -0.459500 0.584900
vn -0.159900 -0.879700 0.447800
vn 0.159900 -0.879700 0.447800
vn 0.390000 -0.589500 0.707400
vn -0.390000 -0.589500 0.707400
vn 0.654700 -0.458900 0.600700
vn -0.654700 -0.458900 0.600700
vn 0.537800 -0.114400 0.835300
vn -0.537800 -0.114400 0.835300
vn 0.565700 0.119700 0.815900
vn -0.577400 0.115500 0.808300
vn 0.408200 0.408200 0.816500
vn -0.521400 0.657400 0.544100
vn 0.179600 0.788200 0.588600
vn -0.179600 0.788200 0.588600
vn 0.188100 0.338700 0.921900
vn -0.188100 0.338700 0.921900
vn -0.087000 0.275600 0.957300
vn 0.087000 0.275600 0.957300
vn 0.280400 -0.218100 0.934800
vn -0.355300 -0.573900 0.737900
vn 0.301500 -0.301500 0.904500
vn -0.301500 -0.301500 0.904500
vn -0.376600 -0.833900 0.403500
vn 0.063100 -0.315600 0.946800
vn 0.082300 -0.782200 0.617500
vn 0.201600 -0.907100 0.369600
vn -0.370700 -0.285100 0.883900
vn 0.370700 -0.285100 0.883900
vn -0.269200 -0.057700 0.961400
vn 0.456800 0.050800 0.888100
vn -0.279700 0.524500 0.804200
vn 0.279700 0.524500 0.804200
vn -0.021300 0.554600 0.831900
vn 0.048700 0.681500 0.730200
vn 0.377800 0.634200 0.674600
vn -0.337800 0.522100 0.783100
vn 0.542500 -0.339100 0.768600
vn -0.542500 -0.339100 0.768600
vn 0.830500 -0.061500 0.553600
vn -0.830500 -0.061500 0.553600
vn 0.781400 0.111600 0.614000
vn -0.781400 0.111600 0.614000
vn -0.433800 0.888800 -0.148100
vn 0.433800 0.888800 -0.148100
vn -0.851500 0.374400 -0.367000
vn 0.851500 0.374400 -0.367000
vn -0.266400 0.871000 -0.412700
vn 0.219700 0.862600 -0.455700
vn 0.593200 0.744500 -0.306300
vn -0.591400 0.748900 -0.299100
vn 0.371400 0.868500 -0.328400
vn -0.365300 0.883300 -0.293800
vn 0.290100 0.914100 -0.283300
vn -0.290100 0.914100 -0.283300
vn 0.887300 0.134300 -0.441200
vn -0.796400 0.132300 -0.590100
vn 0.510800 -0.664900 -0.545000
vn -0.510800 -0.664900 -0.545000
vn 0.369500 -0.856600 -0.360100
vn -0.369500 -0.856600 -0.360100
vn 0.361700 -0.385800 -0.848700
vn -0.164900 -0.664400 -0.728900
vn 0.195200 -0.097600 -0.975900
vn -0.301100 -0.012500 -0.953500
vn -0.010700 -0.563300 -0.826200
vn -0.256200 -0.311200 -0.915200
vn 0.153300 -0.964900 -0.213400
vn -0.153300 -0.964900 -0.213400
vn 0.126000 -0.962400 -0.240600
vn -0.126000 -0.962400 -0.240600
vn 0.939600 0.157300 -0.304100
vn -0.939600 0.157300 -0.304100
vn 0.927800 0.183800 -0.324600
vn -0.927800 0.183800 -0.324600
vn 0.219200 0.076600 -0.972700
vn -0.219200 0.076600 -0.972700
vn 0.121100 -0.053000 -0.991200
vn 0.149700 -0.363500 -0.919500
vn 0.909400 0.137100 -0.392700
vn -0.370600 -0.678000 -0.634900
vn 0.920200 0.135500 -0.367200
vn -0.920200 0.135500 -0.367200
vn 0.917300 0.344000 -0.200700
vn -0.945700 0.267300 -0.185000
vn 0.900400 0.364200 -0.238000
vn -0.933700 0.281300 -0.221500
vn 0.894500 0.433700 0.108400
vn -0.950100 0.245500 -0.192200
vn 0.159600 -0.957700 -0.239400
vn -0.183500 -0.786400 -0.589800
vn 0.369300 -0.471200 -0.801000
vn -0.372700 -0.475900 -0.796600
vn 0.298600 -0.823600 -0.482100
vn -0.326300 -0.834200 -0.444600
vn 0.299500 -0.944200 -0.136800
vn -0.299500 -0.944200 -0.136800
vn 0.328700 -0.916300 -0.229100
vn -0.328700 -0.916300 -0.229100
vn 0.830500 0.333300 -0.446300
vn -0.864200 -0.473700 0.169600
vn 0.916600 -0.374000 0.141400
vn -0.916600 -0.374000 0.141400
vn 0.295000 -0.045400 -0.954400
vn -0.418900 -0.226500 -0.879300
vn 0.127200 0.965800 0.226000
vn -0.111900 0.962600 0.246800
vn 0.132000 0.975000 -0.178800
vn -0.132000 0.975000 -0.178800
vn 0.387800 0.619200 -0.682800
vn -0.387800 0.619200 -0.682800
vn 0.495100 0.861800 -0.110000
vn -0.495100 0.861800 -0.110000
vn 0.256100 0.644700 0.720200
vn -0.256100 0.644700 0.720200
vn 0.596600 0.788800 0.147900
vn -0.596600 0.788800 0.147900
vn 0.712500 0.675500 -0.190000
vn -0.712500 0.675500 -0.190000
vn 0.710400 0.136400 -0.690400
vn -0.630400 0.251700 -0.734300
vn 0.682300 0.231800 -0.693300
vn -0.682300 0.231800 -0.693300
vn 0.657400 0.725400 -0.204000
vn -0.657400 0.725400 -0.204000
vn 0.728900 0.672900 0.126200
vn -0.728900 0.672900 0.126200
vn 0.779100 0.407400 0.476400
vn -0.779100 0.407400 0.476400
vn 0.366900 0.884000 -0.289800
vn -0.323800 0.943400 -0.072000
vn 0.285400 0.623700 0.727700
vn -0.154800 0.508000 0.847300
vn -0.168100 0.100500 -0.980600
vn 0.168100 0.100500 -0.980600
vn 0.292500 0.567400 0.769700
vn -0.292500 0.567400 0.769700
vn 0.868100 0.089300 -0.488300
vn -0.934000 0.225500 0.277300
vn 0.927600 0.076200 0.365700
vn -0.927600 0.076200 0.365700
vn 0.975000 0.216900 0.049000
vn -0.975000 0.216900 0.049000
vn 0.981700 -0.030400 -0.188200
vn -0.995600 0.089300 -0.028800
vn 0.746600 -0.664600 0.028500
vn -0.637400 -0.765100 0.091500
vn 0.372300 -0.924300 0.084700
vn -0.372000 -0.924400 0.084500
vn 0.398600 -0.875400 0.273400
vn -0.398600 -0.875400 0.273400
vn 0.632800 -0.764200 0.124700
vn -0.632800 -0.764200 0.124700
vn 0.588100 -0.307000 -0.748300
vn -0.523600 -0.329000 -0.785900
vn 0.469400 -0.240000 -0.849800
vn -0.539600 -0.334300 -0.772700
vn 0.446300 -0.845200 -0.294100
vn -0.214400 -0.834100 -0.508200
vn 0.697300 -0.661000 -0.277100
vn -0.736500 -0.615400 -0.280800
vn 0.369100 0.285500 0.884400
vn -0.324400 0.486700 0.811100
vn 0.446700 0.097500 0.889400
vn -0.446700 0.097500 0.889400
vn 0.318800 0.199300 0.926600
vn -0.181700 -0.007900 0.983300
vn 0.207600 -0.083600 0.974600
vn -0.292500 -0.075800 0.953300
vn 0.339800 0.082400 0.936900
vn -0.584700 -0.219800 0.780900
vn 0.595700 -0.385000 0.704900
vn -0.595700 -0.385000 0.704900
vn 0.484300 0.558000 0.673800
vn -0.484300 0.558000 0.673800
vn -0.267500 0.831800 0.486400
vn 0.267500 0.831800 0.486400
vn -0.857600 0.222300 0.463700
vn 0.788500 0.236600 0.567700
vn -0.525700 -0.357900 0.771700
vn 0.524200 -0.354800 0.774200
vn 0.466300 -0.599100 0.650900
vn -0.439000 -0.525200 0.729000
vn 0.710400 -0.456700 0.535600
vn -0.710400 -0.456700 0.535600
vn 0.750700 -0.613100 -0.246100
vn -0.630200 -0.765800 0.128200
vn -0.178800 0.292300 0.939500
vn 0.217500 0.273300 0.937000
vn 0.904200 -0.357800 -0.233200
vn -0.904200 -0.357800 -0.233200
vn 0.040000 0.339900 0.939600
vn -0.040000 0.339900 0.939600
vn 0.273400 0.906400 0.322100
vn -0.273400 0.906400 0.322100
vn 0.448000 -0.448000 0.773700
vn -0.717700 0.168900 0.675500
vn 0.553400 -0.553400 0.622500
vn -0.900800 -0.407500 0.150100
vn 0.572400 -0.312200 0.758200
vn -0.581500 -0.521700 0.624300
vn 0.559700 -0.553300 0.616900
vn -0.613800 -0.257100 0.746500
vn 0.827100 0.532300 -0.180200
vn -0.827100 0.532300 -0.180200
vn 0.922700 -0.376500 -0.082500
vn -0.871700 -0.444600 -0.206300
vn 0.689500 -0.664400 0.288300
vn -0.689500 -0.664400 0.288300
vn 0.781500 -0.617600 0.088200
vn -0.793000 -0.594700 0.132200
vn 0.124000 0.992100 0.020700
vn -0.240800 0.963100 -0.120400
vn 0.943500 0.314500 0.104800
vn -0.925100 0.346900 0.154200
vn 0.621300 -0.776700 0.103600
vn -0.621300 -0.776700 0.103600
vn 0.000000 1.000000 0.000000
vn 0.619700 -0.689900 0.374200
vn -0.619700 -0.689900 0.374200
vn 0.275200 -0.880800 0.385300
vn -0.275200 -0.880800 0.385300
vn -0.792900 -0.525200 -0.308900
vn 0.792900 -0.525200 -0.308900
vn -0.809600 0.242900 -0.534300
vn 0.853800 0.232800 -0.465700
vn -0.562100 0.823100 -0.080300
vn 0.543300 0.698500 -0.465700
vn -0.007100 0.989900 0.141400
vn 0.109600 0.993900 -0.015700
vn 0.104600 0.039200 0.993700
vn -0.173800 0.009700 0.984700
vn 0.246100 0.085200 0.965500
vn -0.413400 0.041300 0.909600
vn 0.300900 0.092600 0.949100
vn -0.300900 0.092600 0.949100
vn 0.210400 0.012400 0.977500
vn -0.122000 0.045800 0.991500
vn -0.009900 0.386700 0.922100
vn 0.009900 0.386700 0.922100
vn 0.378700 -0.036400 0.924800
vn -0.424400 -0.032000 0.904900
vn 0.253000 -0.189700 0.948700
vn -0.257000 0.072300 0.963700
vn -0.487000 0.608800 0.626200
vn 0.298100 0.745400 0.596300
vn 0.669300 0.180200 0.720800
vn -0.669300 0.180200 0.720800
vn 0.438800 -0.200800 0.875900
vn -0.472300 -0.198600 0.858800
vn 0.578600 -0.133400 0.804600
vn -0.297500 -0.406200 0.864000
vn 0.500200 0.283300 0.818200
vn -0.500200 0.283300 0.818200
vn 0.092900 -0.991200 -0.094400
vn -0.092900 -0.991200 -0.094400
vn 0.468800 -0.871500 0.144200
vn -0.468800 -0.871500 0.144200
vn 0.930900 -0.254100 0.262400
vn -0.926400 -0.246000 0.285100
vn 0.846500 0.529100 -0.059500
vn -0.826700 0.562700 -0.003500
vn -0.251100 0.943900 -0.214500
vn 0.214600 0.924300 -0.315700
vn -0.484100 0.874300 -0.036100
vn 0.419600 0.885100 -0.201200
vn -0.525600 -0.003000 -0.850700
vn 0.547000 -0.014400 -0.837000
vn -0.146600 0.010400 -0.989100
vn 0.146600 0.010400 -0.989100
vn -0.807300 0.590100 0.004100
vn 0.733000 0.678600 0.047200
vn 0.420000 -0.229100 -0.878100
vn -0.420000 -0.229100 -0.878100
vn -0.068700 -0.994300 -0.081800
vn 0.068700 -0.994300 -0.081800
usemtl None
s off
f 47//1 1//1 3//1
f 4//2 2//2 48//2
f 45//3 3//3 5//3
f 6//4 4//4 46//4
f 3//5 9//5 7//5
f 8//6 10//6 4//6
f 1//7 11//7 9//7
f 10//8 12//8 2//8
f 11//9 13//9 15//9
f 16//10 14//10 12//10
f 9//11 15//11 17//11
f 18//12 16//12 10//12
f 21//13 19//13 17//13
f 22//14 16//14 18//14
f 13//15 23//15 21//15
f 22//16 24//16 14//16
f 23//17 25//17 27//17
f 28//18 26//18 24//18
f 27//19 29//19 19//19
f 28//20 22//20 20//20
f 33//21 31//21 29//21
f 34//22 28//22 30//22
f 35//23 33//23 27//23
f 36//24 26//24 28//24
f 37//25 39//25 33//25
f 38//26 36//26 34//26
f 39//27 41//27 31//27
f 40//28 34//28 32//28
f 45//29 43//29 41//29
f 46//30 40//30 42//30
f 47//31 45//31 39//31
f 48//32 38//32 40//32
f 37//33 51//33 49//33
f 38//34 48//34 50//34
f 35//35 53//35 51//35
f 36//36 38//36 52//36
f 25//37 55//37 53//37
f 26//38 36//38 54//38
f 23//39 57//39 55//39
f 24//40 26//40 56//40
f 23//41 13//41 59//41
f 60//42 14//42 24//42
f 13//43 11//43 63//43
f 64//44 12//44 14//44
f 11//45 1//45 65//45
f 66//46 2//46 12//46
f 1//47 47//47 49//47
f 50//48 48//48 2//48
f 61//49 65//49 49//49
f 50//50 66//50 62//50
f 63//51 65//51 61//51
f 62//52 66//52 64//52
f 61//53 59//53 63//53
f 64//54 60//54 62//54
f 61//55 57//55 59//55
f 60//56 58//56 62//56
f 61//57 55//57 57//57
f 58//58 56//58 62//58
f 61//59 53//59 55//59
f 56//60 54//60 62//60
f 61//61 51//61 53//61
f 54//62 52//62 62//62
f 61//63 49//63 51//63
f 52//64 50//64 62//64
f 174//65 176//65 91//65
f 175//66 90//66 91//66
f 172//67 174//67 89//67
f 173//68 88//68 90//68
f 85//69 170//69 172//69
f 173//70 171//70 86//70
f 83//71 168//71 170//71
f 171//72 169//72 84//72
f 81//73 166//73 168//73
f 169//74 167//74 82//74
f 79//75 92//75 146//75
f 147//76 93//76 80//76
f 94//77 148//77 146//77
f 95//78 93//78 147//78
f 94//79 96//79 150//79
f 151//80 97//80 95//80
f 98//81 152//81 150//81
f 99//82 97//82 151//82
f 100//83 154//83 152//83
f 101//84 99//84 153//84
f 102//85 156//85 154//85
f 103//86 101//86 155//86
f 102//87 104//87 158//87
f 159//88 105//88 103//88
f 106//89 160//89 158//89
f 107//90 105//90 159//90
f 108//91 162//91 160//91
f 109//92 107//92 161//92
f 67//93 68//93 162//93
f 67//94 109//94 163//94
f 128//95 160//95 162//95
f 129//96 111//96 163//96
f 128//97 179//97 158//97
f 159//98 180//98 129//98
f 156//99 158//99 179//99
f 157//100 127//100 180//100
f 154//101 156//101 126//101
f 155//102 125//102 127//102
f 152//103 154//103 124//103
f 153//104 123//104 125//104
f 150//105 152//105 122//105
f 151//106 121//106 123//106
f 148//107 150//107 120//107
f 149//108 119//108 121//108
f 146//109 148//109 118//109
f 147//110 117//110 119//110
f 164//111 146//111 116//111
f 165//112 115//112 117//112
f 114//113 181//113 177//113
f 177//114 182//114 115//114
f 162//115 68//115 112//115
f 163//116 111//116 113//116
f 112//117 68//117 178//117
f 178//118 68//118 113//118
f 181//119 183//119 178//119
f 182//120 177//120 178//120
f 135//121 137//121 176//121
f 176//122 137//122 136//122
f 133//123 135//123 174//123
f 175//124 136//124 134//124
f 133//125 172//125 170//125
f 134//126 132//126 171//126
f 166//127 187//127 185//127
f 186//128 188//128 167//128
f 131//129 170//129 168//129
f 169//130 171//130 132//130
f 190//131 189//131 187//131
f 190//132 145//132 188//132
f 187//133 189//133 69//133
f 188//134 186//134 69//134
f 131//135 185//135 69//135
f 132//135 130//135 69//135
f 142//136 193//136 191//136
f 192//137 194//137 143//137
f 140//138 195//138 193//138
f 194//139 196//139 141//139
f 197//140 195//140 140//140
f 198//141 139//141 141//141
f 71//142 197//142 139//142
f 71//143 138//143 139//143
f 144//144 191//144 70//144
f 145//145 190//145 70//145
f 191//146 206//146 208//146
f 192//147 70//147 208//147
f 71//148 199//148 200//148
f 201//149 199//149 71//149
f 197//150 200//150 202//150
f 203//151 201//151 198//151
f 202//152 204//152 193//152
f 203//153 196//153 194//153
f 193//154 204//154 206//154
f 207//155 205//155 194//155
f 204//156 202//156 200//156
f 205//157 199//157 201//157
f 199//158 208//158 206//158
f 207//159 208//159 199//159
f 139//160 140//160 164//160
f 165//161 141//161 139//161
f 140//162 142//162 211//162
f 212//163 143//163 141//163
f 144//164 213//164 211//164
f 145//165 143//165 212//165
f 187//166 166//166 213//166
f 188//167 145//167 214//167
f 209//168 213//168 166//168
f 210//169 82//169 167//169
f 215//170 211//170 213//170
f 216//171 210//171 214//171
f 79//172 164//172 211//172
f 212//173 165//173 80//173
f 130//174 72//174 222//174
f 130//175 132//175 223//175
f 133//176 131//176 222//176
f 223//177 132//177 134//177
f 135//178 133//178 220//178
f 221//179 134//179 136//179
f 137//180 135//180 218//180
f 219//181 136//181 137//181
f 218//182 229//182 231//182
f 219//183 217//183 231//183
f 218//184 220//184 227//184
f 228//185 221//185 219//185
f 220//186 222//186 225//186
f 226//143 223//143 221//143
f 72//187 224//187 225//187
f 72//188 223//188 226//188
f 224//189 231//189 229//189
f 230//190 231//190 224//190
f 225//191 229//191 227//191
f 228//192 230//192 226//192
f 183//193 181//193 234//193
f 235//194 182//194 184//194
f 112//195 183//195 232//195
f 233//196 184//196 113//196
f 112//197 254//197 256//197
f 113//198 111//198 257//198
f 114//199 252//199 234//199
f 115//200 182//200 235//200
f 114//201 116//201 250//201
f 251//202 117//202 115//202
f 116//203 118//203 248//203
f 249//204 119//204 117//204
f 118//205 120//205 246//205
f 247//206 121//206 119//206
f 120//207 122//207 244//207
f 245//208 123//208 121//208
f 124//209 242//209 244//209
f 125//210 123//210 245//210
f 126//211 240//211 242//211
f 127//212 125//212 243//212
f 126//213 179//213 236//213
f 237//214 180//214 127//214
f 179//215 128//215 238//215
f 239//216 129//216 180//216
f 128//217 110//217 256//217
f 257//218 111//218 129//218
f 256//219 258//219 276//219
f 257//220 239//220 277//220
f 236//221 238//221 276//221
f 277//222 239//222 237//222
f 236//223 278//223 274//223
f 237//224 241//224 275//224
f 240//225 274//225 272//225
f 241//226 243//226 273//226
f 244//227 242//227 272//227
f 273//228 243//228 245//228
f 244//229 270//229 268//229
f 245//230 247//230 269//230
f 248//231 246//231 268//231
f 269//232 247//232 249//232
f 248//233 266//233 264//233
f 249//234 251//234 265//234
f 250//235 264//235 262//235
f 251//236 253//236 263//236
f 234//237 252//237 262//237
f 263//238 253//238 235//238
f 256//239 254//239 260//239
f 261//240 255//240 257//240
f 254//241 232//241 282//241
f 283//242 233//242 255//242
f 232//243 234//243 280//243
f 281//244 235//244 233//244
f 67//245 108//245 284//245
f 285//246 109//246 67//246
f 108//247 106//247 286//247
f 287//248 107//248 109//248
f 104//249 288//249 286//249
f 105//250 107//250 287//250
f 102//251 290//251 288//251
f 103//252 105//252 289//252
f 100//253 292//253 290//253
f 101//254 103//254 291//254
f 100//255 98//255 294//255
f 295//256 99//256 101//256
f 96//257 296//257 294//257
f 97//258 99//258 295//258
f 96//259 94//259 298//259
f 299//260 95//260 97//260
f 94//261 92//261 300//261
f 301//262 93//262 95//262
f 309//263 328//263 338//263
f 309//264 308//264 339//264
f 308//265 338//265 336//265
f 308//266 307//266 337//266
f 307//267 336//267 340//267
f 307//268 306//268 341//268
f 89//269 91//269 306//269
f 306//270 91//270 90//270
f 87//271 89//271 340//271
f 341//272 90//272 88//272
f 85//273 87//273 334//273
f 335//274 88//274 86//274
f 83//275 85//275 330//275
f 331//276 86//276 84//276
f 330//277 336//277 338//277
f 339//278 337//278 331//278
f 334//279 340//279 336//279
f 335//280 331//280 337//280
f 332//281 338//281 328//281
f 333//282 327//282 329//282
f 81//283 83//283 332//283
f 333//284 84//284 82//284
f 342//285 344//285 215//285
f 343//286 210//286 216//286
f 326//287 342//287 209//287
f 327//288 82//288 210//288
f 215//289 344//289 346//289
f 216//290 80//290 347//290
f 346//291 300//291 92//291
f 347//292 80//292 93//292
f 324//293 352//293 304//293
f 325//294 77//294 304//294
f 352//295 350//295 78//295
f 353//296 304//296 78//296
f 78//297 350//297 348//297
f 349//298 351//298 78//298
f 305//299 348//299 328//299
f 329//300 349//300 305//300
f 328//301 348//301 342//301
f 329//302 327//302 343//302
f 296//303 298//303 318//303
f 319//304 299//304 297//304
f 316//305 324//305 77//305
f 317//306 76//306 77//306
f 358//307 356//307 303//307
f 359//308 302//308 303//308
f 303//309 356//309 354//309
f 355//310 357//310 303//310
f 75//311 354//311 316//311
f 317//312 355//312 75//312
f 292//313 294//313 362//313
f 363//314 295//314 293//314
f 364//315 362//315 368//315
f 369//316 363//316 365//316
f 366//317 368//317 370//317
f 371//318 369//318 367//318
f 372//319 370//319 376//319
f 377//320 371//320 373//320
f 378//321 374//321 376//321
f 379//322 315//322 377//322
f 316//323 354//323 374//323
f 375//324 355//324 317//324
f 354//325 356//325 372//325
f 373//326 357//326 355//326
f 356//327 358//327 366//327
f 367//328 359//328 357//328
f 358//329 360//329 364//329
f 365//330 361//330 359//330
f 292//331 364//331 360//331
f 293//332 291//332 361//332
f 360//333 358//333 302//333
f 361//334 74//334 302//334
f 284//335 286//335 288//335
f 289//336 287//336 285//336
f 284//337 290//337 360//337
f 361//338 291//338 285//338
f 73//339 284//339 74//339
f 74//340 285//340 73//340
f 296//341 310//341 362//341
f 297//342 295//342 363//342
f 310//343 312//343 368//343
f 369//344 313//344 311//344
f 312//345 382//345 370//345
f 371//346 383//346 313//346
f 376//347 370//347 382//347
f 377//348 315//348 383//348
f 350//349 386//349 384//349
f 351//350 349//350 385//350
f 384//351 386//351 320//351
f 385//352 319//352 321//352
f 298//353 300//353 384//353
f 385//354 301//354 299//354
f 300//355 344//355 342//355
f 343//356 345//356 301//356
f 342//357 348//357 384//357
f 385//358 349//358 343//358
f 300//359 346//359 344//359
f 345//360 347//360 301//360
f 322//361 380//361 378//361
f 323//362 315//362 379//362
f 378//363 380//363 324//363
f 379//364 317//364 325//364
f 386//365 380//365 322//365
f 387//366 321//366 323//366
f 352//367 380//367 386//367
f 353//368 351//368 387//368
f 324//369 380//369 352//369
f 353//370 381//370 325//370
f 388//371 414//371 402//371
f 389//372 401//372 403//372
f 400//373 402//373 404//373
f 405//374 403//374 401//374
f 404//375 406//375 396//375
f 405//376 399//376 397//376
f 406//377 408//377 394//377
f 407//378 397//378 395//378
f 408//379 410//379 392//379
f 409//380 395//380 393//380
f 392//381 410//381 412//381
f 413//382 411//382 393//382
f 410//383 420//383 418//383
f 419//384 421//384 411//384
f 408//385 422//385 420//385
f 421//386 423//386 409//386
f 424//387 422//387 408//387
f 425//388 407//388 409//388
f 426//389 424//389 406//389
f 427//390 405//390 407//390
f 428//391 426//391 404//391
f 429//392 403//392 405//392
f 402//393 414//393 416//393
f 417//394 415//394 403//394
f 320//395 444//395 442//395
f 321//396 319//396 443//396
f 390//397 412//397 444//397
f 391//398 321//398 445//398
f 310//399 318//399 442//399
f 443//400 319//400 311//400
f 382//401 430//401 414//401
f 415//402 431//402 383//402
f 412//403 418//403 440//403
f 441//404 419//404 413//404
f 446//405 444//405 440//405
f 447//406 439//406 441//406
f 434//407 446//407 438//407
f 439//408 447//408 435//408
f 448//409 446//409 434//409
f 449//410 433//410 435//410
f 448//411 432//411 450//411
f 449//412 431//412 451//412
f 430//413 450//413 416//413
f 431//414 415//414 417//414
f 312//415 448//415 430//415
f 431//416 449//416 313//416
f 442//417 446//417 448//417
f 443//418 313//418 449//418
f 442//419 444//419 446//419
f 447//420 445//420 443//420
f 416//421 450//421 452//421
f 453//422 451//422 417//422
f 432//423 462//423 452//423
f 433//424 451//424 453//424
f 432//425 434//425 460//425
f 461//426 435//426 433//426
f 436//427 458//427 460//427
f 437//428 435//428 461//428
f 438//429 456//429 458//429
f 439//430 437//430 459//430
f 438//431 440//431 454//431
f 455//432 441//432 439//432
f 440//433 418//433 474//433
f 475//434 419//434 441//434
f 428//435 416//435 476//435
f 477//436 417//436 429//436
f 426//437 428//437 464//437
f 465//438 429//438 427//438
f 424//439 426//439 466//439
f 467//440 427//440 425//440
f 424//441 468//441 470//441
f 425//442 423//442 471//442
f 422//443 470//443 472//443
f 423//444 421//444 473//444
f 420//445 472//445 474//445
f 421//446 419//446 475//446
f 456//447 480//447 478//447
f 457//448 459//448 479//448
f 480//449 482//449 484//449
f 481//450 479//450 485//450
f 484//451 482//451 488//451
f 489//452 483//452 485//452
f 488//453 490//453 492//453
f 489//454 487//454 493//454
f 464//455 476//455 486//455
f 487//456 477//456 465//456
f 484//457 486//457 476//457
f 485//458 453//458 477//458
f 462//459 478//459 484//459
f 463//460 453//460 485//460
f 458//461 478//461 462//461
f 463//462 479//462 459//462
f 474//463 480//463 456//463
f 475//464 455//464 457//464
f 472//465 482//465 480//465
f 481//466 483//466 473//466
f 488//467 482//467 472//467
f 489//468 471//468 473//468
f 490//469 488//469 470//469
f 491//470 469//470 471//470
f 466//471 492//471 490//471
f 491//472 493//472 467//472
f 464//473 492//473 466//473
f 467//474 493//474 465//474
f 392//475 390//475 504//475
f 505//476 391//476 393//476
f 394//477 392//477 502//477
f 503//478 393//478 395//478
f 394//479 500//479 498//479
f 395//480 397//480 499//480
f 396//481 498//481 496//481
f 397//482 399//482 497//482
f 398//483 496//483 494//483
f 399//484 401//484 495//484
f 400//485 494//485 506//485
f 401//486 389//486 507//486
f 502//487 504//487 506//487
f 503//488 495//488 507//488
f 494//489 496//489 500//489
f 501//490 497//490 495//490
f 496//491 498//491 500//491
f 501//492 499//492 497//492
f 382//493 388//493 506//493
f 383//494 315//494 507//494
f 314//495 506//495 504//495
f 505//496 507//496 315//496
f 320//497 322//497 504//497
f 505//498 323//498 321//498
f 45//499 47//499 3//499
f 46//500 4//500 48//500
f 43//501 45//501 5//501
f 44//502 6//502 46//502
f 5//503 3//503 7//503
f 6//504 8//504 4//504
f 3//505 1//505 9//505
f 4//506 10//506 2//506
f 9//507 11//507 15//507
f 10//508 16//508 12//508
f 7//509 9//509 17//509
f 8//510 18//510 10//510
f 15//511 21//511 17//511
f 20//512 22//512 18//512
f 15//513 13//513 21//513
f 16//514 22//514 14//514
f 21//515 23//515 27//515
f 22//516 28//516 24//516
f 21//517 27//517 19//517
f 30//518 28//518 20//518
f 27//519 33//519 29//519
f 32//520 34//520 30//520
f 25//521 35//521 27//521
f 34//522 36//522 28//522
f 35//523 37//523 33//523
f 40//524 38//524 34//524
f 33//525 39//525 31//525
f 42//526 40//526 32//526
f 39//527 45//527 41//527
f 44//528 46//528 42//528
f 37//529 47//529 39//529
f 46//530 48//530 40//530
f 47//531 37//531 49//531
f 52//532 38//532 50//532
f 37//533 35//533 51//533
f 54//534 36//534 52//534
f 35//535 25//535 53//535
f 56//536 26//536 54//536
f 25//537 23//537 55//537
f 58//538 24//538 56//538
f 57//539 23//539 59//539
f 58//540 60//540 24//540
f 59//541 13//541 63//541
f 60//542 64//542 14//542
f 63//543 11//543 65//543
f 64//544 66//544 12//544
f 65//545 1//545 49//545
f 66//546 50//546 2//546
f 89//547 174//547 91//547
f 176//548 175//548 91//548
f 87//549 172//549 89//549
f 175//550 173//550 90//550
f 87//551 85//551 172//551
f 88//552 173//552 86//552
f 85//553 83//553 170//553
f 86//554 171//554 84//554
f 83//555 81//555 168//555
f 84//556 169//556 82//556
f 164//557 79//557 146//557
f 165//558 147//558 80//558
f 92//559 94//559 146//559
f 149//560 95//560 147//560
f 148//561 94//561 150//561
f 149//562 151//562 95//562
f 96//563 98//563 150//563
f 153//564 99//564 151//564
f 98//565 100//565 152//565
f 155//566 101//566 153//566
f 100//567 102//567 154//567
f 157//568 103//568 155//568
f 156//569 102//569 158//569
f 157//570 159//570 103//570
f 104//571 106//571 158//571
f 161//572 107//572 159//572
f 106//573 108//573 160//573
f 163//574 109//574 161//574
f 108//575 67//575 162//575
f 68//576 67//576 163//576
f 110//577 128//577 162//577
f 161//578 129//578 163//578
f 160//579 128//579 158//579
f 161//580 159//580 129//580
f 126//581 156//581 179//581
f 159//582 157//582 180//582
f 124//583 154//583 126//583
f 157//584 155//584 127//584
f 122//585 152//585 124//585
f 155//586 153//586 125//586
f 120//587 150//587 122//587
f 153//588 151//588 123//588
f 118//589 148//589 120//589
f 151//590 149//590 121//590
f 116//591 146//591 118//591
f 149//592 147//592 119//592
f 114//593 164//593 116//593
f 147//594 165//594 117//594
f 164//595 114//595 177//595
f 165//596 177//596 115//596
f 110//597 162//597 112//597
f 68//598 163//598 113//598
f 183//599 112//599 178//599
f 184//600 178//600 113//600
f 177//601 181//601 178//601
f 184//602 182//602 178//602
f 174//603 135//603 176//603
f 175//604 176//604 136//604
f 172//605 133//605 174//605
f 173//606 175//606 134//606
f 131//607 133//607 170//607
f 173//608 134//608 171//608
f 168//609 166//609 185//609
f 169//610 186//610 167//610
f 185//611 131//611 168//611
f 186//612 169//612 132//612
f 144//613 190//613 187//613
f 189//131 190//131 188//131
f 185//614 187//614 69//614
f 189//133 188//133 69//133
f 130//135 131//135 69//135
f 186//135 132//135 69//135
f 144//615 142//615 191//615
f 145//616 192//616 143//616
f 142//617 140//617 193//617
f 143//618 194//618 141//618
f 139//619 197//619 140//619
f 196//620 198//620 141//620
f 138//186 71//186 139//186
f 198//621 71//621 139//621
f 190//622 144//622 70//622
f 192//623 145//623 70//623
f 70//146 191//146 208//146
f 207//147 192//147 208//147
f 197//624 71//624 200//624
f 198//625 201//625 71//625
f 195//626 197//626 202//626
f 196//627 203//627 198//627
f 195//628 202//628 193//628
f 205//629 203//629 194//629
f 191//630 193//630 206//630
f 192//631 207//631 194//631
f 199//632 204//632 200//632
f 203//633 205//633 201//633
f 204//634 199//634 206//634
f 205//635 207//635 199//635
f 177//636 139//636 164//636
f 177//637 165//637 139//637
f 164//638 140//638 211//638
f 165//639 212//639 141//639
f 142//640 144//640 211//640
f 214//641 145//641 212//641
f 144//642 187//642 213//642
f 167//643 188//643 214//643
f 81//644 209//644 166//644
f 214//645 210//645 167//645
f 209//646 215//646 213//646
f 212//647 216//647 214//647
f 215//648 79//648 211//648
f 216//649 212//649 80//649
f 131//650 130//650 222//650
f 72//651 130//651 223//651
f 220//652 133//652 222//652
f 221//653 223//653 134//653
f 218//654 135//654 220//654
f 219//655 221//655 136//655
f 217//135 137//135 218//135
f 217//135 219//135 137//135
f 217//182 218//182 231//182
f 230//183 219//183 231//183
f 229//656 218//656 227//656
f 230//657 228//657 219//657
f 227//186 220//186 225//186
f 228//143 226//143 221//143
f 222//187 72//187 225//187
f 224//188 72//188 226//188
f 225//658 224//658 229//658
f 226//659 230//659 224//659
f 232//660 183//660 234//660
f 233//661 235//661 184//661
f 254//662 112//662 232//662
f 255//663 233//663 113//663
f 110//664 112//664 256//664
f 255//665 113//665 257//665
f 181//666 114//666 234//666
f 253//667 115//667 235//667
f 252//668 114//668 250//668
f 253//669 251//669 115//669
f 250//670 116//670 248//670
f 251//671 249//671 117//671
f 248//672 118//672 246//672
f 249//673 247//673 119//673
f 246//674 120//674 244//674
f 247//675 245//675 121//675
f 122//676 124//676 244//676
f 243//677 125//677 245//677
f 124//678 126//678 242//678
f 241//679 127//679 243//679
f 240//680 126//680 236//680
f 241//681 237//681 127//681
f 236//682 179//682 238//682
f 237//683 239//683 180//683
f 238//684 128//684 256//684
f 239//685 257//685 129//685
f 238//686 256//686 276//686
f 259//687 257//687 277//687
f 278//688 236//688 276//688
f 279//689 277//689 237//689
f 240//690 236//690 274//690
f 279//691 237//691 275//691
f 242//692 240//692 272//692
f 275//693 241//693 273//693
f 270//694 244//694 272//694
f 271//695 273//695 245//695
f 246//696 244//696 268//696
f 271//697 245//697 269//697
f 266//698 248//698 268//698
f 267//699 269//699 249//699
f 250//700 248//700 264//700
f 267//701 249//701 265//701
f 252//702 250//702 262//702
f 265//703 251//703 263//703
f 280//237 234//237 262//237
f 281//238 263//238 235//238
f 258//704 256//704 260//704
f 259//705 261//705 257//705
f 260//706 254//706 282//706
f 261//707 283//707 255//707
f 282//708 232//708 280//708
f 283//709 281//709 233//709
f 73//710 67//710 284//710
f 73//711 285//711 67//711
f 284//712 108//712 286//712
f 285//713 287//713 109//713
f 106//714 104//714 286//714
f 289//715 105//715 287//715
f 104//716 102//716 288//716
f 291//717 103//717 289//717
f 102//718 100//718 290//718
f 293//719 101//719 291//719
f 292//720 100//720 294//720
f 293//721 295//721 101//721
f 98//722 96//722 294//722
f 297//723 97//723 295//723
f 296//724 96//724 298//724
f 297//725 299//725 97//725
f 298//726 94//726 300//726
f 299//727 301//727 95//727
f 308//728 309//728 338//728
f 329//729 309//729 339//729
f 307//730 308//730 336//730
f 339//731 308//731 337//731
f 306//732 307//732 340//732
f 337//733 307//733 341//733
f 340//734 89//734 306//734
f 341//735 306//735 90//735
f 334//736 87//736 340//736
f 335//737 341//737 88//737
f 330//738 85//738 334//738
f 331//739 335//739 86//739
f 332//740 83//740 330//740
f 333//741 331//741 84//741
f 332//742 330//742 338//742
f 333//743 339//743 331//743
f 330//744 334//744 336//744
f 341//745 335//745 337//745
f 326//746 332//746 328//746
f 339//747 333//747 329//747
f 326//748 81//748 332//748
f 327//749 333//749 82//749
f 209//750 342//750 215//750
f 345//751 343//751 216//751
f 81//752 326//752 209//752
f 343//753 327//753 210//753
f 79//754 215//754 346//754
f 345//755 216//755 347//755
f 79//756 346//756 92//756
f 301//757 347//757 93//757
f 77//758 324//758 304//758
f 353//759 325//759 304//759
f 304//760 352//760 78//760
f 351//761 353//761 78//761
f 305//762 78//762 348//762
f 305//763 349//763 78//763
f 309//764 305//764 328//764
f 309//765 329//765 305//765
f 326//766 328//766 342//766
f 349//767 329//767 343//767
f 310//768 296//768 318//768
f 311//769 319//769 297//769
f 76//770 316//770 77//770
f 325//771 317//771 77//771
f 302//772 358//772 303//772
f 357//773 359//773 303//773
f 75//774 303//774 354//774
f 75//775 355//775 303//775
f 76//776 75//776 316//776
f 76//777 317//777 75//777
f 364//778 292//778 362//778
f 365//779 363//779 293//779
f 366//780 364//780 368//780
f 367//781 369//781 365//781
f 372//782 366//782 370//782
f 373//783 371//783 367//783
f 374//784 372//784 376//784
f 375//785 377//785 373//785
f 314//786 378//786 376//786
f 375//787 379//787 377//787
f 378//788 316//788 374//788
f 379//789 375//789 317//789
f 374//790 354//790 372//790
f 375//791 373//791 355//791
f 372//792 356//792 366//792
f 373//793 367//793 357//793
f 366//794 358//794 364//794
f 367//795 365//795 359//795
f 290//796 292//796 360//796
f 365//797 293//797 361//797
f 74//798 360//798 302//798
f 359//799 361//799 302//799
f 290//800 284//800 288//800
f 291//801 289//801 285//801
f 74//802 284//802 360//802
f 74//803 361//803 285//803
f 294//804 296//804 362//804
f 311//805 297//805 363//805
f 362//806 310//806 368//806
f 363//807 369//807 311//807
f 368//808 312//808 370//808
f 369//809 371//809 313//809
f 314//810 376//810 382//810
f 371//811 377//811 383//811
f 348//812 350//812 384//812
f 387//813 351//813 385//813
f 318//814 384//814 320//814
f 387//815 385//815 321//815
f 318//816 298//816 384//816
f 319//817 385//817 299//817
f 384//818 300//818 342//818
f 385//819 343//819 301//819
f 314//820 322//820 378//820
f 381//821 323//821 379//821
f 316//822 378//822 324//822
f 381//823 379//823 325//823
f 320//824 386//824 322//824
f 381//825 387//825 323//825
f 350//826 352//826 386//826
f 381//827 353//827 387//827
f 400//828 388//828 402//828
f 415//829 389//829 403//829
f 398//830 400//830 404//830
f 399//831 405//831 401//831
f 398//832 404//832 396//832
f 407//833 405//833 397//833
f 396//834 406//834 394//834
f 409//835 407//835 395//835
f 394//836 408//836 392//836
f 411//837 409//837 393//837
f 390//838 392//838 412//838
f 391//839 413//839 393//839
f 412//840 410//840 418//840
f 413//841 419//841 411//841
f 410//842 408//842 420//842
f 411//843 421//843 409//843
f 406//844 424//844 408//844
f 423//845 425//845 409//845
f 404//846 426//846 406//846
f 425//847 427//847 407//847
f 402//848 428//848 404//848
f 427//849 429//849 405//849
f 428//850 402//850 416//850
f 429//851 417//851 403//851
f 318//852 320//852 442//852
f 445//853 321//853 443//853
f 320//854 390//854 444//854
f 413//855 391//855 445//855
f 312//856 310//856 442//856
f 313//857 443//857 311//857
f 388//858 382//858 414//858
f 389//859 415//859 383//859
f 444//860 412//860 440//860
f 445//861 441//861 413//861
f 438//862 446//862 440//862
f 445//863 447//863 441//863
f 436//135 434//135 438//135
f 437//135 439//135 435//135
f 432//864 448//864 434//864
f 447//865 449//865 435//865
f 430//866 448//866 450//866
f 433//867 449//867 451//867
f 414//868 430//868 416//868
f 451//869 431//869 417//869
f 382//870 312//870 430//870
f 383//871 431//871 313//871
f 312//872 442//872 448//872
f 447//873 443//873 449//873
f 476//874 416//874 452//874
f 477//875 453//875 417//875
f 450//876 432//876 452//876
f 463//877 433//877 453//877
f 462//425 432//425 460//425
f 463//426 461//426 433//426
f 434//878 436//878 460//878
f 459//879 437//879 461//879
f 436//880 438//880 458//880
f 457//881 439//881 459//881
f 456//882 438//882 454//882
f 457//883 455//883 439//883
f 454//884 440//884 474//884
f 455//884 475//884 441//884
f 464//885 428//885 476//885
f 465//886 477//886 429//886
f 466//887 426//887 464//887
f 467//888 465//888 427//888
f 468//889 424//889 466//889
f 469//890 467//890 425//890
f 422//891 424//891 470//891
f 469//892 425//892 471//892
f 420//893 422//893 472//893
f 471//894 423//894 473//894
f 418//895 420//895 474//895
f 473//896 421//896 475//896
f 458//897 456//897 478//897
f 481//898 457//898 479//898
f 478//899 480//899 484//899
f 483//900 481//900 485//900
f 486//901 484//901 488//901
f 487//902 489//902 485//902
f 486//903 488//903 492//903
f 491//904 489//904 493//904
f 492//905 464//905 486//905
f 493//906 487//906 465//906
f 452//907 484//907 476//907
f 487//908 485//908 477//908
f 452//909 462//909 484//909
f 479//910 463//910 485//910
f 460//135 458//135 462//135
f 461//135 463//135 459//135
f 454//911 474//911 456//911
f 481//912 475//912 457//912
f 474//913 472//913 480//913
f 475//914 481//914 473//914
f 470//915 488//915 472//915
f 483//916 489//916 473//916
f 468//917 490//917 470//917
f 489//918 491//918 471//918
f 468//919 466//919 490//919
f 469//920 491//920 467//920
f 502//921 392//921 504//921
f 503//922 505//922 393//922
f 500//923 394//923 502//923
f 501//924 503//924 395//924
f 396//925 394//925 498//925
f 501//926 395//926 499//926
f 398//927 396//927 496//927
f 499//928 397//928 497//928
f 400//929 398//929 494//929
f 497//930 399//930 495//930
f 388//931 400//931 506//931
f 495//932 401//932 507//932
f 494//933 502//933 506//933
f 505//934 503//934 507//934
f 502//935 494//935 500//935
f 503//936 501//936 495//936
f 314//937 382//937 506//937
f 389//938 383//938 507//938
f 322//939 314//939 504//939
f 323//940 505//940 315//940
f 390//941 320//941 504//941
f 391//942 505//942 321//942
`];
    return () => ({ mtlFiles, objFiles });
})();
const ImportModel = (() => {
    const rgba = (r, g, b, a) => {
        return 'rgba('.concat(r.toString(10), ',', g.toString(10), ',', b.toString(10), ',', a.toString(10), ')');
    };
    const materials = new Map();
    class Material {
        constructor() {
            this.ambientColor = [1, 1, 1];
            this.diffuseColor = [0, 0, 0];
            this.specularColor = [0, 0, 0];
            this.illumination = 2;
        }
        static loadMtl(filename, file) {
            const matMap = new Map();
            materials.set(filename, matMap);
            let lnl = -1;
            let nnl = file.indexOf('\n');
            const m = new Material();
            while (nnl !== -1) {
                const line = file.substring(lnl, nnl).trim();
                const args = line.split(' ');
                switch (args[0]) {
                    case 'newmtl':
                        // material name
                        matMap.set(args[1], m);
                        break;
                    case 'Ns':
                        break;
                    case 'Ka':
                        // ambient color
                        if (args.length < 5) {
                            args.push('1');
                        }
                        m.ambientColor = args.slice(1).map(parseFloat);
                        break;
                    case 'Kd':
                        if (args.length < 5) {
                            args.push('1');
                        }
                        m.diffuseColor = args.slice(1).map(parseFloat);
                        // diffuse color
                        break;
                    case 'Ks':
                        if (args.length < 5) {
                            args.push('1');
                        }
                        m.specularColor = args.slice(1).map(parseFloat);
                        // specular color
                        break;
                    case 'Ke':
                        break;
                    case 'Ni':
                        break;
                    case 'd':
                        break;
                    case 'illum':
                        m.illumination = parseFloat(args[1]);
                        // illumination type
                        /*
                          (from Wikipedia)
                          0. Color on and Ambient off
                          1. Color on and Ambient on
                          2. Highlight on
                          3. Reflection on and Ray trace on
                          4. Transparency: Glass on, Reflection: Ray trace on
                          5. Reflection: Fresnel on and Ray trace on
                          6. Transparency: Refraction on, Reflection: Fresnel off and Ray trace on
                          7. Transparency: Refraction on, Reflection: Fresnel on and Ray trace on
                          8. Reflection on and Ray trace off
                          9. Transparency: Glass on, Reflection: Ray trace off
                          10. Casts shadows onto invisible surfaces
                        */
                        break;
                    case '':
                        break;
                    case '#':
                        // comment
                        break;
                    default:
                        console.log('unrecognized data', args);
                        break;
                }
                lnl = nnl + 1;
                nnl = file.indexOf('\n', lnl);
            }
            return m;
        }
    }
    const models = new Map();
    class Model {
        constructor() {
            // todo: models should probably store translation, rotation, scale info
            this.name = '';
            this.verts = null;
            this.tris = null;
            this.surfaces = null;
            this.normals = null; // one normal per tri
            this.colors = null; // one color per tri
            this.material = null;
            this.transform = null; // mat4
            this.parent = null;
            this.maxDistance = 0; // maximum distance from 0, 0, 0
        }
        clone() {
            const m = new Model();
            m.name = this.name;
            m.verts = this.verts;
            m.tris = this.tris;
            m.surfaces = this.surfaces;
            m.normals = this.normals;
            m.colors = this.colors;
            m.material = this.material;
            m.transform = mat4.clone(this.transform);
            m.parent = null;
            return m;
        }
        calcDistance() {
            let d = 0;
            for (let i = 0; i < this.verts.length; i++) {
                const a = Math.abs(this.verts[i]);
                if (a > d) {
                    d = a;
                }
            }
            this.maxDistance = d;
        }
        scaleToSize([x, y, z]) {
            // note: nukes any existing rotation/translation for now...
            if (this.parent !== null) {
                // scales starting at parent transform
                mat4.copy(this.transform, this.parent);
            }
            if (this.maxDistance === 0) {
                this.calcDistance();
            }
            return vec3.fromValues(x / this.maxDistance, y / this.maxDistance, z / this.maxDistance);
        }
        setSize(size) {
            // note: nukes any existing rotation/translation for now...
            if (this.parent !== null) {
                // scales starting at parent transform
                mat4.copy(this.transform, this.parent);
            }
            if (this.maxDistance === 0) {
                this.calcDistance();
            }
            mat4.scale(this.transform, this.transform, this.scaleToSize(size));
        }
        static loadObj(file) {
            // allocate space
            let vertexCount = 0;
            let normalCount = 0;
            let faceCount = 0;
            let lnl = -1;
            let nnl = file.indexOf('\n');
            while (nnl !== -1) {
                const line = file.substring(lnl, nnl).trim();
                const args = line.split(' ');
                switch (args[0]) {
                    case 'o':
                        // object name
                        // unused right now, but later slice up obj files by name
                        break;
                    case 'v':
                        // vertex
                        vertexCount++;
                        break;
                    case 'vn':
                        // vertex normal
                        normalCount++;
                        break;
                    case 'f':
                        // face
                        faceCount++;
                        break;
                    default:
                        break;
                }
                lnl = nnl + 1;
                nnl = file.indexOf('\n', lnl);
            }
            const surfaceCount = normalCount;
            // actually process
            const m = new Model();
            m.transform = mat4.create();
            const verts = new Float32Array(vertexCount * 3);
            let vn = 0;
            m.verts = verts;
            const normals = new Float32Array(normalCount * 3);
            let nn = 0;
            m.normals = normals;
            const tris = new Int32Array(faceCount * 3);
            let tn = 0;
            m.tris = tris;
            // TODO: look this up to make sure it makes sense
            const surfaces = new Int32Array(faceCount);
            let sn = 0;
            m.surfaces = surfaces;
            let matFn = '';
            let matName = '';
            lnl = -1;
            nnl = file.indexOf('\n');
            let color = [0.9, 0.9, 0.9, 1];
            while (nnl !== -1) {
                const line = file.substring(lnl, nnl).trim();
                const args = line.split(' ');
                switch (args[0]) {
                    case 'o':
                        // object name
                        m.name = args[1];
                        models.set(args[1], m);
                        break;
                    case 'v':
                        // vertex
                        verts[vn] = parseFloat(args[1]);
                        verts[vn + 1] = parseFloat(args[2]);
                        verts[vn + 2] = parseFloat(args[3]);
                        vn += 3;
                        break;
                    case 'vn':
                        // vertex normal
                        // might not use, just calculate in engine
                        normals[nn] = parseFloat(args[1]);
                        normals[nn + 1] = parseFloat(args[2]);
                        normals[nn + 2] = -parseFloat(args[3]);
                        nn += 3;
                        break;
                    case 'f':
                        // face (tri)
                        // each arg like vertex#//face#
                        tris[tn] = parseInt(args[1].substring(0, args[1].indexOf('/')), 10) - 1;
                        surfaces[sn] = parseInt(args[1].substring(args[1].lastIndexOf('/') + 1), 10) - 1;
                        tris[tn + 1] = parseInt(args[2].substring(0, args[2].indexOf('/')), 10) - 1;
                        if (parseInt(args[2].substring(args[2].lastIndexOf('/') + 1), 10) - 1 !== surfaces[sn]) {
                            console.warn('Found unexpectedly differing surface ID (vert#2), might need to save them separately for GPU');
                        }
                        tris[tn + 2] = parseInt(args[3].substring(0, args[3].indexOf('/')), 10) - 1;
                        if (parseInt(args[3].substring(args[3].lastIndexOf('/') + 1), 10) - 1 !== surfaces[sn]) {
                            console.warn('Found unexpectedly differing surface ID (vert#3), might need to save them separately for GPU');
                        }
                        sn = sn + 1;
                        tn += 3;
                        break;
                    case 's':
                        // smooth shading, not using yet
                        break;
                    case 'mtllib':
                        // material template file name, e.g. example.mtl
                        matFn = args[1];
                        if (matFn !== '' && matName !== '') {
                            m.material = materials.get(matFn).get(matName);
                            color = m.material.diffuseColor;
                        }
                        break;
                    case 'usemtl':
                        // material name (e.g. Material.001)
                        matName = args[1];
                        if (matFn !== '' && matName !== '') {
                            if (!materials.has(matFn)) {
                                throw new Error('Could not find material file! ' + matFn);
                            }
                            if (!materials.get(matFn).has(matName)) {
                                throw new Error('Could not find material ' + matName + ' in ' + matFn + '!');
                            }
                            m.material = materials.get(matFn).get(matName);
                            color = m.material.diffuseColor;
                        }
                        break;
                    case '':
                        // blank line
                        break;
                    case '#':
                        // comment
                        break;
                    default:
                        console.log('unrecognized data:', args);
                        break;
                }
                lnl = nnl + 1;
                nnl = file.indexOf('\n', lnl);
            }
            m.colors = new Float32Array(surfaceCount * 4);
            for (let i = 0; i < m.colors.length; i = i + 4) {
                m.colors[i] = color[0];
                m.colors[i + 1] = color[0 + 1];
                m.colors[i + 2] = color[0 + 2];
                m.colors[i + 3] = color[0 + 3];
            }
            return m;
        }
        static get(name) {
            if (!models.has(name)) {
                throw new Error('Model not found! ' + name);
            }
            return models.get(name).clone();
        }
        static build(data) {
            const m = Model.get(data.name);
            if (data.material) {
                m.material = materials.get(data.material.filename).get(data.material.name);
            }
            let scale = null;
            if (data.size) {
                scale = m.scaleToSize(data.size);
            }
            else {
                scale = vec3.fromValues(1, 1, 1);
            }
            if (data.scale) {
                vec3.mul(scale, scale, new Float32Array(data.scale));
            }
            mat4.fromRotationTranslationScale(m.transform, data.rotation ? new Float32Array(data.rotation) : quat.create(), data.position ? vec3.fromValues(data.position[0], -data.position[1], data.position[2]) : vec3.create(), scale);
            return m;
        }
        static load(data) {
            const m = new Model();
            m.transform = mat4.create();
            m.verts = new Float32Array(data.verts);
            m.tris = new Int32Array(data.tris);
            m.normals = new Float32Array(data.tris.length);
            if (data.hasOwnProperty('scale')) {
                const scale = data.scale;
                for (let i = 0; i < m.verts.length; i = i + 3) {
                    m.verts[i] = m.verts[i] * scale[0];
                    m.verts[i + 1] = m.verts[i + 1] * scale[1];
                    m.verts[i + 2] = m.verts[i + 2] * scale[2];
                }
            }
            const a = vec3.create();
            const b = vec3.create();
            const c = vec3.create();
            const v = m.verts;
            // calculate normals
            for (let i = 0; i < m.tris.length; i = i + 3) {
                let n = m.tris[i] * 3;
                vec3.set(a, v[n + 0], v[n + 1], v[n + 2]);
                n = m.tris[i + 1] * 3;
                vec3.set(b, v[n + 0], v[n + 1], v[n + 2]);
                n = m.tris[i + 2] * 3;
                vec3.set(c, v[n + 0], v[n + 1], v[n + 2]);
                console.log(a, b, c);
                surfaceNormal(a, a, b, c);
                m.normals[i] = a[0];
                m.normals[i + 1] = -a[1];
                m.normals[i + 2] = a[2];
            }
            if (data.colors) {
                m.colors = new Float32Array(data.colors);
            }
            else {
                let color = [0.9, 0.9, 0.9, 1];
                if (data.color) {
                    color = data.color;
                }
                m.colors = new Float32Array(data.tris.length * 4);
                for (let i = 0; i < m.colors.length; i = i + 4) {
                    m.colors[i] = color[0];
                    m.colors[i + 1] = color[0 + 1];
                    m.colors[i + 2] = color[0 + 2];
                    m.colors[i + 3] = color[0 + 3];
                }
            }
            return m;
        }
    }
    const snV1 = vec3.create();
    const snV2 = vec3.create();
    const surfaceNormal = (out, a, b, c) => {
        const u = vec3.subtract(snV1, b, a);
        const v = vec3.subtract(snV2, c, a);
        out[0] = u[1] * v[2] - u[2] * v[1];
        out[1] = u[2] * v[0] - u[0] * v[2];
        out[2] = u[0] * v[1] - u[1] * v[0];
        vec3.normalize(out, out);
        return out;
    };
    const { mtlFiles, objFiles } = ImportModels();
    const mtlFilenames = Object.getOwnPropertyNames(mtlFiles);
    for (const k of mtlFilenames) {
        Material.loadMtl(k, mtlFiles[k]);
    }
    for (const file of objFiles) {
        Model.loadObj(file);
    }
    class Prefab {
        constructor() {
            this.models = [];
            this.transform = null;
        }
        static build(data) {
            const p = new Prefab();
            p.transform = mat4.fromRotationTranslationScale(mat4.create(), data.rotation ? new Float32Array(data.rotation) : quat.create(), data.position ? new Float32Array(data.position) : vec3.create(), data.scale ? new Float32Array(data.scale) : vec3.fromValues(1, 1, 1));
            for (let i = 0; i < data.models.length; i++) {
                const m = Model.build(data.models[i]);
                m.parent = p.transform;
                mat4.mul(m.transform, m.transform, p.transform);
                p.models.push(m);
            }
            return p;
        }
    }
    return () => ({ Model, Prefab });
})();
const ImportBash = (() => {
    'use strong';
    const global = window;
    var error;
    (function (error) {
        error[error["eof"] = 0] = "eof";
        error[error["closed"] = 1] = "closed";
        error[error["unexpectedEof"] = 2] = "unexpectedEof";
        error[error["unexpectedToken"] = 3] = "unexpectedToken";
        error[error["unknownError"] = 4] = "unknownError";
        error[error["unknownToken"] = 5] = "unknownToken";
    })(error || (error = {}));
    const delay = (ms) => {
        return new Promise(resolve => setTimeout(resolve, ms));
    };
    class ReadWriter {
        constructor() {
            this.buf = [];
            this.at = 0;
            this.err = null;
            this.resume = [];
        }
        wait() {
            return new Promise(resolve => {
                if (this.err !== null) {
                    resolve(this.err);
                    return;
                }
                this.resume.push(resolve);
            });
        }
        read() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.buf.length === 0) {
                    this.err = yield this.wait();
                }
                if (this.err !== null && this.buf.length === 0) {
                    return ['', this.err];
                }
                let s = null;
                if (this.at > 0) {
                    s = [this.buf.shift().substring(this.at) + this.buf.join(''), null];
                    this.at = 0;
                }
                else {
                    s = [this.buf.join(''), null];
                }
                this.buf.length = 0;
                return s;
            });
        }
        readChar() {
            return __awaiter(this, void 0, void 0, function* () {
                let err = null;
                while (this.buf.length === 0) {
                    err = yield this.wait();
                    if (err !== null) {
                        break;
                    }
                    while (this.buf.length > 0 && this.buf[0].length === 0) {
                        this.buf.shift();
                        this.at = 0;
                    }
                }
                if (err !== null && this.buf.length === 0) {
                    return ['', err];
                }
                const s = [this.buf[0][this.at], null];
                this.at++;
                if (this.at >= this.buf[0].length) {
                    this.at = 0;
                    this.buf.shift();
                }
                return s;
            });
        }
        peek() {
            return __awaiter(this, void 0, void 0, function* () {
                let err = null;
                while (this.buf.length === 0) {
                    err = yield this.wait();
                    if (err !== null) {
                        break;
                    }
                    while (this.buf.length > 0 && this.buf[0].length === 0) {
                        this.buf.shift();
                        this.at = 0;
                    }
                }
                if (err !== null && this.buf.length === 0) {
                    return ['', err];
                }
                const s = [this.buf[0][this.at], null];
                return s;
            });
        }
        write(s) {
            if (this.err !== null) {
                return this.err;
            }
            this.buf.push(s);
            while (this.resume.length > 0 && this.buf.length > 0) {
                this.resume.shift()(null);
            }
            return null;
        }
        readSync() {
            let s = null;
            if (this.at > 0) {
                s = [this.buf.shift().substring(this.at) + this.buf.join(''), this.err];
                this.at = 0;
            }
            else {
                s = [this.buf.join(''), this.err];
            }
            this.buf.length = 0;
            return s;
        }
        close() {
            if (this.err !== null) {
                return this.err;
            }
            while (this.resume.length > 0) {
                this.resume.pop()(error.eof);
            }
            this.err = error.eof;
            return null;
        }
        reset() {
            this.err = null;
            this.buf.length = 0;
            while (this.resume.length > 0) {
                this.resume.pop()(error.eof);
            }
        }
    }
    class Scanner {
        constructor(r) {
            this.reader = r;
        }
        scan(test) {
            return __awaiter(this, void 0, void 0, function* () {
                let s = '';
                let c = '';
                let err = null;
                while ([c, err] = yield this.reader.peek(), err === null && test(c)) {
                    [c, err] = yield this.reader.readChar();
                    if (err !== null) {
                        return [s, err];
                    }
                    s += c;
                }
                return [s, err];
            });
        }
        peek() {
            return this.reader.peek();
        }
        read() {
            return this.reader.readChar();
        }
        debug(test = Scanner.test.ident) {
            this.scan(test).then(v => console.log('scanned', '"' + v[0] + '"', v[1] === null ? null : error[v[1]]));
        }
    }
    Scanner.test = {
        ident: (s) => (s >= 'a' && s <= 'z') ||
            (s >= 'A' && s <= 'Z') ||
            (s >= '0' && s <= '9') ||
            s === '_',
        digit: (s) => s >= '0' && s <= '9',
        letter: (s) => (s >= 'a' && s <= 'z') || (s >= 'A' && s <= 'Z'),
        whitespace: (s) => (s === ' ' || s === '\t' || s === '\v'),
        notQuot: (s) => s !== '\''
    };
    var TokenKind;
    (function (TokenKind) {
        TokenKind[TokenKind["whitespace"] = 0] = "whitespace";
        TokenKind[TokenKind["identifier"] = 1] = "identifier";
        TokenKind[TokenKind["lparen"] = 2] = "lparen";
        TokenKind[TokenKind["rparen"] = 3] = "rparen";
        TokenKind[TokenKind["pipe"] = 4] = "pipe";
        TokenKind[TokenKind["pipepipe"] = 5] = "pipepipe";
        TokenKind[TokenKind["amp"] = 6] = "amp";
        TokenKind[TokenKind["ampamp"] = 7] = "ampamp";
        TokenKind[TokenKind["lt"] = 8] = "lt";
        TokenKind[TokenKind["ltlt"] = 9] = "ltlt";
        TokenKind[TokenKind["ltlparen"] = 10] = "ltlparen";
        TokenKind[TokenKind["ltltlt"] = 11] = "ltltlt";
        TokenKind[TokenKind["gt"] = 12] = "gt";
        TokenKind[TokenKind["gtgt"] = 13] = "gtgt";
        TokenKind[TokenKind["hash"] = 14] = "hash";
        TokenKind[TokenKind["dol"] = 15] = "dol";
        TokenKind[TokenKind["lbrace"] = 16] = "lbrace";
        TokenKind[TokenKind["rbrace"] = 17] = "rbrace";
        TokenKind[TokenKind["semicolon"] = 18] = "semicolon";
        TokenKind[TokenKind["unknown"] = 19] = "unknown";
        TokenKind[TokenKind["newline"] = 20] = "newline";
        TokenKind[TokenKind["backslash"] = 21] = "backslash";
        TokenKind[TokenKind["quot"] = 22] = "quot";
        TokenKind[TokenKind["dblquot"] = 23] = "dblquot";
        TokenKind[TokenKind["backtick"] = 24] = "backtick";
        TokenKind[TokenKind["sub"] = 25] = "sub";
        TokenKind[TokenKind["pipeamp"] = 26] = "pipeamp";
        TokenKind[TokenKind["oneamp"] = 27] = "oneamp";
        TokenKind[TokenKind["gtamp"] = 28] = "gtamp";
        TokenKind[TokenKind["redirect1"] = 29] = "redirect1";
        TokenKind[TokenKind["redirect2"] = 30] = "redirect2";
        TokenKind[TokenKind["redirect1to2"] = 31] = "redirect1to2";
        TokenKind[TokenKind["redirect2to1"] = 32] = "redirect2to1";
    })(TokenKind || (TokenKind = {}));
    // todo: algorithm doesn't recurse right through this tree
    // currently requires that all steps be valid operators
    // {
    const operators = {
        '(': TokenKind.lparen,
        ')': TokenKind.rparen,
        '|': {
            '|': TokenKind.pipe,
            '||': TokenKind.pipepipe,
            '|&': TokenKind.pipeamp // TODO
        },
        '&': {
            '&': TokenKind.amp,
            '&&': TokenKind.ampamp
        },
        '<': {
            '<': TokenKind.lt,
            '<(': TokenKind.ltlparen,
            '<<': {
                '<<': TokenKind.ltlt,
                // << will cause a special shell command that reads a chunk of data line by line?
                // actually, just need real ways for programs to read from shell
                // read line, read character (like now)
                '<<<': TokenKind.ltltlt // TODO: only scan one identifier? (for a lot of these)
            }
        },
        '>': {
            '>': TokenKind.gt,
            '>>': TokenKind.gtgt,
            '>&': TokenKind.gtamp // TODO write stdout and stderr
        },
        /*'1': {
          '1>': {
            '1>': TokenKind.redirect1,
            '1>&': {
              '1>&2': TokenKind.redirect1to2
            }
          }
        },
        '2': {
          '2>': {
            '2>': TokenKind.redirect2,
            '2>&': {
              '2>&1': TokenKind.redirect2to1
            }
          }
        },*/
        '#': TokenKind.hash,
        '$': {
            '$': TokenKind.dol,
            '$(': TokenKind.sub
        },
        // '{': TokenKind.lbrace,
        // '}': TokenKind.rbrace,
        ';': TokenKind.semicolon,
        '\n': TokenKind.newline,
        '\\': TokenKind.backslash,
        '\'': TokenKind.quot,
        '"': TokenKind.dblquot,
        '`': TokenKind.backtick
    };
    const notOperator = (s) => !operators.hasOwnProperty(s);
    const nonOpIdent = (s) => s !== ' ' && s !== '\t' && s !== '\v' && !operators.hasOwnProperty(s);
    class Token {
    }
    class Lexer {
        constructor(s) {
            this.scanOverride = null;
            this.scanner = s;
        }
        debug() {
            return __awaiter(this, void 0, void 0, function* () {
                let t = null;
                let err = null;
                const results = [];
                while ([t, err] = yield this.next()) {
                    if (t === null) {
                        results.push({ token: null, value: null, error: error[err] });
                        if (err !== null) {
                            break;
                        }
                        continue;
                    }
                    results.push({ token: TokenKind[t.kind], value: t.value, error: error[err] || err });
                    if (err !== null) {
                        break;
                    }
                }
                global.lastResults = results;
                global.console.table(results);
            });
        }
        read() {
            return __awaiter(this, void 0, void 0, function* () {
                const val = [null, null];
                let [c, err] = yield this.scanner.peek();
                if (err !== null) {
                    val[1] = err;
                    return val;
                }
                /* const actuallyOperator = false // this just needs to be redone to properly recurse backward through tree.. dumb hacky workaround
                let unread = ''
                if (Scanner.test.digit(c)) {
                  const [digit, err] = await this.scanner.read()
                  ;[c, err] = await this.scanner.peek()
                  if (err !== null && operators[digit + c]) {
                    actuallyOperator = true
                  } else {
                    unread = digit
                  }
                } */
                if (notOperator(c)) {
                    if (Scanner.test.whitespace(c)) {
                        const [s, err] = yield this.scanner.scan(Scanner.test.whitespace);
                        if (err !== null && err !== error.eof) {
                            // if we hit the end we don't care about getting an error here
                            // the error will be there when we come back
                            // would rather return [null, error.eof] than the last token w/eof
                            val[1] = err;
                            return val;
                        }
                        val[0] = {
                            kind: TokenKind.whitespace,
                            value: s
                        };
                        return val;
                    }
                    const [s, err] = yield this.scanner.scan(nonOpIdent);
                    if (err !== null && err !== error.eof) {
                        val[1] = err;
                        return val;
                    }
                    val[0] = {
                        kind: TokenKind.identifier,
                        value: s
                    };
                    return val;
                }
                let tok;
                [c, err] = yield this.scanner.read();
                if (err !== null) {
                    val[1] = err;
                    return val;
                }
                if (typeof operators[c] === 'object') {
                    let at = operators[c];
                    let ch = '';
                    while ([ch, err] = yield this.scanner.peek(), err === null) {
                        if (!at.hasOwnProperty(c + ch)) {
                            tok = at[c];
                            break;
                        }
                        [ch, err] = yield this.scanner.read();
                        if (err !== null) {
                            val[1] = err;
                            return val;
                        }
                        if (typeof at[c + ch] === 'object') {
                            c = c + ch;
                            at = at[c];
                            continue;
                        }
                        c = c + ch;
                        tok = at[c];
                        break;
                    }
                    if (err !== null) {
                        tok = at[c];
                    }
                }
                else {
                    tok = operators[c];
                }
                if (tok === TokenKind.backslash) {
                    [c, err] = yield this.scanner.read();
                    if (err !== null) {
                        val[1] = err === error.closed || err === error.eof ? error.unexpectedEof : err;
                        return val;
                    }
                    if (c === '\n') {
                        tok = TokenKind.backslash;
                    }
                    else {
                        tok = TokenKind.identifier;
                    }
                }
                val[0] = {
                    kind: tok,
                    value: c
                };
                return val;
            });
        }
        next() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.scanOverride !== null) {
                    let [s, err] = yield this.scanner.scan(this.scanOverride);
                    this.scanOverride = null;
                    if (err !== null) {
                        return [null, err];
                    }
                    let ch;
                    [ch, err] = yield this.scanner.read();
                    return [
                        {
                            kind: TokenKind.identifier,
                            value: s
                        },
                        err
                    ];
                }
                let val = '';
                let kind = null;
                let token = null;
                let bubbleErr = null;
                while (true) {
                    const [tok, err] = yield this.read();
                    if (err !== null) {
                        bubbleErr = err;
                        break;
                    }
                    if (tok.kind !== TokenKind.backslash) {
                        val += tok.value;
                        kind = tok.kind;
                    }
                    if (kind === null) {
                        continue;
                    }
                    if (kind === TokenKind.identifier) {
                        const [c, err] = yield this.scanner.peek();
                        if (err !== null) {
                            if (err !== error.closed && err !== error.eof) {
                                bubbleErr = err;
                            }
                            break;
                        }
                        if (c === '\\' || (notOperator(c) && !Scanner.test.whitespace(c))) {
                            continue;
                        }
                        break;
                    }
                    if (kind === TokenKind.whitespace) {
                        const [c, err] = yield this.scanner.peek();
                        if (err !== null) {
                            if (err !== error.closed && err !== error.eof) {
                                bubbleErr = err;
                            }
                            break;
                        }
                        if (Scanner.test.whitespace(c)) {
                            continue;
                        }
                    }
                    break;
                }
                if (bubbleErr === null) {
                    token = {
                        kind: kind,
                        value: val
                    };
                }
                return [token, bubbleErr];
            });
        }
    }
    var NodeKind;
    (function (NodeKind) {
        NodeKind[NodeKind["sequence"] = 1] = "sequence";
        NodeKind[NodeKind["join"] = 2] = "join";
        NodeKind[NodeKind["ident"] = 4] = "ident";
        NodeKind[NodeKind["split"] = 8] = "split";
        NodeKind[NodeKind["whitespace"] = 16] = "whitespace";
    })(NodeKind || (NodeKind = {}));
    class Sequence {
        constructor() {
            this.kind = NodeKind.sequence;
            this.body = [];
            this.parent = null;
        }
        parse(t, lex) {
            return [this, null];
        }
        last() {
            if (this.body.length === 0) {
                return [null, error.unexpectedToken];
            }
            return [this.body[this.body.length - 1], null];
        }
        pop() {
            if (this.body.length === 0) {
                return [null, error.unexpectedToken];
            }
            const ast = this.body.pop();
            ast.parent = null;
            return [ast, null];
        }
        push(ast) {
            this.body.push(ast);
            ast.parent = this;
            return null;
        }
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                console.log('Generic Sequence run');
                for (const ast of this.body) {
                    console.log('ran: ', yield ast.run(host, stdin, stdout, stderr));
                }
                return 0;
            });
        }
    }
    class Join {
        constructor(left, right) {
            this.kind = NodeKind.join;
            this.parent = null;
            this.left = left;
            this.left.parent = this;
            this.right = right;
            this.right.parent = this;
        }
        findScript() {
            let parent = this.parent;
            while (parent !== null && !(parent instanceof Script)) {
                parent = parent.parent;
            }
            return parent;
        }
        parse(t, lex) {
            console.log('Join shouldn\'t be parsing');
            return [this, null];
        }
        pop() {
            if (this.right === null) {
                return [null, error.unexpectedToken];
            }
            const right = this.right;
            this.right = null;
            return [right, null];
        }
        push(ast) {
            if (this.right !== null) {
                return error.unexpectedToken;
            }
            this.right = ast;
            ast.parent = this;
            return null;
        }
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                console.log('Generic Join run');
                const st1 = yield this.left.run(host, stdin, stdout, stderr);
                const st2 = yield this.right.run(host, stdin, stdout, stderr);
                console.log('Join ended:', st1, st2);
                return st1 + st2;
            });
        }
    }
    class Pipe extends Join {
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                const rw = new ReadWriter();
                const left = this.left.run(host, stdin, rw, stderr);
                const right = this.right.run(host, rw, stdout, stderr);
                const status = yield Promise.race([left, right]);
                rw.close();
                return status;
            });
        }
    }
    class And extends Join {
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                let status = yield this.left.run(host, stdin, stdout, stderr);
                if (status === 0) {
                    status = yield this.right.run(host, stdin, stdout, stderr);
                }
                return status;
            });
        }
    }
    class Or extends Join {
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                let status = yield this.left.run(host, stdin, stdout, stderr);
                if (status !== 0) {
                    status = yield this.right.run(host, stdin, stdout, stderr);
                }
                return status;
            });
        }
    }
    class FileStream extends ReadWriter {
        constructor(filename, content, changed) {
            super();
            this.changed = null;
            this.content = '';
            this.filename = filename;
            this.changed = changed;
            if (content) {
                this.content = content;
                super.write(content);
            }
        }
        write(s) {
            let err = super.write(s);
            if (err !== null) {
                return err;
            }
            this.content += s;
            this.changed && this.changed(this.content);
            return null;
        }
        clear() {
            if (this.err !== null) {
                return this.err;
            }
            this.content = '';
            this.changed && this.changed(this.content);
            return null;
        }
    }
    class Write extends Join {
        constructor() {
            super(...arguments);
            this.clear = true;
        }
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                const fnrw = new ReadWriter();
                let status = yield this.right.run(host, stdin, fnrw, stderr);
                const rw = new ReadWriter();
                let [s, err] = fnrw.readSync();
                if (err !== null) {
                    return -1;
                }
                const file = this.findScript().getFile(s);
                if (this.clear) {
                    err = file.clear();
                    if (err !== null) {
                        return -2;
                    }
                }
                status = yield this.left.run(host, stdin, file, stderr);
                err = file.close();
                return status !== 0 ? status : (err === null ? 0 : 1);
            });
        }
    }
    class Append extends Write {
        constructor() {
            super(...arguments);
            this.clear = false;
        }
    }
    class Read extends Join {
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                const fnrw = new ReadWriter();
                let status = yield this.right.run(host, stdin, fnrw, stderr);
                const rw = new ReadWriter();
                let [s, err] = fnrw.readSync();
                if (err !== null) {
                    return -1;
                }
                const file = this.findScript().getFile(s);
                file.close();
                status = yield this.left.run(host, file, stdout, stderr);
                return status !== 0 ? status : (err === null ? 0 : 1);
            });
        }
    }
    class ReadStr extends Join {
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                const fnrw = new ReadWriter();
                let status = yield this.right.run(host, stdin, fnrw, stderr);
                fnrw.close();
                status = yield this.left.run(host, fnrw, stdout, stderr);
                return status;
            });
        }
    }
    const joinTokens = {
        [TokenKind.lt]: Read,
        [TokenKind.ltltlt]: ReadStr,
        [TokenKind.gt]: Write,
        [TokenKind.gtgt]: Append,
        [TokenKind.pipe]: Pipe,
        [TokenKind.pipepipe]: Or,
        [TokenKind.ampamp]: And
    };
    const joinFile = {
        [TokenKind.ltltlt]: true,
        [TokenKind.lt]: true,
        [TokenKind.gt]: true,
        [TokenKind.gtgt]: true
    };
    class Comment {
        constructor(parent) {
            this.kind = NodeKind.whitespace;
            this.parent = null;
            this.parent = parent;
        }
        parse(t, lex) {
            if (t.kind === TokenKind.newline) {
                return this.parent.parse(t, lex);
            }
            return [this, null];
        }
        pop() {
            return [null, null];
        }
        push(ast) {
            return null;
        }
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                return 0;
            });
        }
    }
    class Command extends Sequence {
        constructor() {
            super(...arguments);
            this.joined = false;
            this.paren = false;
        }
        parse(t, lex) {
            let command = null;
            let join = null;
            let parent = null;
            let sub = null;
            switch (t.kind) {
                case TokenKind.newline:
                    parent = this.parent;
                    while (parent !== null && !(parent instanceof Script)) {
                        parent = parent.parent;
                    }
                    if (parent === null) {
                        return [null, error.unknownError];
                    }
                    return [parent, null];
                case TokenKind.identifier:
                    if (this.joined) {
                        return [null, error.unexpectedToken];
                    }
                    this.push(new Ident(t.value));
                    return [this, null];
                case TokenKind.lparen:
                    if (this.body.length !== 0) {
                        return [null, error.unexpectedToken];
                    }
                    command = new ParenCommand();
                    this.push(command);
                    const cmd = new Command();
                    command.push(cmd);
                    return [cmd, null];
                case TokenKind.rparen:
                    parent = this.parent;
                    while (parent !== null && !((parent instanceof Command) && parent.paren)) {
                        parent = parent.parent;
                    }
                    if (parent === null) {
                        return [null, error.unexpectedToken];
                    }
                    if (parent instanceof Sub) {
                        return [parent.parent, null];
                    }
                    parent.joined = true;
                    return [parent, null];
                case TokenKind.whitespace:
                    if (this.body.length > 0 && (this.last()[0].kind & (NodeKind.ident | NodeKind.split)) !== 0) {
                        this.push(new Whitespace(t.value));
                    }
                    return [this, null];
                case TokenKind.dol:
                    const v = new Variable();
                    this.push(v);
                    return [v, null];
                case TokenKind.sub:
                    sub = new Sub();
                    this.push(sub);
                    command = new Command();
                    sub.push(command);
                    return [command, null];
                case TokenKind.backtick:
                    parent = this.parent;
                    while (parent !== null && !(parent instanceof Sub)) {
                        parent = parent.parent;
                    }
                    if (parent !== null) {
                        return [parent.parent, null];
                    }
                    sub = new Sub();
                    this.push(sub);
                    command = new Command();
                    sub.push(command);
                    return [command, null];
                case TokenKind.quot:
                    const q = new Quote();
                    this.push(q);
                    lex.scanOverride = Scanner.test.notQuot;
                    return [q, null];
                case TokenKind.dblquot:
                    const dq = new DblQuote();
                    this.push(dq);
                    return [dq, null];
                case TokenKind.hash:
                    return [new Comment(this), null];
            }
            if (!this.joined && this.body.length === 0) {
                return [null, error.unexpectedToken];
            }
            if (joinTokens.hasOwnProperty(t.kind)) {
                const parent = this.parent;
                const [_, err] = parent.pop();
                if (err !== null) {
                    return [null, err];
                }
                command = (joinFile.hasOwnProperty(t.kind) ? new NotCommand() : new Command());
                join = new joinTokens[t.kind](this, command);
                parent.push(join);
                return [command, null];
            }
            return [this, error.unknownToken];
        }
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                const rw = new ReadWriter();
                const oargs = [];
                let status = 0;
                let first = true;
                let err = null;
                const args = [];
                let arg = '';
                let last = NodeKind.whitespace;
                for (const ast of this.body) {
                    if (ast.kind === NodeKind.whitespace) {
                        if (last !== NodeKind.whitespace) {
                            args.push(arg);
                            arg = '';
                        }
                        last = ast.kind;
                        continue;
                    }
                    status = yield ast.run(host, stdin, rw, stderr);
                    const [s, err] = rw.readSync();
                    if (err !== null) {
                        console.log('weird error reading from buffer');
                    }
                    if (ast.kind === NodeKind.ident) {
                        arg += s;
                    }
                    else {
                        const split = s.split(/[\n \t\v]+/g);
                        arg += split[0];
                        for (let i = 1; i < split.length; i++) {
                            args.push(arg);
                            arg = split[i];
                        }
                    }
                    last = ast.kind;
                }
                if (last !== NodeKind.whitespace) {
                    args.push(arg);
                }
                if (args.length > 0) {
                    // console.log('Command resolved:', args, err ? error[err] : '')
                    const promise = host.exec(args, stdin, stdout, stderr);
                    // promise.then((v) => console.log('finished in exec', v))
                    promise.catch((v) => console.log('caught in exec', v));
                    status = yield promise;
                }
                return status;
            });
        }
    }
    class NotCommand extends Command {
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                let status = 0;
                let first = true;
                for (const ast of this.body) {
                    if (!first) {
                        stdout.write(' ');
                    }
                    else {
                        first = false;
                    }
                    status = yield ast.run(host, stdin, stdout, stderr);
                }
                return status;
            });
        }
    }
    class ParenCommand extends NotCommand {
        constructor() {
            super();
            this.paren = true;
        }
    }
    class Script extends Command {
        constructor() {
            super();
            this.getFile = (filename) => { return new FileStream(filename); };
        }
        parse(t, lex) {
            if (t.kind === TokenKind.whitespace) {
                return [this, null];
            }
            let command = new Command();
            this.push(command);
            let err;
            [command, err] = command.parse(t, lex);
            return [command, err];
        }
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                for (const ast of this.body) {
                    yield ast.run(host, stdin, stdout, stderr);
                }
                return 0;
            });
        }
    }
    class Ident {
        constructor(text) {
            this.kind = NodeKind.ident;
            this.parent = null;
            this.text = text;
        }
        // these methods should probably never be called on an Ident.. I think?
        parse(t, lex) {
            return [this, error.unknownError];
        }
        pop() {
            return [null, error.unknownError];
        }
        push(ast) {
            if (ast.kind === NodeKind.ident) {
                this.text = ast.text;
                return null;
            }
            return error.unknownError;
        }
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                stdout.write(this.text);
                return 0;
            });
        }
    }
    class Whitespace extends Ident {
        constructor(text) {
            super(text);
            this.kind = NodeKind.whitespace;
        }
    }
    class Quote extends Ident {
        constructor() {
            super('');
            this.kind = NodeKind.ident;
            this.joined = false;
        }
        parse(t, lex) {
            this.text = t.value;
            return [this.parent, null];
        }
    }
    class DblQuote extends Sequence {
        constructor() {
            super(...arguments);
            this.kind = NodeKind.ident;
            this.joined = false;
        }
        parse(t, lex) {
            let sub = null;
            let command = null;
            switch (t.kind) {
                case TokenKind.dblquot:
                    return [this.parent, null];
                case TokenKind.dol:
                    const v = new Variable();
                    this.push(v);
                    return [v, null];
                case TokenKind.sub:
                    sub = new Sub();
                    sub.kind = NodeKind.ident;
                    this.push(sub);
                    command = new Command();
                    sub.push(command);
                    return [command, null];
                case TokenKind.backtick:
                    let parent = this.parent;
                    while (parent !== null && !(parent instanceof Sub)) {
                        parent = parent.parent;
                    }
                    if (parent !== null) {
                        return [parent.parent, null];
                    }
                    sub = new Sub();
                    sub.kind = NodeKind.ident;
                    this.push(sub);
                    command = new Command();
                    sub.push(command);
                    return [command, null];
                default:
                    this.push(new Ident(t.value));
                    return [this, null];
            }
        }
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                let status;
                for (const ast of this.body) {
                    status = yield ast.run(host, stdin, stdout, stderr);
                }
                return status;
            });
        }
    }
    class Variable {
        constructor() {
            this.kind = NodeKind.split;
            this.parent = null;
            this.ident = '';
        }
        parse(t, lex) {
            if (t.kind === TokenKind.identifier) {
                this.ident += t.value;
                const tested = /^[0-9a-zA-Z_]+/.exec(this.ident);
                if (tested === null) {
                    return this.parent.parse({
                        kind: TokenKind.identifier,
                        value: '$' + t.value
                    }, lex);
                }
                if (tested[0].length < this.ident.length) {
                    const ident = this.ident.substring(tested[0].length);
                    this.ident = tested[0];
                    return this.parent.parse({
                        kind: TokenKind.identifier,
                        value: ident
                    }, lex);
                }
                return [this, null];
            }
            if (this.ident === '') {
                this.parent.pop();
                const [ast, err] = this.parent.parse({
                    kind: TokenKind.identifier,
                    value: '$'
                }, lex);
                if (err !== null) {
                    return [ast, err];
                }
                return ast.parse(t, lex);
            }
            return this.parent.parse(t, lex);
        }
        pop() {
            return [null, error.unknownError];
        }
        push() {
            return error.unknownError;
        }
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                stdout.write(host.env(this.ident));
                return 0;
            });
        }
    }
    class Sub extends NotCommand {
        constructor() {
            super(...arguments);
            this.kind = NodeKind.split;
            this.paren = true;
        }
        run(host, stdin, stdout, stderr) {
            return __awaiter(this, void 0, void 0, function* () {
                let status = 0;
                const rw = new ReadWriter();
                for (const ast of this.body) {
                    status = yield ast.run(host, stdin, rw, stderr);
                }
                const [str, err] = rw.readSync();
                stdout.write(str[str.length - 1] === '\n' ? str.substring(0, str.length - 1) : str);
                return status;
            });
        }
    }
    class Parser {
        constructor(l) {
            this.lexer = l;
        }
        parse() {
            return __awaiter(this, void 0, void 0, function* () {
                const script = new Script();
                let ctx = script;
                let last = null;
                let tok = null;
                let err = null;
                while (err === null) {
                    [tok, err] = yield this.lexer.next();
                    if (err !== null) {
                        break;
                    }
                    [ctx, err] = yield ctx.parse(tok, this.lexer);
                }
                /*if (ctx && ctx !== script && ctx.parent.parent !== script && ctx.parent !== script && (err === null || err === error.eof || err === error.closed)) {
                  console.log(ctx, 'wrong eof')
                  err = error.unexpectedEof
                }*/
                if (err === error.eof) {
                    // EOF is expected here
                    err = null;
                }
                return [script, err];
            });
        }
        static Parse(input, lex) {
            return __awaiter(this, void 0, void 0, function* () {
                const s = new Scanner(input);
                const l = new Lexer(s);
                const p = new Parser(l);
                return p.parse();
            });
        }
        static ParseString(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const r = new ReadWriter();
                r.write(input);
                r.close();
                const s = new Scanner(r);
                const l = new Lexer(s);
                const p = new Parser(l);
                return p.parse();
            });
        }
        static debug(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const [s, err] = yield this.ParseString(input);
                console.log('AST:', s);
                s.run({
                    exec: (args, stdin, stdout, stderr) => __awaiter(this, void 0, void 0, function* () {
                        console.log('executed:', args);
                        stdout && stdout.write('<result of ' + args.join(';') + '>');
                        return 0;
                    }),
                    env: (name) => {
                        console.log('resolved var:', name);
                        return 'some_' + name + '_var';
                    }
                }, null, null, null);
            });
        }
    }
    return () => ({ BashError: error, ReadWriter, Scanner, Lexer, FileStream, Script, Parser });
})();
let ImportTerminal = (() => {
    'use strict';
    let { BashError, ReadWriter, Scanner, Lexer, FileStream, Script, Parser } = ImportBash();
    let global = window;
    let lastPaste = '';
    let dbgWait = [];
    let dbg = (...args) => {
        dbgWait.push(args);
    };
    let map = o => {
        if (!o) {
            return new Map();
        }
        let keys = Object.keys(o);
        let m = new Map();
        for (let key of keys) {
            m.set(key, o[key]);
        }
        return m;
    };
    // TODO: isatty?
    const CODE_STRING = 0;
    const EOF = -1;
    const CODE_KEYBOARD = -2;
    let setPrimary = (sh) => {
        shell = sh;
        dbg = realdbg;
        global.dbg = realdbg;
        for (let i = 0; i < dbgWait.length; i++) {
            dbg(...dbgWait[i]);
        }
    };
    let defaults = map({
        'shift': 'shift',
        '`': 'console',
        'enter': 'console',
        'escape': 'menu'
    });
    let bindings = new Map(defaults);
    let isPrintable = (keycode) => {
        return (keycode > 47 && keycode < 58) ||
            keycode === 32 || keycode === 13 ||
            (keycode > 64 && keycode < 91) ||
            (keycode > 95 && keycode < 112) ||
            (keycode > 185 && keycode < 193) ||
            (keycode > 218 && keycode < 223); // [\]' (in order)
    };
    let resolvePath = (path, from, env) => {
        if (path === '') {
            return '';
        }
        let split;
        let i = 0;
        let l;
        let current = '';
        let dest;
        let home = env.has('HOME') ? env.get('HOME') : '/';
        if (path[0] === '~') {
            current = home || '';
            i = 1;
        }
        else if (path[0] !== '/') {
            path = from + '/' + path;
        }
        split = path.split('/');
        l = split.length;
        for (; i < l; i++) {
            dest = split[i];
            if (dest === '' || dest === '.') {
            }
            else if (dest === '..') {
                current = current.substring(0, current.lastIndexOf('/'));
            }
            else {
                current = current + '/' + dest;
            }
        }
        return current || '/';
    };
    let getArgs = text => {
        let inQuotes = -1;
        let args = [];
        let current = '';
        let ws = '\t ';
        let qt = '\'"';
        let i;
        let l = text.length;
        let ch;
        // skip leading whitespace
        for (i = 0; i < l; i++) {
            if (ws.indexOf(text[i]) === -1) {
                break;
            }
        }
        for (; i < l; i++) {
            ch = text[i];
            // escape characters
            if (ch === '\\' && i + 1 < text.length) {
                i = i + 1;
                current = current + text[i];
                continue;
            }
            if (inQuotes === -1) {
                // not in quotes
                if (qt.indexOf(ch) !== -1) {
                    inQuotes = qt.indexOf(ch);
                    continue;
                }
                if (ch === ' ') {
                    args.push(current);
                    current = '';
                    for (; i < l; i++) {
                        // skip whitespace
                        if (ws.indexOf(text[i]) === -1) {
                            i--;
                            break;
                        }
                    }
                    continue;
                }
            }
            else {
                if (qt.indexOf(ch) === inQuotes) {
                    inQuotes = -1;
                    continue;
                }
            }
            current = current + ch;
        }
        if (current !== '') {
            args.push(current);
        }
        return args;
    };
    let dbgActive = false;
    let dbgProg = null; // program to send keyboard input to
    let dbgStack = [];
    let dbgLog = []; // scrollback
    let logStack = [];
    let pushProg = prog => {
        dbgStack.push(dbgProg);
        dbgProg = prog;
        if (dbgProg.hasOwnProperty('buffer')) {
            logStack.push(dbgLog);
            dbgLog = dbgProg.buffer;
        }
    };
    // let dbgInputStack = []
    let popProg = () => {
        if (dbgProg.hasOwnProperty('buffer')) {
            dbgLog = logStack.pop();
        }
        dbgProg = dbgStack.pop();
        // dbgInputStack.pop()
        if (dbgProg.hasOwnProperty('buffer')) {
            logStack.push(dbgLog);
            dbgLog = dbgProg.buffer;
        }
    };
    /* let dbgStdin = callback => {
      dbgInputStack.push(callback)
    } */
    class KeyboardBuffer extends ReadWriter {
        constructor() {
            super(...arguments);
            this.keys = [];
            this.keyBuf = [];
            this.keyResume = [];
        }
        waitKey() {
            return new Promise(resolve => {
                this.keyResume.push(resolve);
            });
        }
        readKey() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.keys.length > 0) {
                    return this.keys.pop();
                }
                yield this.waitKey();
                this.buf.length = 0;
                return [this.keys.pop(), null];
            });
        }
        writeKey(e) {
            this.keys.push(e);
            if (this.keyResume.length > 0) {
                this.keyResume.pop()(null);
            }
        }
        read() {
            this.keys.length = 0;
            return super.read();
        }
    }
    let dbgStdin = new KeyboardBuffer();
    let dbgPrompt = '';
    let cursorPos = 0;
    let cursorY = 0;
    let lastKeyPress = 0;
    let lineHeight = 10;
    let cursorLeft = 0;
    let cursorWidth = 0;
    let dbgTimes = []; // stores times for log entries, used for fading inactive logs
    let shell = null;
    let files;
    /* let wildcard = wildcard => {
      let restr = wildcard.replace(/[{}()+.,\\^$|#\s]/g, '\\$&')
    }
    let matchObjects = (path, files, directories) => {
      let parts = path.split('/')
    } */
    let printableFilename = dir => {
        if (dir[dir.length - 1] !== '/') {
            dir = dir + '/';
        }
        return path => {
            path = dir + path;
            if (!files.has(path)) {
                return path.substring(path.lastIndexOf('/') + 1);
            }
            return path.substring(path.lastIndexOf('/') + 1) + '/';
        };
    };
    let getFilename = (path) => {
        return path.substring(path.lastIndexOf('/') + 1);
    };
    // temporary checks for file/directory
    let isDir = dir => {
        return dir.hasOwnProperty('contents');
    };
    let isFile = file => {
        return !file.hasOwnProperty('contents');
    };
    let getFile = null;
    getFile = (path) => {
        if (path === '') {
            return null;
        }
        let dirName = path.substring(0, path.lastIndexOf('/'));
        let fileName = path.substring(path.lastIndexOf('/') + 1);
        if (path[0] !== '/' || !files.has(dirName)) {
            // must always be an absolute path
            return null;
        }
        let dir = files.get(dirName);
        if (!dir.contents.has(fileName)) {
            return null;
        }
        else {
            let file = dir.contents.get(fileName);
            if (file.hasOwnProperty('contents')) {
                return null;
            }
            // links only supported for files right now
            return file.hasOwnProperty('link') ? getFile(file.link) : file;
        }
    };
    let getDir = (path) => {
        if (path === '') {
            path = '/';
        }
        return files.has(path) ? files.get(path) : null;
    };
    let getDirOf = (path) => {
        if (path.length <= 1) {
            // can't get dir of '' or '/'
            return null;
        }
        path = path.substring(0, path.lastIndexOf('/'));
        if (path === '') {
            path = '/';
        }
        return files.has(path) ? files.get(path) : null;
    };
    let getObj = (path) => {
        if (path === '') {
            path = '/';
        }
        if (files.has(path)) {
            return files.get(path);
        }
        return getFile(path);
    };
    files = new Map();
    let serializeDir = null;
    let dirOrFile = obj => {
        if (isDir(obj[1])) {
            return [obj[0], serializeDir(obj[1])];
        }
        else {
            return obj;
        }
    };
    let noExec = obj => {
        return !obj[1].hasOwnProperty('exec');
    };
    serializeDir = dir => {
        return {
            contents: Array.from(dir.contents.entries()).filter(noExec).map(dirOrFile)
        };
    };
    let deserializeDir;
    let dedirOrFile = obj => {
        if (isDir(obj[1])) {
            return [obj[0], deserializeDir(obj[1])];
        }
        else {
            return obj;
        }
    };
    deserializeDir = dir => {
        return {
            contents: new Map(dir.contents.map(dedirOrFile))
        };
    };
    let addDirToIndex;
    // merges entire file systems, when manually called, should be called with '/'
    addDirToIndex = (path, dir) => {
        let exists = files.has(path);
        let odir = null;
        if (!exists) {
            files.set(path, dir);
        }
        else {
            odir = files.get(path);
        }
        for (let key of dir.contents.keys()) {
            if (exists) {
                odir.contents.set(key, dir.contents.get(key));
            }
            if (isDir(dir.contents.get(key))) {
                addDirToIndex((path !== '/' ? path + '/' : path) + key, dir.contents.get(key));
            }
        }
    };
    let loadFs = () => {
        let stored = localStorage.getItem('blastzone');
        if (stored !== null) {
            try {
                addDirToIndex('/', deserializeDir(JSON.parse(stored)));
            }
            catch (e) {
                console.log('blastzone data was corrupted; set to blastzone-bak');
                dbg('blastzone data was corrupted; made backup');
                console.log(e);
                localStorage.setItem('blastzone-bak', stored);
                localStorage.removeItem('blastzone');
            }
        }
    };
    loadFs();
    let saveFs = () => {
        shell.exit();
        localStorage['blastzone'] = JSON.stringify(serializeDir(files.get('/')));
    };
    let ok = ['true', '1', 'yes'];
    let envDefaults = map({
        'HISTFILE': '~/.history',
        'HISTSIZE': '500'
    });
    class Environment extends Map {
        get(key) {
            if (super.has(key)) {
                return super.get(key);
            }
            if (envDefaults.has(key)) {
                return envDefaults.get(key);
            }
            return '';
        }
        has(key) {
            return super.has(key) || envDefaults.has(key);
        }
        flag(key) {
            if (this.has(key)) {
                return ok.indexOf(this.get(key)) !== -1;
            }
            return false;
        }
    }
    let makeShell;
    let versionNum = '0.0';
    let versionFile = getFile('/etc/version');
    if (versionFile) {
        console.log('File system version:', versionFile.data);
    }
    if (!versionFile) {
        console.log('No version file found');
        dbg('loading defaults');
        addDirToIndex('/', {
            contents: map({
                'home': {
                    contents: map({
                        '.profile': {
                            mode: 0b001,
                            data: `# run commands on login shell

export EXPAND_EMPTY=false
`
                        },
                        '.rc': {
                            mode: 0b001,
                            data: `# run commands on interactive shell

alias dir='ls'
`
                        }
                    })
                }
            })
        });
    }
    if (!versionFile || versionFile.data !== versionNum) {
        dbg('version change detected; loading config for version');
        addDirToIndex('/', {
            contents: map({
                'etc': {
                    contents: map({
                        'version': {
                            mode: 0b100,
                            data: versionNum
                        },
                        'profile': {
                            mode: 0b100,
                            data: `# shell profile
# version updates will overwrite this file
# change ~/.profile for persistent changes

export CHEATING=false
`
                        },
                        'rc': {
                            mode: 0b100,
                            data: `# shell profile
# version updates will overwrite this file
# change ~/.rc for persistent changes

alias inventory='cd $HOME/inventory'
alias equipment='cd $HOME/equipment'
`
                        }
                    })
                },
                'home': {
                    contents: map({
                        'matches': {
                            contents: map({})
                        },
                        'char_stats': {
                            contents: map({})
                        },
                        'stats': {
                            contents: map({})
                        },
                        'notexecutable': {
                            mode: 0b110,
                            data: 'not executable'
                        },
                        'test': {
                            mode: 0b101,
                            data: `echo hello friend
echo i am test script
echo numbered args $0 $1 $2 $3 $4 $5 $6 $7 $8 $9
`
                        }
                    })
                }
            })
        });
    }
    const binObject = {
        'pwd': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                stdout.write(wd + '\n');
                return 0;
            }
        },
        'ls': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                if (args.length === 1) {
                    args.push(wd);
                }
                for (let i = 1; i < args.length; i++) {
                    let path = resolvePath(args[i], wd, env);
                    let dir = getDir(path);
                    if (dir === null) {
                        stderr.write('ls: ' + args[i] + ': No such file or directory\n');
                        continue;
                    }
                    if (args.length > 2) {
                        stdout.write(args[i] + ':\n');
                    }
                    let content = Array.from(dir.contents.keys());
                    if (content.length === 0) {
                        continue;
                    }
                    stdout.write(content.map(printableFilename(path)).join('  ') + '\n');
                    if (i < args.length - 1) {
                        stdout.write('\n');
                    }
                    return 0;
                }
            }
        },
        'uname': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                stdout.write('AshOS aosh\n');
                // let flags = parseFlags(args)
                // stdout.write(opts.join(' ') + '\n')
                return 0;
            }
        },
        'true': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                return 0;
            }
        },
        'false': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                return 1;
            }
        },
        'env': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                for (let key of env.keys()) {
                    stdout.write(key + '=' + env.get(key) + '\n');
                }
                return 0;
            }
        },
        'printenv': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                for (let i = 1; i < args.length; i++) {
                    stdout.write(env.get(args[i]) + '\n');
                }
                return 0;
            }
        },
        'export': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                if (args.length === 1) {
                    for (let key of env.keys()) {
                        // TODO: consider making this more like real export output
                        // not really useful without declare, though
                        stdout.write('export ' + key + '="' + env.get(key).replace(/"/g, '\\"') + '"\n');
                    }
                    return;
                }
                let i = args[1].indexOf('=');
                if (i === -1) {
                    return;
                }
                env.set(args[1].substring(0, i), args[1].substring(i + 1));
                return 0;
            }
        },
        'unset': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                for (let i = 1; i < args.length; i++) {
                    if (env.has(args[i])) {
                        // not really necessary to have this wrapping since we don't do anything in an else case
                        env.delete(args[i]);
                    }
                }
                return 0;
            }
        },
        'teststdin': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => __awaiter(this, void 0, void 0, function* () {
                while (true) {
                    let [s, err] = yield stdin.read();
                    console.log('teststdin', s, err);
                    if (err !== null) {
                        return 0;
                    }
                    stdout.write(s);
                }
            })
        },
        'echo': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                stdout.write(args.slice(1).join(' ') + '\n');
                return 0;
            }
        },
        'aosh': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => __awaiter(this, void 0, void 0, function* () {
                if (args.length === 1) {
                    yield makeShell(dbgStdin, stdout, stderr, wd, new Environment(env), true, false, false);
                    return;
                }
                let file = getFile(resolvePath(args[1], wd, env));
                if (file !== null && file.hasOwnProperty('data')) {
                    let prog = yield makeShell(dbgStdin, stdout, stderr, wd, new Environment(env), false, false, false);
                    yield prog.execute(file.data, dbgStdin, stdout, stderr, args, false);
                }
                else {
                    stderr.write('File not found\n');
                }
                return 0;
            })
        },
        'sh': {
            mode: 0b001,
            link: '/bin/aosh'
        },
        'mkdir': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                for (let i = 1; i < args.length; i++) {
                    let path = resolvePath(args[i], wd, env);
                    if (getObj(path) === null) {
                        let parent = getDirOf(path);
                        if (parent === null) {
                            stderr.write('mkdir: parent: No such file or directory\n');
                            continue;
                        }
                        let dir = { contents: new Map() };
                        parent.contents.set(getFilename(path), dir);
                        files.set(path, dir);
                    }
                    else {
                        stderr.write('mkdir: ' + args[i] + ': File exists\n');
                    }
                }
                return 0;
            }
        },
        'rm': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                for (let i = 1; i < args.length; i++) {
                    let path = resolvePath(args[i], wd, env);
                    let obj = getObj(path);
                    if (obj === null) {
                        stderr.write('rm: ' + args[i] + ': No such file\n');
                    }
                    else if (isDir(obj)) {
                        stderr.write('rm: ' + args[i] + ': Is directory\n');
                    }
                    else {
                        let parent = getDirOf(path);
                        parent.contents.delete(getFilename(path));
                    }
                }
                return 0;
            }
        },
        'mv': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                if (args.length < 3) {
                    stderr.write('mv: nothing to move\n');
                }
                let destPath = resolvePath(args[args.length - 1], wd, env);
                let dest = getObj(destPath);
                if (dest === null || isFile(dest)) {
                    if (args.length > 3) {
                        stderr.write('mv: Too many args for rename\n');
                        return;
                    }
                    dest = getDirOf(destPath);
                    if (dest === null) {
                        stderr.write('mv: Unable to write to directory\n');
                        return;
                    }
                    let path = resolvePath(args[1], wd, env);
                    let obj = getObj(path);
                    if (obj === null) {
                        stderr.write('mv: ' + args[1] + ': No such file\n');
                        return;
                    }
                    else {
                        let parent = getDirOf(path);
                        parent.contents.delete(getFilename(path));
                        dest.contents.set(getFilename(destPath), obj);
                    }
                    return;
                }
                for (let i = 1; i < args.length - 1; i++) {
                    let path = resolvePath(args[i], wd, env);
                    let obj = getObj(path);
                    if (obj === null) {
                        stderr.write('mv: ' + args[i] + ': No such file\n');
                    }
                    else if (isDir(obj)) {
                        let parent = getDirOf(path);
                        parent.contents.delete(getFilename(path));
                        files.delete(path);
                        dest.contents.set(getFilename(path), obj);
                        files.set(path, obj);
                        stderr.write('mv: ' + args[i] + ': warning: nested directories will be broken until reload (TODO)\n');
                    }
                    else {
                        let parent = getDirOf(path);
                        parent.contents.delete(getFilename(path));
                        dest.contents.set(getFilename(path), obj);
                    }
                }
                return 0;
            }
        },
        'rmdir': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                for (let i = 1; i < args.length; i++) {
                    let path = resolvePath(args[i], wd, env);
                    if (path === '/') {
                        stderr.write('rmdir: cannot remove /\n');
                        return;
                    }
                    let obj = getObj(path);
                    if (obj === null) {
                        stderr.write('rmdir: ' + args[i] + ': No such directory\n');
                    }
                    else if (isFile(obj)) {
                        stderr.write('rmdir: ' + args[i] + ': Is file\n');
                    }
                    else if (obj.contents.size !== 0) {
                        stderr.write('rmdir: ' + args[i] + ': Directory not empty\n');
                    }
                    else {
                        let parent = getDirOf(path);
                        parent.contents.delete(getFilename(path));
                        files.delete(path);
                    }
                }
                return 0;
            }
        },
        'touch': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                for (let i = 1; i < args.length; i++) {
                    let path = resolvePath(args[i], wd, env);
                    if (getObj(path) === null) {
                        let parent = getDirOf(path);
                        if (parent === null) {
                            stderr.write('touch: parent: No such file or directory\n');
                            continue;
                        }
                        let file = {
                            mode: 0b110,
                            data: ''
                        };
                        parent.contents.set(getFilename(path), file);
                    }
                    else {
                        stderr.write('touch: ' + args[i] + ': File exists\n');
                    }
                }
                return 0;
            }
        },
        'save': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => {
                saveFs();
                return 0;
            }
        },
        'cat': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => __awaiter(this, void 0, void 0, function* () {
                if (args.length === 1) {
                    // TODO: switch process to cat for input or have some kind of input hook
                    pushProg({
                        prompt: '',
                        showPrompt: true
                    });
                    let typed = '';
                    while (true) {
                        let [s, err] = yield Promise.race([dbgStdin.read(), dbgStdin.readKey()]);
                        // let [e, err] = await dbgStdin.read()
                        if (err !== null) {
                            return 0;
                        }
                        let code = CODE_KEYBOARD;
                        if (typeof s === 'string') {
                            code = CODE_STRING;
                        }
                        if (err !== null) {
                            code = EOF;
                        }
                        if (code === CODE_STRING) {
                            typed += s;
                            continue;
                        }
                        if (code === EOF) {
                            stdout.write(typed + s + '\n');
                            typed = '';
                            return 0;
                        }
                        let e = s;
                        if (e.ctrlKey && e.key === 'd') {
                            if (typed !== '') {
                                stdout.write(typed + '\n');
                            }
                            typed = '';
                            cursorPos = 0;
                            dbgPrompt = typed;
                            popProg();
                            return 0;
                        }
                        if (e.key === 'Backspace') {
                            if (typed.length > 0) {
                                typed = typed.substring(0, typed.length - 1);
                                dbgPrompt = typed;
                                cursorPos--;
                            }
                            continue;
                        }
                        if (e.key === 'Enter') {
                            stdout.write(typed + '\n');
                            typed = '';
                            cursorPos = 0;
                            dbgPrompt = typed;
                        }
                        else if (isPrintable(e.keyCode)) {
                            typed = typed + e.key;
                            cursorPos = cursorPos + e.key.length;
                            dbgPrompt = typed;
                        }
                    }
                }
                for (let i = 1; i < args.length; i++) {
                    let file = getFile(resolvePath(args[i], wd, env));
                    if (file === null) {
                        stderr.write('cat: file not found\n');
                        return 1;
                    }
                    if (!file.hasOwnProperty('data')) {
                        stderr.write('cat: cannot read file\n');
                        return 1;
                    }
                    stdout.write(file.data);
                }
                return 0;
            })
        },
        'emacs': {
            mode: 0b001,
            link: '/bin/nano'
        },
        'nano': {
            mode: 0b001,
            exec: (args, stdin, stdout, stderr, wd, env) => __awaiter(this, void 0, void 0, function* () {
                let display = [];
                let orig = [''];
                let buffer = [''];
                let fileStack = [];
                if (args.length > 1) {
                    fileStack = args.slice(1);
                }
                let filename = '';
                let loadFile = fn => {
                    filename = fn;
                    let file = getFile(resolvePath(fn, wd, env));
                    if (file !== null) {
                        buffer = file.data.split('\n');
                        orig = buffer.slice();
                        if (buffer.length === 0) {
                            buffer = [''];
                        }
                    }
                    else {
                        buffer = [''];
                    }
                };
                if (fileStack.length > 0) {
                    loadFile(fileStack.pop());
                }
                let reset = () => {
                    display[display.length - 3] = '';
                    display[display.length - 2] = '^G Get Help  ^O Write Out ^W Where Is  ^C Cur Pos';
                    display[display.length - 1] = '^X Exit      ^R Read File ^\\ Replace   ^_ Go To Line';
                };
                let scroll = 0;
                let lastCtrl = null;
                let clipboard = '';
                let consoleHeight = 24;
                let editHeight = consoleHeight - 5;
                let maxPos = 0;
                let line = 0;
                let refresh = () => {
                    for (let i = 0; i < editHeight; i++) {
                        if (scroll + i < buffer.length) {
                            display[display.length - consoleHeight + i + 2] = buffer[scroll + i];
                        }
                        else {
                            display[display.length - consoleHeight + i + 2] = '';
                        }
                    }
                };
                let mode = 'nano';
                if (args[0] === 'emacs') {
                    mode = 'emacs';
                }
                let updateMax = true;
                let prompt = null;
                let exit = false;
                let controlKeys = map({
                    'a': () => {
                        cursorPos = 0;
                    },
                    'e': () => {
                        cursorPos = buffer[line].length;
                    },
                    'k': () => {
                        clipboard = buffer[line].substring(cursorPos, buffer[line].length);
                        buffer[line] = buffer[line].substring(0, cursorPos);
                    },
                    'u': () => {
                        clipboard = buffer[line].substring(0, cursorPos);
                        buffer[line] = buffer[line].substring(cursorPos);
                        cursorPos = 0;
                    },
                    'y': () => {
                        buffer[line] = buffer[line].substring(0, cursorPos) + clipboard + buffer[line].substring(cursorPos, buffer[line].length);
                        cursorPos = cursorPos + clipboard.length;
                    },
                    'f': () => {
                        if (cursorPos < buffer[line].length) {
                            cursorPos = cursorPos + 1;
                        }
                        else {
                            if (line === buffer.length - 1) {
                                if (buffer[line] !== '') {
                                    buffer.push('');
                                }
                                else {
                                    return;
                                }
                            }
                            cursorPos = 0;
                            line = line + 1;
                            cursorY = editHeight - line + scroll + 2;
                            if (cursorY < 3) {
                                scroll = scroll + 1;
                                cursorY = cursorY + 1;
                                refresh();
                            }
                        }
                    },
                    'b': () => {
                        if (cursorPos > 0) {
                            cursorPos = cursorPos - 1;
                        }
                        else if (line > 0) {
                            line = line - 1;
                            cursorPos = buffer[line].length;
                            cursorY = editHeight - line + scroll + 2;
                            if (cursorY > editHeight + 2) {
                                scroll = scroll - 1;
                                cursorY = cursorY - 1;
                                refresh();
                            }
                        }
                    },
                    'd': () => {
                        if (cursorPos < buffer[line].length) {
                            buffer[line] = buffer[line].substring(0, cursorPos) + buffer[line].substring(cursorPos + 1);
                        }
                        else if (buffer.length > line + 1) {
                            buffer[line] = buffer[line] + buffer.splice(line + 1, 1)[0];
                            refresh();
                        }
                    },
                    'h': () => {
                        if (cursorPos > 0) {
                            cursorPos = cursorPos - 1;
                            buffer[line] = buffer[line].substring(0, cursorPos) + buffer[line].substring(cursorPos + 1);
                        }
                        else if (line > 0) {
                            let append = buffer.splice(line, 1)[0];
                            line = line - 1;
                            cursorPos = buffer[line].length;
                            buffer[line] = buffer[line] + append;
                            cursorY = editHeight - line + scroll + 2;
                            if (cursorY > editHeight + 2) {
                                scroll = scroll - 1;
                                cursorY = cursorY - 1;
                            }
                            refresh();
                        }
                    },
                    'p': () => {
                        if (line === 0) {
                            return;
                        }
                        line = line - 1;
                        cursorY = editHeight - line + scroll + 2;
                        cursorPos = Math.min(buffer[line].length, maxPos);
                        updateMax = false;
                        if (cursorY > editHeight + 2) {
                            scroll = scroll - 1;
                            cursorY = cursorY - 1;
                            refresh();
                        }
                        // up
                    },
                    'n': () => {
                        if (line === buffer.length - 1) {
                            if (buffer[line] !== '') {
                                buffer.push('');
                            }
                            else {
                                return;
                            }
                        }
                        line = line + 1;
                        cursorY = editHeight - line + scroll + 2;
                        cursorPos = Math.min(buffer[line].length, maxPos);
                        updateMax = false;
                        if (cursorY < 3) {
                            scroll = scroll + 1;
                            cursorY = cursorY + 1;
                            refresh();
                        }
                        // down
                    },
                    't': () => {
                        if (cursorPos > 0) {
                            if (cursorPos < buffer[line].length) {
                                buffer[line] = buffer[line].substring(0, cursorPos - 1) + buffer[line][cursorPos] + buffer[line][cursorPos - 1] + buffer[line].substring(cursorPos + 1);
                                dbgPrompt = buffer[line];
                                cursorPos = cursorPos + 1;
                            }
                            else {
                                buffer[line] = buffer[line].substring(0, cursorPos - 2) + buffer[line][cursorPos - 1] + buffer[line][cursorPos - 2];
                            }
                        }
                    },
                    'w': () => {
                        let ws = ' \t \n';
                        if (cursorPos > 0) {
                            let deleteTo = cursorPos - 1;
                            while (deleteTo > 0 && ws.indexOf(buffer[line][deleteTo]) !== -1) {
                                deleteTo = deleteTo - 1;
                            }
                            while (deleteTo > 0 && ws.indexOf(buffer[line][deleteTo]) === -1) {
                                deleteTo = deleteTo - 1;
                            }
                            if (deleteTo > 0) {
                                deleteTo = deleteTo + 1;
                            }
                            if (lastCtrl !== 'w') {
                                clipboard = buffer[line].substring(deleteTo, cursorPos);
                            }
                            else {
                                clipboard = buffer[line].substring(deleteTo, cursorPos) + clipboard;
                            }
                            buffer[line] = buffer[line].substring(0, deleteTo) + buffer[line].substring(cursorPos);
                            cursorPos = deleteTo;
                        }
                    },
                    '_Enter': () => {
                        line = line + 1;
                        if (line === buffer.length) {
                            buffer.push('');
                        }
                        else {
                            buffer.splice(line, 0, '');
                        }
                        if (cursorPos < buffer[line - 1].length) {
                            buffer[line] = buffer[line - 1].substring(cursorPos);
                            buffer[line - 1] = buffer[line - 1].substring(0, cursorPos);
                        }
                        cursorPos = 0;
                        cursorY = editHeight - line + scroll + 2;
                        if (cursorY < 3) {
                            scroll = scroll + 1;
                            cursorY = cursorY + 1;
                        }
                        refresh();
                    },
                    '_Tab': () => {
                        let tab = '    '.substring(cursorPos % 4);
                        if (cursorPos < buffer[line].length) {
                            buffer[line] = buffer[line].substring(0, cursorPos) + tab + buffer[line].substring(cursorPos);
                        }
                        else {
                            buffer[line] = buffer[line] + tab;
                        }
                        cursorPos += tab.length;
                    }
                });
                if (mode === 'nano') {
                    let nanoKeys = map({
                        'x': () => {
                            if (orig.length === buffer.length && orig.filter((e, i) => e !== buffer[i]).length === 0) {
                                exit = true;
                                prompt = null;
                                return;
                            }
                            display[display.length - 3] = 'Save modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ? ';
                            display[display.length - 2] = 'Y Yes';
                            display[display.length - 1] = 'N No           ^C Cancel';
                            dbgPrompt = display[display.length - 3];
                            let oldPos = cursorPos;
                            cursorPos = dbgPrompt.length;
                            cursorY = 2;
                            prompt = (e) => {
                                if (e.key === 'y') {
                                    display[display.length - 3] = 'File Name to Write: ';
                                    display[display.length - 2] = '^G Get Help  ^N Append';
                                    display[display.length - 1] = '^C Cancel    ^P Prepend';
                                    let saveas = filename;
                                    dbgPrompt = display[display.length - 3] + saveas;
                                    display[display.length - 3] = dbgPrompt;
                                    cursorPos = dbgPrompt.length;
                                    cursorY = 2;
                                    prompt = (e) => {
                                        if (e.key === 'Backspace' || (e.ctrlKey && e.key === 'h')) {
                                            saveas = saveas.substring(0, saveas.length - 1);
                                            dbgPrompt = 'File Name to Write: ' + saveas;
                                            display[display.length - 3] = dbgPrompt;
                                            cursorPos = dbgPrompt.length;
                                        }
                                        else if (e.key === 'c' && e.ctrlKey) {
                                            reset();
                                            display[display.length - 3] = '                                 [ Cancelled ]';
                                            prompt = null;
                                            cursorY = editHeight - line + scroll + 2;
                                            cursorPos = oldPos;
                                            return;
                                        }
                                        else if (e.key === 'Enter') {
                                            if (saveas === '') {
                                                reset();
                                                display[display.length - 3] = '                                 [ Cancelled ]';
                                                prompt = null;
                                                cursorY = editHeight - line + scroll + 2;
                                                cursorPos = oldPos;
                                                return;
                                            }
                                            let path = resolvePath(saveas, wd, env);
                                            let file = getObj(path);
                                            if (file === null) {
                                                let parent = getDirOf(path);
                                                if (parent === null) {
                                                    reset();
                                                    display[display.length - 3] = '        [ Error writing file: Unable to write to directory ]';
                                                    cursorY = editHeight - line + scroll + 2;
                                                    cursorPos = oldPos;
                                                    return;
                                                }
                                                file = {
                                                    mode: 0b110,
                                                    data: buffer.join('\n')
                                                };
                                                parent.contents.set(getFilename(path), file);
                                                exit = true;
                                                return;
                                            }
                                            if (isDir(file)) {
                                                reset();
                                                display[display.length - 3] = '                   [ Error writing file: Is a directory ]';
                                                cursorY = editHeight - line + scroll + 2;
                                                cursorPos = oldPos;
                                                return;
                                            }
                                            filename = saveas;
                                            file.data = buffer.join('\n');
                                            exit = true;
                                        }
                                        else if (isPrintable(e.keyCode)) {
                                            saveas = saveas + e.key;
                                            dbgPrompt = 'File Name to Write: ' + saveas;
                                            display[display.length - 3] = dbgPrompt;
                                            cursorPos = dbgPrompt.length;
                                        }
                                    };
                                }
                                else if (e.key === 'n') {
                                    exit = true;
                                }
                                else if (e.key === 'c' && e.ctrlKey) {
                                    reset();
                                    display[display.length - 3] = '                                 [ Cancelled ]';
                                    prompt = null;
                                    cursorY = editHeight - line + scroll + 2;
                                    cursorPos = oldPos;
                                }
                            };
                        }
                    });
                    for (let entry of nanoKeys.entries()) {
                        controlKeys.set(entry[0], entry[1]);
                    }
                }
                // controlKeys.set('V', controlKeys.get('v'))
                let controlToChar = map({
                    'Delete': 'd',
                    'Backspace': 'h',
                    'ArrowLeft': 'b',
                    'ArrowRight': 'f',
                    'ArrowUp': 'p',
                    'ArrowDown': 'n',
                    'Home': 'a',
                    'End': 'e',
                    // 'Insert': 'V',
                    'Enter': '_Enter',
                    'Tab': '_Tab'
                });
                for (let i = 0; i < consoleHeight; i++) {
                    display.push('');
                }
                display[display.length - consoleHeight] = '  ashedit (' + mode + ' mode)         ' + (filename !== '' ? 'File: ' + filename : 'New Buffer');
                display[display.length - consoleHeight + 1] = '';
                reset();
                cursorY = editHeight - line + scroll + 2;
                refresh();
                pushProg({
                    prompt: '',
                    showPrompt: false,
                    buffer: display
                });
                cursorPos = 0;
                while (true) {
                    let [e, err] = yield dbgStdin.readKey();
                    if (prompt !== null) {
                        prompt(e);
                        if (exit) {
                            cursorY = 0;
                            display.length -= consoleHeight;
                            dbgPrompt = '';
                            cursorPos = 0;
                            popProg();
                            return 0;
                        }
                        continue;
                    }
                    if (!e.ctrlKey) {
                        lastCtrl = null;
                    }
                    updateMax = true;
                    if (e.ctrlKey) {
                        if (controlKeys.has(e.key)) {
                            controlKeys.get(e.key)(e);
                            lastCtrl = e.key;
                        }
                    }
                    else if (controlToChar.has(e.key) && controlKeys.has(controlToChar.get(e.key))) {
                        controlKeys.get(controlToChar.get(e.key))(e);
                        lastCtrl = e.key;
                    }
                    else if (isPrintable(e.keyCode)) {
                        if (cursorPos < buffer[line].length) {
                            buffer[line] = buffer[line].substring(0, cursorPos) + e.key + buffer[line].substring(cursorPos);
                        }
                        else {
                            buffer[line] = buffer[line] + e.key;
                        }
                        cursorPos++;
                    }
                    if (prompt !== null) {
                        continue;
                    }
                    if (updateMax) {
                        maxPos = cursorPos;
                    }
                    dbgPrompt = buffer[line];
                    display[display.length - (editHeight - line + scroll + 3)] = buffer[line];
                    if (exit) {
                        cursorY = 0;
                        display.length -= consoleHeight;
                        dbgPrompt = '';
                        cursorPos = 0;
                        popProg();
                        return 0;
                    }
                }
            })
        }
    };
    addDirToIndex('/', {
        contents: map({
            'bin': {
                contents: map(binObject)
            }
        })
    });
    makeShell = (stdin, stdout, stderr, wd, environment, interactive, login, primary) => __awaiter(this, void 0, void 0, function* () {
        let that;
        let shellArgs = ['-'];
        let typed = '';
        let clipboard = '';
        environment = environment || new Environment();
        environment.set('PATH', '/bin');
        environment.set('HOME', '/home');
        wd = wd || environment.get('HOME');
        if (stderr === null) {
            stderr = stdout;
        }
        let history = [];
        let historyScroll = 1;
        let dirstack = [];
        let lastdir = wd;
        let functions = new Map();
        let aliases = new Map();
        let varChars = /[a-zA-Z0-9_]/;
        let getFileStream = (filename) => {
            let path = resolvePath(filename, wd, environment);
            let file = getObj(path);
            if (file === null) {
                let parent = getDirOf(path);
                if (parent === null) {
                    stderr.write('write to file: parent: No such file or directory\n');
                }
                file = {
                    mode: 0b110,
                    data: ''
                };
                parent.contents.set(getFilename(path), file);
            }
            return new FileStream(filename, file.data, (content) => {
                file.data = content;
            });
        };
        let looping = true;
        let makeRun;
        let execute;
        let runCommand;
        makeRun = (execArgs, interactive) => {
            return {
                exec: (args, stdin, stdout, stderr) => {
                    return runCommand(args, stdin, stdout, stderr, execArgs, interactive);
                },
                env: (name) => {
                    if (name.length === 1 && name >= '0' && name <= '9') {
                        return execArgs[name];
                    }
                    if (name === '-' && interactive) {
                        return 'i';
                    }
                    return environment.get(name);
                }
            };
        };
        execute = (script, stdin, stdout, stderr, execArgs, interactive) => __awaiter(this, void 0, void 0, function* () {
            let [s, err] = yield Parser.ParseString(script);
            s.getFile = getFileStream;
            if (interactive) {
                // TODO: switch to PS1 environment variable
                stdout.write(that.prompt + script + '\n');
            }
            if (err !== null) {
                stderr.write('Error parsing line: ' + BashError[err] + '\n');
            }
            return yield s.run(makeRun(execArgs, interactive), stdin, stdout, stderr);
        });
        let exit = () => {
            if (interactive) {
                if (environment.has('HISTFILE')) {
                    let path = resolvePath(environment.get('HISTFILE'), wd, environment);
                    let histfile = getObj(path);
                    let histText = environment.has('HISTSIZE') ? history.slice(-parseInt(environment.get('HISTSIZE'), 10)).filter((s) => s.length > 0).join('\n') : history.filter((s) => s.length > 0).join('\n');
                    if (histfile === null) {
                        let parent = getDirOf(path);
                        let file = {
                            mode: 0b110,
                            data: histText
                        };
                        parent.contents.set(getFilename(path), file);
                    }
                    else {
                        histfile.data = histText;
                    }
                }
            }
            if (dbgStack.length > 1) {
                popProg();
                looping = false;
            }
            else {
                dbgActive = false;
            }
        };
        runCommand = (args, stdin, stdout, stderr, execArgs, interactive) => __awaiter(this, void 0, void 0, function* () {
            if (args.length === 0 || args[0][0] === '#') {
                return 0;
            }
            if (args[0].indexOf('/') !== -1) {
                // path
                let resolved = resolvePath(args[0], wd, environment);
                if (files.has(resolved)) {
                    // directory
                    stderr.write('-: ' + args[0] + ': Is a directory\n');
                    return 1;
                }
                let file = getFile(resolved);
                if (file !== null) {
                    // if ((file.mode & 0b001) !== 0) {
                    if (file.hasOwnProperty('exec')) {
                        let status = file.exec(args, stdin, stdout, stderr, wd, environment);
                        if (status instanceof Promise) {
                            return yield status;
                        }
                        return status;
                    }
                    else {
                        // TODO: make new shell here instead of reusing?
                        return yield execute(file.data, stdin, stdout, stderr, args, false);
                    }
                }
                return 0;
            }
            if (aliases.has(args[0])) {
                let line = aliases.get(args[0]) + (args.length === 1 ? '' : ' \'' + args.slice(1).join('\' \'') + '\'');
                console.log('got alias', line, args, args.slice(1).join('\' \''));
                return yield execute(line, stdin, stdout, stderr, execArgs, interactive);
            }
            // builtin
            if (args[0] === 'cd' || args[0] === 'pushd') {
                if (args.length === 1) {
                    wd = resolvePath('~', wd, environment);
                    return 0;
                }
                if (args[1] === '-') {
                    args[1] = lastdir;
                    stdout.write(lastdir + '\n');
                }
                let path = resolvePath(args[1], wd, environment);
                if (getFile(path) !== null) {
                    stderr.write('-: cd: ' + args[1] + ': Not a directory\n');
                    return 1;
                }
                if (!files.has(path)) {
                    stderr.write('-: cd: ' + args[1] + ': No such file or directory\n');
                    return 2;
                }
                if (args[0] === 'pushd') {
                    dirstack.unshift(wd);
                    stdout.write(path + ' ' + dirstack.join(' ') + '\n');
                }
                lastdir = wd;
                wd = path;
                return 0;
            }
            else if (args[0] === 'popd') {
                let path = dirstack.shift();
                if (getFile(path) !== null) {
                    stderr.write('-: cd: ' + args[1] + ': Not a directory\n');
                    return 1;
                }
                if (!files.has(path)) {
                    stderr.write('-: cd: ' + args[1] + ': No such file or directory\n');
                    return 2;
                }
                lastdir = wd;
                wd = path;
                stdout.write(wd + ' ' + dirstack.join(' ') + '\n');
                return 0;
            }
            else if (args[0] === 'dirs') {
                stdout.write(wd + ' ' + dirstack.join(' ') + '\n');
                return 0;
            }
            else if (args[0] === 'exit') {
                exit();
                return 0;
            }
            else if (args[0] === 'function') {
                let parts = /function ([^\{]+) \{([^\}]*)\}/.exec(args.join(' '));
                if (parts === null) {
                    stderr.write('function: syntax error\n');
                    return 1;
                }
                functions.set(parts[1], parts[2]);
                return 0;
            }
            else if (args[0] === 'alias') {
                if (args.length === 1) {
                    for (let key of aliases.keys()) {
                        stdout.write('alias ' + key + '=\'' + aliases.get(key).replace('\'', '\'\\\'\'') + '\'\n');
                    }
                    return 0;
                }
                for (let arg = 1; arg < args.length; arg++) {
                    let i = args[arg].indexOf('=');
                    if (i === -1) {
                        if (!aliases.has(args[arg])) {
                            stderr.write('-: alias: ' + args[arg] + ': not found\n');
                            continue;
                        }
                        stdout.write('alias ' + args[arg] + '=\'' + aliases.get(args[arg]).replace('\'', '\'\\\'\'') + '\'\n');
                        continue;
                    }
                    aliases.set(args[arg].substring(0, i), args[arg].substring(i + 1));
                    continue;
                }
                return 0;
            }
            else if (args[0] === 'history') {
                if (args.length > 1) {
                    if (args[1] === '-c') {
                        history.length = 1;
                        history[0] = '';
                        return 0;
                    }
                    stderr.write('history: ' + args[1] + ': invalid option');
                    return 1;
                }
                for (let i = 0; i < history.length; i++) {
                    stdout.write('    '.substring(Math.log10(i)) + i + '  ' + history[i] + '\n');
                }
                return 0;
            }
            if (functions.has(args[0])) {
                let status = execute(functions.get(args[0]), stdin, stdout, stderr, args, false);
                if (status instanceof Promise) {
                    return yield status;
                }
                return status;
            }
            // bin
            let paths = environment.get('PATH').split(':');
            for (let path of paths) {
                let file = getFile(path + '/' + args[0]);
                if (file !== null) {
                    if ((file.mode & 0b001) !== 0) {
                        if (file.hasOwnProperty('exec')) {
                            let status = file.exec(args, stdin, stdout, stderr, wd, environment);
                            if (status instanceof Promise) {
                                let val = yield status;
                                return val;
                            }
                            return status;
                        }
                        else {
                            // TODO: make new shell here instead of reusing?
                            return yield execute(file.data, stdin, stdout, stderr, args, false);
                        }
                    }
                }
            }
            stderr.write('-: ' + args[0] + ': command not found\n');
        });
        let lastCtrl = null;
        let lastKey = '';
        let controlKeys = map({
            'a': () => {
                cursorPos = 0;
            },
            'e': () => {
                cursorPos = typed.length;
            },
            'k': () => {
                clipboard = typed.substring(cursorPos, typed.length);
                typed = typed.substring(0, cursorPos);
            },
            'u': () => {
                clipboard = typed.substring(0, cursorPos);
                typed = typed.substring(cursorPos);
                cursorPos = 0;
            },
            'y': () => {
                typed = typed.substring(0, cursorPos) + clipboard + typed.substring(cursorPos, typed.length);
                cursorPos = cursorPos + clipboard.length;
            },
            'f': () => {
                if (cursorPos < typed.length) {
                    cursorPos = cursorPos + 1;
                }
            },
            'b': () => {
                if (cursorPos > 0) {
                    cursorPos = cursorPos - 1;
                }
            },
            'd': () => {
                if (cursorPos < typed.length) {
                    typed = typed.substring(0, cursorPos) + typed.substring(cursorPos + 1);
                }
                else if (typed === '') {
                    dbgActive = false;
                }
            },
            'h': () => {
                if (cursorPos > 0) {
                    cursorPos = cursorPos - 1;
                    typed = typed.substring(0, cursorPos) + typed.substring(cursorPos + 1);
                }
            },
            'p': () => {
                if (historyScroll < history.length) {
                    if (typed !== '') {
                        history[history.length - historyScroll] = typed;
                    }
                    historyScroll = historyScroll + 1;
                    typed = history[history.length - historyScroll];
                    cursorPos = typed.length;
                }
                else {
                    cursorPos = 0;
                }
            },
            'n': () => {
                if (historyScroll > 1) {
                    if (typed !== '') {
                        history[history.length - historyScroll] = typed;
                    }
                    historyScroll = historyScroll - 1;
                    typed = history[history.length - historyScroll];
                    cursorPos = typed.length;
                }
                else {
                    cursorPos = typed.length;
                }
            },
            'l': () => {
                dbgLog.length = 1;
                dbgTimes.length = 1;
                dbgLog[0] = typed;
            },
            't': () => {
                if (cursorPos > 0) {
                    if (cursorPos < typed.length) {
                        typed = typed.substring(0, cursorPos - 1) + typed[cursorPos] + typed[cursorPos - 1] + typed.substring(cursorPos + 1);
                        dbgPrompt = typed;
                        cursorPos = cursorPos + 1;
                    }
                    else {
                        typed = typed.substring(0, cursorPos - 2) + typed[cursorPos - 1] + typed[cursorPos - 2];
                    }
                }
            },
            'w': () => {
                let ws = ' \t \n';
                if (cursorPos > 0) {
                    let deleteTo = cursorPos - 1;
                    while (deleteTo > 0 && ws.indexOf(typed[deleteTo]) !== -1) {
                        deleteTo = deleteTo - 1;
                    }
                    while (deleteTo > 0 && ws.indexOf(typed[deleteTo]) === -1) {
                        deleteTo = deleteTo - 1;
                    }
                    if (deleteTo > 0) {
                        deleteTo = deleteTo + 1;
                    }
                    if (lastCtrl !== 'w') {
                        clipboard = typed.substring(deleteTo, cursorPos);
                    }
                    else {
                        clipboard = typed.substring(deleteTo, cursorPos) + clipboard;
                    }
                    typed = typed.substring(0, deleteTo) + typed.substring(cursorPos);
                    cursorPos = deleteTo;
                }
            },
            '_Tab': () => {
                let wb = '\'" \t\n=:()|<>&';
                let escaped = '';
                let filtered = '';
                let wroteCmd = false;
                let startCmd = true;
                let quoted = -1;
                let qt = '"\'';
                let c = cursorPos;
                for (let i = 0; i < cursorPos; i++) {
                    if (typed[i] === '\\' && i < cursorPos - 1) {
                        escaped = escaped + typed[i] + typed[i + 1];
                        filtered = filtered + '__';
                        i++;
                        c++;
                        wroteCmd = true;
                        continue;
                    }
                    if (quoted !== -1) {
                        if (qt.indexOf(typed[i]) === quoted) {
                            quoted = -1;
                        }
                        escaped = escaped + typed[i];
                        filtered = filtered + '_';
                        wroteCmd = true;
                        continue;
                    }
                    else if (qt.indexOf(typed[i]) !== -1) {
                        quoted = qt.indexOf(typed[i]);
                        escaped = escaped + typed[i];
                        filtered = filtered + '_';
                        wroteCmd = true;
                        continue;
                    }
                    if (wb.indexOf(typed[i]) !== -1) {
                        escaped = escaped + typed[i];
                        filtered = filtered + ' ';
                        if (wroteCmd) {
                            startCmd = false;
                        }
                        if (typed[i] === '|') {
                            startCmd = true;
                            wroteCmd = false;
                        }
                        continue;
                    }
                    escaped = escaped + typed[i];
                    filtered = filtered + '_';
                    wroteCmd = true;
                }
                let wordStart = filtered.lastIndexOf(' ', c);
                let arg = escaped.substring(wordStart + 1, c);
                if (arg.length === 0 && !environment.flag('EXPAND_EMPTY')) {
                    return;
                }
                if (quoted !== -1) {
                    arg = arg + qt[quoted];
                }
                let fn = arg;
                let absolute = arg.length > 0 && arg[0] === '/';
                let matches = [];
                let wasDir = false;
                let dirn = wd;
                if (arg.length > 0 && arg[0] === '$') {
                    // environment variables
                    let evar = arg.substring(1);
                    for (let key of environment.keys()) {
                        if (key.startsWith(evar)) {
                            matches.push('$' + key);
                        }
                    }
                }
                else {
                    let splitAt = arg.lastIndexOf('/');
                    fn = arg.replace(/\\/g, '');
                    if (quoted !== -1) {
                        fn = fn.substring(1, fn.length - 1);
                    }
                    if (splitAt !== -1) {
                        // path
                        dirn = fn.substring(0, fn.lastIndexOf('/'));
                        fn = fn.substring(fn.lastIndexOf('/') + 1);
                    }
                    else if (startCmd) {
                        // go through path
                        let paths = environment.get('PATH').split(':');
                        for (let path of paths) {
                            let pathDir = getDir(path);
                            if (pathDir === null) {
                                continue;
                            }
                            for (let objName of pathDir.contents.keys()) {
                                if (objName.startsWith(fn)) {
                                    matches.push(objName);
                                }
                            }
                        }
                    }
                    let resolved = resolvePath(dirn, wd, environment);
                    let dir = getDir(resolved);
                    if (dir !== null) {
                        for (let objName of dir.contents.keys()) {
                            if (objName.startsWith(fn)) {
                                let hasDir = getDir(resolved + (resolved === '/' ? objName : '/' + objName));
                                wasDir = hasDir !== null;
                                if (startCmd && !wasDir) {
                                    let file = getFile(resolved + '/' + objName);
                                    if (file === null || (file.mode & 0b001) === 0) {
                                        continue;
                                    }
                                }
                                if (dirn !== wd || absolute) {
                                    matches.push(objName);
                                }
                                else {
                                    matches.push(objName);
                                }
                            }
                        }
                    }
                }
                if (matches.length === 1) {
                    if (dirn !== wd || absolute) {
                        matches[0] = dirn + '/' + matches[0];
                    }
                    if (quoted === -1) {
                        matches[0] = matches[0].replace(/ /g, '\\ ');
                    }
                    else {
                        matches[0] = qt[quoted] + matches[0];
                    }
                    if (wasDir) {
                        matches[0] = matches[0] + '/';
                    }
                    else {
                        matches[0] = matches[0] + (quoted === -1 ? ' ' : qt[quoted] + ' ');
                    }
                    typed = escaped.substring(0, wordStart + 1) + matches[0] + typed.substring(cursorPos);
                    cursorPos = wordStart + 1 + matches[0].length;
                }
                else if (lastKey === 'Tab') {
                    if (matches.length > 0) {
                        stderr.write(that.prompt + typed + '\n');
                        stderr.write(matches.join('  ') + '\n');
                    }
                }
                else if (matches.length > 1) {
                    let checking = fn.length;
                    let going = true;
                    while (going && checking < matches[0].length) {
                        for (let i = 0; i < matches.length; i++) {
                            if (checking >= matches[i].length || matches[i][checking] !== matches[0][checking]) {
                                going = false;
                                break;
                            }
                        }
                        checking++;
                    }
                    checking--;
                    let best = matches[0].substring(0, checking);
                    if (dirn !== wd || absolute) {
                        best = dirn + '/' + best;
                    }
                    if (quoted === -1) {
                        best = best.replace(/ /g, '\\ ');
                    }
                    else {
                        best = qt[quoted] + best;
                    }
                    typed = escaped.substring(0, wordStart + 1) + best + typed.substring(cursorPos);
                    cursorPos = wordStart + 1 + best.length;
                }
            }
        });
        // controlKeys.set('V', controlKeys.get('v'))
        let controlToChar = map({
            'Delete': 'd',
            'Backspace': 'h',
            'ArrowLeft': 'b',
            'ArrowRight': 'f',
            'ArrowUp': 'p',
            'ArrowDown': 'n',
            'Home': 'a',
            'End': 'e',
            // 'Insert': 'V',
            'Tab': '_Tab' // kind of a hacky workaround.. this map should probably just hold functions
        });
        /* if (interactive) {
          stderr.write('motd\n')
        } */
        if (environment.has('HOME')) {
            if (login) {
                let file = getFile(environment.get('HOME') + '/.profile');
                if (file !== null) {
                    yield execute(file.data, stdin, stdout, stderr, shellArgs, false);
                }
                file = getFile('/etc/profile');
                if (file !== null) {
                    yield execute(file.data, stdin, stdout, stderr, shellArgs, false);
                }
            }
            if (interactive) {
                let file = getFile(environment.get('HOME') + '/.rc');
                if (file !== null) {
                    yield execute(file.data, stdin, stdout, stderr, shellArgs, false);
                }
                file = getFile('/etc/rc');
                if (file !== null) {
                    yield execute(file.data, stdin, stdout, stderr, shellArgs, false);
                }
            }
        }
        if (environment.has('HISTFILE')) {
            let path = resolvePath(environment.get('HISTFILE'), wd, environment);
            let histfile = getObj(path);
            if (histfile !== null) {
                history = histfile.data.split('\n');
                history.push('');
            }
        }
        that = {
            execute: execute,
            stdin: stdin,
            stdout: stdout,
            stderr: stderr,
            prompt: '$ ',
            showPrompt: true,
            exit: exit
        };
        if (primary) {
            setPrimary(that);
        }
        if (interactive) {
            pushProg(that);
            while (looping) {
                let [e, err] = yield dbgStdin.readKey();
                if (!e.ctrlKey) {
                    lastCtrl = null;
                }
                if (e.ctrlKey) {
                    if (controlKeys.has(e.key)) {
                        controlKeys.get(e.key)(e);
                        lastCtrl = e.key;
                    }
                }
                else if (e.keyCode === 13) {
                    if (typed !== '') {
                        history[history.length - 1] = typed;
                    }
                    if (typed.length === 0) {
                        dbgActive = false;
                    }
                    else {
                        yield execute(typed, stdin, stdout, stderr, shellArgs, true);
                    }
                    cursorPos = 0;
                    dbgPrompt = '';
                    historyScroll = 1;
                    if (history[history.length - 1] !== '' && (history.length === 1 || history[history.length - 1] !== history[history.length - 2])) {
                        history.push('');
                    }
                    typed = '';
                }
                else if (isPrintable(e.keyCode)) {
                    if (cursorPos < typed.length) {
                        typed = typed.substring(0, cursorPos) + e.key + typed.substring(cursorPos);
                    }
                    else {
                        typed = typed + e.key;
                    }
                    cursorPos++;
                    dbgPrompt = typed;
                }
                else if (controlToChar.has(e.key) && controlKeys.has(controlToChar.get(e.key))) {
                    controlKeys.get(controlToChar.get(e.key))(e);
                    lastCtrl = e.key;
                }
                lastKey = e.key;
                dbgPrompt = typed;
            }
        }
        else {
            return that;
        }
    });
    let realdbg = (...args) => {
        let str = '';
        for (let i = 0; i < args.length; i++) {
            if (i > 0) {
                str = str + ' ';
            }
            if (typeof args[i] === 'string') {
                str = str + args[i];
            }
            else if (args[i] === undefined) {
                str = str + 'undefined';
            }
            else if (args[i] === null) {
                str = str + 'null';
            }
            else {
                str = str + args[i].toString();
            }
        }
        shell.stdout.write(str + '\n');
    };
    setPrimary = (sh) => {
        shell = sh;
        dbg = realdbg;
        global.dbg = realdbg;
        for (let i = 0; i < dbgWait.length; i++) {
            dbg(...dbgWait[i]);
        }
    };
    global.dbg = dbg;
    global.dbgTimes = dbgTimes;
    let dbgStdout = new ReadWriter();
    global.dbgStdout = dbgStdout;
    (() => __awaiter(this, void 0, void 0, function* () {
        let lastNewline = true;
        while (true) {
            let [data, err] = yield dbgStdout.read();
            if (err !== null) {
                console.log('Error in dbgStdout:', err);
                break;
            }
            if (data.indexOf('\n') === data.length - 1) {
                // probably most common case.. print one line
                if (lastNewline) {
                    dbgLog.push(data.substring(0, data.length - 1));
                    dbgTimes.push(Date.now());
                }
                else {
                    dbgLog[dbgLog.length - 1] += data.substring(0, data.length - 1);
                    dbgTimes[dbgTimes.length - 1] = Date.now();
                }
                lastNewline = true;
            }
            else if (data.indexOf('\n') !== -1) {
                let lines = data.split('\n');
                let time = Date.now();
                for (let i = 0; i < lines.length; i++) {
                    if (i === 0 && !lastNewline) {
                        dbgLog[dbgLog.length - 1] += lines[i];
                        dbgTimes[dbgTimes.length - 1] = time;
                        continue;
                    }
                    if (i === lines.length - 1 && data[data.length - 1] === '\n') {
                        break;
                    }
                    dbgLog.push(lines[i]);
                    dbgTimes.push(time);
                }
                lastNewline = data[data.length - 1] === '\n';
            }
            else {
                if (lastNewline) {
                    dbgLog.push(data);
                    dbgTimes.push(Date.now());
                }
                else {
                    dbgLog[dbgLog.length - 1] += data;
                    dbgTimes[dbgTimes.length - 1] = Date.now();
                }
                lastNewline = false;
            }
        }
    }))();
    makeShell(dbgStdin, dbgStdout, dbgStdout, null, null, true, true, true);

    dbg('Hi! Welcome to Blastzone, the former title of Antistatic.');
    dbg('This was the last commit that could still run in a web browser, before moving to Electron');
    dbg('and, subsequently, Node + SDL2.');
    dbg('To play using a keyboard, press Backspace.');

    let oldCursorPos = -1;
    let oldPromptLength = -1;
    let promptTick = (ctx, ox, oy, width, height) => {
        if (dbgActive && (Date.now() - lastKeyPress) % 1000 < 500) {
            // dbg(ctx.measureText(typed.substring(0, cursorPos)), height - 60, 4, 10)
            let oldfill = ctx.fillStyle;
            ctx.fillStyle = 'rgb(128, 128, 128)';
            if (cursorPos !== oldCursorPos || dbgProg.prompt.length !== oldPromptLength) {
                cursorLeft = ctx.measureText(dbgProg.prompt + dbgPrompt.substring(0, cursorPos)).width;
                cursorWidth = ctx.measureText(cursorPos < dbgPrompt.length ? dbgPrompt[cursorPos] : 'M').width;
                oldCursorPos = cursorPos;
                oldPromptLength = dbgProg.prompt.length;
            }
            ctx.fillRect(ox + 10 + cursorLeft, oy + height - 58 - lineHeight * cursorY, cursorWidth, 11);
            ctx.fillStyle = oldfill;
        }
    };
    let renderTick = (ctx, ox, oy, width, height) => {
        // let renderStart = pnow()
        // ctx.save()
        let n = Date.now();
        let life = 5000;
        ctx.globalAlpha = 1;
        // ctx.font = '10px Droid Sans Mono'
        if (dbgProg !== null && dbgProg.hasOwnProperty('tick')) {
            dbgProg.tick();
        }
        else {
            promptTick(ctx, ox, oy, width, height);
        }
        let promptLength = 0;
        if (dbgActive && dbgProg.showPrompt) {
            promptLength = 1;
            let y = height - 40 - (1) * lineHeight;
            // console.log(dbgProg.prompt, dbgPrompt)
            ctx.fillText(dbgProg.prompt + dbgPrompt, ox + 10, oy + y);
        }
        for (let i = dbgLog.length - 1; i >= 0; i--) {
            let age = 0;
            if (dbgActive || i >= dbgTimes.length) {
                age = 1;
            }
            else {
                age = (n - dbgTimes[i]) / life;
            }
            if (!dbgActive && age > 0.5) {
                if (age > 1) {
                    break;
                }
                ctx.globalAlpha = 1 - ((age - 0.5) * 2);
            }
            // add 1 to the row to offset from prompt line
            let y = height - 40 - (dbgLog.length - i + promptLength) * lineHeight;
            ctx.fillText(dbgLog[i], ox + 10, oy + y);
            if (y < 0) {
                break;
            }
        }
        ctx.globalAlpha = 1;
        // ctx.restore()
    };
    global.addEventListener('paste', e => {
        // console.log(e.clipboardData)
        lastPaste = e.clipboardData.getData('text');
        dbgStdin.write(lastPaste);
        // dbgInputStack.pop()(lastPaste, 0)
    }, false);
    global.addEventListener('keydown', e => {
        let name = bindings.get(e.key.toLowerCase());
        if (dbgActive) {
            e.preventDefault();
            e.stopImmediatePropagation();
            if ((e.keyCode === 86 && e.ctrlKey) || (e.keyCode === 45 && e.shiftKey)) {
                // special case for paste
                setTimeout(() => {
                    // dbgProg.input(e)
                    // dbgInputStack.pop()(e, CODE_KEYBOARD)
                    dbgStdin.writeKey(e);
                }, 0);
                return false;
            }
            if (name === 'menu') {
                dbgActive = false;
                return false;
            }
            // dbgProg.input(e)
            // dbgInputStack.pop()(e, CODE_KEYBOARD)
            dbgStdin.writeKey(e);
            lastKeyPress = Date.now();
            return false;
        }
        if (name === 'console') {
            dbgActive = true;
            lastKeyPress = Date.now();
            return false;
        }
    }, false);
    global.addEventListener('keyup', (e) => {
        if (dbgActive) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            return false;
        }
    }, false);
    global.addEventListener('beforeunload', () => {
        saveFs();
    });
    return () => ({ dbgActive: () => dbgActive, getFile, getDir, getDirOf, getFilename, getObj, saveFs, dbg: (...args) => dbg(...args), dbgStdout, renderTick, addDirToIndex, map });
})();
const ImportUtils = (() => {
    const { getFile, getDir, getDirOf, getFilename, addDirToIndex, map } = ImportTerminal();
    const jsonFiles = new Map();
    const getJSONFile = (path) => {
        if (jsonFiles.has(path)) {
            return jsonFiles.get(path);
        }
        let f = getFile(path);
        if (f === null) {
            f = {
                mode: 0b110,
                data: '{}'
            };
            const dir = getDirOf(path);
            if (dir === null) {
                throw new Error('Something terrible is wrong here. Parent directory (' + dir + ') not found.');
            }
            dir.contents.set(getFilename(path), f);
        }
        const settings = JSON.parse(f.data);
        settings.save = () => {
            f.data = JSON.stringify(settings, null, '  ');
        };
        jsonFiles.set(path, settings);
        return settings;
    };
    const config = getJSONFile('/home/bzconfig');
    const getSettings = () => config;
    addDirToIndex('/', {
        contents: map({
            'bin': {
                contents: map({
                    'config': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            if (args.length === 1) {
                                const props = Object.getOwnPropertyNames(config);
                                for (let i = 0; i < props.length; i++) {
                                    const p = props[i];
                                    if (p === 'save') {
                                        continue;
                                    }
                                    stdout.write('config.' + p + ' = ' + JSON.stringify(config[p]) + '\n');
                                }
                                return;
                            }
                            if (args[1][0] === '-') {
                                if (args[1].length === 0) {
                                    stderr.write('Invalid flag: -\n');
                                    return;
                                }
                                if (args[1][1] === 'd' && args.length > 2) {
                                    delete config[args[2]];
                                    config.save();
                                    return;
                                }
                                return;
                            }
                            if (args.length >= 3) {
                                try {
                                    config[args[1]] = JSON.parse(args[2]);
                                }
                                catch (e) {
                                    stderr.write('Unable to interpret value: ' + args[2] + ' - ' + e + '\n');
                                    return;
                                }
                                config.save();
                            }
                            stdout.write('config.' + args[1] + ' = ' + JSON.stringify(config[args[1]]) + '\n');
                        }
                    },
                })
            }
        })
    });
    const swapRemoved = (from, to, match) => {
        const l = from.length;
        let r = 0;
        for (let i = 0; i < l; i++) {
            if (from[i].removed === match) {
                to.push(from[i]);
                r++;
                from[i].present = !match;
            }
            else {
                if (r > 0) {
                    from[i - r] = from[i];
                }
            }
        }
        from.length = from.length - r;
    };
    return () => ({ getJSONFile, getSettings, swapRemoved });
})();
const ImportMath = (() => {
    'use strict';
    const degree = Math.PI / 180;
    const rad = 180 / Math.PI;
    const radian = (n) => n * rad;
    const angleX = (n) => Math.cos(n * degree);
    const angleY = (n) => Math.sin(n * degree);
    const computeAngle = (dx, dy) => (Math.PI + Math.atan2(dy, dx)) * rad;
    const computeRadians = (dx, dy) => Math.PI + Math.atan2(dy, dx);
    const container = [0, 0, 0];
    const preciseAngle = (dx, dy) => {
        const radians = Math.PI + Math.atan2(dy, dx);
        container[0] = Math.cos(radians);
        container[1] = Math.sin(radians);
        container[2] = radians;
        return container;
    };
    const lqrandomstore = new Float64Array(256);
    for (let i = 0; i < lqrandomstore.length; i++) {
        lqrandomstore[i] = Math.random();
    }
    let randomSeek = 0;
    let randomSeekSync = 0;
    // random enough, faster than always using the high-quality prng in browsers
    const lqrandom = () => {
        randomSeek++;
        return lqrandomstore[randomSeek & 0xff];
    };
    const lqrandomSync = () => {
        randomSeekSync++;
        return lqrandomstore[randomSeekSync & 0xff];
    };
    const lqrandomstate = () => {
        return {
            seek: randomSeekSync,
            store: lqrandomstore
        };
    };
    window.lqrandomstate = lqrandomstate;
    return () => ({ radian, angleX, angleY, computeAngle, computeRadians, preciseAngle, lqrandomSync, lqrandom, randomSeek: (n) => { randomSeek = randomSeek + n; }, lqrandomstate, setSeed: (n) => { randomSeek = n; } });
})();
const ImportAudio = (() => {
    'use strict';
    const { getSettings } = ImportUtils();
    const { dbg } = ImportTerminal();
    const settings = getSettings();
    const cache = [new Map(), new Map(), new Map(), new Map(), new Map(), new Map(), new Map(), new Map(), new Map()];
    const fileSettings = {
        'blastzoned.wav': {
            volume: 0.3
        },
        'gunpew.wav': {
            volume: 0.3
        },
        'blastzoned.ogg': {
            volume: 0.5
        },
        // music
        'music/bells2.wav': {
            volume: 0.45
        },
        'music/grittier-other-01.ogg': {
            volume: 0.2
        },
        'music/grittier2.wav': {
            volume: 0.15
        },
        'music/spooky.wav': {
            volume: 1
        },
    };
    const music = { audio: null, name: '', playing: false };
    const sfx = {
        allMusic: {
            files: ['music/bells2.wav', 'music/grittier-other-01.ogg', 'music/grittier2.wav', 'music/spooky.wav']
        },
        countdownmid: {
            files: ['countdownmid.ogg']
        },
        countdownend: {
            files: ['countdownend.ogg']
        },
        blastzoned: {
            files: ['blastzoned.wav']
        },
        ledgegrab: {
            files: ['ledgegrab.ogg']
        },
        clash: {
            files: ['clash.ogg']
        },
        shortwhiff: {
            files: ['shortwhiff.ogg']
        },
        longwhiff: {
            files: ['longwhiff.ogg']
        },
        hit: {
            files: ['hit.ogg']
        },
        wham: {
            files: ['wham.ogg']
        },
        grab: {
            files: ['grab.ogg']
        },
        grab_whiff: {
            files: ['grab_whiff.ogg']
        },
        tech: {
            files: ['tech.ogg']
        },
        roll: {
            files: ['roll.ogg']
        },
        meteorcancel: {
            files: ['meteorcancel.ogg']
        },
        shieldup: {
            files: ['shieldup.ogg']
        },
        charging: {
            files: ['charging.ogg']
        },
        landing: {
            files: ['landing.ogg']
        },
        heavy_landing: {
            files: ['heavy_landing.ogg']
        },
        asper_dodge: {
            files: ['asper_dodge.ogg']
        },
        asper_upspecial: {
            files: ['blastzoned.ogg']
        },
        asper_djump: {
            files: ['asper_djump.ogg']
        },
        asper_sb: {
            files: ['asper_sb.ogg']
        },
        blip: {
            files: ['blip.ogg']
        },
        pewpew: {
            files: ['pewpew.ogg']
        },
        pew: {
            files: ['pew.ogg']
        },
        gunpew: {
            files: ['gunpew.wav']
        },
    };
    const allFiles = new Set();
    for (let v of Object.getOwnPropertyNames(sfx)) {
        const s = sfx[v];
        for (let i = 0; i < s.files.length; i++) {
            allFiles.add(s.files[i]);
        }
    }
    const makeSfx = (fn) => {
        const a = new Audio('audio/' + fn);
        const s = fileSettings[fn];
        if (s) {
            console.log('settings found', fn, s);
            if (s.volume) {
                a.volume = s.volume;
            }
        }
        return a;
    };
    for (let f of allFiles) {
        cache[0].set(f, makeSfx(f));
    }
    const selectFile = (name) => {
        let info = sfx[name];
        if (!info) {
            dbg('Cannot find SFX: ' + name);
            console.warn('Cannot find SFX:', name);
            return '';
        }
        if (info.files.length === 1) {
            return info.files[0];
        }
        if (info.alternate) {
        }
        return info.files[info.files.length * Math.random() | 0];
    };
    const getNextSound = (name) => {
        const fn = selectFile(name);
        if (fn === '') {
            return null;
        }
        const l = cache.length;
        let highestProgress = 0;
        let idealDrop = null;
        for (let i = 0; i < l; i++) {
            let sample = null;
            if (cache[i].has(fn)) {
                sample = cache[i].get(fn);
            }
            if (!sample) {
                sample = makeSfx(fn);
                cache[i].set(fn, sample);
            }
            if (sample.paused) {
                return sample;
            }
            if (sample.currentTime > highestProgress) {
                highestProgress = sample.currentTime;
                idealDrop = sample;
            }
        }
        return idealDrop;
    };
    const playSound = (name) => {
        const sfx = getNextSound(name);
        if (sfx) {
            sfx.currentTime = 0;
            sfx.play();
        }
    };
    const playMusic = (name) => {
        if (settings['muteAudio'] || settings['muteMusic']) {
            return;
        }
        if (music.playing) {
            music.audio.removeEventListener('ended', musicEnd);
        }
        const sfx = getNextSound(name);
        if (!sfx) {
            dbg('Unable to get sfx for ' + name);
            console.warn('Unable to get sfx for ' + name);
            return;
        }
        sfx.addEventListener('ended', musicEnd);
        sfx.play();
        music.audio = sfx;
        music.name = name;
        music.playing = true;
        console.log('playing track', sfx.src);
    };
    const musicEnd = () => {
        console.log('track ended');
        playMusic(music.name);
    };
    const stopAudio = () => {
        for (let i = 0; i < cache.length; i++) {
            for (let [_, a] of cache[i]) {
                a.pause();
            }
        }
        if (music.playing) {
            music.audio.removeEventListener('ended', musicEnd);
            music.playing = false;
        }
    };
    const playMute = () => { };
    let play = settings['muteAudio'] ? playMute : playSound;
    const toggleMute = () => {
        if (settings['muteAudio']) {
            play = playSound;
            settings['muteAudio'] = false;
        }
        else {
            play = playMute;
            settings['muteAudio'] = true;
        }
        settings.save();
    };
    return () => ({ playAudio: name => play(name), toggleMute, stopAudio, playMusic });
})();
const ImportCollision = (() => {
    const segIntersects = (x1, y1, x2, y2, x3, y3, x4, y4) => {
        const bx = x2 - x1;
        const by = y2 - y1;
        const dx = x4 - x3;
        const dy = y4 - y3;
        const b_dot_d_perp = bx * dy - by * dx;
        if (b_dot_d_perp === 0) {
            return false;
        }
        const cx = x3 - x1;
        const cy = y3 - y1;
        const t = (cx * dy - cy * dx) / b_dot_d_perp;
        if (t < 0 || t > 1) {
            return false;
        }
        const u = (cx * by - cy * bx) / b_dot_d_perp;
        if (u < 0 || u > 1) {
            return false;
        }
        return true;
    };
    const segIntersectsPoint = (out, x1, y1, x2, y2, x3, y3, x4, y4) => {
        const bx = x2 - x1;
        const by = y2 - y1;
        const dx = x4 - x3;
        const dy = y4 - y3;
        const b_dot_d_perp = bx * dy - by * dx;
        if (b_dot_d_perp === 0) {
            return false;
        }
        const cx = x3 - x1;
        const cy = y3 - y1;
        const t = (cx * dy - cy * dx) / b_dot_d_perp;
        if (t < 0 || t > 1) {
            return false;
        }
        const u = (cx * by - cy * bx) / b_dot_d_perp;
        if (u < 0 || u > 1) {
            return false;
        }
        out[0] = x1 + t * bx;
        out[1] = y1 + t * by;
        return true;
    };
    const dist2 = (x1, y1, x2, y2) => {
        return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
    };
    // 1: point
    // 2, 3: capsule part 1
    const distance = (x1, y1, x2, y2, x3, y3) => {
        const l2 = dist2(x2, y2, x3, y3);
        if (l2 == 0) {
            return Math.sqrt(dist2(x1, y1, x2, y2));
        }
        const t = ((x1 - x2) * (x3 - x2) + (y1 - y2) * (y3 - y2)) / l2;
        if (t < 0) {
            return Math.sqrt(dist2(x1, y1, x2, y2));
        }
        if (t > 1) {
            return Math.sqrt(dist2(x1, y1, x3, y3));
        }
        return Math.sqrt(dist2(x1, y1, x2 + t * (x3 - x2), y2 + t * (y3 - y2)));
    };
    const absoluteRectangleCollision = (x1, y1, x2, y2, x3, y3, x4, y4) => {
        return (x4 >= x1 && y4 >= y1 && x3 <= x2 && y3 <= y2);
    };
    const capsuleCollision = (c1p1x, c1p1y, c1p2x, c1p2y, r1, c2p1x, c2p1y, c2p2x, c2p2y, r2) => {
        // todo: optimize
        // there are algorithms for capsule collision that might be more efficient,
        // but require more work/math understanding to implement
        if (absoluteRectangleCollision(Math.min(c1p1x, c1p2x) - r1, Math.min(c1p1y, c1p2y) - r1, Math.max(c1p1x, c1p2x) + r1, Math.max(c1p1y, c1p2y) + r1, Math.min(c2p1x, c2p2x) - r2, Math.min(c2p1y, c2p2y) - r2, Math.max(c2p1x, c2p2x) + r2, Math.max(c2p1y, c2p2y) + r2)) {
            if (segIntersects(c1p1x, c1p1y, c1p2x, c1p2y, c2p1x, c2p1y, c2p2x, c2p2y)) {
                return true;
            }
            const r = (r1 + r2);
            if (distance(c1p1x, c1p1y, c2p1x, c2p1y, c2p2x, c2p2y) <= r) {
                return true;
            }
            if (distance(c1p2x, c1p2y, c2p1x, c2p1y, c2p2x, c2p2y) <= r) {
                return true;
            }
            if (distance(c2p1x, c2p1y, c1p1x, c1p1y, c1p2x, c1p2y) <= r) {
                return true;
            }
            if (distance(c2p2x, c2p2y, c1p1x, c1p1y, c1p2x, c1p2y) <= r) {
                return true;
            }
        }
        return false;
    };
    return () => ({ segIntersects, segIntersectsPoint, dist2, distance, absoluteRectangleCollision, capsuleCollision });
})();
const ImportStage = (() => {
    'use strict';
    const global = window;
    const { segIntersects, segIntersectsPoint } = ImportCollision();
    const { Model, Prefab } = ImportModel();
    let _m = new Model();
    _m = null;
    let _pf = new Prefab();
    _pf = null;
    class StageElement {
        constructor(x, y, x2, y2, properties) {
            this.particles = 0;
            this.x = 0;
            this.y = 0;
            this.lx = 0;
            this.ly = 0;
            this.x2 = 0;
            this.y2 = 0;
            this.minY = 0;
            this.maxY = 0;
            this.minYX = 0;
            this.maxYX = 0;
            this.w = 0;
            this.h = 0;
            this.length = 0;
            this.dx = 0;
            this.dy = 0;
            this.rightOccupied = 0;
            this.leftOccupied = 0;
            // define in properties
            this.leftGrabbable = false;
            this.rightGrabbable = false;
            this.top = false;
            this.bottom = false;
            this.left = false;
            this.right = false;
            this.decor = false;
            this.solid = false;
            this.initHandler = null;
            this.handler = null;
            this.drawFront = true;
            this.drawBack = true;
            this.drawLeft = true;
            this.drawRight = true;
            this.leftDepth = 40;
            this.leftDepth1 = this.leftDepth;
            this.leftDepth2 = this.leftDepth;
            this.rightDepth = this.leftDepth;
            this.rightDepth1 = this.rightDepth;
            this.rightDepth2 = this.rightDepth;
            this.alpha1 = 1;
            this.alpha2 = 0.5;
            this.alpha3 = 0.3;
            this.alpha4 = 0.15;
            this.alphaLeft = 0.15;
            this.alphaRight = 0.15;
            this.flags = null;
            this.name = null;
            this.dirty = false;
            this.particles = 0;
            this.x = x;
            this.y = y;
            this.x2 = x2;
            this.y2 = y2;
            this.minY = y2 > y ? y : y2;
            this.maxY = y2 > y ? y2 : y;
            this.minYX = y2 > y ? x : x2;
            this.maxYX = y2 > y ? x2 : x;
            this.w = this.x2 - this.x;
            this.h = this.maxY - this.minY;
            this.length = Math.sqrt(Math.pow(this.x2 - this.x, 2) + Math.pow(this.y2 - this.y, 2));
            for (const key of Object.getOwnPropertyNames(properties)) {
                if (properties.hasOwnProperty(key)) {
                    this[key] = properties[key];
                }
            }
            if (!properties.leftDepth1) {
                this.leftDepth1 = this.leftDepth;
            }
            if (!properties.leftDepth2) {
                this.leftDepth2 = this.leftDepth;
            }
            if (!properties.rightDepth1) {
                this.rightDepth1 = this.rightDepth;
            }
            if (!properties.rightDepth2) {
                this.rightDepth2 = this.rightDepth;
            }
            if (this.flags) {
                const flags = this.flags.split(' ');
                for (let i = 0; i < flags.length; i++) {
                    if (flags[i].length > 0 && flags[i][0] === '!') {
                        this[flags[i].substr(1)] = false;
                    }
                    else {
                        this[flags[i]] = true;
                    }
                }
            }
            if (this.initHandler) {
                this.handler = this.initHandler();
            }
        }
        intersects(x1, y1, x2, y2) {
            // this is just segIntersects.. call that?
            const bx = x2 - x1;
            const by = y2 - y1;
            const dx = this.x2 - this.x;
            const dy = this.y2 - this.y;
            const b_dot_d_perp = bx * dy - by * dx;
            if (b_dot_d_perp === 0) {
                return false;
            }
            const cx = this.x - x1;
            const cy = this.y - y1;
            const t = (cx * dy - cy * dx) / b_dot_d_perp;
            if (t < 0 || t > 1) {
                return false;
            }
            const u = (cx * by - cy * bx) / b_dot_d_perp;
            if (u < 0 || u > 1) {
                return false;
            }
            return true;
            // return [x1 + t * bx, y1 + t * by]
        }
        xAt(y) {
            return this.x === this.x2 ? this.x : (y - this.y) / (this.y2 - this.y) * (this.x2 - this.x) + this.x;
        }
        yAt(x) {
            return this.y === this.y2 ? this.y : (x - this.x) / (this.x2 - this.x) * (this.y2 - this.y) + this.y;
        }
        below(x, y, x2, y2) {
            return (((x >= this.x && x <= this.x2) || (x2 >= this.x && x2 <= this.x2)) && (y <= this.yAt(x)));
        }
        crossPlaneDown(x, y, x2, y2) {
            return (y <= this.yAt(x) && y2 >= this.yAt(x2));
        }
        above(x, y, x2, y2) {
            return (((x >= this.x && x <= this.x2) || (x2 >= this.x && x2 <= this.x2)) && (y >= this.yAt(x)));
        }
        crossPlaneUp(x, y, x2, y2) {
            return (y >= this.yAt(x) && y2 <= this.yAt(x2));
        }
        rightOf(x, y, x2, y2, h) {
            return (((y >= this.minY && y <= this.maxY) || (y2 >= this.minY && y2 <= this.maxY)) && (x <= this.xAt(y))) || (((y + h >= this.minY && y + h <= this.maxY) || (y2 + h > this.minY && y2 + h < this.maxY)) && (x <= this.xAt(y + h)));
        }
        crossPlaneLeft(x, y, x2, y2, h) {
            return (x >= this.xAt(y + h) && x2 <= this.xAt(y2 + h)) || (x >= this.xAt(y) && x2 <= this.xAt(y2));
        }
        leftOf(x, y, x2, y2, h) {
            return (((y >= this.minY && y <= this.maxY) || (y2 >= this.minY && y2 <= this.maxY)) && (x >= this.xAt(y))) || (((y + h >= this.minY && y + h <= this.maxY) || (y2 + h > this.minY && y2 + h < this.maxY)) && (x >= this.xAt(y + h)));
        }
        crossPlaneRight(x, y, x2, y2, h) {
            return (x <= this.xAt(y + h) && x2 >= this.xAt(y2 + h)) || (x <= this.xAt(y) && x2 >= this.xAt(y2));
        }
        // replaced with segIntersection, intersects
        downCollide(x, y, x2, y2) {
            return (((x >= this.x && x <= this.x2) || (x2 >= this.x && x2 <= this.x2)) && (y <= this.yAt(x) && y2 >= this.yAt(x2)));
        }
        upCollide(x, y, x2, y2) {
            return (((x >= this.x && x <= this.x2) || (x2 >= this.x && x2 <= this.x2)) && (y >= this.yAt(x) && y2 <= this.yAt(x2)));
        }
        leftCollide(x, y, x2, y2) {
            return (((y >= this.minY && y <= this.maxY) || (y2 >= this.minY && y2 <= this.maxY)) && (x <= this.xAt(y) && x2 >= this.xAt(y2)));
        }
        rightCollide(x, y, x2, y2) {
            return (((y >= this.minY && y <= this.maxY) || (y2 >= this.minY && y2 <= this.maxY)) && (x >= this.xAt(y) && x2 <= this.xAt(y2)));
        }
        testLedgeGrab(entity, directions) {
            if (this.leftGrabbable && !this.leftOccupied && (entity.face === 1 || directions & 16 || directions & 128)) {
                if (directions & 64) {
                    const dX = this.x - entity.x;
                    const dY = this.y - entity.y;
                    if (dX >= -20 &&
                        dX <= entity.forwardGrabRange &&
                        dY <= -entity.grabStart &&
                        dY >= -entity.grabStart - entity.grabHeight) {
                        return 1;
                    }
                }
                if (directions & 128) {
                    const dX = this.x - entity.x;
                    const dY = this.y - entity.y;
                    if (dX >= -20 &&
                        dX <= entity.reverseGrabRange &&
                        dY <= -entity.grabStart &&
                        dY >= -entity.grabStart - entity.grabHeight) {
                        return 1;
                    }
                }
            }
            if (this.rightGrabbable && !this.rightOccupied && (entity.face === -1 || directions & 16 || directions & 128)) {
                if (directions & 64) {
                    const dX = entity.x - this.x2;
                    const dY = this.y2 - entity.y;
                    if (dX >= -20 &&
                        dX <= entity.forwardGrabRange &&
                        dY <= -entity.grabStart &&
                        dY >= -entity.grabStart - entity.grabHeight) {
                        return 2;
                    }
                }
                if (directions & 128) {
                    const dX = entity.x - this.x2;
                    const dY = this.y2 - entity.y;
                    if (dX >= -20 &&
                        dX <= entity.reverseGrabRange &&
                        dY <= -entity.grabStart &&
                        dY >= -entity.grabStart - entity.grabHeight) {
                        return 2;
                    }
                }
            }
            else {
                return 0;
            }
        }
    }
    const animationTypes = {
        linear: (time, duration, target, tx, ty, x, y) => {
            const dx = x - tx;
            const dy = y - ty;
            return frame => {
                const f = frame - time;
                if (f >= 0 && f <= duration) {
                    const p = f / duration;
                    const ix = tx + p * dx;
                    const iy = ty + p * dy;
                    target.x = ix;
                    target.y = iy;
                    target.x2 = ix + target.w;
                    target.y2 = iy + target.h;
                }
            };
        }
    };
    const StageAnimationEvent = (type, time, duration, targetName, x, y) => {
        return (elements, offsets) => {
            const target = elements[targetName];
            const offset = offsets[targetName] || (offsets[targetName] = { x: target.x, y: target.y });
            const tx = offset.x, ty = offset.y;
            target.dirty = true;
            offset.x = x;
            offset.y = y;
            offsets.duration = Math.max(offsets.duration, time + duration);
            return animationTypes[type](time, duration - 1, target, tx, ty, x, y);
        };
    };
    const mirrorElement = (element, pivot) => {
        const reversePoints = true;
        const mirrored = {};
        const mirror = ['left', 'right', 'leftGrabbable', 'rightGrabbable'];
        const mirrorProps = ['leftDepth', 'rightDepth', 'leftDepth1', 'rightDepth1', 'leftDepth2', 'rightDepth2', 'drawLeft', 'drawRight'];
        const mirroredFlags = [];
        const properties = element[4];
        if (properties) {
            for (const key of Object.getOwnPropertyNames(properties)) {
                if (properties.hasOwnProperty(key)) {
                    const index = mirrorProps.indexOf(key);
                    if (index === -1) {
                        mirrored[key] = properties[key];
                    }
                    else {
                        mirrored[(index & 1) ? mirrorProps[index - 1] : mirrorProps[index + 1]] = properties[key];
                    }
                }
            }
            if (mirrored.flags) {
                const flags = mirrored.flags.split(' ');
                mirroredFlags.length = flags.length;
                for (let i = 0; i < flags.length; i++) {
                    const index = mirror.indexOf(flags[i]);
                    if (index !== -1) {
                        mirroredFlags[i] = (index & 1) ? mirror[index - 1] : mirror[index + 1];
                    }
                    else {
                        mirroredFlags[i] = flags[i];
                    }
                }
                mirrored.flags = mirroredFlags.join(' ');
            }
            if (mirrored.name) {
                if (element[0] <= pivot) {
                    mirrored.name += '-right';
                }
                else {
                    mirrored.name += '-left';
                }
            }
        }
        if (reversePoints) {
            return [-(element[2] - pivot * 2), element[3], -(element[0] - pivot * 2), element[1], mirrored];
        }
        else {
            return [-(element[0] - pivot * 2), element[1], -(element[2] - pivot * 2), element[3], mirrored];
        }
    };
    const stepAnimation = function () {
        let ended = false;
        this.frame += this.speed;
        if (!this.reversing) {
            if (this.frame >= this.duration) {
                if (this.reverse) {
                    this.frame = this.duration - this.frame + this.duration - 2;
                    this.speed = -this.speed;
                    this.reversing = true;
                }
                else {
                    if (!this.repeat) {
                        this.frame = this.duration - 1;
                        ended = true;
                    }
                    else {
                        this.frame = this.frame - this.duration;
                    }
                }
            }
        }
        else {
            if (this.frame < 0) {
                if (this.repeat) {
                    this.frame = -this.frame;
                    this.speed = -this.speed;
                    this.reversing = false;
                }
                else {
                    this.frame = 0;
                    ended = true;
                }
            }
        }
        const frame = this.frame;
        for (let i = 0; i < this.compiled.length; i++) {
            this.compiled[i](frame);
        }
        if (ended) {
            this.reset();
        }
        return ended;
    };
    const resetAnimation = function () {
        this.frame = this.randomStart ? this.duration * Math.random() | 0 : 0;
        this.reversing = this.randomStart ? Math.random() < 0.5 : false;
        this.speed = !this.reversing ? this.defaultSpeed : -this.defaultSpeed;
        this.enabled = false;
    };
    const blastRoomLeft = 590;
    const blastRoomRight = 590;
    const blastRoomTop = 750;
    const blastRoomBottom = 425;
    class Stage {
        constructor(stageData) {
            this.animatedFrame = 0;
            this.elements = [];
            this.decor = [];
            this.anchors = [];
            this.spawns = [];
            this.named = {};
            this.animations = [];
            this.activeAnimations = [];
            this.blastLeft = 0;
            this.blastRight = 0;
            this.blastTop = 0;
            this.blastBottom = 0;
            this.adjust = true;
            this.symmetric = false;
            this.pivot = 0;
            this.entrances = [];
            this.handler = null;
            this.prefab = null;
            this.transform = mat4.create();
            let scaleX = 1;
            let scaleY = 1;
            if (!stageData) {
                return;
            }
            if (stageData.prefab) {
                this.prefab = Prefab.build(stageData.prefab);
            }
            if (stageData.scaleX) {
                scaleX = stageData.scaleX;
            }
            if (stageData.scaleY) {
                scaleY = stageData.scaleY;
            }
            this.symmetric = stageData.symmetric;
            this.pivot = stageData.pivot * scaleX;
            if (stageData.blastLeft) {
                this.blastLeft = stageData.blastLeft * scaleX;
            }
            if (stageData.blastRight) {
                this.blastRight = stageData.blastRight * scaleX;
            }
            if (stageData.blastTop) {
                this.blastTop = stageData.blastTop * scaleY;
            }
            if (stageData.blastBottom) {
                this.blastBottom = stageData.blastBottom * scaleY;
            }
            const mapSpawns = (n, i) => {
                if (i % 3 === 0) {
                    return n * scaleX;
                }
                if (i % 3 === 1) {
                    return n * scaleY;
                }
                if (i % 3 === 2) {
                    return n;
                }
            };
            this.anchors = stageData.anchors.map(mapSpawns);
            this.spawns = stageData.spawns.map(mapSpawns);
            this.entrances = stageData.entrances.map(mapSpawns);
            if (stageData.elements) {
                const elements = stageData.elements;
                for (let i = 0; i < elements.length; i++) {
                    let properties = null;
                    if (elements[i].length === 5) {
                        properties = elements[i][4];
                        this.addElement(new StageElement(elements[i][0] * scaleX, elements[i][1] * scaleY, elements[i][2] * scaleX, elements[i][3] * scaleY, properties));
                    }
                    else if (elements[i].length === 3 && !isNaN(this.pivot)) {
                        properties = elements[i][2];
                        this.addElement(new StageElement(elements[i][0] * scaleX, elements[i][1] * scaleY, -(elements[i][0] - this.pivot * 2) * scaleX, elements[i][1] * scaleY, properties));
                    }
                    else {
                        global.BZ.dbg.log('error adding stage piece');
                        console.log('error adding stage piece', elements[i]);
                    }
                    if ((properties.symmetric || (this.symmetric && !properties.asymmetric)) && !isNaN(this.pivot)) {
                        if ((elements[i][0] <= this.pivot && elements[i][2] <= this.pivot) || (elements[i][0] >= this.pivot && elements[i][2] >= this.pivot)) {
                            const mirrored = mirrorElement(elements[i], this.pivot);
                            this.addElement(new StageElement(mirrored[0] * scaleX, mirrored[1] * scaleY, mirrored[2] * scaleX, mirrored[3] * scaleY, mirrored[4]));
                        }
                    }
                }
            }
            if (stageData.animations) {
                this.animations = stageData.animations;
                this.compileAnimations();
            }
            if (stageData.handler) {
                this.handler = stageData.handler;
            }
            else if (stageData.initHandler) {
                this.handler = stageData.initHandler();
            }
        }
        compileAnimations() {
            const elements = this.elements;
            const activeAnimations = this.activeAnimations;
            this.animations.forEach(animation => {
                const compiled = animation.compiled = [];
                const offsets = { duration: 0 };
                animation.enabled = false;
                animation.events.forEach(evt => {
                    compiled.push(evt(elements, offsets));
                });
                animation.duration = animation.duration || offsets.duration;
                animation.frame = 0;
                if (animation.autostart) {
                    activeAnimations.push(animation);
                    animation.enabled = true;
                }
                animation.speed = animation.defaultSpeed || (animation.defaultSpeed = 1);
                animation.step = stepAnimation;
                animation.reset = resetAnimation;
                animation.reset();
            });
        }
        recalculateBlastZone(element) {
            if (element && element.blastZone) {
                if (element.x < this.blastLeft + blastRoomLeft) {
                    this.blastLeft = element.x - blastRoomLeft;
                }
                if (element.x2 > this.blastRight - blastRoomRight) {
                    this.blastRight = element.x2 + blastRoomRight;
                }
                if (element.y < this.blastTop + blastRoomTop) {
                    this.blastTop = element.y - blastRoomTop;
                }
                if (element.y > this.blastBottom - blastRoomBottom) {
                    this.blastBottom = element.y + blastRoomBottom;
                }
                if (element.y2 < this.blastTop + blastRoomTop) {
                    this.blastTop = element.y2 - blastRoomTop;
                }
                if (element.y2 > this.blastBottom - blastRoomBottom) {
                    this.blastBottom = element.y2 + blastRoomBottom;
                }
            }
            else {
            }
        }
        addElement(element) {
            if (element.decor) {
                this.decor.push(element);
            }
            else {
                this.elements.push(element);
            }
            if (element.name) {
                this.named[element.name] = element;
            }
            if (this.adjust) {
                this.recalculateBlastZone(element);
            }
        }
        traceDown(entity) {
            let collided = null;
            let nearest = null;
            let hovering = false;
            let nearestD = -1;
            for (let i = 0; i < this.elements.length; i++) {
                if (!this.elements[i].top) {
                    continue;
                }
                if (this.elements[i].crossPlaneDown(entity.lx, entity.ly, entity.x, entity.y)) {
                    if (this.elements[i].intersects(entity.lx, entity.ly, entity.x, entity.y)) {
                        collided = this.elements[i].yAt(entity.x);
                        entity.platform = this.elements[i];
                        entity.hover = entity.platform;
                    }
                }
                else if (this.elements[i].solid && entity.y >= entity.ly && this.elements[i].intersects(entity.x, entity.y, entity.x, entity.y + entity.height * 0.5)) {
                    collided = this.elements[i].yAt(entity.x);
                    entity.platform = this.elements[i];
                    entity.hover = entity.platform;
                    nearestD = this.elements[i].yAt(entity.x) - entity.y;
                    nearest = this.elements[i];
                    hovering = true;
                }
                if (entity.y < this.elements[i].yAt(entity.x) && entity.x >= this.elements[i].x && entity.x <= this.elements[i].x2) {
                    if ((nearestD < 0 && this.elements[i].yAt(entity.x) - entity.y > 0) || this.elements[i].yAt(entity.x) - entity.y < nearestD) {
                        nearestD = this.elements[i].yAt(entity.x) - entity.y;
                        nearest = this.elements[i];
                        hovering = true;
                    }
                }
            }
            entity.hover = hovering && nearest;
            return collided;
        }
        intersect(x1, y1, x2, y2) {
            const pt = [0, 0];
            for (let i = 0; i < this.elements.length; i++) {
                const e = this.elements[i];
                if (segIntersectsPoint(pt, x1, y1, x2, y2, e.x, e.y, e.x2, e.y2)) {
                    return pt;
                }
            }
            return null;
        }
        traceUp(entity) {
            let at = entity.y + entity.height;
            let found = false;
            for (let i = 0; i < this.elements.length; i++) {
                if (this.elements[i].bottom && this.elements[i].crossPlaneUp(entity.lx, entity.ly + entity.height, entity.x, entity.y + entity.height)) {
                    if (this.elements[i].intersects(entity.lx, entity.ly + entity.height, entity.x, entity.y + entity.height)) {
                        at = Math.max(at, this.elements[i].yAt(entity.x));
                        found = true;
                    }
                }
            }
            return found && at;
        }
        traceLeft(entity) {
            let at = entity.x;
            let found = false;
            for (let i = 0; i < this.elements.length; i++) {
                if (this.elements[i].right && this.elements[i].crossPlaneLeft(entity.lx, entity.ly, entity.x, entity.y, entity.height)) {
                    if (!entity.airborne && entity.platform && entity.platform.yAt(entity.x) <= this.elements[i].minY) {
                        continue;
                    }
                    /*if (this.elements[i].intersects(entity.lx, entity.ly, entity.x, entity.y)) {
                      at = this.elements[i].xAt(entity.y)
                    }
                    if (this.elements[i].intersects(entity.lx, entity.ly + entity.height, entity.x, entity.y + entity.height)) {
                      at = at !== false ? Math.min(at, this.elements[i].xAt(entity.y + entity.height)) : this.elements[i].xAt(entity.y + entity.height)
                    }*/
                    if (this.elements[i].rightCollide(entity.lx, entity.ly, entity.x, entity.y)) {
                        at = Math.max(at, this.elements[i].xAt(entity.y));
                        found = true;
                    }
                    if (this.elements[i].rightCollide(entity.lx, entity.ly + entity.height, entity.x, entity.y + entity.height)) {
                        at = Math.max(at, this.elements[i].xAt(entity.y + entity.height));
                        found = true;
                    }
                    const dx = entity.x - entity.lx;
                    const dy = entity.y - entity.ly;
                    if (segIntersects(entity.lx, entity.ly, entity.lx, entity.ly + entity.height, this.elements[i].x, this.elements[i].y, this.elements[i].x - dx, this.elements[i].y - dy)) {
                        at = Math.max(at, this.elements[i].x);
                        found = true;
                    }
                    if (segIntersects(entity.lx, entity.ly, entity.lx, entity.ly + entity.height, this.elements[i].x2, this.elements[i].y2, this.elements[i].x2 - dx, this.elements[i].y2 - dy)) {
                        at = Math.max(at, this.elements[i].x2);
                        found = true;
                    }
                }
            }
            return found && at;
        }
        traceRight(entity) {
            let at = entity.x;
            let found = false;
            for (let i = 0; i < this.elements.length; i++) {
                if (this.elements[i].left && this.elements[i].crossPlaneRight(entity.lx, entity.ly, entity.x, entity.y, entity.height)) {
                    if (!entity.airborne && entity.platform && entity.platform.yAt(entity.x) <= this.elements[i].minY) {
                        continue;
                    }
                    /*if (this.elements[i].intersects(entity.lx, entity.ly, entity.x, entity.y)) {
                      at = this.elements[i].xAt(entity.y)
                      //return this.elements[i].xAt(entity.y)
                    }
                    if (this.elements[i].intersects(entity.lx, entity.ly + entity.height, entity.x, entity.y + entity.height)) {
                      //return this.elements[i].xAt(entity.y + entity.height)
                      return at !== false ? Math.min(at, this.elements[i].xAt(entity.y + entity.height)) : this.elements[i].xAt(entity.y + entity.height)
                    }*/
                    if (this.elements[i].leftCollide(entity.lx, entity.ly, entity.x, entity.y)) {
                        at = Math.min(at, this.elements[i].xAt(entity.y));
                        found = true;
                    }
                    if (this.elements[i].leftCollide(entity.lx, entity.ly + entity.height, entity.x, entity.y + entity.height)) {
                        at = Math.min(at, this.elements[i].xAt(entity.y + entity.height));
                        found = true;
                    }
                    const dx = entity.x - entity.lx;
                    const dy = entity.y - entity.ly;
                    if (segIntersects(entity.lx, entity.ly, entity.lx, entity.ly + entity.height, this.elements[i].x, this.elements[i].y, this.elements[i].x - dx, this.elements[i].y - dy)) {
                        at = Math.min(at, this.elements[i].x);
                        found = true;
                    }
                    if (segIntersects(entity.lx, entity.ly, entity.lx, entity.ly + entity.height, this.elements[i].x2, this.elements[i].y2, this.elements[i].x2 - dx, this.elements[i].y2 - dy)) {
                        at = Math.min(at, this.elements[i].x2);
                        found = true;
                    }
                }
            }
            return found && at;
        }
        findPlatformLeft(x, y) {
            for (let i = 0; i < this.elements.length; i++) {
                if (this.elements[i].x === x && this.elements[i].y === y && this.elements[i].top) {
                    return this.elements[i];
                }
            }
            return null;
        }
        findPlatformRight(x, y) {
            for (let i = 0; i < this.elements.length; i++) {
                if (this.elements[i].x2 === x && this.elements[i].y2 === y && this.elements[i].top) {
                    return this.elements[i];
                }
            }
            return null;
        }
        act() {
            for (let i = 0; i < this.elements.length; i++) {
                if (this.elements[i].leftOccupied) {
                    this.elements[i].leftOccupied--;
                }
                if (this.elements[i].rightOccupied) {
                    this.elements[i].rightOccupied--;
                }
                if (this.elements[i].handler) {
                    this.elements[i].handler();
                }
            }
            if (this.activeAnimations.length) {
                for (let i = 0; i < this.elements.length; i++) {
                    if (this.elements[i].dirty) {
                        this.elements[i].lx = this.elements[i].x;
                        this.elements[i].ly = this.elements[i].y;
                    }
                }
                let rem = null;
                for (let i = 0; i < this.activeAnimations.length; i++) {
                    if (this.activeAnimations[i].step()) {
                        if (rem === null) {
                            rem = [];
                        }
                        rem.push(i);
                    }
                }
                for (let i = 0; i < this.elements.length; i++) {
                    if (this.elements[i].dirty) {
                        this.elements[i].dx = this.elements[i].x - this.elements[i].lx;
                        this.elements[i].dy = this.elements[i].y - this.elements[i].ly;
                    }
                }
                if (rem !== null) {
                    for (let i = 0; i < rem.length; i++) {
                        this.activeAnimations.splice(i, 1);
                    }
                }
            }
        }
    }
    const stages = [
        {
            name: 'No Dice',
            /*
              Death Boundaries
              (-) Dead0N: (-224.00, 200.00)
              (-) Dead1N: (224.00, -108.80)

              Camera Boundaries
              (-) CamLimit0N: (-160.00, 136.00)
              (-) CamLimit1N: (160.00, -47.20)

              Starting Positions
              (P0) Player0: (0.00, 8.00)
              (P1) Player1: (0.00, 62.40)
              (P2) Player2: (-38.80, 35.20)
              (P3) Player3: (38.80, 35.20)

              Respawn Points
              (R0) Rebirth0: (12.80, 80.00)
              (R1) Rebirth1: (-40.00, 80.00)
              (R2) Rebirth2: (40.00, 80.00)
              (R3) Rebirth3: (-12.00, 80.00)

              Main Stage
              (A): (-68.4000, 0.0000)
              (B): (68.4000, 0.0000)

              Platforms
              (1) Top: (-18.80, 54.40)
              (2) Top: (18.80, 54.40)
              (3) Left: (-57.60, 27.20)
              (4) Left: (-20.00, 27.20)
              (5) Right: (20.00, 27.20)
              (6) Right: (57.60, 27.20)
            */
            blastLeft: -840,
            blastTop: 750,
            blastBottom: -408,
            blastRight: 840,
            anchors: [
                0, -75, 0.375,
                -37.5, 3.75, 0.375,
                37.5, 3.75, 0.375,
                0, 225, 1.125
            ],
            entrances: [
                0, 8 * 3.75, true,
                0, 62.4 * 3.75, false,
                -38.80 * 3.75, 35.20 * 3.75, true,
                38.80 * 3.75, 35.20 * 3.75, false
            ],
            scaleX: 1,
            scaleY: -1,
            spawns: [
                12.80 * 3.75, 80.00 * 3.75, false,
                -40.00 * 3.75, 80.00 * 3.75, true,
                40.00 * 3.75, 80.00 * 3.75, false,
                -12.00 * 3.75, 80.00 * 3.75, true
            ],
            symmetric: true,
            pivot: 0,
            elements: [
                [-256.5, 0, { flags: 'top leftGrabbable rightGrabbable solid' }],
                [-70.5, 204, { flags: 'top', leftDepth: 30, rightDepth: 30 }],
                [-216, 102, -75, 102, { flags: 'top', leftDepth: 30, rightDepth: 30 }],
                [-256.5, 0, -256.5, -25.65, { flags: 'left solid', leftDepth: 20, rightDepth: 20 }],
                [-256.5, -25.65, -182.206314, -0.431677 * 265.5, { flags: 'left solid', leftDepth: 20, rightDepth: 20, drawLeft: false, drawRight: false }],
                [-182.206314, -0.431677 * 265.5, 0, -0.570984 * 265.5, { flags: 'bottom solid', leftDepth: 20, rightDepth: 20, drawLeft: false, drawRight: false }]
            ],
            prefab: {
                models: [
                    {
                        name: 'Battlefield',
                        size: [256.5, 256.5, 256.5],
                        scale: [1, -1, 1],
                        position: [0, 0, 0]
                    },
                    {
                        name: 'Cube',
                        size: [70.5, 1, 10],
                        position: [-145.5, 102, 0]
                    },
                    {
                        name: 'Cube',
                        size: [70.5, 1, 10],
                        position: [145.5, 102, 0]
                    },
                    {
                        name: 'Cube',
                        size: [70.5, 1, 10],
                        position: [0, 204, 0]
                    },
                ]
            },
        },
        {
            name: 'Story',
            /*
              Camera Boundaries
              (-) CamLimit0N: (-126.00, 118.30)
              (-) CamLimit1N: (125.30, -49.70)

              Randall
              (-) Platform Width: (11.90)
              (L1) Track X-Min: (97.65)
              (L2) Track X-Max: (97.30)
              (L3) Track Y-Min: (-33.25)
              (L4) Track Y-Max: (-13.65)

              The corners of the path he moves are slightly rounded off over about 6 frames or so where he moves diagonally before completing the turn
            */
            blastLeft: -175.70,
            blastTop: 168.00,
            blastBottom: -91.00,
            blastRight: 173.60,
            anchors: [
                0, -20, 0.1,
                -10, 1, 0.1,
                10, 1, 0.1,
                0, 60, 0.3
            ],
            entrances: [
                -42.00, 26.60, true,
                42.00, 28.00, false,
                0.00, 46.90, true,
                0.00, 4.90, false
            ],
            scaleX: 3.75,
            scaleY: -3.75,
            spawns: [
                0, 52.50, true
            ],
            symmetric: true,
            pivot: 0,
            elements: [
                [-54.6000, -47.2450, { flags: 'bottom' }],
                [-54.6000, -47.2450, -52.6750, -45.3200, { flags: 'left' }],
                [-52.6750, -45.3200, -52.6750, -30.8000, { flags: 'left' }],
                [-52.6750, -30.8000, -53.7250, -29.7500, { flags: 'left' }],
                [-53.7250, -29.7500, -53.7250, -28.0000, { flags: 'left' }],
                [-53.7250, -28.0000, -52.6750, -26.9500, { flags: 'left' }],
                [-52.6750, -26.9500, -52.6750, -12.2500, { flags: 'left' }],
                [-52.6750, -12.2500, -56.0000, -6.6500, { flags: 'left' }],
                [-56.0000, -6.6500, -56.0000, -3.5000, { flags: 'left' }],
                [-56.0000, -3.5000, -39.2000, 0.0000, { flags: 'top leftGrabbable solid' }],
                [-39.2000, 0.0000, { flags: 'top solid' }],
                [-15.75, 42.00, { flags: 'top' }],
                [-59.50, 23.45, -28.00, 23.45, { flags: 'top' }]
            ]
        },
        /*{
          name: 'Flatzone',
          /*
            Camera Boundaries
            (-) CamLimit0N: (-170.00, 114.00)
            (-) CamLimit1N: (170.00, -80.00)
          * /
          blastLeft: -246.00,
          blastTop: 188.00,
          blastBottom: -140.00,
          blastRight: 246.00,
          anchors: [
            0, -20, 0.1,
            -10, 1, 0.1,
            10, 1, 0.1,
            0, 60, 0.3
          ],
          entrances: [
            -60.00, 10.00, true,
            60.00, 10.00, false,
            -20.00, 10.00, true,
            20.00, 10.00, false,
          ],
          scaleX: 3.75,
          scaleY: -3.75,
          spawns: [
            16.00, 45.00, true,
            -50.00, 45.00, false,
            50.00, 45.00, true,
            -15.00, 45.00, false,
          ],
          symmetric: true,
          pivot: 0,
          elements: [
            [-47.4702, -55.3870, { flags: 'bottom' }],
            [-47.4702, -55.3870, -53.7742, -54.2572, { flags: 'bottom' }],
            [-53.7742, -54.2572, -61.4170, -47.3683, { flags: 'left' }],
            [-61.4170, -47.3683, -65.8426, -31.3573, { flags: 'left' }],
            [-65.8426, -31.3573, -65.7957, -20.4538, { flags: 'left' }],
            [-65.7957, -20.4538, -85.5606, -10.5094, { flags: 'left' }],
            [-85.5606, -10.5094, -85.5606, 0.0000, { flags: 'left' }],
            [-85.5606, 0.0000, { flags: 'top solid leftGrabbable rightGrabbable' }],
          ]
        },*/
        {
            name: 'Fountain',
            /*
              Camera Boundaries
              (-) CamLimit0N: (-123.75, 112.50)
              (-) CamLimit1N: (123.75, -84.75)

              Platforms
              (-) Left (Start): (-49.50, 16.125)
              (-) Left (Start): (-21.00, 16.125)
              (3) Left (Highest): (-49.50, 27.375)
              (4) Left (Highest): (-21.00, 27.375)
              (5) Left (Lowest): (-49.50, 12.375)
              (6) Left (Lowest): (-21.00, 12.375)
              (-) Right (Start): (21.00, 22.125)
              (-) Right (Start): (49.50, 22.125)
              (7) Right (Highest): (21.00, 27.375)
              (8) Right (Highest): (49.50, 27.375)
              (9) Right (Lowest): (21.00, 12.375)
              (10) Right (Lowest): (49.50, 12.375)

              Side platforms stop within multiples of 0.250 between 12.375-27.375?
            */
            blastLeft: -198.75,
            blastTop: 202.50,
            blastBottom: -146.25,
            blastRight: 198.75,
            anchors: [
                0, -20, 0.1,
                -10, 1, 0.1,
                10, 1, 0.1,
                0, 60, 0.3
            ],
            entrances: [
                -41.25, 21.00, true,
                41.25, 27.00, false,
                0.00, 5.25, true,
                0.00, 48.00, false
            ],
            scaleX: 3.75,
            scaleY: -3.75,
            spawns: [
                0.00, 63.75, true
            ],
            symmetric: true,
            pivot: 0,
            elements: [
                [-8.6809, -71.8312, { flags: 'bottom' }],
                [-8.6809, -71.8312, -18.9105, -48.6670, { flags: 'left' }],
                [-18.9105, -48.6670, -41.1778, -41.9127, { flags: 'bottom' }],
                [-41.1778, -41.9127, -56.8736, -19.5537, { flags: 'left' }],
                [-56.8736, -19.5537, -63.2570, -4.3985, { flags: 'left' }],
                [-63.2570, -4.3985, -63.3500, 0.6214, { flags: 'left' }],
                [-63.3500, 0.6214, -53.5835, 0.6214, { flags: 'top solid leftGrabbable' }],
                [-53.5835, 0.6214, -51.2608, 0.0000, { flags: 'top solid' }],
                [-51.2608, 0.0000, { flags: 'top solid' }],
                [-14.25, 42.75, { flags: 'top' }],
                [-49.50, 16.125, -21.00, 16.125, { flags: 'top asymmetric', asymmetric: true }],
                [21.00, 22.125, 49.50, 22.125, { flags: 'top asymmetric', asymmetric: true }]
            ]
        },
        {
            name: 'Boombox',
            /*
              Camera Boundaries
              (-) CamLimit0N: (-165.00, 190.00)
              (-) CamLimit1N: (165.00, -81.00)

              Needs wind effect
            */
            blastLeft: -255.00,
            blastTop: 250.00,
            blastBottom: -123.00,
            blastRight: 255.00,
            anchors: [
                0, -20, 0.1,
                -10, 1, 0.1,
                10, 1, 0.1,
                0, 60, 0.3
            ],
            entrances: [
                0.00, 7.10, true,
                -46.59, 37.23, true,
                0.00, 58.52, false,
                47.38, 37.33, false
            ],
            scaleX: 3.75,
            scaleY: -3.75,
            spawns: [
                0.00, 84.225, true
            ],
            symmetric: true,
            pivot: 0,
            elements: [
                [-65.7610, -35.7543, { flags: 'bottom' }],
                [-65.7610, -35.7543, -76.3364, -11.0418, { flags: 'left' }],
                [-76.3364, -11.0418, -77.2700, 0.0100, { flags: 'left' }],
                [-77.2700, 0.0100, { flags: 'top solid leftGrabbable rightGrabbable' }],
                [-19.0188, 51.4264, { flags: 'top' }],
                [-61.3896, 30.1422, -31.7215, 30.1422, { flags: 'top' }]
            ]
        },
        {
            name: 'Longboat',
            blastLeft: -246.00,
            blastTop: 188.00,
            blastBottom: -140.00,
            blastRight: 246.00,
            anchors: [
                0, -20, 0.1,
                -10, 1, 0.1,
                10, 1, 0.1,
                0, 100, 0.3
            ],
            entrances: [
                -60.00, 10.00, true,
                60.00, 10.00, false,
                -20.00, 10.00, true,
                20.00, 10.00, false
            ],
            scaleX: 3.75,
            scaleY: -3.75,
            spawns: [
                16.00, 45.00, true,
                -50.00, 45.00, false,
                50.00, 45.00, true,
                -15.00, 45.00, false
            ],
            symmetric: true,
            pivot: 0,
            elements: [
                [-85.5606, 0.0000, { flags: 'top solid leftGrabbable rightGrabbable skip' }],
                [-85.5606, 0, -85.5606, 60 / -3.75, { flags: 'left solid', leftDepth: 20, rightDepth: 20 }],
                [-85.5606, 60 / -3.75, -275 / 3.75, 150 / -3.75, { flags: 'left solid', leftDepth: 20, rightDepth: 20 }],
                [-275 / 3.75, 150 / -3.75, -155 / 3.75, 250 / -3.75, { flags: 'left solid', leftDepth: 20, rightDepth: 20 }],
                [-156 / 3.75, 250 / -3.75, { flags: 'bottom solid', leftDepth: 20, rightDepth: 20 }],
                [-100 / 3.75, 0, { flags: 'decor top solid', leftDepth: 3, rightDepth: 3, alpha4: 0.7, drawLeft: false, drawRight: false }],
                [-85.5606, 0, -280 / 3.75, 0, { flags: 'decor top solid', leftDepth: 20, rightDepth: 7, alpha4: 0.7, alphaLeft: 0.7, drawRight: false }],
                [-280 / 3.75, 0, -200 / 3.75, 0, { flags: 'decor top solid', leftDepth: 7, rightDepth: 7, alpha4: 0.9, drawLeft: false, drawRight: false }],
                [-200 / 3.75, 0, -100 / 3.75, 0, { flags: 'decor top solid', leftDepth: 7, rightDepth: 3, alpha4: 0.9, drawLeft: false, drawRight: false }],
                [-85.5606, 60 / -3.75, -280 / 3.75, 0, { flags: 'decor', leftDepth: 20, rightDepth: 7, drawLeft: false, drawRight: false }],
                [-275 / 3.75, 150 / -3.75, -200 / 3.75, 0, { flags: 'decor', leftDepth: 20, rightDepth: 7, drawLeft: false, drawRight: false }],
                [-155 / 3.75, 250 / -3.75, -100 / 3.75, 0, { flags: 'decor', leftDepth: 20, rightDepth: 3, drawLeft: false, drawRight: false }]
            ]
        },
        {
            name: 'Not A Cloud',
            anchors: [
                0, -250, 0.6,
                -200, 1, 0.4,
                200, 1, 0.4,
                0, 50, 0.5
            ],
            entrances: [
                -200, 0, true,
                200, 0, false
            ],
            spawns: [0, -300],
            symmetric: true,
            pivot: 0,
            elements: [
                [-400, 80, -350, 80, { name: 'mover', asymmetric: true, flags: 'top' }],
                [-75, -180, { flags: 'top' }],
                [-225, 1, { flags: 'leftGrabbable rightGrabbable top solid blastZone' }],
                [-235, -90, -85, -90, { flags: 'top' }],
                [-225, 1, -225, 20, { flags: 'left solid' }],
                [-225, 20, -175, 100, { flags: 'left solid' }],
                [-175, 100, { flags: 'bottom solid' }]
            ],
            animations: [
                {
                    autostart: true,
                    repeat: true,
                    reverse: true,
                    duration: 300,
                    events: [
                        StageAnimationEvent('linear', 60, 180, '0', 400, 80)
                    ]
                }
            ]
        },
        {
            name: 'Trashville',
            anchors: [0, -400, 0.4, -325, 1, 0.2, 325, 1, 0.2, 0, 100, 0.3],
            entrances: [-250, 0, true, 250, 0, false],
            spawns: [0, -300],
            symmetric: true,
            pivot: 0,
            elements: [
                [-550, -120, -350, -120, { flags: 'top', asymmetric: true, leftDepth: 15, rightDepth: 15 }],
                [-300, 1, { flags: 'leftGrabbable rightGrabbable top solid blastZone', leftDepth1: 15, leftDepth2: 5, rightDepth1: 15, rightDepth2: 5 }],
                [-300, 1, -300, 25, { flags: 'left solid', leftDepth1: 15, rightDepth1: 15, leftDepth2: 5, rightDepth2: 5 }],
                [-300, 25, -200, 125, { flags: 'left solid', leftDepth1: 15, rightDepth1: 100, leftDepth2: 5, rightDepth2: 10 }],
                [-200, 125, { flags: 'bottom solid', leftDepth1: 100, rightDepth1: 100, leftDepth2: 10, rightDepth2: 10 }],
                [-300, 25, { flags: 'decor', leftDepth1: 15, leftDepth2: 5, rightDepth1: 15, rightDepth2: 5 }],
                // fence
                [-300, -15, { flags: 'decor !drawRight !drawLeft !drawBack', alpha1: 0.1, leftDepth1: -15, leftDepth2: 15, rightDepth1: -15, rightDepth2: 15 }],
                [-300, 1, { flags: 'decor !drawRight !drawLeft !drawBack', alpha1: 0.1, leftDepth1: -15, leftDepth2: 15, rightDepth1: -15, rightDepth2: 15 }],
                [-300, -15, -300, 1, { flags: 'decor !drawRight !drawLeft !drawBack', alpha1: 0.1, leftDepth1: -15, leftDepth2: 15, rightDepth1: -15, rightDepth2: 15 }],
                [-150, -15, -150, 1, { flags: 'decor !drawRight !drawLeft !drawBack', alpha1: 0.1, leftDepth1: -15, leftDepth2: 15, rightDepth1: -15, rightDepth2: 15 }],
                // stump
                [-50, 1, { flags: 'decor', alpha1: 0.1, leftDepth1: -15, leftDepth2: 5, rightDepth1: -15, rightDepth2: 5 }],
                [-50, -30, { flags: 'decor', alpha1: 0.1, leftDepth1: -15, leftDepth2: 5, rightDepth1: -15, rightDepth2: 5 }],
                [-50, 1, -50, -30, { flags: 'decor !drawLeft !drawRight', alpha1: 0.1, leftDepth1: -15, leftDepth2: 5, rightDepth1: -15, rightDepth2: 5 }]
            ],
            animations: [
                {
                    autostart: true,
                    repeat: true,
                    reverse: true,
                    duration: 480,
                    events: [
                        StageAnimationEvent('linear', 120, 300, '0', 350, -120)
                    ]
                }
            ]
        },
        {
            name: 'Pillars',
            anchors: [0, -450, 0.8, -425, 1, 0.4, 425, 1, 0.4, 0, 100, 0.5],
            entrances: [-325, 0, true, 325, 0, false],
            spawns: [0, -250],
            symmetric: true,
            pivot: 0,
            elements: [
                [-145, -110, 145, -110, { flags: 'top' }],
                [-375, 1, -125, 1, { flags: 'top solid leftGrabbable rightGrabbable blastZone' }],
                [-375, 1, -375, 20, { flags: 'left solid' }],
                [-375, 20, -225, 100, { flags: 'bottom solid' }],
                [-225, 100, -225, 500, { flags: 'left solid' }],
                [-225, 500, -175, 600, { flags: 'left solid' }],
                [-125, 1, -125, 500, { flags: 'right solid' }],
                [-125, 500, -175, 600, { flags: 'right solid' }]
            ]
        },
        {
            name: 'Great White',
            anchors: [0, -450, 0.8, -425, 1, 0.4, 425, 1, 0.4, 0, 100, 0.5],
            entrances: [-250, 0, true, 250, 0, false],
            spawns: [0, -300],
            symmetric: true,
            pivot: 0,
            elements: [
                [-145, -95, { flags: 'top' }],
                [-325, 1, -200, 1, { flags: 'top solid leftGrabbable blastZone' }],
                [-200, 1, -75, 20, { flags: 'top solid' }],
                [-325, 1, -325, 40, { flags: 'left solid' }],
                [-325, 40, -225, 75, { flags: 'bottom solid' }],
                [-225, 75, -75, 20, { flags: 'bottom' }],
                [-75, 20, { flags: 'top solid bottomless' }]
            ]
        },
        {
            name: 'Hangnail',
            anchors: [0, -450, 0.8, -325, 1, 0.4, 325, 1, 0.4, 0, 100, 0.5],
            entrances: [-175, -101, true, 175, -101, false],
            spawns: [0, -300],
            symmetric: true,
            pivot: 0,
            elements: [
                [-75, -160, { flags: 'top' }],
                [-285, -80, -140, -80, { flags: 'top' }],
                [-255, 0, -175, 8, { flags: 'leftGrabbable top solid blastZone' }],
                [-255, 0, -235, 120, { flags: 'left solid' }],
                [-235, 120, -215, 200, { flags: 'left solid' }],
                [-215, 200, { flags: 'bottom' }],
                [-175, 8, { flags: 'top solid' }]
            ]
        },
        {
            name: 'Low-fat Gravy',
            anchors: [0, -450, 0.8, -325, 1, 0.4, 325, 1, 0.4, 0, 100, 0.5],
            entrances: [-200, 0, true, 200, 0, false],
            spawns: [0, -300],
            symmetric: true,
            pivot: 0,
            blastLeft: -230 * 3.75,
            blastTop: -180 * 3.75,
            blastBottom: 111 * 3.75,
            blastRight: 230 * 3.75,
            elements: [
                [-329, 0, { flags: 'leftGrabbable rightGrabbable top solid blastZone' }],
                [-250, -25 * 3.75, -130, -25 * 3.75, { flags: 'top' }],
                [-329, 0, -329, 10, { flags: 'left solid' }],
                [-329, 10, -225, 100, { flags: 'left solid' }],
                [-225, 100, -175, 100, { flags: 'bottom solid' }],
                [-175, 99, 0, 200, { flags: 'bottom solid' }]
            ]
        },
        {
            name: 'Divided',
            anchors: [0, -450, 0.8, -325, 1, 0.4, 325, 1, 0.4, 0, 100, 0.5],
            entrances: [-175, 0, true, 175, 0, false],
            spawns: [0, -300],
            symmetric: true,
            pivot: 0,
            elements: [
                [-225, 1, -100, 1, { flags: 'leftGrabbable top solid blastZone' }],
                [-100, 1, -30, -20, { flags: 'top solid blastZone' }],
                [-30, -20, { flags: 'top solid blastZone' }],
                [-275, -120, -125, -120, { flags: 'top' }],
                [-225, 1, -225, 20, { flags: 'left solid' }],
                [-225, 20, -175, 100, { flags: 'left solid' }],
                [-176, 100, 176, 100, { flags: 'bottom solid' }]
            ]
        },
        {
            name: 'Satellite',
            anchors: [0, -450, 0.8, -325, 1, 0.4, 325, 1, 0.4, 0, 100, 0.5],
            entrances: [-275, -101, true, 275, -101, false],
            spawns: [0, -300],
            symmetric: true,
            pivot: 0,
            elements: [
                [-315, -100, -235, -100, { flags: 'leftGrabbable solid top blastZone', drawRight: false }],
                [-315, -100, -315, -85, { flags: 'left' }],
                [-315, -85, -295, -60, { flags: 'left' }],
                [-295, -60, -245, -60, { flags: 'bottom' }],
                [-245, -60, -235, -85, { flags: 'right' }],
                [-235, -100, -235, -85, { flags: 'right', drawRight: false }],
                [-235, -100, -125, -100, { flags: 'top blastZone', drawLeft: false }],
                [-145, 1, { flags: 'leftGrabbable rightGrabbable top solid blastZone' }],
                [-145, 1, -145, 40, { flags: 'left solid' }],
                [-145, 40, -105, 200, { flags: 'left solid' }],
                [-105, 200, { flags: 'bottom solid' }]
            ]
        },
        {
            name: 'Has Wall Bugs',
            anchors: [275, -450, 0.8, -50, 1, 0.4, 600, 1, 0.4, 275, 100, 0.5],
            entrances: [-100, 0, true, 650, 0, false],
            spawns: [275, -300],
            symmetric: true,
            pivot: 275,
            elements: [
                [-200, -200, -200, -400, { flags: 'right grounded' }],
                [-200, -200, -80, -160, { flags: 'top blastZone' }],
                [-80, -160, -80, -100, { flags: 'right' }],
                [200, 1, 200, -40, { flags: 'left grounded' }],
                [200, -40, { flags: 'top solid' }],
                [-150, 1, { flags: 'leftGrabbable rightGrabbable top solid blastZone' }],
                [-150, 1, -150, 3, { flags: 'left solid' }],
                [-150, 3, -140, 6, { flags: 'left solid' }],
                [-140, 6, { flags: 'bottom solid' }],
                [-150, 151, { flags: 'leftGrabbable rightGrabbable top solid' }],
                [-150, 151, -140, 156, { flags: 'left solid' }],
                [-140, 156, { flags: 'bottom solid' }]
            ]
        }
    ];
    return () => ({ Stage, StageElement, stages });
})();
const ImportControllers = (() => {
    'use strict';
    const connected = [];
    const { radian, angleX, angleY, computeAngle, preciseAngle, computeRadians } = ImportMath();
    const { addDirToIndex } = ImportTerminal();
    const snapDeg = 16; // degrees to snap to right angles on axes
    const deadZone = Math.pow(0.25, 2);
    const press = [];
    const last = [];
    const buttonList = ['attack', 'jump', 'special', 'grab', 'shield', 'shield2', 'shieldHard', 'shield2Hard', 'select', 'start', 'none', 'dup', 'ddown', 'dleft', 'dright'];
    const axisList = ['hmove', 'vmove', 'hright', 'vright', 'shield', 'shield2'];
    buttonList.forEach((name) => {
        press[name] = name + 'Press';
        last[name] = name + 'Last';
    });
    const nameToMapping = [
        { pattern: /Vendor: 1a34 Product: f705|1a34-f705-HuiJia/, mapping: 'HuiJia_gamecube' }
    ];
    const layouts = {
        standard: {
            buttons: ['attack', 'jump', 'special', 'jump', 'grab', 'grab', 'shield', 'shield2', 'select', 'start', 'none', 'none', 'dup', 'ddown', 'dleft', 'dright'],
            axes: ['hmove', 'vmove', 'hright', 'vright'],
            digitalShield: false
        },
        keyboard: {
            buttons: ['attack', 'jump', 'special', 'jump', 'grab', 'grab', 'shieldHard', 'shield2Hard', 'select', 'start', 'none', 'none', 'dup', 'ddown', 'dleft', 'dright'],
            axes: ['hmove', 'vmove', 'hright', 'vright'],
            digitalShield: true
        },
        HuiJia_gamecube: {
            buttons: ['jump', 'attack', 'special', 'jump', 'shieldHard', 'shield2Hard', 'none', 'grab', 'none', 'start', 'none', 'none', 'dup', 'dright', 'ddown', 'dleft'],
            axes: ['hmove', 'vmove', 'vright', 'shield', 'shield2', 'hright'],
            digitalShield: true,
            calibrate: true,
            range: 0.66
        },
        wiiu_gamecube: {
            buttons: ['attack', 'special', 'jump', 'jump', 'dleft', 'dright', 'ddown', 'dup', 'start', 'grab', 'shieldHard', 'shield2Hard'],
            axes: ['hmove', 'vmove', 'hright', 'vright', 'shield', 'shield2'],
            digitalShield: true,
            calibrate: true,
            range: 80
        }
    };
    const mapGamepad = (gamepad) => {
        if (layouts.hasOwnProperty(gamepad.mapping)) {
            console.log('Layout found for', gamepad.mapping);
            return layouts[gamepad.mapping];
        }
        for (let i = 0; i < nameToMapping.length; i++) {
            if (nameToMapping[i].pattern.test(gamepad.id)) {
                console.log('Guessed', gamepad.id, 'as', nameToMapping[i].mapping + '; Layout found');
                return layouts[nameToMapping[i].mapping];
            }
        }
        console.log('No layout found, using standard', gamepad.id + ',', gamepad.mapping);
        return layouts.standard;
    };
    // controller types?
    const CONTROLLER_NONE = 0;
    const CONTROLLER_WIRED = 1;
    const CONTROLLER_WIRELESS = 2;
    class GCGamepad {
        constructor(port) {
            // 0: << 4 = type
            // thanks massive
            //[1] [0]: A
            //    [1]: B
            //    [2]: X
            //    [3]: Y
            //    [4]: Left
            //    [5]: Right
            //    [6]: Down
            //    [7]: Up
            //[2] [0]: start
            //    [1]: z
            //    [2]: R button
            //    [3]: L Button
            //    [4]: not used
            //    [5]: not used
            //    [6]: not used
            //    [7]: not used
            this.buttons = [];
            this.axes = [];
            this.mapping = 'wiiu_gamecube';
            this.rawbuttons = 0;
            this.origins = new Uint8Array(6);
            this.type = 0;
            this.port = -1;
            this.connected = false;
            this.controller = null;
            this.port = port;
            for (let i = 0; i < 12; i++) {
                this.buttons.push({
                    pressed: false,
                    value: 0
                });
            }
            for (let i = 0; i < 6; i++) {
                this.axes.push(0);
            }
        }
        update(buf) {
            const offset = this.port * 9 + 1;
            const type = buf[offset] >> 4;
            if (type === 0) {
                if (this.type !== 0) {
                    console.log('controller ' + this.port + ' disconnected');
                }
                if (this.connected) {
                    this.connected = false;
                    gcDisconnecting.push(this);
                }
                this.type = type;
                return;
            }
            if (this.type === 0) {
                console.log('controller ' + this.port + ' connected', buf[offset], buf[offset + 1]);
                for (let i = 0; i < 6; i++) {
                    this.origins[i] = buf[offset + 3 + i];
                }
                console.log(buf.slice(offset, offset + 9));
                if (!this.connected) {
                    this.connected = true;
                    gcConnecting.push(this);
                }
            }
            // console.log(buf.slice(offset, offset + 9))
            this.type = type;
            this.rawbuttons = buf[offset + 1] | (buf[offset + 2] << 8);
            for (let i = 0; i < 12; i++) {
                this.buttons[i].value = (this.rawbuttons & (1 << i)) !== 0 ? 1 : 0;
            }
            for (let i = 0; i < 6; i++) {
                this.axes[i] = buf[offset + 3 + i] - this.origins[i];
            }
            this.axes[1] = -this.axes[1];
            this.axes[3] = -this.axes[3];
        }
    }
    const gcGamepads = [];
    const gcConnecting = [];
    const gcDisconnecting = [];
    let usb = null;
    let adapterWriter = null;
    let adapterReader = null;
    let device = null;
    const disconnect = () => __awaiter(this, void 0, void 0, function* () {
        for (let i = 0; i < device.interfaces.length; i++) {
            const iface = device.interfaces[i];
            yield new Promise((resolve, reject) => {
                iface.release(true, (err) => {
                    console.log(err);
                    !err ? resolve() : reject();
                });
            });
            try {
                iface.attachKernelDriver();
            }
            catch (e) {
                console.log('Kernel driver attach error:', e);
            }
        }
        console.log('Done disconnecting');
    });
    window.disconnectAdapter = disconnect;
    addEventListener('unload', () => {
        disconnect();
    });
    const connectAdapter = () => {
        usb = require('usb');
        device = usb.findByIds(0x057e, 0x0337);
        if (device === undefined) {
            device = null;
            return;
        }
        console.log('connected device', device);
        window.adapter = device;
        device.open();
        console.log('device opened');
        for (let i = 0; i < device.interfaces.length; i++) {
            const iface = device.interfaces[i];
            try {
                if (iface.isKernelDriverActive()) {
                    iface.detachKernelDriver();
                }
            }
            catch (e) {
                console.log('Kernel driver detatch error:', e);
            }
            console.log('detached');
            iface.claim();
            console.log('claimed');
            for (let ei = 0; ei < iface.endpoints.length; ei++) {
                const endpoint = iface.endpoints[ei];
                if (endpoint.direction === 'in') {
                    adapterReader = endpoint;
                }
                else {
                    adapterWriter = endpoint;
                }
            }
        }
        if (adapterReader === null || adapterWriter === null) {
            console.log('Error getting adapter reader/writer', device);
            return;
        }
        const b = Buffer.allocUnsafe(1);
        b.writeInt8(0x13, 0, true);
        adapterWriter.transfer(b, err => {
            console.log('wrote to adapter', err);
            // disconnect()
        });
        let st = performance.now();
        for (let i = 0; i < 4; i++) {
            gcGamepads.push(new GCGamepad(i));
        }
        const rb = Buffer.allocUnsafe(37);
        const pollAdapter = err => {
            adapterReader.transferBuffer(rb, pollAdapter);
            for (let i = 0; i < 4; i++) {
                gcGamepads[i].update(rb);
            }
        };
        adapterReader.transferBuffer(rb, pollAdapter);
    };
    // class CircleBuffer implements InputBuffer {
    // }
    class Replay {
        constructor(controller) {
            this.controller = controller;
            this.x = controller.hook.x;
            this.y = controller.hook.y;
            this.face = controller.hook.face;
            this.buffer = new ReplayBuffer();
            this.controller.buffer = this.buffer;
        }
        play() {
            this.controller.buffer = this.buffer;
            this.controller.hook.reset();
            this.controller.hook.x = this.x;
            this.controller.hook.y = this.y - 0.1;
            this.controller.hook.face = this.face;
            this.controller.hook.airborne = true;
            this.buffer.index = 0;
            this.controller.playing = true;
        }
        pause() {
            this.controller.playing = !this.controller.playing;
        }
    }
    class ReplayBuffer extends Array {
        constructor() {
            super(...arguments);
            this.index = 0;
        }
        next() {
            return this[this.index++];
        }
        peek() {
            return this[this.index];
        }
        empty() {
            return this.index >= this.length;
        }
    }
    class NetBuffer extends Array {
        constructor(delay) {
            super(0);
            this.index = 0;
            for (let i = 0; i < delay; i++) {
                this.push(new InputFrame());
            }
        }
        next() {
            return this[this.index++];
        }
        peek() {
            return this[this.index];
        }
        empty() {
            return this.index >= this.length;
        }
    }
    class InputFrame {
        constructor() {
            this.attack = 0;
            this.jump = 0;
            this.special = 0;
            this.grab = 0;
            this.shield = 0;
            this.shield2 = 0;
            this.shieldHard = 0;
            this.shield2Hard = 0;
            this.select = 0;
            this.start = 0;
            this.none = 0;
            this.dup = 0;
            this.ddown = 0;
            this.dleft = 0;
            this.dright = 0;
            this.hmove = 0;
            this.vmove = 0;
            this.hright = 0;
            this.vright = 0;
            this.port = 0;
        }
        serialize(buffer, i) {
            buffer[i + 0] = this.attack;
            buffer[i + 1] = this.jump;
            buffer[i + 2] = this.special;
            buffer[i + 3] = this.grab;
            buffer[i + 4] = this.shield;
            buffer[i + 5] = this.shield2;
            buffer[i + 6] = this.shieldHard;
            buffer[i + 7] = this.shield2Hard;
            buffer[i + 8] = this.select;
            buffer[i + 9] = this.start;
            buffer[i + 10] = this.none;
            buffer[i + 11] = this.dup;
            buffer[i + 12] = this.ddown;
            buffer[i + 13] = this.dleft;
            buffer[i + 14] = this.dright;
            buffer[i + 15] = this.hmove;
            buffer[i + 16] = this.vmove;
            buffer[i + 17] = this.hright;
            buffer[i + 18] = this.vright;
            buffer[i + 19] = this.port;
        }
        static deserialize(buffer, i) {
            const frame = new InputFrame();
            frame.attack = buffer[i + 0];
            frame.jump = buffer[i + 1];
            frame.special = buffer[i + 2];
            frame.grab = buffer[i + 3];
            frame.shield = buffer[i + 4];
            frame.shield2 = buffer[i + 5];
            frame.shieldHard = buffer[i + 6];
            frame.shield2Hard = buffer[i + 7];
            frame.select = buffer[i + 8];
            frame.start = buffer[i + 9];
            frame.none = buffer[i + 10];
            frame.dup = buffer[i + 11];
            frame.ddown = buffer[i + 12];
            frame.dleft = buffer[i + 13];
            frame.dright = buffer[i + 14];
            frame.hmove = buffer[i + 15];
            frame.vmove = buffer[i + 16];
            frame.hright = buffer[i + 17];
            frame.vright = buffer[i + 18];
            frame.port = buffer[i + 19];
            return frame;
        }
    }
    InputFrame.frameSize = 20;
    InputFrame.byteLength = InputFrame.frameSize * Float64Array.BYTES_PER_ELEMENT;
    class Controller {
        constructor(gamepad) {
            this.portNumber = -1;
            this.gamepad = null;
            this.hook = null;
            this.character = null;
            this.color = null;
            this.team = 0;
            this.name = null;
            this.tag = null;
            this.buttonMap = null;
            this.axisMap = null;
            this.digitalShield = true;
            this.calibrate = false;
            this.debugging = false;
            this.startIndex = -1;
            this.startFrame = -1;
            this.recording = false;
            this.playing = false;
            this.buffer = null;
            this.replay = null;
            this.wait = false;
            this.polling = true;
            // eventually, move to a system that is sane?
            // oooor.. leave it like this forever and sweep it under a rug
            this.attack = 0;
            this.attackPress = false;
            this.attackLast = false;
            this.jump = 0;
            this.jumpPress = false;
            this.jumpLast = false;
            this.special = 0;
            this.specialPress = false;
            this.specialLast = false;
            this.grab = 0;
            this.grabPress = false;
            this.grabLast = false;
            this.shield = 0;
            this.shieldPress = false;
            this.shieldLast = false;
            this.shieldHard = 0;
            this.shieldHardPress = false;
            this.shieldHardLast = false;
            this.shield2 = 0;
            this.shield2Press = false;
            this.shield2Last = false;
            this.shield2Hard = 0;
            this.shield2HardPress = false;
            this.shield2HardLast = false;
            this.select = 0;
            this.selectPress = false;
            this.selectLast = false;
            this.start = 0;
            this.startPress = false;
            this.startLast = false;
            this.dup = 0;
            this.dupPress = false;
            this.dupLast = false;
            this.ddown = 0;
            this.ddownPress = false;
            this.ddownLast = false;
            this.dleft = 0;
            this.dleftPress = false;
            this.dleftLast = false;
            this.dright = 0;
            this.drightPress = false;
            this.drightLast = false;
            this.none = 0;
            this.nonePress = false;
            this.noneLast = false;
            this.axisRange = 1;
            this.hmove = 0;
            this.hmovemin = -1;
            this.hmovemax = 1;
            this.vmove = 0;
            this.vmovemin = -1;
            this.vmovemax = 1;
            this.hright = 0;
            this.hrightmin = -1;
            this.hrightmax = 1;
            this.vright = 0;
            this.vrightmin = -1;
            this.vrightmax = 1;
            this.shieldmin = 0;
            this.shieldmax = 1;
            this.shield2min = 0;
            this.shield2max = 1;
            this.left = 0;
            this.hardleft = 0;
            this.hardleftLast = 0;
            this.right = 0;
            this.hardright = 0;
            this.hardrightLast = 0;
            this.up = 0;
            this.hardup = 0;
            this.hardupLast = 0;
            this.down = 0;
            this.harddown = 0;
            this.harddownLast = 0;
            this.rleft = 0;
            this.rright = 0;
            this.rup = 0;
            this.rdown = 0;
            if (!gamepad) {
                return;
            }
            this.gamepad = gamepad;
            const layout = mapGamepad(gamepad);
            this.startIndex = layout.buttons.indexOf('start');
            this.buttonMap = layout.buttons;
            this.axisMap = layout.axes;
            this.digitalShield = layout.digitalShield;
            if (layout.hasOwnProperty('calibrate')) {
                this.calibrate = true;
                if (layout.hasOwnProperty('range')) {
                    this.axisRange = layout.range;
                    this.hmovemin = -this.axisRange;
                    this.hmovemax = this.axisRange;
                    this.vmovemin = -this.axisRange;
                    this.vmovemax = this.axisRange;
                    this.hrightmin = -this.axisRange;
                    this.hrightmax = this.axisRange;
                    this.vrightmin = -this.axisRange;
                    this.vrightmax = this.axisRange;
                    this.shieldmax = this.axisRange;
                    this.shield2max = this.axisRange;
                }
            }
        }
        getFrame() {
            const frame = new InputFrame();
            frame.port = this.portNumber;
            const gamepad = this.gamepad;
            const buttonMap = this.buttonMap;
            for (let i = 0; i < buttonMap.length; i++) {
                const name = buttonMap[i];
                frame[name] = Math.max(gamepad.buttons[i].value, frame[name]);
            }
            const axisMap = this.axisMap;
            for (let i = 0; i < axisMap.length; i++) {
                const name = axisMap[i];
                let v = gamepad.axes[i];
                if (this.calibrate) {
                    if (v < 0) {
                        let min = this[name + 'min'];
                        if (v < min) {
                            min = v;
                            this[name + 'min'] = v;
                        }
                    }
                    else if (v > 0) {
                        let max = this[name + 'max'];
                        if (v > max) {
                            max = v;
                            this[name + 'max'] = v;
                        }
                    }
                    if (name === 'shield' || name === 'shield2') {
                        // change to a 0-1 range
                        v = (v - this[name + 'min']) / (this[name + 'max'] - this[name + 'min']);
                        if (v < 0.25) {
                            v = 0;
                        }
                    }
                    else if (v < 0) {
                        v = v / -this[name + 'min'];
                    }
                    else {
                        v = v / this[name + 'max'];
                    }
                }
                frame[name] = v;
            }
            return frame;
        }
        poll() {
            // TODO: this entire thing needs to be optimized, apparently
            const frame = this.getFrame();
            if (frame.hmove * frame.hmove + frame.vmove * frame.vmove < deadZone) {
                frame.hmove = 0;
                frame.vmove = 0;
            }
            else {
                // should this also be done with the right stick? Probably not necessary?
                let angle = computeAngle(-frame.hmove, frame.vmove);
                // this could be done a prettier way, but this is the easy and probably faster way
                if (angle > 360 - snapDeg || angle < snapDeg) {
                    angle = 0;
                    frame.hmove = Math.sqrt(frame.hmove * frame.hmove + frame.vmove * frame.vmove);
                    frame.vmove = 0;
                }
                else if (angle > 180 - snapDeg && angle < 180 + snapDeg) {
                    angle = 180;
                    frame.hmove = -Math.sqrt(frame.hmove * frame.hmove + frame.vmove * frame.vmove);
                    frame.vmove = 0;
                }
                else if (angle > 90 - snapDeg && angle < 90 + snapDeg) {
                    angle = 90;
                    frame.vmove = -Math.sqrt(frame.hmove * frame.hmove + frame.vmove * frame.vmove);
                    frame.hmove = 0;
                }
                else if (angle > 270 - snapDeg && angle < 270 + snapDeg) {
                    angle = 270;
                    frame.vmove = Math.sqrt(frame.hmove * frame.hmove + frame.vmove * frame.vmove);
                    frame.hmove = 0;
                }
                if (frame.hmove * frame.hmove + frame.vmove * frame.vmove > 1) {
                    // normalize if the distance is > 1
                    frame.hmove = angleX(angle);
                    frame.vmove = -angleY(angle);
                }
            }
            // console.log(frame.hmove, frame.vmove)
            return frame;
        }
        waiting() {
            return this.playing && this.wait && this.buffer.empty();
        }
        update() {
            let frame = null;
            if (!this.playing) {
                frame = this.poll();
                if (this.recording) {
                    this.buffer.push(frame);
                }
            }
            else {
                if (!this.buffer.empty()) {
                    frame = this.buffer.next();
                    if (this.recording) {
                        this.buffer.push(this.poll());
                    }
                }
                else {
                    frame = this.poll();
                    this.playing = false;
                }
            }
            this.step(frame);
        }
        step(frame) {
            if (frame === undefined) {
                console.trace('hyuh');
            }
            this.attackPress = false;
            this.jumpPress = false;
            this.specialPress = false;
            this.grabPress = false;
            this.shieldPress = false;
            this.shield2Press = false;
            this.shieldHardPress = false;
            this.shield2HardPress = false;
            this.selectPress = false;
            this.startPress = false;
            this.nonePress = false;
            this.dupPress = false;
            this.ddownPress = false;
            this.dleftPress = false;
            this.drightPress = false;
            for (let i = 0; i < buttonList.length; i++) {
                const name = buttonList[i];
                if (!this[last[name]] && frame[name] > 0) {
                    this[press[name]] = true;
                    this[last[name]] = true;
                }
            }
            this.attack = frame.attack;
            this.jump = frame.jump;
            this.special = frame.special;
            this.grab = frame.grab;
            this.shield = frame.shield;
            this.shield2 = frame.shield2;
            this.shieldHard = frame.shieldHard;
            this.shield2Hard = frame.shield2Hard;
            this.select = frame.select;
            this.start = frame.start;
            this.none = frame.none;
            this.dup = frame.dup;
            this.ddown = frame.ddown;
            this.dleft = frame.dleft;
            this.dright = frame.dright;
            this.hmove = frame.hmove;
            this.vmove = frame.vmove;
            this.hright = frame.hright;
            this.vright = frame.vright;
            if (this.shield2Hard) {
                this.shield2 = 1;
            }
            if (this.shieldHard) {
                this.shield = 1;
            }
            if (!this.digitalShield) {
                this.shieldHardPress = false;
                this.shield2HardPress = false;
                if (!this.shieldHardLast && this.shield > 0.95) {
                    this.shieldHardPress = true;
                    this.shieldHardLast = true;
                }
                if (!this.shield2HardLast && this.shield2 > 0.95) {
                    this.shield2HardPress = true;
                    this.shield2HardLast = true;
                }
                this.shield = Math.max(this.shield, this.shield2);
            }
            else {
                if (this.shieldHard) {
                    if (!this.shieldPress && this.shieldHardPress) {
                        this.shieldPress = true;
                        this.shieldLast = true;
                    }
                    if (!this.shield2Press && this.shield2HardPress) {
                        this.shieldPress = true;
                        this.shield2Last = true;
                    }
                }
                if (this.shield > 0 && !this.shieldLast) {
                    this.shieldPress = true;
                    this.shieldLast = true;
                }
                if (this.shield2 > 0 && !this.shield2Last) {
                    this.shield2Press = true;
                    this.shield2Last = true;
                }
            }
            for (let i = 0; i < buttonList.length; i++) {
                this[last[buttonList[i]]] = this[buttonList[i]];
            }
            if (!this.digitalShield) {
                if (this.shieldHardLast && this.shield <= 0.9) {
                    this.shieldHardLast = false;
                }
                if (this.shield2HardLast && this.shield2 <= 0.9) {
                    this.shield2HardLast = false;
                }
            }
            else {
                this.shieldLast = this.shield > 0;
                this.shield2Last = this.shield2 > 0;
            }
            this.shield = Math.max(0, this.shield, this.shield2);
            if (this.shield2Press) {
                this.shieldPress = true;
            }
            if (this.shield2HardPress) {
                this.shieldHardPress = true;
            }
            const tapDistance = 0.75;
            const untapDistance = 0.3;
            // press values: only one will have a value, rest will always be zero; non-zero (1) if in a direction, 2 if changed this frame
            const up = this.vmove < 0 && Math.abs(this.vmove) > Math.abs(this.hmove) - 0.1;
            const down = this.vmove > 0 && Math.abs(this.vmove) > Math.abs(this.hmove) - 0.1;
            const left = this.hmove < 0 && Math.abs(this.vmove) < Math.abs(this.hmove) - 0.1;
            const right = this.hmove > 0 && Math.abs(this.vmove) < Math.abs(this.hmove) - 0.1;
            const rup = this.vright < -untapDistance && Math.abs(this.vright) > Math.abs(this.hright);
            const rdown = this.vright > untapDistance && Math.abs(this.vright) > Math.abs(this.hright);
            const rleft = this.hright < -untapDistance && Math.abs(this.vright) < Math.abs(this.hright);
            const rright = this.hright > untapDistance && Math.abs(this.vright) < Math.abs(this.hright);
            // 2 = frame it changes to this direction
            // 1 = direction is held
            this.up = this.up && up ? 1 : this.up === 0 && up ? 2 : 0;
            this.down = this.down && down ? 1 : this.down === 0 && down ? 2 : 0;
            this.left = this.left && left ? 1 : this.left === 0 && left ? 2 : 0;
            this.right = this.right && right ? 1 : this.right === 0 && right ? 2 : 0;
            this.rup = this.rup && rup ? 1 : this.rup === 0 && rup ? 2 : 0;
            this.rdown = this.rdown && rdown ? 1 : this.rdown === 0 && rdown ? 2 : 0;
            this.rleft = this.rleft && rleft ? 1 : this.rleft === 0 && rleft ? 2 : 0;
            this.rright = this.rright && rright ? 1 : this.rright === 0 && rright ? 2 : 0;
            const tapTime = 3;
            if (this.hardupLast > 0) {
                this.hardupLast--;
            }
            if (this.hardup > 0) {
                this.hardup--;
                if (this.vmove > -tapDistance) {
                    this.hardup = 0;
                }
            }
            if (this.vmove > -untapDistance) {
                this.hardupLast = tapTime;
            }
            if (this.hardupLast && this.vmove < -tapDistance) {
                this.hardup = 6;
            }
            if (this.hardup) {
                this.hardupLast = 0;
            }
            if (this.harddownLast > 0) {
                this.harddownLast--;
            }
            if (this.harddown > 0) {
                this.harddown--;
                if (this.vmove < tapDistance) {
                    this.harddown = 0;
                }
            }
            if (this.vmove < untapDistance) {
                this.harddownLast = tapTime;
            }
            if (this.harddownLast && this.vmove > tapDistance) {
                this.harddown = 6;
            }
            if (this.harddown) {
                this.harddownLast = 0;
            }
            if (this.hardleftLast > 0) {
                this.hardleftLast--;
            }
            if (this.hardleft > 0) {
                this.hardleft--;
                if (this.hmove > -tapDistance) {
                    this.hardleft = 0;
                }
            }
            if (this.hmove > -untapDistance) {
                this.hardleftLast = tapTime;
            }
            if (this.hardleftLast && this.hmove < -tapDistance) {
                this.hardleft = 6;
            }
            if (this.hardleft) {
                this.hardleftLast = 0;
            }
            if (this.hardrightLast > 0) {
                this.hardrightLast--;
            }
            if (this.hardright > 0) {
                this.hardright--;
                if (this.hmove < tapDistance) {
                    this.hardright = 0;
                }
            }
            if (this.hmove < untapDistance) {
                this.hardrightLast = tapTime;
            }
            if (this.hardrightLast && this.hmove > tapDistance) {
                this.hardright = 6;
            }
            if (this.hardright) {
                this.hardrightLast = 0;
            }
        }
        angle() {
            return computeAngle(this.hmove, this.vmove);
        }
        radians() {
            return computeRadians(this.hmove, this.vmove);
        }
        rangle() {
            return computeAngle(this.hright, this.vright);
        }
        angleX() {
            return angleX(computeAngle(this.hmove, this.vmove));
        }
        angleY() {
            return angleY(computeAngle(this.hmove, this.vmove));
        }
    }
    const keyboardGamepads = [];
    let keyboardControllers = [];
    /**
     * button binds: keys corresponding to buttons
     * axis binds: keys corresponding to the axes:
     * * left, right, up, down, rleft, rright, rup, rdown, tilt mod
    */
    const KeyboardGamepad = function (buttonBinds, axisBinds) {
        let tilt = 1;
        this.mapping = 'keyboard';
        this.buttons = buttonBinds.map(() => ({ pressed: false, value: 0 }));
        this.axes = [0, 0, 0, 0];
        this.keydown = function (key) {
            let index = buttonBinds.indexOf(key);
            if (index >= 0) {
                this.buttons[index].value = 1;
                this.buttons[index].pressed = true;
                return true;
            }
            if ((index = axisBinds.indexOf(key)) >= 0) {
                if (index === 8) {
                    tilt = 0.65;
                }
                else {
                    if (index % 2 === 0) {
                        this.axes[index / 2] = -tilt + (index === 2 || index === 3 ? 0.05 : 0);
                    }
                    else {
                        this.axes[(index - 1) / 2] = tilt + (index === 2 || index === 3 ? 0.05 : 0);
                    }
                }
                return true;
            }
        };
        this.keyup = function (key) {
            let index = buttonBinds.indexOf(key);
            if (index >= 0) {
                this.buttons[index].value = 0;
                this.buttons[index].pressed = false;
                return true;
            }
            if ((index = axisBinds.indexOf(key)) >= 0) {
                if (index === 8) {
                    tilt = 1;
                }
                else {
                    if (index % 2 === 0) {
                        if (this.axes[index / 2] < 0) {
                            this.axes[index / 2] = 0;
                        }
                    }
                    else {
                        if (this.axes[(index - 1) / 2] > 0) {
                            this.axes[(index - 1) / 2] = 0;
                        }
                    }
                }
                return true;
            }
        };
    };
    const usingSet = new WeakSet();
    const unconnected = [];
    const checkConnections = (create, destroy) => {
        if (gcConnecting.length > 0) {
            for (let i = 0; i < gcConnecting.length; i++) {
                let controller = new Controller(gcConnecting[i]);
                gcConnecting[i].controller = controller;
                create(controller);
            }
            gcConnecting.length = 0;
        }
        if (gcDisconnecting.length > 0) {
            for (let i = 0; i < gcDisconnecting.length; i++) {
                destroy(gcDisconnecting[i].controller);
            }
            gcDisconnecting.length = 0;
        }
        const pads = navigator.getGamepads();
        for (let i = 0; i < pads.length; i++) {
            if (pads[i] && !usingSet.has(pads[i])) {
                usingSet.add(pads[i]);
                console.log(pads[i].id + ' found, mapping=' + (pads[i].mapping ? pads[i].mapping : 'unknown'));
                unconnected.push(new Controller(pads[i]));
            }
        }
        for (let i = 0; i < unconnected.length; i++) {
            const controller = unconnected[i];
            if (controller.gamepad.buttons[controller.startIndex].pressed) {
                console.log('Controller connected');
                controller.start = controller.gamepad.buttons[controller.startIndex].value;
                // controller.startLast = true
                create(controller);
                // remove from unconnected list
                unconnected.splice(i, 1);
                i--;
            }
        }
    };
    const readyKeyboardControllers = () => {
        // buttonMap = ['attack', 'jump', 'special', 'jump', 'grab', 'grab', 'shield', 'shield', 'select', 'start', /*movedown*/'jump', /*rightdown*/'attack', 'dup', 'ddown', 'dleft', 'dright'],
        // axisMap = ['hmove', 'vmove', 'hright', 'vright'],
        // axes 65, 68, 87, 83, 75, 186, 79, 76, 16
        // btns    j  p  m  sp ,   e  '   q esc ent r  f  1  2  3  4
        // buttons 74 80 77 32 188 69 222 81 27 13  82 70 49 50 51 52
        keyboardGamepads.push(new KeyboardGamepad([74, 80, 77, 32, 188, 69, 222, 81, 27, 8, 82, 70, 49, 50, 51, 52], [65, 68, 87, 83, 75, navigator.userAgent.toString().indexOf('AppleWebKit') !== -1 ? 186 : 59, 79, 76, 16]), new KeyboardGamepad([96, 100, 97, 106, 99, 99, 107, 110, 45, 46, 102, 98, 36, 33, 35, 34], [37, 39, 38, 40, 103, 105, 111, 104, 17]));
        keyboardControllers = keyboardGamepads.map(item => new Controller(item));
        unconnected.push(...keyboardControllers);
    };
    if (window.hasOwnProperty('require')) {
        // running in Electron, probably
        connectAdapter();
    }
    return () => ({ connected, Controller, checkConnections, keyboardGamepads, readyKeyboardControllers, ReplayBuffer, Replay, InputFrame, NetBuffer });
})();
const ImportAnimation = (() => {
    'use strict';
    const { radian, angleX, angleY, computeAngle, preciseAngle } = ImportMath();
    const { playAudio } = ImportAudio();
    // init
    let dbg = console;
    let Effects = null;
    let constants = null;
    let frame = null;
    let init = (_dbg, _Effects, _constants, _frame) => {
        dbg = _dbg;
        Effects = _Effects;
        constants = _constants;
        frame = _frame;
    };
    const map = o => {
        if (!o) {
            return new Map();
        }
        const keys = Object.keys(o);
        const m = new Map();
        for (const key of keys) {
            m.set(key, o[key]);
        }
        return m;
    };
    class Status {
        constructor() {
            this.duration = 0;
            this.startDuration = 0;
            this.repeat = 0;
            this.repeatDelay = 0;
            this.defaultDuration = 1;
            this.defaultRepeat = 0;
            this.source = null;
        }
        init() {
            this.duration = this.startDuration = this.repeatDelay = this.defaultDuration;
            this.defaultRepeat = this.defaultRepeat;
            this.source = null;
        }
        expire(entity) {
        }
        apply(entity, source, duration) {
            this.duration = this.startDuration = this.repeatDelay = duration;
            this.source = source;
        }
        tick(entity) {
            this.duration--;
            if (this.duration === 0) {
                this.expire(entity);
                if (this.repeat > 0) {
                    this.repeat--;
                    this.duration = this.repeatDelay;
                }
                else {
                    entity.status.delete(this);
                }
            }
        }
    }
    class DelayHitStatus extends Status {
        constructor() {
            super(...arguments);
            this.defaultDuration = 30;
            this.bubble = null;
        }
        expire(entity) {
            // console.log('shine expired')
            // console.log(this.source)
            addHitbubble(this.source, this.bubble, entity.x + entity.headbubble.x + this.bubble.x, entity.y + entity.headbubble.y + this.bubble.y, entity.x + entity.headbubble.x + this.bubble.x, entity.y + entity.headbubble.y + this.bubble.y);
        }
        tick(entity) {
            // console.log('shine ticked')
            if (entity.activeAnimation.type === 5 || entity.animation === 'ledgehang') {
                // console.log('shielding')
                this.expire(entity);
                entity.status.delete(this);
                return;
            }
            super.tick(entity);
        }
    }
    const statusMap = map({
        delay: DelayHitStatus
    });
    const statusFactory = (name) => {
        return new (statusMap.get(name));
    };
    const hurtbubbles = [];
    const Hurtbubble = function (owner, i1, i2, ik) {
        this.owner = owner;
        this.x = 0;
        this.y = 0;
        this.x2 = 0;
        this.y2 = 0;
        this.i1 = i1;
        this.i2 = i2;
        this.radius = 1;
        this.armor = false;
        this.type = 1;
        this.ik = ik;
        hurtbubbles.push(this);
    };
    Hurtbubble.prototype = {
        hitbubble: function (index) {
            return (Math.sqrt(Math.pow(this.x - hitbubbles[index].x, 2) + Math.pow(this.y - hitbubbles[index].y, 2)) < this.radius + hitbubbles[index].radius);
        },
        // hitBy: function (index) {
        //   if (this.owner.hit instanceof Function) {
        //     this.owner.hit(this, index)
        //   }
        // },
        set: function (x, y, radius) {
            this.x = x;
            this.y = y;
            this.radius = radius;
        }
    };
    const hitbubbleData = {
        count: 256,
        size: 22,
        fileArgs: 16,
        dataArgs: 18,
    };
    class BubbleReference {
        constructor() {
            this.x = 0;
            this.y = 0;
            this.x2 = 0;
            this.y2 = 0;
            this.entity = null;
            this.bubble = null;
            this.facing = true;
        }
        angle(reverse, airborne, damage) {
            const b = this.bubble;
            let a = b.angle;
            if (b.sakurai) {
                if (airborne) {
                    a = constants.SAKURAI_AIR;
                }
                else if (damage < constants.SAKURAI_MIN) {
                    a = 0;
                }
                else if (damage >= constants.SAKURAI_MAX) {
                    a = constants.SAKURAI_ANGLE;
                }
                else {
                    a = (damage - constants.SAKURAI_MIN) / (constants.SAKURAI_MAX - constants.SAKURAI_MIN) * constants.SAKURAI_ANGLE;
                }
            }
            return (1 + +!this.facing + +reverse) % 2 !== 0 ? a : (a > 180 ? 540 - a : 180 - a);
        }
    }
    const hitbubbles = [];
    let hitbubbleCount = 0;
    const clearHitbubbles = () => {
        hitbubbleCount = 0;
    };
    const addHitbubble = (entity, bubble, x, y, x2, y2) => {
        if (hitbubbles.length <= hitbubbleCount) {
            hitbubbles.push(new BubbleReference());
        }
        const b = hitbubbles[hitbubbleCount];
        b.entity = entity;
        b.bubble = bubble;
        b.facing = entity.face === 1;
        b.x = x;
        b.y = y;
        b.x2 = x2;
        b.y2 = y2;
        hitbubbleCount++;
    };
    const flagMap = {
        skip: 2,
        fixed: 4,
        ground: 8,
        air: 16,
        meteor: 32,
        wind: 64,
        noreverse: 128,
        stale_di: 256,
        no_stale: 512,
        no_self_lag: 1024,
    };
    var typeMap;
    (function (typeMap) {
        typeMap[typeMap["ground"] = 1] = "ground";
        typeMap[typeMap["aerial"] = 2] = "aerial";
        typeMap[typeMap["special"] = 3] = "special";
        typeMap[typeMap["object"] = 4] = "object";
        typeMap[typeMap["phasing"] = 5] = "phasing";
        typeMap[typeMap["grab"] = 6] = "grab";
        typeMap[typeMap["shield"] = 7] = "shield";
        typeMap[typeMap["wind"] = 8] = "wind";
        typeMap[typeMap["projectile"] = 9] = "projectile";
        typeMap[typeMap["counter"] = 10] = "counter";
        typeMap[typeMap["reflector"] = 11] = "reflector";
    })(typeMap || (typeMap = {}));
    const colorMap = {
        default: 20,
        grab: 101
    };
    class Hitbubble {
        constructor(entity, follow, type, x, y, radius, flags, color, damage, knockback, growth, angle, x2, y2) {
            this.follow = null;
            this.type = 0;
            this.x = 0;
            this.y = 0;
            this.radius = 0;
            this.flags = 0;
            this.color = 0;
            this.damage = 0;
            this.knockback = 0;
            this.growth = 0;
            this.angle = 0;
            this.x2 = 0;
            this.y2 = 0;
            this.sakurai = false;
            this.data = new Map();
            if (typeof follow === 'number') {
                this.follow = follow;
            }
            else {
                this.follow = entity.namedbubbles.has(follow) ? entity.namedbubbles.get(follow) : -1;
            }
            if (typeof type === 'number') {
                this.type = type;
            }
            else {
                if (!typeMap.hasOwnProperty(type)) {
                    console.warn('Tried to set unknown type:', type, this);
                    this.type = 0;
                }
                else {
                    this.type = typeMap[type];
                }
            }
            this.x = x;
            this.y = -y;
            this.radius = radius;
            if (typeof flags === 'number') {
                this.flags = flags;
            }
            else if (Array.isArray(flags)) {
                for (let i = 0; i < flags.length; i++) {
                    if (!flagMap.hasOwnProperty(flags[i])) {
                        console.warn('Tried to set unknown flag:', flags[i]);
                    }
                    this.flags |= flagMap[flags[i]];
                }
            }
            else if (typeof flags === 'string') {
                this.flags |= flagMap[flags];
            }
            else {
                console.warn('Flags in wrong format', flags, this);
            }
            if (typeof color === 'string') {
                this.color = colorMap[color];
            }
            else if (typeof color === 'undefined') {
                if (colorMap.hasOwnProperty(typeMap[this.type])) {
                    this.color = colorMap[typeMap[this.type]];
                }
                else {
                    this.color = colorMap.default;
                }
            }
            else {
                this.color = color;
            }
            this.damage = damage;
            this.knockback = knockback;
            this.growth = growth;
            this.angle = angle;
            this.x2 = x2;
            this.y2 = y2;
        }
        static from(entity, hb) {
            const b = new Hitbubble(entity, hb.follow || -1, hb.type || 0, hb.x || 0, hb.y || 0, hb.radius || 0, hb.flags || 0, hb.color, hb.damage || 0, hb.knockback || 0, hb.growth || 0, hb.angle || 0, hb.x2 || 0, hb.y2 || 0);
            if (hb.sakurai) {
                b.sakurai = hb.sakurai;
                b.angle = 45;
            }
            for (let key of Object.getOwnPropertyNames(hb)) {
                if (!b.hasOwnProperty(key)) {
                    b.data.set(key, hb[key]);
                }
            }
            return b;
        }
    }
    const defaultAnimation = 'idle';
    const defaultAirborne = 'airborne';
    const linear = (frame1, frame2, fraction, properties) => {
        let i;
        const l = frame1.length;
        const between = [];
        between.length = l;
        for (i = 0; i < l; i++) {
            if (i % 4 !== 3) {
                between[i] = ((frame2[i] - frame1[i]) * fraction + frame1[i]);
            }
            else {
                between[i] = properties ? frame2[i] : frame1[i];
            }
        }
        return between;
    };
    const pi2 = Math.PI * 2;
    const arc = (frame1, frame2, fraction, tween) => {
        const l = frame1.length;
        const between = [];
        let angle = 0;
        let distance = 0;
        const centerX = tween.centerX;
        const centerY = -tween.centerY;
        const angledelta = fraction * tween.arc;
        between.length = l;
        for (let i = 0; i < l; i++) {
            if (i % 4 === 2) {
                if (frame2) {
                    between[i] = ((frame2[i] - frame1[i]) * fraction + frame1[i]);
                }
                else {
                    between[i] = frame1[i];
                }
            }
            else if (i % 4 === 3) {
                if (fraction !== 1 || !frame2) {
                    between[i] = frame1[i];
                }
                else {
                    between[i] = frame2[i];
                }
            }
            else if (i % 4 === 0) {
                // x arc tween
                const x = centerX - frame1[i];
                const y = centerY - frame1[i + 1];
                angle = (Math.PI + Math.atan2(y, x)) / pi2 + angledelta;
                distance = Math.sqrt(x * x + y * y);
                between[i] = Math.cos(angle * pi2) * distance + centerX;
            }
            else if (i % 4 === 1) {
                // y arc tween
                between[i] = -Math.sin(angle * pi2) * distance + centerY;
            }
        }
        return between;
    };
    const precomputeAnimation = (entity, animation) => {
        const animationArray = [];
        let next = 0;
        let index = 0;
        const keyframes = animation.keyframes;
        if (typeof keyframes === 'string') {
            console.log('precomputing with string');
        }
        const l = keyframes.length - 1;
        let j = 0;
        let k = 0;
        let midframe = 0;
        let keyframe = null;
        let hurtbubbles = null;
        let tweenfrom = 0;
        let nextframe = null;
        let fulllength = 0;
        let keyframeLength = 0;
        let duration = 0;
        let tween = null;
        let tweendata = null;
        let interpolatedTween = false;
        for (let i = 0; i < l; i++) {
            keyframe = keyframes[i];
            duration = duration + keyframes[i].duration;
            if (keyframe.hurtbubbles) {
                hurtbubbles = keyframe.hurtbubbles;
                fulllength = keyframe.duration;
                tweenfrom = 0;
                next = i + 1;
                nextframe = keyframes[next];
                if (nextframe.hurtbubbles === true) {
                    nextframe.hurtbubbles = hurtbubbles;
                }
                tweendata = keyframe.tween;
                if (!tweendata) {
                    if (tween !== linear) {
                        tween = linear;
                        interpolatedTween = false;
                    }
                    while (!nextframe.hurtbubbles) {
                        fulllength = fulllength + nextframe.duration;
                        next++;
                        nextframe = keyframes[next];
                    }
                }
                else {
                    if (tweendata.type === 'arc') {
                        tween = arc;
                        interpolatedTween = true;
                    }
                    const tweenframes = (tweendata.frames || 1) - 1;
                    for (let i = 0; i < tweenframes; i++) {
                        fulllength = fulllength + nextframe.duration;
                        next++;
                        nextframe = keyframes[next];
                    }
                }
            }
            else {
                tweenfrom = tweenfrom + keyframeLength;
            }
            if (keyframe.hitbubbles) {
                const hitbubbles = keyframe.hitbubbles;
                if (hitbubbles === true) {
                    keyframe.hitbubbles = keyframes[i - 1].hitbubbles;
                    if (i <= 0 || !keyframes[i - 1].hitbubbles) {
                        console.warn('Tried to continue hitbubbles on', animation.name, 'from', keyframes[i - 1]);
                    }
                }
                else if (hitbubbles.length) {
                    // new format
                    const hbs = [];
                    for (j = 0; j < hitbubbles.length; j++) {
                        hbs.push(Hitbubble.from(entity, hitbubbles[j]));
                    }
                    keyframe.hitbubbles = hbs;
                }
            }
            keyframeLength = keyframe.duration;
            for (midframe = 0; midframe < keyframeLength; midframe++) {
                animationArray[index] = tween(hurtbubbles, nextframe.hurtbubbles, (midframe + tweenfrom) / fulllength, tweendata);
                index++;
            }
            if (interpolatedTween && keyframes[i + 1] === nextframe) {
                keyframes[i + 1].hurtbubbles = tween(hurtbubbles, nextframe.hurtbubbles, (midframe + tweenfrom) / fulllength, tweendata);
            }
        }
        animation.duration = duration;
        animation.frames = animationArray;
        return animationArray;
    };
    const setBubbles = (entity, frame, keyframe) => {
        if (frame.length > 0) {
            const l = entity.hurtbubbleCount;
            for (let i = 0; i < l; i++) {
                const index = entity.hurtbubbles[i].i1 * 4;
                const index2 = entity.hurtbubbles[i].i2 * 4;
                // check if index/index2 are both less than frame length?
                entity.hurtbubbles[i].x = entity.face * frame[index];
                entity.hurtbubbles[i].y = frame[index + 1];
                entity.hurtbubbles[i].x2 = entity.face * frame[index2];
                entity.hurtbubbles[i].y2 = frame[index2 + 1];
                entity.hurtbubbles[i].radius = frame[index + 2];
                entity.hurtbubbles[i].type = frame[index + 3];
            }
        }
        for (let i = 0; i < entity.hurtbubbles.length; i++) {
            const hb = entity.hurtbubbles[i];
            if (hb.ik && !entity.activeAnimation.disableIK) {
                let x = hb.x + entity.x;
                let y = hb.y + entity.y;
                // let x2 = hb.x2 + entity.x
                // let y2 = hb.y2 + entity.y
                const plat = (!entity.airborne && entity.platform) || ((entity.hovering || !entity.airborne) && entity.hover);
                if (plat) {
                    const py = plat.yAt(x) - hb.radius;
                    if (y > py) {
                        y = py;
                    }
                }
                if (!entity.airborne && entity.platform) {
                    const plat = entity.platform;
                    if (y - plat.yAt(x) < 0.5) {
                        x = Math.max(x, plat.x);
                        x = Math.min(x, plat.x2);
                    }
                    if (hb.y < 0.1) {
                        y = plat.yAt(x) - hb.radius;
                    }
                }
                hb.x = x - entity.x;
                hb.y = y - entity.y;
            }
        }
        entity.currentframe = frame;
        if (entity.activeAnimation.midframe === 0 && entity.activeAnimation.keyframe > 0 && entity.activeAnimation.keyframes[entity.activeAnimation.keyframe - 1].hitbubbles) {
            if (entity.activeAnimation.keyframeData.reset) {
                const hbs = keyframe.hitbubbles;
                const l = (hbs && hbs.length) || 0;
                for (let i = 0; i < l; i++) {
                    const hb = hbs[i];
                    const x = (hb.follow === -1 ? entity.x : entity.x + entity.hurtbubbles[hb.follow].x) + entity.face * hb.x;
                    const y = (hb.follow === -1 ? entity.y : entity.y + entity.hurtbubbles[hb.follow].y) + hb.y;
                    entity.lastHb[i * 2] = x;
                    entity.lastHb[i * 2 + 1] = y;
                }
            }
        }
        // if (!entity.lag && entity.activeAnimation.midframe === 1 && entity.activeAnimation.keyframeData.reset) {
        //   entity.collided.length = 0
        // }
        const hbs = keyframe.hitbubbles;
        const l = (hbs && hbs.length) || 0;
        for (let i = 0; i < l; i++) {
            const hb = hbs[i];
            const x = (hb.follow === -1 ? entity.x : entity.x + entity.hurtbubbles[hb.follow].x) + entity.face * hb.x;
            const y = (hb.follow === -1 ? entity.y : entity.y + entity.hurtbubbles[hb.follow].y) + hb.y;
            if (entity.activeAnimation.midframe === 0 || entity.activeAnimation.frame === 1) {
                entity.lastHb[i * 2] = x;
                entity.lastHb[i * 2 + 1] = y;
            }
            addHitbubble(entity, hb, x, y, entity.lastHb[i * 2], entity.lastHb[i * 2 + 1]);
            entity.lastHb[i * 2] = x;
            entity.lastHb[i * 2 + 1] = y;
        }
    };
    const defaultHandlers = {
        airdodge: function (entity, controller) {
            if (this.frame < 4 && entity.hover && entity.hover.yAt(entity.x) - entity.y < 20 && entity.kby <= 0.5) {
                entity.y = entity.hover.yAt(entity.x) - 1;
                entity.dy = Math.min(entity.dy, -5);
            }
            if (this.frame > 4 && (controller.grabPress || (controller.shield && controller.attackPress)) && entity.animations.hasOwnProperty('dodgepanic') && entity.setAnimation('dodgepanic')) {
                entity.kb = entity.kb * 0.25;
                entity.kbx = entity.kbx * 0.25;
                entity.kby = entity.kby * 0.25;
            }
        },
        brake: entity => {
            entity.dx = entity.dx * entity.activeAnimation.brake;
            entity.slide = entity.slide * entity.activeAnimation.brake;
            entity.dy = entity.dy * entity.activeAnimation.brake;
        },
        stop: entity => {
            entity.dx = 0;
            entity.dy = 0;
            entity.slide = 0;
        },
        remove: entity => {
            entity.removed = true;
        },
        weakstunned: entity => {
            if (entity.stun <= 0) {
                entity.setAnimation('airborne', true);
            }
        },
        stunned: entity => {
            if (entity.stun <= 0) {
                // dbg.log('original knockback', entity.okb, entity.softland)
                if (entity.okb > entity.softland) {
                    entity.setAnimation('tumble', true);
                }
                else {
                    entity.setAnimation('airborne', true);
                }
            }
        },
        meteor: entity => {
            if (entity.stun <= 0) {
                entity.setAnimation('tumble', true);
            }
        },
        weakstumble: entity => {
            if (entity.airborne) {
                entity.setAnimation('weakstunned', true);
                return;
            }
            if (entity.stun <= 0) {
                entity.setAnimation('idle', true);
            }
        },
        stumble: entity => {
            if (entity.airborne) {
                entity.setAnimation('stunned', true);
                return;
            }
            if (entity.stun <= 0) {
                entity.setAnimation('idle', true);
            }
        },
        tumble: entity => {
            if (entity.controller.hardleft === 6 || entity.controller.hardright === 6) {
                entity.setAnimation('airborne');
            }
        },
        setAnimation: entity => {
            entity.setAnimation(entity.activeAnimation.setAnimation, true);
        },
        pivot: entity => {
            entity.face = -entity.face;
        }
    };
    const defaultStart = {
        airdodge: function (entity, controller) {
            entity.dx = 0;
            entity.dy = 0;
            if (controller.hmove === 0 && controller.vmove === 0) {
                return;
            }
            entity.kbDecay = entity.activeAnimation.decay;
            entity.kb = entity.activeAnimation.airdodgeSpeed;
            entity.kbx = -Math.cos(this.bufferAngle) * entity.kb;
            entity.kby = Math.sin(this.bufferAngle) * entity.kb;
            entity.kba = (Math.PI - this.bufferAngle) / Math.PI * 180;
            entity.y -= 0.1;
            if (!entity.airborne) {
                entity.airborne = true;
                entity.hover = entity.platform;
            }
        },
        grab: entity => {
            if (entity.lastCollision.entity.animation !== entity.activeAnimation.heldAnimation) {
                entity.lastCollision.entity.setAnimation(entity.activeAnimation.heldAnimation, true);
                entity.lastCollision.entity.face = -entity.face;
                entity.lastCollision.entity.lag = 0;
                entity.lastCollision.entity.hitlag = 0;
                entity.lastCollision.entity.kbx = 0;
                entity.lastCollision.entity.kby = 0;
                entity.lastCollision.entity.kb = 0;
                entity.lastCollision.entity.stun = 0;
                entity.lastCollision.entity.dx = 0;
                entity.lastCollision.entity.dy = 0;
                entity.lastCollision.entity.slide = 0;
                entity.lastCollision.entity.airjumps = 0;
            }
        },
        crumple: entity => {
            entity.intangible = 12;
        },
        dash: function (entity) {
            this.passthrough = false;
            entity.dx = entity.dx * 0.25 + entity.face * entity.activeAnimation.initialSpeed;
        },
        shield: function (entity, controller) {
            entity.shieldstun = 0;
            entity.stun = 0;
            this.powershield = false;
            if (controller.shieldHardPress && constants.POWERSHIELD_OK) {
                Effects.powershield(entity, 0, 0, 30, 30);
                this.powershield = true;
            }
            // if (controller.special) {
            //   entity.shieldVal = entity.controller.shield
            //   return
            // }
            if (controller.rright) {
                playAudio('roll');
                return entity.face === 1 ? 'dodgeforth' : 'dodgeback';
            }
            else if (controller.rleft || controller.hardLeft > 4) {
                playAudio('roll');
                return entity.face === -1 ? 'dodgeforth' : 'dodgeback';
            }
            else if (constants.SPOT_DODGE_OK && (controller.rdown || controller.harddown > 4)) {
                return 'spotdodge';
            }
            else if (controller.rup || controller.hardRight > 4) {
                return 'hop';
            }
            entity.shieldVal = entity.controller.shield;
        },
        release: entity => {
            entity.held.dx = entity.dx;
            entity.held.dy = entity.dy;
            entity.held.slide = entity.slide;
            entity.held.setAnimation(!entity.held.airborne ? 'idle' : 'airborne', true);
        },
        ledgegrab: entity => {
        },
        respawn: entity => {
            Effects.respawn(entity);
        },
        pivot: entity => {
            entity.face = -entity.face;
        },
        airjump: function (entity, controller) {
            entity.airjumps++;
            if (this.upward) {
                entity.dy = this.upward - (this.jumpDecay ? this.jumpDecay * this.entity.airjumps : 0);
            }
            if (this.turn) {
                if ((entity.face === 1 && controller.hmove < -0.3) || (entity.face === -1 && controller.hmove > 0.3)) {
                    entity.face = entity.face * -1;
                }
            }
            if (this.di) {
                // TODO: verify that this works
                const brakeFactor = (entity.controller.hmove === 0 || (Math.sign(entity.controller.hmove) === entity.face)) ? 1 : (1 - Math.abs(entity.controller.hmove));
                entity.dx = entity.dx * this.carryMomentum * brakeFactor + entity.controller.hmove * this.di;
            }
        },
        cancel: entity => {
            if (entity.airborne) {
                entity.setAnimation('airborne');
            }
            else {
                entity.setAnimation('idle');
            }
        }
    };
    const defaultHandler = {
        charge: (entity, controller, animation) => {
            entity.animations[animation.release].charged = Math.min(animation.frame / (animation.duration - 1), 1);
            if (!constants.CHARGE_SMASH_OK && (animation.type === 1 || animation.type === 2)) {
                entity.schedule(animation.release, true);
                return;
            }
            if (animation.frame % 18 === 2) {
                entity.flash = 2;
            }
            if (!controller.attack && !controller.grab && (animation.type === 1 || animation.type === 2)) {
                entity.schedule(animation.release, true);
            }
            else if (!controller.special && animation.type === 3) {
                entity.schedule(animation.release, true);
            }
        },
        run: function (entity, controller) {
            if ((entity.face === 1 && !controller.right) || (entity.face === -1 && !controller.left)) {
                if ((entity.face === 1 && controller.hardleft) || (entity.face === -1 && controller.hardright)) {
                    entity.schedule('turnaround', true);
                }
                else if (entity.schedule('skid')) {
                    Effects.skid(entity.x, entity.y - 3, entity.dx + entity.slide, entity.dy);
                    Effects.skid(entity.x, entity.y - 3, entity.dx + entity.slide, entity.dy);
                    Effects.skid(entity.x, entity.y - 3, entity.dx + entity.slide, entity.dy);
                }
            }
            entity.dx = entity.dx + ((this.runSpeed * controller.hmove) - entity.dx) * 0.5;
        },
        walk: (entity, controller) => {
            // combine with idle?
            if ((entity.face === -1 && controller.hmove > 0.3) || (entity.face === 1 && controller.hmove < -0.3)) {
                if (entity.setAnimation('walkpivot')) {
                    entity.face = -entity.face;
                }
            }
            else {
                if (controller.hmove > 0.3 || controller.hmove < -0.3) {
                    entity.dx = entity.dx + ((entity.walkSpeed * controller.hmove) - entity.dx) * 0.5;
                }
                if (Math.abs(controller.hmove) > 0.6) {
                    entity.animation !== 'stride' && entity.schedule('stride');
                }
                else if (Math.abs(controller.hmove) > 0.3) {
                    entity.animation !== 'walk' && entity.schedule('walk');
                }
                else {
                    entity.animation !== 'idle' && entity.schedule('idle');
                }
            }
        },
        dash: function (entity, controller) {
            let pivot = false;
            if (controller.vmove * controller.vmove + controller.hmove * controller.hmove < 0.85) {
                this.passthrough = true;
            }
            if (entity.face === -1 && controller.right && this.passthrough && entity.schedule('pivot')) {
                pivot = true;
            }
            else if (entity.face === 1 && controller.left && this.passthrough && entity.schedule('pivot')) {
                pivot = true;
            }
            else if (!controller.left && !controller.right) {
            }
            if (pivot) {
                Effects.skid(entity.x, entity.y - 3, entity.dx + entity.slide, entity.dy);
                Effects.skid(entity.x, entity.y - 3, entity.dx + entity.slide, entity.dy);
                Effects.skid(entity.x, entity.y - 3, entity.dx + entity.slide, entity.dy);
                Effects.skid(entity.x, entity.y - 3, entity.dx + entity.slide, entity.dy);
            }
            else {
                entity.dx = entity.dx + ((this.scaleSpeed * controller.hmove) - entity.dx) * 0.5;
            }
            if (this.passthrough && controller.vmove * controller.vmove + controller.hmove * controller.hmove >= 0.8) {
                this.passthrough = false;
            }
        },
        crouch: (entity, controller) => {
            if (!controller.down) {
                entity.schedule('stand');
            }
        },
        shield: function (entity, controller) {
            if (entity.shield < 0) {
                entity.shield = entity.shieldReset;
                entity.schedule('crumple', true);
                return;
            }
            if (this.name === 'shieldup' && this.frame < 4) {
                if (controller.shieldHardPress && !this.powershield && constants.POWERSHIELD_OK) {
                    Effects.powershield(entity, 0, 0, 30, 30);
                    this.powershield = true;
                }
            }
            if (entity.shieldstun <= 0 && entity.stun <= 0 && entity.lag <= 0) {
                entity.shieldVal = controller.shield;
                entity.shield = entity.shield - entity.shieldRegen - (entity.shieldDecay * (0.5 + entity.shieldVal / 2));
                // if (controller.special) {
                //   return
                // }
                if (controller.attackPress || controller.grabPress) {
                    entity.schedule('grab');
                    return;
                }
                else if (controller.shield < 0.05 && !controller.grab) {
                    entity.setAnimation('shielddrop');
                    return;
                }
                else if ((controller.jumpPress || controller.rup) || (!controller.noTapJump && controller.hardup)) {
                    entity.schedule('hop', true);
                    entity.animations['hop'].tapJumped = !controller.jumpPress;
                    return;
                }
            }
            if (entity.stun <= 0 && entity.lag <= 0) {
                if ((controller.hardright) > 3 || controller.rright) {
                    entity.schedule(entity.face === -1 ? 'dodgeback' : 'dodgeforth');
                    playAudio('roll');
                    return;
                }
                else if ((controller.hardleft > 3) || controller.rleft) {
                    entity.schedule(entity.face === 1 ? 'dodgeback' : 'dodgeforth');
                    playAudio('roll');
                    return;
                }
                else if (constants.SPOT_DODGE_OK && controller.rdown) {
                    entity.schedule('spotdodge');
                }
                else if (controller.vmove > 0.5 && controller.specialPress) {
                    entity.platformDrop = true;
                }
                else if (controller.down === 2 && controller.vmove >= 0.65 && controller.vmove < 0.7) {
                    entity.platformDrop = true;
                }
                else if (controller.harddown > 3) {
                    if (!constants.SPOT_DODGE_OK) {
                        entity.platformDrop = true;
                    }
                    else if (controller.vmove <= 0.75) {
                        entity.platformDrop = true;
                    }
                    else {
                        entity.schedule('spotdodge');
                    }
                    if (!constants.SPOT_DODGE_OK) {
                        entity.platformDrop = true;
                    }
                }
            }
            if (entity.shieldstun > 0 && entity.stun <= 0 && entity.lag <= 0) {
                // should shield decay/regen while in stun?
                entity.shield = entity.shield - entity.shieldRegen - (entity.shieldDecay * (0.5 + entity.shieldVal / 2));
            }
            const x = controller.hmove * entity.face * entity.shieldMobility;
            const y = -controller.vmove * entity.shieldMobility;
            const r = entity.shieldMinSize + (1 - entity.shieldVal) * entity.lightShieldGrowth * entity.shield + entity.shieldGrowth * entity.shield;
            const b = entity.shieldBubble;
            if (!entity.lag) {
                b.x = x + entity.shieldX;
                b.y = y + entity.shieldY;
                b.radius = r;
                b.x2 = x + entity.shieldX2;
                b.y2 = y + entity.shieldY2;
            }
            entity.addHitbubble(b);
        },
        fallen: (entity, controller) => {
            if (controller.attackPress || controller.specialPress || controller.grabPress) {
                entity.schedule('getup0');
            }
            else if (controller.shieldPress || controller.jumpPress) {
                entity.schedule('getup');
            }
            else if ((controller.right) || controller.rright) {
                playAudio('roll');
                if (entity.face === 1) {
                    entity.schedule('rollforth');
                }
                else {
                    entity.schedule('rollback');
                }
            }
            else if ((controller.left) || controller.rleft) {
                playAudio('roll');
                if (entity.face === 1) {
                    entity.schedule('rollback');
                }
                else {
                    entity.schedule('rollforth');
                }
            }
            else if ((controller.up) || controller.rup) {
                entity.schedule('getup');
            }
        },
        ledgehang: function (entity, controller) {
            let setOccupied = 2;
            if (!this.pause || this.frame > this.pause) {
                entity.stats.hangtime++;
                let next = '';
                if (frame() > entity.grabbedOn + 600 || controller.rdown === 2 || (entity.face === 1 && controller.rleft === 2) || (entity.face === -1 && controller.rright === 2) || controller.down === 2 || (entity.face === 1 && controller.left === 2) || (entity.face === -1 && controller.right === 2)) {
                    entity.airborne = true;
                    if (controller.harddown === 6) {
                        entity.fastfall = true;
                    }
                    entity.dx = entity.platform.dx;
                    entity.dy = entity.platform.dy;
                    entity.setAnimation('ledgedrop', true);
                    entity.activeAnimation.step();
                    entity.ledgeReleased = 0;
                }
                else if ((entity.face === 1 && controller.right === 2) || (entity.face === -1 && controller.left === 2)) {
                    next = 'ledgestand';
                    entity.ledgeReleased = 0;
                }
                else if ((controller.hardup === 6 && !controller.noTapJump) || controller.jumpPress) {
                    entity.dx = entity.platform.dx;
                    entity.dy = entity.platform.dy;
                    setOccupied = entity.animations['ledgehop'].duration * 0.75 | 0;
                    entity.schedule('ledgehop', true, true);
                    entity.ledgeReleased = 0;
                }
                else if (controller.shieldPress || (entity.face === 1 && controller.rright === 2) || (entity.face === -1 && controller.rleft === 2)) {
                    next = 'ledgeroll';
                }
                else if (controller.attackPress || controller.specialPress || controller.rup === 2) {
                    next = 'ledgeattack';
                }
                if (next !== '') {
                    next = Math.round(entity.damage) >= 100 ? next + '100' : next + '0';
                    setOccupied = entity.animations[next].duration * 0.75 | 0;
                    entity.schedule(next, true, true);
                    entity.ledgeReleased = 0;
                }
            }
            if (entity.ledgeHang) {
                if (setOccupied > entity.platform.leftOccupied) {
                    entity.platform.leftOccupied = setOccupied;
                }
            }
            else {
                if (setOccupied > entity.platform.rightOccupied) {
                    entity.platform.rightOccupied = setOccupied;
                }
            }
        },
        throwing: (entity, controller, animation) => {
            const frame = animation.frame;
            const held = entity.held;
            const struggleStick = 6;
            const struggleBy = 1;
            if (held.animation !== animation.heldAnimation || held.lastInjury.lastFrame) {
                if (held.lastInjury.entity !== entity && (Math.pow(held.kbx, 2) + Math.pow(held.kby, 2)) > animation.grabForce) {
                    entity.schedule('release', true);
                }
                else {
                    held.kb = 0;
                    held.kbx = 0;
                    held.kby = 0;
                    held.schedule(animation.heldAnimation, true);
                }
            }
            else {
                if (typeof held.activeAnimation.pivotx === 'undefined') {
                    held.schedule(animation.heldAnimation, true);
                }
                else {
                    const height = entity.activeAnimation.frames[frame][entity.hurtbubbleCount * 4 + 1] + held.activeAnimation.pivoty;
                    const ydist = held.y - Math.min(entity.y + height, (!entity.airborne && entity.platform) ? entity.platform.yAt(held.x) : entity.y);
                    held.slide = 0;
                    held.face = -entity.face;
                    if (Math.abs(ydist) < Math.abs(held.height + entity.height)) {
                        held.dx = entity.x + (entity.activeAnimation.frames[frame][entity.hurtbubbleCount * 4] + held.activeAnimation.pivotx) * entity.face - held.x;
                        held.dy = ydist;
                        if (height < 0 || entity.airborne) {
                            held.airborne = true;
                        }
                    }
                }
            }
        },
        holding: (entity, controller, animation) => {
            const frame = animation.frame;
            const held = entity.held;
            const struggleStick = 6;
            const struggleBy = 1;
            if (held.lastInjury.lastFrame && held.lastInjury.entity !== entity) {
                if ((Math.pow(held.dx, 2) + Math.pow(held.dy, 2)) > animation.grabForce) {
                    entity.schedule('release', true);
                }
                else {
                    held.schedule(animation.heldAnimation, true);
                }
            }
            else {
                if (typeof held.activeAnimation.pivotx === 'undefined') {
                    held.schedule(animation.heldAnimation, true);
                }
                else {
                    const height = entity.activeAnimation.frames[frame][entity.hurtbubbleCount * 4 + 1] + held.activeAnimation.pivoty;
                    const ydist = held.y - Math.min(entity.y + height, (!entity.airborne && entity.platform) ? entity.platform.yAt(held.x) : entity.y);
                    held.slide = 0;
                    held.face = -entity.face;
                    if (Math.abs(ydist) < Math.abs(held.height + entity.height)) {
                        held.dx = entity.x + (entity.activeAnimation.frames[frame][entity.hurtbubbleCount * 4] + held.activeAnimation.pivotx) * entity.face - held.x;
                        held.dy = ydist;
                        if (height < 0 || entity.airborne) {
                            held.airborne = true;
                        }
                    }
                    else {
                        entity.struggle = 1000000;
                    }
                }
                if (controller.attackPress || controller.grabPress) {
                    entity.schedule('pummel', false, true);
                }
                else if (controller.up === 2) {
                    entity.schedule('uthrow', false, true);
                }
                else if (controller.down === 2) {
                    entity.schedule('dthrow', false, true);
                }
                else if (controller.left === 2) {
                    entity.schedule(entity.face === 1 ? 'bthrow' : 'fthrow', false, true);
                }
                else if (controller.right === 2) {
                    entity.schedule(entity.face === 1 ? 'fthrow' : 'bthrow', false, true);
                }
                entity.struggle++;
                if (entity.held.controller) {
                    if (entity.held.controller.hardleft === 6) {
                        entity.struggle = entity.struggle + struggleStick;
                    }
                    else if (entity.held.controller.hardright === 6) {
                        entity.struggle = entity.struggle + struggleStick;
                    }
                    else if (entity.held.controller.hardup === 6) {
                        entity.struggle = entity.struggle + struggleStick;
                    }
                    else if (entity.held.controller.harddown === 6) {
                        entity.struggle = entity.struggle + struggleStick;
                    }
                    else if (entity.held.controller.rleft === 2) {
                        entity.struggle = entity.struggle + struggleStick;
                    }
                    else if (entity.held.controller.rright === 2) {
                        entity.struggle = entity.struggle + struggleStick;
                    }
                    else if (entity.held.controller.rup === 2) {
                        entity.struggle = entity.struggle + struggleStick;
                    }
                    else if (entity.held.controller.rdown === 2) {
                        entity.struggle = entity.struggle + struggleStick;
                    }
                    if (entity.held.controller.attackPress) {
                        entity.struggle = entity.struggle + struggleBy;
                    }
                    else if (entity.held.controller.specialPress) {
                        entity.struggle = entity.struggle + struggleBy;
                    }
                    else if (entity.held.controller.shieldPress) {
                        entity.struggle = entity.struggle + struggleBy;
                    }
                    else if (entity.held.controller.jumpPress) {
                        entity.struggle = entity.struggle + struggleBy;
                    }
                    else if (entity.held.controller.grabPress) {
                        entity.struggle = entity.struggle + struggleBy;
                    }
                }
                if (animation.hasOwnProperty('strength') && animation.strength >= 0 && entity.struggle > animation.strength + entity.held.damage * 2) {
                    console.log('shook out');
                    entity.held.dx = entity.dx;
                    entity.held.dy = entity.dy;
                    entity.held.slide = entity.slide;
                    entity.held.schedule(!entity.held.airborne ? 'released' : 'airreleased', true);
                    entity.schedule(!entity.held.airborne ? 'release' : 'airrelease', true);
                }
            }
        },
        respawn: (entity, controller) => {
            if (entity.dummy || controller.left || controller.right || controller.up || controller.down) {
                entity.schedule('airborne', true);
                if (!entity.dummy) {
                    entity.invincible = 120;
                }
            }
        },
        hop: (entity, controller) => {
            if (constants.AIR_DODGE_OK && (controller.hmove || controller.vmove) && controller.shieldHardPress) {
                entity.animations['airdodge'].bufferAngle = controller.radians();
                entity.schedule('airdodge', false, false);
            }
        },
        helpless: entity => {
            if (!entity.airborne) {
                entity.schedule('idle', true, true);
            }
        }
    };
    const defaultEnd = {
        dashpivot: (entity, controller) => {
            if (Math.abs(controller.hmove) > 0.3) {
                entity.schedule('dash', true);
            }
        },
        walkpivot: (entity, controller) => {
            if (entity.face === 1 && controller.hardright >= 3 && controller.hmove > 0.7) {
                entity.schedule('dash', true);
            }
            if (entity.face === -1 && controller.hardleft >= 3 && controller.hmove < 0.7) {
                entity.schedule('dash', true);
            }
        },
        dash: (entity, controller) => {
            if ((!controller.right && entity.face === 1) || (!controller.left && entity.face === -1)) {
                entity.schedule('dashskid', true);
            }
            else {
                entity.schedule('run', true);
            }
        },
        pivot: (entity, controller) => {
            if (controller.hmove > 0.7 && entity.face === 1 || controller.hmove < -0.7 && entity.face === -1) {
                entity.schedule('dash', true);
            }
        },
        respawn: entity => {
            entity.invincible = 120;
        },
        platformdrop: entity => {
            entity.y++;
            entity.ly++;
            entity.dy = entity.platform.dy;
            entity.dx = entity.dx + entity.slide + entity.platform.dx;
            entity.airborne = true;
        },
        turnaround: (entity, controller) => {
            entity.face = -entity.face;
            if (!controller.right && !controller.left) {
                entity.schedule('idle', true);
            }
            else {
                entity.schedule('run', true);
            }
        }
    };
    const defaultCollided = {
        grab: (entity, controller, animation) => {
            entity.held = entity.lastCollision.entity;
            entity.struggle = 0;
            entity.schedule(animation.holdingAnimation, true);
        }
    };
    const defaultShielded = {
        shield: function (entity, controller, collision) {
            if (this.name === 'shieldup' && this.powershield) {
                entity.lag = 0;
                entity.kb = entity.kb * 0.25;
                entity.kbx = entity.kbx * 0.25;
                entity.shieldstun = entity.stun;
                playAudio('blip');
                return;
            }
            entity.shield = entity.shield - collision.damage / 100 * entity.shieldMultiplier;
        },
    };
    const defaultBlocked = {};
    const defaultInjured = {};
    const defaultGrabbed = {
        grab: (entity, controller, animation) => {
            entity.held = entity.lastCollision.entity;
            entity.struggle = 0;
            entity.schedule(animation.holdingAnimation, true);
        },
        telegrab: (entity, controller, animation) => {
            entity.held = entity.lastCollision.entity;
            entity.y = entity.held.y;
            entity.struggle = 0;
            entity.schedule(animation.holdingAnimation, true);
        }
    };
    const defaultClashed = {};
    const defaultInterrupted = {
        release: (entity) => {
            entity.held.slide = entity.slide;
            entity.held.dx = 0;
            entity.held.dy = 0;
            entity.held.schedule(!entity.held.airborne ? 'released' : 'airreleased', true);
        },
        ledgehit: function (entity) {
            entity.x = entity.x + this.xOffset * (entity.ledgeHang ? 1 : -1);
            entity.y = entity.y + this.yOffset;
            if (entity.launched) {
                console.log('errr here?', entity.kb, entity.kbx, entity.kby, entity.kbDecay, entity.animation);
                entity.phase = true;
            }
        },
        respawn: entity => {
            entity.invincible = 120;
        },
        airjump: function (entity) {
            if (this.frame < 7) {
                entity.stun = 0;
                entity.airjumps = Math.max(entity.airjumps - 1, 0);
            }
        }
    };
    const defaultCanceled = {
        meteor: entity => {
            entity.stunned = 0;
            entity.flash = 8;
            playAudio('meteorcancel');
        }
    };
    const defaultEffect = {
        hop: (Effects, entity, controller) => {
            Effects.skid(entity.x, entity.y - 3, ((controller.left && entity.face === 1) || (controller.right && entity.face === -1) ? 1 : -1) * (entity.dx + entity.slide) * 0.5, entity.dy);
            Effects.skid(entity.x, entity.y - 3, ((controller.left && entity.face === 1) || (controller.right && entity.face === -1) ? 1 : -1) * (entity.dx + entity.slide) * 0.5, entity.dy);
        }
    };
    class Animation {
        constructor(entity, animation) {
            this.keyframe = 0;
            this.frame = 0;
            this.midframe = 0;
            this.ticks = 1;
            this.repeated = 0;
            this.continued = false;
            this.cancellable = '';
            this.frameDuration = 0;
            this.freshKeyframe = true;
            this.hit = false;
            this.keepCollisions = false;
            this.staled = -1;
            this.start = null;
            this.freshStart = null;
            this.noFastfall = false;
            this.dx = 0;
            this.dy = 0;
            this.slide = 0;
            this.grabDirections = 0;
            this.handler = null;
            this.alwaysHandle = false;
            this.speed = 0;
            this.transition = '';
            this.name = '';
            this.end = null;
            this.angles = 0;
            this.pseudojump = false;
            this.entity = entity;
            if (typeof animation.keyframes === 'string') {
                animation.keyframes = entity.animations[animation.keyframes].keyframes;
            }
            this.frames = precomputeAnimation(entity, animation);
            for (const i of Object.getOwnPropertyNames(animation)) {
                this[i] = animation[i];
            }
            this.keyframeData = this.keyframes[this.keyframe];
            this.frameDuration = this.keyframeData.duration;
            this.freshKeyframe = true;
        }
        reset() {
            this.staled = -1;
            this.frame = 0;
            this.midframe = 0;
            this.keyframe = 0;
            this.ticks = 1;
            this.repeated = 0;
            this.continued = false;
            this.hit = false;
            if (!this.keepCollisions) {
                this.entity.collided.length = 0;
            }
            this.keyframeData = this.keyframes[this.keyframe];
            this.frameDuration = this.keyframeData.duration;
            this.freshKeyframe = true;
        }
        resetBubbles() {
            setBubbles(this.entity, this.frames[this.frame], this.keyframes[this.keyframe]);
        }
        step() {
            let transition = '';
            if (this.freshKeyframe) {
                // fresh key frame
                if (this.keyframe === 0) {
                    // first frame of the animation
                    this.freshStart && !this.continued && this.freshStart(this.entity, this.entity.controller, this);
                    if (this.noFastfall) {
                        this.entity.fastfall = false;
                    }
                    if (this.dy) {
                        this.entity.dy = this.dy;
                    }
                    if (this.dx) {
                        this.entity.dx = this.entity.face * this.dx;
                    }
                    if (this.slide) {
                        this.entity.slide = this.entity.slide + this.entity.dx;
                        this.entity.dx = 0;
                    }
                    if (this.pseudojump) {
                        this.entity.pseudojumps++;
                    }
                }
                if (this.keyframeData.airjump) {
                    this.entity.airjumps++;
                }
                if (this.keyframeData.effect) {
                    this.keyframeData.effect(Effects, this.entity, this.entity.controller, this);
                }
                if (this.keyframeData.airborne) {
                    if (!isNaN(this.keyframeData.speed)) {
                        this.entity.dy = this.keyframeData.speed;
                    }
                    if (!this.entity.airborne) {
                        this.entity.hover = this.entity.platform;
                        this.entity.airborne = true;
                        if (this.entity.px) {
                            this.entity.dx = this.entity.px;
                            this.entity.px = 0;
                        }
                        this.entity.dx = this.entity.dx + this.entity.slide + this.entity.platform.dx;
                        this.entity.dy = this.entity.dy + this.entity.platform.dy;
                    }
                    if (this.keyframeData.jump) {
                        if (this.entity.controller && (this.entity.controller.jump || (!this.entity.controller.noTapJump && this.entity.animations['hop'].tapJumped && this.entity.controller.up))) {
                            this.entity.dy = this.keyframeData.fullJump;
                            this.entity.setAnimation('jump');
                        }
                        else {
                            this.entity.dy = this.keyframeData.jump;
                        }
                        // stick in same direction vs held backward
                        const brakeFactor = (this.entity.controller.hmove === 0 || (Math.sign(this.entity.controller.hmove) === this.entity.face)) ? 1 : (1 - Math.abs(this.entity.controller.hmove));
                        this.entity.dx = this.entity.dx * this.entity.carryMomentum * brakeFactor + this.entity.controller.hmove * this.keyframeData.jumpDI;
                    }
                }
                if (this.keyframeData.audio) {
                    playAudio(this.keyframeData.audio);
                }
                this.keyframeData.start && this.keyframeData.start(this.entity, this.entity.controller, this);
                if (this.keyframeData.reset && !this.entity.lag) {
                    this.entity.collided.length = 0;
                }
                if (this.keyframeData.slide) {
                    this.entity.slide = this.entity.face * this.keyframeData.slide;
                }
                if (this.keyframeData.dy) {
                    this.entity.dy = this.keyframeData.dy;
                }
                if (this.keyframeData.spawn) {
                    this.entity.spawn(this.keyframeData.spawn);
                }
                if (this.keyframeData.upward) {
                    this.entity.dy = this.keyframeData.upward - (this.keyframeData.jumpDecay ? this.keyframeData.jumpDecay * this.entity.airjumps : 0);
                }
                if (this.keyframeData.di) {
                    if (this.entity.controller.hmove < 0) {
                        this.entity.dx = Math.min(this.entity.controller.hmove * this.keyframeData.di, this.entity.dx);
                    }
                    else if (this.entity.controller.hmove > 0) {
                        this.entity.dx = Math.max(this.entity.controller.hmove * this.keyframeData.di, this.entity.dx);
                    }
                }
                if (this.keyframeData.dx) {
                    this.entity.dx = this.entity.face * this.keyframeData.dx;
                }
                this.freshKeyframe = false;
            }
            if (this.keyframes[this.keyframe].interpolate !== true) {
                // if (!this.frames[this.frame]) console.log(this.frames, this.frame)
                setBubbles(this.entity, this.frames[this.frame], this.keyframes[this.keyframe]);
            }
            else {
                // interpolates to the NEXT keyframe, since there isn't any reason to interpolate to the current one when it'll always be the same data next keyframe
                // in effect, a keyframe with "interpolate" basically has its hurtbubbles set to the last frame prior to starting the animation
                // todo: test this
                if (!this.keyframes[this.keyframe].hurtbubbles) {
                    this.keyframes[this.keyframe].hurtbubbles = this.keyframes[this.keyframe + 1].hurtbubbles;
                }
                setBubbles(this.entity, linear(this.entity.lastframe, this.keyframes[this.keyframe].hurtbubbles, this.frame / this.keyframes[this.keyframe].duration, true), this.keyframes[this.keyframe]);
            }
            if (!this.entity.lag && this.keyframeData.repeat && this.repeated <= this.midframe - this.keyframeData.repeat && this.midframe > 0) {
                this.repeated = this.midframe;
                this.entity.collided.length = 0;
            }
            this.handler && (!this.entity.lag || this.alwaysHandle) && this.handler(this.entity, this.entity.controller, this);
            this.keyframeData.handler && !this.entity.lag && this.keyframeData.handler(this.entity, this.entity.controller, this);
            if (!this.entity.airborne && (this.speed || this.keyframeData.speed)) {
                this.entity.dx = (this.keyframeData.speed || this.speed) * this.entity.face;
            }
            if (this.slide) {
                this.entity.slide = this.entity.face * this.slide;
            }
            if (this.keyframeData.setSlide) {
                this.entity.slide = this.entity.face * this.keyframeData.setSlide;
            }
            if (this.keyframeData.accel) {
                this.entity.dx = this.entity.dx + this.entity.face * this.keyframeData.accel;
            }
            if (!this.entity.lag) {
                this.frame = this.frame + this.ticks;
                this.midframe = this.midframe + this.ticks;
            }
            if (this.midframe >= this.frameDuration) {
                // midframe exceeds the number of frames for the current keyframe
                /*if (this.keyframe === 0 && this.frameDuration === 1) {
                  if (this.start) {
                    transition = this.start(this.entity, this.entity.controller, this)
                  }
                }*/
                this.midframe = this.midframe - this.frameDuration;
                this.keyframe++;
                if (this.keyframe >= this.keyframes.length - 1) {
                    // no more keyframes, animation ends
                    this.end && this.end(this.entity, this.entity.controller, this);
                    if (this.entity.scheduledAnimation[0] !== null) {
                        this.entity.setAnimation(this.entity.scheduledAnimation[0], this.entity.scheduledAnimation[1], this.entity.scheduledAnimation[2]);
                        this.entity.scheduledAnimation[0] = null;
                    }
                    else if (this.transition !== 'tilt') {
                        this.entity.setAnimation(!this.transition ? !this.entity.buffer ? !this.entity.airborne ? defaultAnimation : defaultAirborne : this.entity.buffer : this.transition, true);
                        if (this.transition === this.name) {
                            this.continued = true;
                        }
                    }
                    else {
                        // tilting
                        const angle = computeAngle(this.entity.controller.hmove, -this.entity.controller.vmove);
                        transition = this.name;
                        if ((this.angles & 8) && this.entity.controller.hmove < -0.1) {
                            transition = transition + '-back';
                        }
                        else if ((!this.angles || this.angles & 2) && angle >= 180 + 16 && angle <= 360 - 16) {
                            transition = transition + '-up';
                        }
                        else if ((!this.angles || this.angles & 4) && angle <= 180 - 16 && angle >= 16) {
                            transition = transition + '-down';
                        }
                        if (transition === this.name) {
                            transition = transition + '-neutral';
                        }
                        this.entity.setAnimation(transition, true);
                    }
                    this.entity.activeAnimation.step();
                    return;
                }
                else {
                    // another keyframe left
                    this.keyframeData = this.keyframes[this.keyframe];
                    this.frameDuration = this.keyframeData.duration;
                    this.freshKeyframe = true;
                }
            }
        }
        static prepareAnimationData(data) {
            const l = data.length;
            let generatedCancels = {};
            let args = hitbubbleData.fileArgs;
            for (let i = 0; i < l; i++) {
                const keys = data[i].keyframes.length;
                if (!isNaN(data[i].cancel)) {
                    if (!generatedCancels[data[i].cancel]) {
                        generatedCancels[data[i].cancel] = true;
                        const kfs = [];
                        let d = 0;
                        for (let j = 0; j < data[0].keyframes.length; j++) {
                            const kf = {};
                            for (const key of Object.getOwnPropertyNames(data[0].keyframes[j])) {
                                kf[key] = data[0].keyframes[j][key];
                            }
                            if (j > 0 && j < data[0].keyframes.length - 1) {
                                d = d + (kf.duration | 0);
                            }
                            kfs.push(kf);
                        }
                        kfs[0].duration = data[i].cancel + 2;
                        const kf = {};
                        for (const key of Object.getOwnPropertyNames(data[0])) {
                            kf[key] = data[0][key];
                        }
                        kf.name = 'cancel-' + data[i].cancel;
                        kf.keyframes = kfs;
                        data.push(kf);
                    }
                    data[i].cancel = 'cancel-' + data[i].cancel;
                }
                // TODO: what even
                if (defaultHandlers.hasOwnProperty(data[i].handler)) {
                    data[i].handler = defaultHandlers[data[i].handler];
                }
                if (defaultStart.hasOwnProperty(data[i].start)) {
                    data[i].start = defaultStart[data[i].start];
                }
                if (defaultStart.hasOwnProperty(data[i].freshStart)) {
                    data[i].freshStart = defaultStart[data[i].freshStart];
                }
                if (defaultHandler.hasOwnProperty(data[i].handler)) {
                    data[i].handler = defaultHandler[data[i].handler];
                }
                if (defaultEnd.hasOwnProperty(data[i].end)) {
                    data[i].end = defaultEnd[data[i].end];
                }
                if (defaultCollided.hasOwnProperty(data[i].collided)) {
                    data[i].collided = defaultCollided[data[i].collided];
                }
                if (defaultShielded.hasOwnProperty(data[i].shielded)) {
                    data[i].shielded = defaultShielded[data[i].shielded];
                }
                if (defaultBlocked.hasOwnProperty(data[i].blocked)) {
                    data[i].blocked = defaultBlocked[data[i].blocked];
                }
                if (defaultInjured.hasOwnProperty(data[i].injured)) {
                    data[i].injured = defaultInjured[data[i].injured];
                }
                if (defaultGrabbed.hasOwnProperty(data[i].grabbed)) {
                    data[i].grabbed = defaultGrabbed[data[i].grabbed];
                }
                if (defaultClashed.hasOwnProperty(data[i].clashed)) {
                    data[i].clashed = defaultClashed[data[i].clashed];
                }
                if (defaultInterrupted.hasOwnProperty(data[i].interrupted)) {
                    data[i].interrupted = defaultInterrupted[data[i].interrupted];
                }
                if (defaultEffect.hasOwnProperty(data[i].effect)) {
                    data[i].effect = defaultEffect[data[i].effect];
                }
                if (defaultCanceled.hasOwnProperty(data[i].canceled)) {
                    data[i].canceled = defaultCanceled[data[i].canceled];
                }
                if (defaultHandlers.hasOwnProperty(data[i].start)) {
                    data[i].start = defaultHandlers[data[i].start];
                }
                if (defaultHandlers.hasOwnProperty(data[i].end)) {
                    data[i].end = defaultHandlers[data[i].end];
                }
                if (defaultHandlers.hasOwnProperty(data[i].collided)) {
                    data[i].collided = defaultHandlers[data[i].collided];
                }
                if (defaultHandlers.hasOwnProperty(data[i].injured)) {
                    data[i].injured = defaultHandlers[data[i].injured];
                }
                if (defaultHandlers.hasOwnProperty(data[i].grabbed)) {
                    data[i].grabbed = defaultHandlers[data[i].grabbed];
                }
                if (defaultHandlers.hasOwnProperty(data[i].clashed)) {
                    data[i].clashed = defaultHandlers[data[i].clashed];
                }
                if (defaultHandlers.hasOwnProperty(data[i].interrupted)) {
                    data[i].interrupted = defaultHandlers[data[i].interrupted];
                }
                if (defaultHandlers.hasOwnProperty(data[i].blocked)) {
                    data[i].blocked = defaultHandlers[data[i].blocked];
                }
                if (data[i].handler && typeof data[i].handler !== 'function') {
                    console.warn('Possible bug: handler is ' + data[i].handler);
                }
                for (let key = 0; key < keys; key++) {
                    if (defaultEffect.hasOwnProperty(data[i].keyframes[key].effect)) {
                        data[i].keyframes[key].effect = defaultEffect[data[i].keyframes[key].effect];
                    }
                    if (defaultHandler.hasOwnProperty(data[i].keyframes[key].handler)) {
                        data[i].keyframes[key].handler = defaultHandler[data[i].keyframes[key].handler];
                    }
                    if (defaultStart.hasOwnProperty(data[i].keyframes[key].start)) {
                        data[i].keyframes[key].start = defaultStart[data[i].keyframes[key].start];
                    }
                    if (data[i].keyframes[key].hurtbubbles) {
                        const bubbles = data[i].keyframes[key].hurtbubbles.length;
                        for (let bubble = 1; bubble < bubbles; bubble = bubble + 4) {
                            // flip y values
                            data[i].keyframes[key].hurtbubbles[bubble] = -data[i].keyframes[key].hurtbubbles[bubble];
                        }
                    }
                }
            }
        }
    }
    return () => ({ Animation, Hitbubble, Hurtbubble, hurtbubbles, hitbubbles, hitbubbleCount: () => hitbubbleCount, clearHitbubbles, addHitbubble, flagMap, typeMap, init, Status, statusFactory });
})();
///<reference path='socket.io-client.d.ts' />
const ImportNetworking = (() => {
    'use strict';
    if (!window.hasOwnProperty('io')) {
        // not running from a server, won't have socket.io available
        return (_create) => ({ pollNetwork: (_frame) => { return false; }, netConnect: (c) => { } });
    }
    const { dbg, addDirToIndex, map } = ImportTerminal();
    const { getSettings } = ImportUtils();
    const { connected, NetBuffer, InputFrame, ReplayBuffer, Controller } = ImportControllers();
    const { lqrandomstate, setSeed } = ImportMath();
    const settings = getSettings();
    let nickname = settings['nickname'] || 'anonymous';
    let delay = settings['delay'] || 6;
    addDirToIndex('/', {
        contents: map({
            'bin': {
                contents: map({
                    'say': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            dataChannel && sendText('<' + nickname + '> ' + args.slice(1).join(''));
                        }
                    },
                    'me': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            dataChannel && sendText('* ' + nickname + ' ' + args.slice(1).join(''));
                        }
                    },
                    'nick': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            dataChannel && sendText(nickname + ' changed name to ' + args[1]);
                            nickname = args[1];
                            settings['nickname'] = nickname;
                            settings.save();
                        }
                    },
                    'setdelay': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            if (args.length > 1) {
                                settings['delay'] = parseInt(args[1]);
                                dbg('Changed delay to ' + settings['delay'] + ' (requires reconnect)');
                                dataChannel && sendText(nickname + ' changed delay to ' + settings['delay'] + ' (requires reconnect)');
                                settings.save();
                            }
                            else {
                                dbg('Delay is ' + delay);
                            }
                        }
                    },
                })
            }
        })
    });
    // note: Apache license needs to be included. Maybe just open source this file?
    const randomToken = () => {
        return Math.floor((1 + Math.random()) * 1e16).toString(16).substring(1);
    };
    const logError = err => {
        console.trace(err.toString(), err);
    };
    /****************************************************************************
    * Initial setup
    ****************************************************************************/
    const configuration = {
        'iceServers': [{
                'url': 'stun:stun.l.google.com:19302'
            }]
    };
    // {'url':'stun:stun.services.mozilla.com'}
    // let configuration = null
    // Create a random room if not already present in the URL.
    let isInitiator = false;
    let room = window.location.hash.substring(1);
    if (!room) {
        room = window.location.hash = randomToken();
    }
    /****************************************************************************
    * Signaling server
    ****************************************************************************/
    // Connect to the signaling server
    const socket = io.connect();
    socket.on('ipaddr', (ipaddr) => {
        console.log('Server IP address is: ' + ipaddr);
        // updateRoomURL(ipaddr)
    });
    socket.on('created', (room, clientId) => {
        console.log('Created room', room, '- my client ID is', clientId);
        isInitiator = true;
    });
    let ready = false;
    socket.on('joined', (room, clientId) => {
        console.log('This peer has joined room', room, 'with client ID', clientId);
        isInitiator = false;
        createPeerConnection(isInitiator, configuration);
    });
    socket.on('full', room => {
        alert('Room ' + room + ' is full. We will create a new room for you.');
        window.location.hash = '';
        window.location.reload();
    });
    socket.on('ready', () => {
        console.log('Socket is ready');
        createPeerConnection(isInitiator, configuration);
    });
    socket.on('log', array => {
        console.log.apply(console, array);
    });
    socket.on('message', message => {
        console.log('Client received message:', message);
        signalingMessageCallback(message);
    });
    // Join a room
    socket.emit('create or join', room);
    if (location.hostname.match(/localhost|127\.0\.0/)) {
        socket.emit('ipaddr');
    }
    /**
    * Send message to signaling server
    */
    const sendMessage = message => {
        console.log('Client sending message: ', message);
        socket.emit('message', message);
    };
    /****************************************************************************
    * WebRTC peer connection and data channel
    ****************************************************************************/
    let peerConn = null;
    let dataChannel = null;
    const signalingMessageCallback = message => {
        if (message === 'bye') {
            console.log('Got a "bye" message');
            dbg('Bye');
        }
        if (message.type === 'offer') {
            console.log('Got offer. Sending answer to peer.');
            peerConn.setRemoteDescription(new RTCSessionDescription(message), () => { }, logError);
            peerConn.createAnswer(onLocalSessionCreated, logError);
        }
        else if (message.type === 'answer') {
            console.log('Got answer.');
            peerConn.setRemoteDescription(new RTCSessionDescription(message), () => { }, logError);
        }
        else if (message.type === 'candidate') {
            peerConn.addIceCandidate(new RTCIceCandidate({
                candidate: message.candidate
            }));
        }
    };
    const createPeerConnection = (isInitiator, config) => {
        if (ready) {
            return;
        }
        ready = true;
        console.log('Creating Peer connection as initiator?', isInitiator, 'config:', config);
        peerConn = new RTCPeerConnection(config);
        // send any ice candidates to the other peer
        peerConn.onicecandidate = event => {
            console.log('icecandidate event:', event);
            if (event.candidate) {
                sendMessage({
                    type: 'candidate',
                    label: event.candidate.sdpMLineIndex,
                    id: event.candidate.sdpMid,
                    candidate: event.candidate.candidate
                });
            }
            else {
                console.log('End of candidates.');
            }
        };
        if (isInitiator) {
            console.log('Creating Data Channel');
            dataChannel = peerConn.createDataChannel('photos');
            dataChannel.binaryType = 'arraybuffer';
            onDataChannelCreated(dataChannel);
            console.log('Creating an offer');
            peerConn.createOffer(onLocalSessionCreated, logError);
        }
        else {
            console.log('Waiting for offer');
            peerConn.ondatachannel = event => {
                console.log('ondatachannel:', event.channel);
                dataChannel = event.channel;
                dataChannel.binaryType = 'arraybuffer';
                onDataChannelCreated(dataChannel);
            };
        }
    };
    const onLocalSessionCreated = (desc) => {
        console.log('local session created:', desc);
        peerConn.setLocalDescription(desc, () => {
            console.log('sending local desc:', peerConn.localDescription);
            sendMessage(peerConn.localDescription);
        }, logError);
    };
    const onDataChannelCreated = (channel) => {
        console.log('onDataChannelCreated:', channel);
        channel.onopen = () => {
            console.log('CHANNEL opened!!!');
            sendText(nickname + ' joined room');
            setupNetplay();
        };
        channel.onmessage = receiveData;
    };
    const receiveData = (event) => {
        const data = event.data;
        const prot = new Uint8Array(data, 0, 8);
        let msg = null;
        switch (prot[0]) {
            case 0:
                const buf = new Uint16Array(data, 8, (data.byteLength - 8) >>> 1);
                dbg(String.fromCodePoint(...buf));
                return;
            case 1:
                msg = new Float64Array(data, 8, (data.byteLength - 8) >>> 3);
                dbg('Got Netplay setup on frame ' + msg[0].toString(10));
                peerStartFrame = peerFrame = msg[0];
                startNetplay();
                return;
            case 4:
                msg = new Float64Array(data, 8, (data.byteLength - 8) >>> 3);
                dbg('Got Netplay setup from host on frame ' + msg[0].toString(10));
                peerStartFrame = peerFrame = msg[0];
                setSeed(msg[1]);
                const { store } = lqrandomstate();
                store.set(msg.subarray(2), 0);
                startNetplay();
                return;
            case 2:
                msg = new Float64Array(data, 8, (data.byteLength - 8) >>> 3);
                dbg('Connected remote controller ' + msg[1] + ' at frame ' + msg[0].toString(10));
                const controller = new Controller(null);
                controller.buffer = new ReplayBuffer();
                controller.playing = true;
                controller.wait = true;
                controller.startFrame = msg[0];
                netControllers.push(controller);
                netControllerMap.set(msg[1], controller);
                create(controller);
                return;
            case 3:
                const frameData = new Float64Array(data, 8, (data.byteLength - 8) >>> 3);
                peerFrame = frameData[0];
                const frames = [];
                for (let i = 1; i < frameData.length; i = i + InputFrame.frameSize) {
                    const port = frameData[i + 19];
                    if (port === -1) {
                        continue;
                    }
                    const f = InputFrame.deserialize(frameData, i);
                    frames.push(f);
                }
                if (frames.length > 0) {
                    incoming.set(peerFrame, frames);
                }
                if (peerFrame < minFrame) {
                    minFrame = peerFrame;
                }
                if (peerFrame > maxFrame) {
                    maxFrame = peerFrame;
                }
                return;
            default:
                dbg('Recevied unknown message type: ' + prot[0].toString(16));
                console.log(new Uint8Array(data));
        }
    };
    const sendText = (value) => {
        const data = new ArrayBuffer(value.length * 2 + 8);
        // const prot = new Uint8Array(data, 0, 8) // not necessary yet, since message type (prot[0]) is 0 and rest is unused
        const buf = new Uint16Array(data, 8, value.length);
        for (let i = 0; i < value.length; i++) {
            buf[i] = value.codePointAt(i);
        }
        dbg(value);
        // console.log('Sending a total of ' + data.byteLength + ' bytes')
        dataChannel.send(data);
    };
    let startFrame = -1;
    let frame = -1;
    let peerStartFrame = -1;
    let peerFrame = -1;
    let peered = false;
    let initialized = false;
    const netControllerMap = new Map();
    const netControllers = [];
    const incoming = new Map();
    const setupNetplay = () => {
        dbg('Initializing netplay');
        for (let i = 0; i < localControllers.length; i++) {
            // TODO: for now, this is the cleanest way to 'pause' from here.. maybe refactor stuff later
            const c = localControllers[i];
            c.buffer = new ReplayBuffer();
            c.recording = false;
            c.playing = true;
            c.wait = true;
        }
        startFrame = frame;
        if (!isInitiator) {
            const data = new ArrayBuffer(16);
            const prot = new Uint8Array(data, 0, 8);
            prot[0] = 1;
            const msg = new Float64Array(data, 8, 1);
            msg[0] = frame;
            dataChannel.send(data);
            return;
        }
        const state = lqrandomstate();
        const data = new ArrayBuffer(24 + state.store.byteLength);
        const prot = new Uint8Array(data, 0, 8);
        prot[0] = 4;
        const msg = new Float64Array(data, 8, 2 + state.store.length);
        msg[0] = frame;
        msg[1] = state.seek;
        msg.set(state.store, 2);
        dataChannel.send(data);
    };
    const startNetplay = () => {
        peered = true;
        for (let i = 0; i < localControllers.length; i++) {
            netConnect(localControllers[i]);
        }
    };
    let create = null;
    let _c = new Controller(null);
    _c = null;
    /** Connect controller */
    const localControllers = [];
    const netConnect = (c) => {
        if (localControllers.indexOf(c) === -1) {
            localControllers.push(c);
        }
        if (peered) {
            c.buffer = new ReplayBuffer();
            c.playing = true;
            const data = new ArrayBuffer(Float64Array.BYTES_PER_ELEMENT * 3);
            const prot = new Uint8Array(data, 0, 8);
            prot[0] = 2;
            const msg = new Float64Array(data, 8, 2);
            msg[0] = absoluteFrame;
            msg[1] = c.portNumber;
            dataChannel.send(data);
            sendControllers();
        }
    };
    let lastFrame = -1;
    let absoluteFrame = 0;
    const sendControllers = () => {
        const data = new ArrayBuffer(8 + (InputFrame.byteLength + 8) * localControllers.length);
        const prot = new Uint8Array(data, 0, 8);
        prot[0] = 3;
        const frameBuffer = new Float64Array(data, 8, (1 + InputFrame.frameSize) * localControllers.length);
        frameBuffer[0] = absoluteFrame;
        // dbg('Sending frame data for ' + absoluteFrame)
        let fi = 1;
        for (let i = 0; i < localControllers.length; i++) {
            const c = localControllers[i];
            if (c.buffer.length > 0) {
                frameBuffer[fi] = c.portNumber;
                const frame = c.poll();
                frame.serialize(frameBuffer, fi);
                c.buffer.push(frame);
            }
            else {
                // set port # to -1
                frameBuffer[fi + 19] = -1;
            }
            // console.log('sending frame for ', c.portNumber, frameBuffer[fi])
            fi = fi + InputFrame.frameSize;
        }
        // console.log('sent', frameBuffer)
        dataChannel.send(data);
    };
    let minFrame = Infinity;
    let maxFrame = -Infinity;
    let lag = 0;
    const pollNetwork = (_frame) => {
        frame = _frame;
        if (!peered) {
            return false;
        }
        absoluteFrame = frame - startFrame;
        if (peerFrame - peerStartFrame > absoluteFrame) {
            dbg('we behind. ' + absoluteFrame + ' vs ' + (peerFrame - peerStartFrame));
        }
        while (lag < absoluteFrame - maxFrame) {
            if (absoluteFrame - maxFrame > 10) {
                break;
            }
            lag++;
        }
        // for (let i = 0; i < localControllers.length; i++) {
        //   localControllers[i].buffer.push(localControllers[i].poll())
        // }
        absoluteFrame = absoluteFrame - lag;
        if (netControllers.length > 0 && incoming.has(absoluteFrame)) {
            const f = incoming.get(absoluteFrame);
            // incoming.delete(absoluteFrame)
            for (let i = 0; i < f.length; i++) {
                if (!netControllerMap.has(f[i].port)) {
                    dbg('Error: could not find controller port: ' + f[i].port);
                    console.log(f, f[i]);
                    continue;
                }
                netControllerMap.get(f[i].port).buffer.push(f[i]);
            }
        }
        else if (netControllers.length > 0) {
            dbg(`no input for frame ${absoluteFrame}; min: ${minFrame}; max: ${maxFrame}. ${absoluteFrame - maxFrame}`);
            return false;
        }
        if (lastFrame >= frame) {
            dbg('already sent frame?');
            return false;
        }
        lastFrame = frame;
        sendControllers();
        return false;
    };
    return (_create) => {
        if (_create) {
            create = _create;
            console.log('hello world', create);
        }
        console.log('hello... world?', create);
        return { pollNetwork, netConnect };
    };
})();
const ImportRendering = (() => {
    const { radian, angleX, angleY, computeAngle, computeRadians, preciseAngle, lqrandom, lqrandomSync } = ImportMath();
    const { playAudio, toggleMute } = ImportAudio();
    const { Animation, Hitbubble, Hurtbubble, hurtbubbles, hitbubbles, hitbubbleCount, clearHitbubbles, addHitbubble, flagMap, typeMap } = ImportAnimation();
    const { Stage, StageElement, stages } = ImportStage();
    const { getFile, getObj, renderTick, addDirToIndex, dbg: dbgLog, dbgActive } = ImportTerminal();
    const { connected, Controller, checkConnections, keyboardGamepads, readyKeyboardControllers, Replay, NetBuffer } = ImportControllers();
    const { Model, Prefab } = ImportModel();
    const { swapRemoved } = ImportUtils();
    const characters = ['Asperagus', 'Cabbage', 'Daikon', 'Broccoli', 'Scallion'];
    let _m = new Model();
    _m = null;
    let _pf = new Prefab();
    _pf = null;
    let ctx = null;
    const global = window;
    let width = 0;
    let height = 0;
    let unpaused = true;
    let halted = false;
    let frame = 0;
    let frameDiff = 0;
    let frameRate = 0;
    let startGame = null;
    // need init?
    let entities = null;
    let uiEntities = null;
    let players = null;
    let dbg = null;
    let engineTick = null;
    let Animatable = null;
    let setActiveMode = null;
    let characterData = null;
    let calcColor = null;
    let toggleConstants = null;
    let Entity = null;
    let setStage = null;
    glMatrix.RANDOM = lqrandom;
    const init = (_entities, _uiEntities, _players, _dbg, _engineTick, _Animatable, _setActiveMode, _characterData, _calcColor, _toggleConstants, _Entity, _setStage) => {
        entities = _entities;
        uiEntities = _uiEntities;
        players = _players;
        dbg = _dbg;
        engineTick = _engineTick;
        Animatable = _Animatable;
        setActiveMode = _setActiveMode;
        characterData = _characterData;
        calcColor = _calcColor;
        toggleConstants = _toggleConstants;
        Entity = _Entity;
        setStage = (s) => {
            stage = s;
            _setStage(s);
        };
        importPrototype(Entity, Cursor, 'remove', 'place');
        importPrototype(Entity, Button, 'remove', 'place');
        importPrototype(Entity, Selection, 'remove', 'place');
        initGame(document.getElementById('blastzone'));
    };
    const perspective = mat4.create();
    const view = mat4.create();
    const combined = mat4.create();
    const screenToUI = mat4.create();
    const normal = mat4.create();
    let transform = combined;
    const cameraRotate = quat.create();
    const cameraPan = vec3.create();
    const cameraZoom = vec3.fromValues(1, 1, 1);
    const lookUp = vec3.fromValues(0, -1, 0);
    const ui = mat4.create();
    const focus = vec3.create();
    global.view = view;
    global.perspective = perspective;
    global.combined = combined;
    const degree = Math.PI / 180;
    const initCamera = () => {
        cameraPan[0] = 0;
        cameraPan[1] = 100;
        cameraPan[2] = 500;
        // quat.identity(cameraRotate)
        mat4.translate(ui, ui, vec3.fromValues(-width / 2, -height / 2, 1));
        mat4.invert(screenToUI, ui);
        mat4.perspective(perspective, degree * 90, width / height, 0.001, 1000);
        // mat4.scale(perspective, perspective, vec3.fromValues(-width, -height, -1))
        mat4.scale(perspective, perspective, vec3.fromValues(-width, -height, -1));
        mat4.lookAt(view, cameraPan, vec3.fromValues(0, 0, 0), lookUp);
        // mat4.fromRotationTranslationScale(view, cameraRotate, cameraPan, cameraZoom)
        // mat4.scale(ui, ui, new Float32Array([1 / width, 1 / height, 1]))
        // mat4.translate(view, view, cameraPan)
        // mat4.identity(view)
        // mat4.scale(perspective, view, cameraZoom)
        // mat4.translate(view, view, vec3.fromValues(width / 2, height / 2, 0))
        updateCamera();
    };
    const resizeCamera = () => {
        mat4.identity(ui);
        mat4.translate(ui, ui, vec3.fromValues(-width / 2, -height / 2, 1));
        mat4.invert(screenToUI, ui);
    };
    const updateCamera = () => {
        // mat4.lookAt(view, cameraPan, vec3.fromValues(0, 0, 0), lookUp)
        view[12] = cameraPan[0];
        view[13] = cameraPan[1];
        view[14] = cameraPan[2];
        mat4.multiply(combined, perspective, view);
        mat3.normalFromMat4(normal, combined);
        // mat4.invert(normal, combined)
        // mat4.transpose(normal, combined)
    };
    // need syncing?
    let stage = null;
    let hifi = true;
    let activeMode = null;
    const sync = (_stage, _hifi, _activeMode) => {
        stage = _stage;
        hifi = _hifi;
        activeMode = _activeMode;
    };
    const importPrototype = (from, to, ...properties) => {
        for (let i = 0; i < properties.length; i++) {
            to.prototype[properties[i]] = from.prototype[properties[i]];
        }
    };
    const rgba = (r, g, b, a) => {
        return 'rgba('.concat(r.toString(10), ',', g.toString(10), ',', b.toString(10), ',', a.toString(10), ')');
    };
    const hue2rgb = (p, q, t) => {
        if (t < 0) {
            t++;
        }
        if (t > 1) {
            t--;
        }
        if (t < 1 / 6) {
            return p + (q - p) * 6 * t;
        }
        if (t < 1 / 2) {
            return q;
        }
        if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
        }
        return p;
    };
    const hsla = (h, s, l, a) => {
        return 'hsla(' + Math.round(h * 255) + ',' + s * 100 + '%,' + l * 100 + '%,' + a + ')';
    };
    const hsl2rgb = (out, h, s, l) => {
        if (s === 0) {
            out[0] = out[1] = out[2] = Math.round(l * 255);
            return;
        }
        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        out[0] = Math.round(hue2rgb(p, q, h + 1 / 3) * 255);
        out[1] = Math.round(hue2rgb(p, q, h) * 255);
        out[2] = Math.round(hue2rgb(p, q, h - 1 / 3) * 255);
    };
    const rgb2hsl = (out, r, g, b) => {
        r = r / 255;
        g = g / 255;
        b = b / 255;
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let h = 0;
        let s = 0;
        const l = (max + min) / 2;
        if (max === min) {
            h = s = 0; // achromatic
        }
        else {
            const d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        out[0] = h;
        out[1] = s;
        out[2] = l;
    };
    const hsv2rgb = (() => {
        const data = [0, 0, 0, 1];
        const hue = 1 / 6;
        return (h, s, v) => {
            let r = 0;
            let g = 0;
            let b = 0;
            let i = 0;
            if (s === 0) {
                r = v;
                g = v;
                b = v;
            }
            else {
                h = h / hue;
                i = h | 0;
                data[0] = v * (1 - s);
                data[1] = v * (1 - s * (h - i));
                data[2] = v * (1 - s * (1 - (h - i)));
                switch (i) {
                    case 0:
                        r = v;
                        g = data[2];
                        b = data[0];
                        break;
                    case 1:
                        r = data[1];
                        g = v;
                        b = data[0];
                        break;
                    case 2:
                        r = data[0];
                        g = v;
                        b = data[2];
                        break;
                    case 3:
                        r = data[0];
                        g = data[1];
                        b = v;
                        break;
                    case 4:
                        r = data[2];
                        g = data[0];
                        b = v;
                        break;
                    default:
                        r = v;
                        g = data[0];
                        b = data[1];
                        break;
                }
            }
            data[0] = r;
            data[1] = g;
            data[2] = b;
            return data;
        };
    })();
    const complements = [];
    const hsv = [];
    const rgbaByte = (() => {
        const colors = [];
        colors.length = 256;
        ((colors) => {
            const grey = 16;
            const l = 256 - grey;
            for (let i = 0; i < grey; i++) {
                const c = (i >> 2) / 3;
                colors[i] = hsla(0, 0, c, ((i & 3) + 1) / 4);
                complements[i] = ((grey - i) >> 2 << 2) + (i & 3);
            }
            for (let i = 0; i < l; i++) {
                if (i % 16 >= 8) {
                    colors[i + grey] = hsla((i >> 4) / 12, 1 - (i >> 2 & 3) / 16, 0.5 + (i >> 2 & 3) / 16, ((i & 3) + 1) / 4);
                }
                else if (i % 16 < 4) {
                    colors[i + grey] = hsla((i >> 4) / 12, 1, 0.25, ((i & 3) + 1) / 4);
                }
                else {
                    colors[i + grey] = hsla((i >> 4) / 12, 1, 0.5, ((i & 3) + 1) / 4);
                }
                complements[i + grey] = grey + ((((i + l / 2 - 8) % l) >> 2 << 2) + (i & 3));
            }
        })(colors);
        global.rgbaByte = colors;
        return colors;
    })();
    const working = vec3.create();
    const point = (x, y) => {
        working[0] = x;
        working[1] = y;
        working[2] = 0;
        vec3.transformMat4(working, working, transform);
    };
    global.point = (x, y) => point(x, y) || working;
    const worldPoint = (x, y) => {
        working[0] = x;
        working[1] = y;
        working[2] = 0;
        vec3.transformMat4(working, working, combined);
    };
    global.worldPoint = (x, y) => worldPoint(x, y) || working;
    const working3d = vec3.create();
    const dPoint = (x, y, z) => {
        vec3.set;
        vec3.set(working3d, x, y, z);
        vec3.transformMat4(working3d, working3d, combined);
        return working3d;
    };
    global.dPoint = (x, y, z) => dPoint(x, y, z);
    const uiPoint = (x, y) => {
        working[0] = x;
        working[1] = y;
        working[2] = 0;
        vec3.transformMat4(working, working, ui);
    };
    global.uiPoint = (x, y) => worldPoint(x, y) || working;
    const working2 = vec3.create();
    const pathCapsule = (x, y, x2, y2, r, angles = 4) => {
        const rads = 2 * Math.PI - Math.atan2(x2 - x, y2 - y);
        let perp = rads - Math.PI;
        const step = 1 / angles * Math.PI;
        ctx.beginPath();
        point(x + Math.cos(perp) * r, y + Math.sin(perp) * r);
        ctx.moveTo(working[0], working[1]);
        for (let i = 0; i < angles; i++) {
            perp += step;
            point(x + Math.cos(perp) * r, y + Math.sin(perp) * r);
            ctx.lineTo(working[0], working[1]);
        }
        perp = rads + Math.PI * 2;
        for (let i = 0; i < angles + 1; i++) {
            point(x2 + Math.cos(perp) * r, y2 + Math.sin(perp) * r);
            ctx.lineTo(working[0], working[1]);
            perp += step;
        }
        ctx.closePath();
    };
    const fillCapsule = (x, y, x2, y2, r) => {
        pathCapsule(x, y, x2, y2, r);
        ctx.fill();
    };
    const strokeCapsule = (x, y, x2, y2, r) => {
        pathCapsule(x, y, x2, y2, r);
        ctx.stroke();
    };
    const drawCapsule = (x, y, x2, y2, r) => {
        pathCapsule(x, y, x2, y2, r);
        ctx.fill();
        ctx.stroke();
    };
    const pathCircle = (x, y, r) => {
        let perp = -Math.PI;
        const angles = 6;
        const step = 1 / angles * Math.PI * 2;
        ctx.beginPath();
        point(x + Math.cos(perp) * r, y + Math.sin(perp) * r);
        ctx.moveTo(working[0], working[1]);
        for (let i = 0; i < angles; i++) {
            perp += step;
            point(x + Math.cos(perp) * r, y + Math.sin(perp) * r);
            ctx.lineTo(working[0], working[1]);
        }
        ctx.closePath();
    };
    const strokeCircle = (x, y, radius) => {
        pathCircle(x, y, radius);
        ctx.stroke();
    };
    const fillCircle = (x, y, radius) => {
        pathCircle(x, y, radius);
        ctx.fill();
    };
    const drawCircle = (x, y, radius) => {
        pathCircle(x, y, radius);
        ctx.fill();
        ctx.stroke();
    };
    const headModel = new Float32Array([
        Math.cos(-Math.PI * 1.25), Math.sin(-Math.PI * 1.25), 0,
        Math.cos(Math.PI * 1.25), Math.sin(Math.PI * 1.25), 0,
        Math.cos(Math.PI * 2), Math.sin(Math.PI * 2), 0,
    ]);
    const pathVerts = (model, x, y, z, scale) => {
        ctx.beginPath();
        vec3.set(working3d, x + model[0] * scale[0], y + model[1] * scale[1], z + model[2] * scale[2]);
        vec3.transformMat4(working3d, working3d, transform);
        ctx.moveTo(working3d[0], working3d[1]);
        for (let i = 3; i < model.length; i = i + 3) {
            vec3.set(working3d, x + model[i] * scale[0], y + model[i + 1] * scale[1], z + model[i + 2] * scale[2]);
            vec3.transformMat4(working3d, working3d, transform);
            ctx.lineTo(working3d[0], working3d[1]);
        }
        ctx.closePath();
    };
    const v1 = working3d;
    const posv4 = vec4.create();
    const normalVector = vec4.create();
    const viewVector = vec4.create();
    const color = vec4.create();
    const ambientLight = vec3.fromValues(0.2, 0.2, 0.2);
    // const ambientLight = vec3.fromValues(1, 1, 1)
    const projected = mat4.create();
    const directional = vec3.fromValues(1, 1, 1);
    const direction = vec3.normalize(vec3.create(), vec3.fromValues(1, 1, -1));
    const cameraNormal = vec3.create();
    const world = mat4.create();
    const renderModel = (model) => {
        // console.log(model.transform)
        const t = mat4.mul(projected, transform, model.transform);
        mat4.mul(world, view, model.transform);
        // mat4.invert(world, view)
        const tris = model.tris;
        const verts = model.verts;
        for (let i = 0; i < tris.length; i = i + 3) {
            const n = model.surfaces[(i / 3) | 0];
            vec4.set(normalVector, model.normals[n * 3], model.normals[n * 3 + 1], -model.normals[n * 3 + 2], 0);
            vec4.transformMat4(normalVector, normalVector, world);
            vec4.normalize(normalVector, normalVector);
            v1[0] = verts[tris[i] * 3];
            v1[1] = verts[tris[i] * 3 + 1];
            v1[2] = verts[tris[i] * 3 + 2];
            vec3.set(posv4, v1[0], v1[1], v1[2]);
            vec3.transformMat4(posv4, posv4, model.transform);
            // mat4.getTranslation(viewVector, view)
            vec4.set(viewVector, cameraPan[0], cameraPan[1], cameraPan[2], 0);
            // vec4.transformMat4(viewVector, viewVector, world)
            vec3.sub(viewVector, posv4, viewVector);
            vec3.normalize(viewVector, viewVector);
            const dot = vec3.dot(viewVector, normalVector);
            if (dot < 0) {
                continue;
            }
            vec3.transformMat4(v1, v1, t);
            ctx.beginPath();
            ctx.moveTo(v1[0], v1[1]);
            v1[0] = verts[tris[i + 1] * 3];
            v1[1] = verts[tris[i + 1] * 3 + 1];
            v1[2] = verts[tris[i + 1] * 3 + 2];
            vec3.transformMat4(v1, v1, t);
            ctx.lineTo(v1[0], v1[1]);
            v1[0] = verts[tris[i + 2] * 3];
            v1[1] = verts[tris[i + 2] * 3 + 1];
            v1[2] = verts[tris[i + 2] * 3 + 2];
            vec3.transformMat4(v1, v1, t);
            ctx.lineTo(v1[0], v1[1]);
            ctx.closePath();
            // lighting
            const factor = Math.max(0, vec3.dot(normalVector, direction));
            vec3.transformMat3(normalVector, normalVector, normal);
            vec3.normalize(normalVector, normalVector);
            // console.log(v1, normal, model.normals[n * 3 | 0], factor)
            vec4.set(color, model.colors[n * 4], model.colors[n * 4 + 1], model.colors[n * 4 + 2], model.colors[n * 4 + 3]);
            ctx.fillStyle = rgba(Math.round(255 * Math.min(1, ambientLight[0] + color[0] * factor)), Math.round(255 * Math.min(1, ambientLight[1] + color[1] * factor)), Math.round(255 * Math.min(1, ambientLight[2] + color[2] * factor)), color[3]);
            // ctx.globalAlpha = 0.5
            ctx.fill();
        }
    };
    const renderPrefab = (prefab) => {
        for (let i = 0; i < prefab.models.length; i++) {
            renderModel(prefab.models[i]);
        }
    };
    const drawLine = (x, y, x2, y2) => {
        ctx.beginPath();
        point(x, y);
        ctx.moveTo(working[0], working[1]);
        point(x2, y2);
        ctx.lineTo(working[0], working[1]);
        ctx.stroke();
    };
    const drawRect = (x, y, w, h) => {
        ctx.beginPath();
        point(x, y);
        ctx.moveTo(working[0], working[1]);
        point(x + w, y);
        ctx.lineTo(working[0], working[1]);
        point(x + w, y + h);
        ctx.lineTo(working[0], working[1]);
        point(x, y + h);
        ctx.lineTo(working[0], working[1]);
        point(x, y);
        ctx.lineTo(working[0], working[1]);
        ctx.stroke();
    };
    const fillRect = (x, y, w, h) => {
        ctx.beginPath();
        point(x, y);
        ctx.moveTo(working[0], working[1]);
        point(x + w, y);
        ctx.lineTo(working[0], working[1]);
        point(x + w, y + h);
        ctx.lineTo(working[0], working[1]);
        point(x, y + h);
        ctx.lineTo(working[0], working[1]);
        point(x, y);
        ctx.lineTo(working[0], working[1]);
        ctx.fill();
    };
    const strokeStyle = (colorID) => {
        ctx.strokeStyle = rgbaByte[colorID];
    };
    const fillStyle = (colorID) => {
        ctx.fillStyle = rgbaByte[colorID];
    };
    let fontSize = 10;
    const setFontSize = (() => {
        const cache = new Map();
        return (size) => {
            if (size !== fontSize) {
                fontSize = size;
                if (!cache.has(fontSize)) {
                    cache.set(fontSize, fontSize.toString(10) + 'px "Droid Sans Mono", monospace');
                }
                ctx.font = cache.get(fontSize);
            }
        };
    })();
    const timeString = (() => {
        const colon = ':';
        const colonZero = ':0';
        let cacheFrame = null;
        let cache = null;
        return (frames) => {
            if (cacheFrame !== (frames / 60 | 0)) {
                cacheFrame = frames / 60 | 0;
                cache = (frames / 3600 | 0) + (frames % 3600 >= 600 ? colon : colonZero) + (frames % 3600 / 60 | 0);
            }
            return cache;
        };
    })();
    const drawText = (text, x, y) => {
        point(x, y);
        ctx.fillText(text, working[0], working[1]);
    };
    const paintText = (text, x, y) => {
        point(x, y);
        ctx.strokeText(text, working[0], working[1]);
        ctx.fillText(text, working[0], working[1]);
    };
    const strokeText = (text, x, y) => {
        point(x, y);
        ctx.strokeText(text, working[0], working[1]);
    };
    const Effects = (() => {
        // TODO: @optimize later
        class PhysicsParticle {
            constructor() {
                this.removed = false;
                this.startFrame = 0;
                this.duration = 0;
                this.x = 0;
                this.y = 0;
                this.x2 = 0;
                this.y2 = 0;
                this.dx = 0;
                this.dy = 0;
                this.r = 0;
                this.rad = 0;
                this.c = 0;
                this.a = 0;
            }
        }
        const physicsParticles = [];
        let physicsParticlesCount = 0;
        const physicsParticlesRemoved = [];
        let physicsParticlesRemovedCount = 0;
        const physicsParticlesBin = new Float64Array(128);
        let physicsParticlesBinCount = 0;
        const addPhysicsParticle = (x, y, dx, dy, r, c) => {
            let p = null;
            if (physicsParticlesRemovedCount > 0) {
                physicsParticlesRemovedCount = physicsParticlesRemovedCount - 1;
                p = physicsParticlesRemoved[physicsParticlesRemovedCount];
            }
            else {
                p = new PhysicsParticle();
            }
            p.x = x;
            p.y = y;
            p.x2 = x;
            p.y2 = y;
            p.a = 0.5;
            p.dx = dx;
            p.dy = dy;
            p.r = r;
            p.rad = 3;
            p.c = c;
            p.startFrame = frame;
            p.duration = 30;
            physicsParticles[physicsParticlesCount] = p;
            physicsParticlesCount++;
        };
        const renderPhysicsParticles = () => {
            for (let i = 0; i < physicsParticlesCount; i++) {
                const p = physicsParticles[i];
                fillStyle(p.c);
                ctx.globalAlpha = p.a;
                pathCapsule(p.x, p.y, p.x2, p.y2, p.rad, 2);
                ctx.fill();
                ctx.globalAlpha = 1;
            }
        };
        const tickPhysicsParticles = () => {
            let compact = 0;
            for (let i = 0; i < physicsParticlesCount; i++) {
                const p = physicsParticles[i];
                if (frame - p.startFrame > p.duration) {
                    physicsParticlesRemoved[physicsParticlesRemovedCount] = p;
                    physicsParticlesRemovedCount++;
                    compact++;
                }
                else {
                    if (compact > 0) {
                        physicsParticles[i - compact] = p;
                    }
                    p.x = p.x2;
                    p.y = p.y2;
                    const l = hitbubbleCount();
                    for (let i = 0; i < l; i++) {
                        const vx = hitbubbles[i].x - p.x;
                        const vy = hitbubbles[i].y - p.y;
                        const dist = Math.max(30, Math.sqrt(vx * vx + vy * vy) - hitbubbles[i].bubble.radius);
                        const angle = computeAngle(vx, vy);
                        p.dx = p.dx + angleX(angle) * (hitbubbles[i].bubble.knockback + hitbubbles[i].bubble.growth) * 0.5 / dist;
                        p.dy = p.dy + angleY(angle) * (hitbubbles[i].bubble.knockback + hitbubbles[i].bubble.growth) * 0.5 / dist;
                    }
                    let x2 = p.x + p.dx;
                    let y2 = p.y + p.dy;
                    const rad = (1 - (frame - p.startFrame) / p.duration) * p.r;
                    p.rad = rad;
                    const pt = stage.intersect(p.x, p.y - rad - 0.1, x2, y2 + rad);
                    if (pt !== null) {
                        x2 = pt[0];
                        y2 = pt[1] - rad;
                        const a = (frame - p.startFrame) / p.duration / 2;
                        p.a = 1 - a * a;
                    }
                    else {
                        const a = (frame - p.startFrame) / p.duration;
                        p.a = 1 - a * a;
                    }
                    p.x2 = x2;
                    p.y2 = y2;
                    p.dx = p.dx * 0.95;
                    p.dy = p.dy - 0.1;
                    p.dy = p.dy * 0.95;
                }
            }
            physicsParticlesCount = physicsParticlesCount - compact;
        };
        const renderPhysicsParticlesBin = () => {
        };
        const effects = [renderPhysicsParticles];
        const effectTicks = [tickPhysicsParticles];
        const bottom = [];
        const top = [];
        const ui = [];
        const removed = [];
        const removeTicks = [];
        const removebottom = [];
        const removetop = [];
        const removeui = [];
        const effectFunctions = {
            render: () => {
                for (let i = effects.length - 1; i >= 0; i--) {
                    effects[i]();
                }
                if (removed.length > 0) {
                    let index = 0;
                    let r = 0;
                    while (index < effects.length - r) {
                        if (r > 0) {
                            effects[index] = effects[index + r];
                        }
                        if (removed.indexOf(effects[index]) !== -1) {
                            r++;
                        }
                        else {
                            index++;
                        }
                    }
                    effects.length = effects.length - r;
                    removed.length = 0;
                }
            },
            tick: () => {
                for (let i = effectTicks.length - 1; i >= 0; i--) {
                    effectTicks[i]();
                }
                if (removeTicks.length > 0) {
                    let index = 0;
                    let r = 0;
                    while (index < effectTicks.length - r) {
                        if (r > 0) {
                            effectTicks[index] = effectTicks[index + r];
                        }
                        if (removeTicks.indexOf(effectTicks[index]) !== -1) {
                            r++;
                        }
                        else {
                            index++;
                        }
                    }
                    effectTicks.length = effectTicks.length - r;
                    removeTicks.length = 0;
                }
            },
            renderBottom: () => {
                for (let i = bottom.length - 1; i >= 0; i--) {
                    bottom[i]();
                }
                if (removebottom.length > 0) {
                    let index = 0;
                    let r = 0;
                    while (index < bottom.length - r) {
                        if (r > 0) {
                            bottom[index] = bottom[index + r];
                        }
                        if (removebottom.indexOf(bottom[index]) !== -1) {
                            r++;
                        }
                        else {
                            index++;
                        }
                    }
                    bottom.length = bottom.length - r;
                    removebottom.length = 0;
                }
            },
            renderTop: () => {
                for (let i = top.length - 1; i >= 0; i--) {
                    top[i]();
                }
                if (removetop.length > 0) {
                    let index = 0;
                    let r = 0;
                    while (index < top.length - r) {
                        if (r > 0) {
                            top[index] = top[index + r];
                        }
                        if (removetop.indexOf(top[index]) !== -1) {
                            r++;
                        }
                        else {
                            index++;
                        }
                    }
                    top.length = top.length - r;
                    removetop.length = 0;
                }
            },
            renderUI: () => {
                for (let i = ui.length - 1; i >= 0; i--) {
                    ui[i]();
                }
                if (removeui.length > 0) {
                    let index = 0;
                    let r = 0;
                    while (index < ui.length - r) {
                        if (r > 0) {
                            ui[index] = ui[index + r];
                        }
                        if (removeui.indexOf(ui[index]) !== -1) {
                            r++;
                        }
                        else {
                            index++;
                        }
                    }
                    ui.length = ui.length - r;
                    removeui.length = 0;
                }
            },
            reset: () => {
                effects.length = 0;
                effects.push(renderPhysicsParticles);
                effectTicks.length = 0;
                effectTicks.push(tickPhysicsParticles);
                removeTicks.length = 0;
                removed.length = 0;
                top.length = 0;
                ui.length = 0;
                removetop.length = 0;
                bottom.length = 0;
                removebottom.length = 0;
                removeui.length = 0;
            },
            fadingText: (str, r, g, b, owner, y) => {
                const start = frame;
                const duration = 80;
                const dist = 100;
                const f = () => {
                    if (frame - start > duration) {
                        removetop.push(f);
                        return;
                    }
                    let life = Math.pow(((frame - start) / duration), 2);
                    ctx.fillStyle = rgba(r, g, b, 1 - life);
                    setFontSize(16);
                    drawText(str, owner.x, owner.y + y - life * dist);
                };
                top.push(f);
            },
            powershield: (entity, x, y, r, gro) => {
                const duration = 6;
                const color = entity.lighter + 2;
                const start = frame;
                const controller = entity.controller;
                const grow = gro / duration;
                const f = () => {
                    if (frame - start > duration) {
                        removetop.push(f);
                    }
                    else {
                        strokeStyle(Math.floor(color - (frame - start) / duration * 3));
                        strokeCapsule(entity.x + entity.shieldX, entity.y - entity.shieldY, entity.x + entity.shieldX2, entity.y - entity.shieldY2, entity.powershieldSize + grow * (frame - start));
                    }
                };
                top.push(f);
            },
            shield: (entity, x, y, r) => {
                const animation = entity.animation;
                const controller = entity.controller;
                const color = entity.color - 2;
                const highlight = entity.lighter;
                const shadow = entity.darker;
                const f = () => {
                    if (entity.animation !== animation) {
                        removetop.push(f);
                    }
                    else {
                        const density = (entity.shieldVal * 5) | 0;
                        fillStyle(color);
                        const dx = entity.x + controller.hmove * entity.shieldMobility;
                        const dy = entity.y + controller.vmove * entity.shieldMobility;
                        const dr = entity.shieldMinSize + (1 - entity.shieldVal) * entity.lightShieldGrowth * entity.shield + entity.shieldGrowth * entity.shield;
                        fillCapsule(dx + entity.face * entity.shieldX, dy - entity.shieldY, dx + entity.face * entity.shieldX2, dy - entity.shieldY2, dr);
                        for (let i = 0; i < density; i++) {
                            ctx.fill();
                        }
                        strokeStyle(shadow);
                        ctx.stroke();
                        strokeStyle(highlight);
                        ctx.stroke();
                    }
                };
                top.push(f);
            },
            countdown: (size, shrink, duration, endText) => {
                let startFrame = frame;
                let n = duration;
                let t = n.toString(10);
                let f = () => {
                    if (frame - startFrame > 60) {
                        startFrame = frame;
                        if (t === endText) {
                            removeui.push(f);
                        }
                        else {
                            n--;
                            if (n === 0) {
                                t = endText;
                                playAudio('countdownend');
                            }
                            else {
                                t = n.toString(10);
                                playAudio('countdownmid');
                            }
                        }
                    }
                    else {
                        ctx.strokeStyle = '#333';
                        ctx.fillStyle = '#ccc';
                        // setFontSize((size - ((frame - startFrame) / 60) * shrink) * absoluteZ)
                        setFontSize(60);
                        paintText(t, width / 2, height / 2 + fontSize - 5);
                    }
                };
                playAudio('countdownmid');
                ui.push(f);
            },
            message: (size, shrink, duration, msg) => {
                const startFrame = frame;
                const hw = ctx.measureText(msg).width / 2;
                const f = () => {
                    if (frame - startFrame > duration) {
                        removeui.push(f);
                    }
                    else {
                        ctx.strokeStyle = '#333';
                        ctx.fillStyle = '#ccc';
                        // setFontSize((size - ((frame - startFrame) / 60) * shrink) * absoluteZ)
                        // setFontSize(60)
                        setFontSize((size - ((frame - startFrame) / duration) * shrink));
                        paintText(msg, width / 2, height / 2 + fontSize - 5);
                    }
                };
                ui.push(f);
            },
            respawn: entity => {
                let startFrame = frame;
                const duration = 30;
                const fadeTime = duration / 5;
                const x = entity.x;
                const y = entity.y;
                const c = entity.color + 2;
                const animation = entity.animation;
                const f = () => {
                    if (entity.animation !== animation || entity.removed) {
                        removetop.push(f);
                    }
                    else {
                        if (frame - startFrame >= duration) {
                            startFrame = frame;
                        }
                        strokeStyle(c - Math.floor((frame - startFrame) / fadeTime));
                        strokeCircle(x - (frame - startFrame) / 1.5, y, (frame - startFrame) / 4);
                        strokeCircle(x, y, (frame - startFrame) / 2.5);
                        strokeCircle(x + (frame - startFrame) / 1.5, y, (frame - startFrame) / 4);
                    }
                };
                top.push(f);
            },
            combo: (x, y, dx, dy, lag) => {
                const startFrame = frame + lag;
                const duration = 9;
                const f = () => {
                    if (frame - startFrame > duration) {
                        removetop.push(f);
                    }
                    else {
                        strokeStyle(59);
                        fillStyle(59);
                        const t = Math.min(1, 1 - (frame - startFrame) / duration);
                        const r = ((Math.abs(dx) + Math.abs(dy)) * 0.25 + 10);
                        fillCircle(x, y, t * r);
                        ctx.globalAlpha = t;
                        strokeCircle(x, y, r);
                        ctx.globalAlpha = 1;
                    }
                };
                top.push(f);
            },
            hit: (x, y, dx, dy, lag) => {
                const startFrame = frame + lag;
                const duration = 8;
                const f = () => {
                    if (frame - startFrame > duration) {
                        removetop.push(f);
                    }
                    else {
                        strokeStyle(59);
                        fillStyle(59);
                        const t = Math.min(1, 1 - (frame - startFrame) / duration);
                        const r = (Math.abs(dx) + Math.abs(dy) + 5);
                        fillCircle(x, y, t * r);
                        ctx.globalAlpha = t;
                        strokeCircle(x, y, r);
                        ctx.globalAlpha = 1;
                    }
                };
                top.push(f);
            },
            ledgegrab: (x, y, color) => {
                const startFrame = frame;
                const duration = 10;
                const f = () => {
                    if (frame - startFrame > duration) {
                        removetop.push(f);
                    }
                    else {
                        fillStyle(color);
                        ctx.globalAlpha = (1 - (frame - startFrame) / duration);
                        ctx.fillStyle = rgbaByte[color - 1];
                        fillCircle(x, y, (frame - startFrame) / duration * 20);
                        ctx.strokeStyle = rgbaByte[color];
                        strokeCircle(x, y, (frame - startFrame) / duration * 40);
                        ctx.globalAlpha = 1;
                    }
                };
                top.push(f);
            },
            hitbubble: (x, y, x2, y2, d, r, c) => {
                const startFrame = frame;
                const duration = (Math.max(5, d) / 2) | 0;
                const f = () => {
                    if (frame - startFrame > duration) {
                        removed.push(f);
                    }
                    else {
                        strokeStyle(c);
                        ctx.globalAlpha = (1 - (frame - startFrame) / duration);
                        strokeCapsule(x, y, x2, y2, r);
                        ctx.globalAlpha = 1;
                    }
                };
                effects.push(f);
            },
            hurtbubble: (x, y, dx, dy, r, c) => {
                addPhysicsParticle(x, y, dx, dy, r, c);
            },
            beam: (x, y, dx, dy, c) => {
                const startFrame = frame;
                const duration = Math.floor(24 + lqrandom() * 20);
                const f = () => {
                    if (frame - startFrame > duration) {
                        removed.push(f);
                    }
                    else {
                        strokeStyle(c);
                        const x2 = x + dx;
                        const y2 = y + dy;
                        // const a = (frame - startFrame) / duration
                        // ctx.globalAlpha = 1 - a * a
                        drawLine(x, y, x2, y2);
                        x = x2;
                        y = y2;
                        dx = dx * 0.95;
                        dy = dy * 0.95;
                    }
                };
                effects.push(f);
            },
            stageBeam: (x, y, dx, dy, r, c) => {
                const startFrame = frame;
                const duration = 15 + lqrandom() * 10;
                const f = () => {
                    if (frame - startFrame > duration) {
                        removed.push(f);
                    }
                    else {
                        const tr = ((1 - (frame - startFrame) / duration) * r);
                        const tx = x + dx * (frame - startFrame) / duration;
                        const ty = y - dy * (frame - startFrame) / duration;
                        strokeStyle(c);
                        drawLine(tx, ty, tx, ty - tr);
                    }
                };
                effects.push(f);
            },
            airjump: (x, y, c) => {
                const startFrame = frame;
                y = y + 3;
                const f = () => {
                    if (frame - startFrame > 15) {
                        removed.push(f);
                    }
                    else {
                        strokeStyle(c);
                        const a = (frame - startFrame) / 15;
                        ctx.globalAlpha = 1 - a * a;
                        strokeCapsule(x - (frame - startFrame + 10), y - ((startFrame - frame) / 15) * 2, x + (frame - startFrame + 10), y - ((startFrame - frame) / 15) * 2, (startFrame - frame + 15) / 3);
                        ctx.globalAlpha = 1;
                    }
                };
                effects.push(f);
            },
            skid: (x, y, dx, dy) => {
                const startFrame = frame;
                const f = () => {
                    if (frame - startFrame > 15) {
                        removed.push(f);
                    }
                    else {
                        strokeStyle(12);
                        strokeCircle(x + dx * (frame - startFrame) / 5, y - dy * (frame - startFrame) / 5, (startFrame - frame + 15));
                    }
                };
                dx = dx * (3 + lqrandom() * 4);
                dy = dy * 5;
                dy = dy + lqrandom() * 15;
                effects.push(f);
            },
            colorChooser: (ox, oy, w, h, entity) => {
                let lastMove = frame;
                const bw = w / 8;
                const bh = h / 8;
                const f = () => {
                    if (!entity.controller.ddown) {
                        removed.push(f);
                    }
                    else {
                        strokeStyle(3);
                        if (frame - lastMove > 8) {
                            if (entity.controller.hright > 0.3) {
                                entity.color = entity.color + 4 & 0xff;
                                lastMove = frame;
                            }
                            if (entity.controller.vright < -0.3) {
                                entity.color = entity.color - 32 & 0xff;
                                lastMove = frame;
                            }
                            if (entity.controller.vright > 0.3) {
                                entity.color = entity.color + 32 & 0xff;
                                lastMove = frame;
                            }
                            if (entity.controller.hright < -0.3) {
                                entity.color = entity.color - 4 & 0xff;
                                lastMove = frame;
                            }
                            if (lastMove === frame) {
                                entity.setColor(entity.color);
                                entity.controller.color = entity.color;
                            }
                        }
                        for (let x = 0; x < 8; x++) {
                            for (let y = 0; y < 8; y++) {
                                let bt = x * 4 + y * 32 + 2;
                                if (entity.team === 1) {
                                    if ((bt & 192) >> 6 < (bt & 48) >> 4 || (bt & 192) >> 6 < (bt & 12) >> 2) {
                                        bt = bt - 2;
                                    }
                                }
                                else if (entity.team === 2) {
                                    if ((bt & 48) >> 4 < (bt & 192) >> 6 || (bt & 48) >> 4 < (bt & 12) >> 2) {
                                        bt = bt - 2;
                                    }
                                }
                                else if (entity.team === 3) {
                                    if ((bt & 12) >> 2 < (bt & 192) >> 4 || (bt & 12) >> 2 < (bt & 48) >> 4) {
                                        bt = bt - 2;
                                    }
                                }
                                fillStyle(bt);
                                fillRect(ox + x * bw, oy + y * bh, bw, bh);
                                if (bt === entity.color) {
                                    strokeCircle(ox + x * bw + bw * 0.5, oy + y * bh + bh * 0.5, Math.min(bw, bh) / 2);
                                }
                            }
                        }
                        strokeStyle(15);
                        drawRect(ox, oy, bw * 8, bh * 8);
                    }
                };
                // todo: UI layer particles? It's kind of dumb that this is a particle..
                effects.push(f);
            }
        };
        return effectFunctions;
    })();
    let typed = '';
    let entered = false;
    let backspaced = false;
    const undef = 'undefined';
    let mx = 0;
    let my = 0;
    let mwdx = 0;
    let mwdy = 0;
    let mp = 0;
    let began = null;
    let countTo = null;
    const mouseListeners = [];
    const removeMouseListener = (fn) => {
        let i = mouseListeners.indexOf(fn);
        if (i === -1) {
            return;
        }
        mouseListeners.splice(i, 1);
    };
    const resetMouseListeners = () => {
        mouseListeners.length = 0;
    };
    let canvas = null;
    let canvasRatio = 1;
    const fixedScreen = (x, y, w, h) => {
        const run = () => { };
        const set = (nx, ny, nw, nh) => {
            x = nx;
            y = ny;
            w = nw;
            h = nh;
            refresh();
        };
        const refresh = () => {
            const wRatio = width / w;
            const hRatio = height / h;
            const ratio = Math.min(wRatio, hRatio);
            const xOffset = (width - w * ratio) / ratio / 2;
            const yOffset = (height - h * ratio) / ratio / 2;
            cameraPan[0] = x + w / 2;
            cameraPan[1] = y + h / 2;
            cameraPan[2] = 100;
            updateCamera();
        };
        refresh();
        return { run, set, refresh };
    };
    const fitOnScreen = (() => {
        const fitZoom = 12;
        const smoothness = 14;
        const pos = vec3.create();
        let lastRun = 0;
        let lastSpeed = 1000;
        const run = (smooth) => {
            let minX = Infinity;
            let maxX = -Infinity;
            let minY = Infinity;
            let maxY = -Infinity;
            for (let i = 0; i < entities.length; i++) {
                const entity = entities[i];
                if (!entity.removed && entity.follow) {
                    const x1 = entity.x + (entity.face === 1 ? -60 : -150);
                    const y1 = entity.y + entity.height - 60;
                    const x2 = entity.x + (entity.face === 1 ? 150 : 60);
                    const y2 = entity.y + 60;
                    if (x1 < minX) {
                        minX = x1;
                    }
                    if (x2 > maxX) {
                        maxX = x2;
                    }
                    if (y1 < minY) {
                        minY = y1;
                    }
                    if (y2 > maxY) {
                        maxY = y2;
                    }
                }
            }
            if (stage) {
                if (!Number.isFinite(minX) && stage.anchors.length > 0) {
                    minX = maxX = stage.anchors[0];
                    minY = maxY = stage.anchors[1];
                }
                for (let i = 0; i < stage.anchors.length; i = i + 3) {
                    const x = stage.anchors[i];
                    const y = stage.anchors[i + 1];
                    const strength = stage.anchors[i + 2];
                    if (x < minX) {
                        minX = minX + (x - minX) * strength;
                    }
                    if (x > maxX) {
                        maxX = maxX + (x - maxX) * strength;
                    }
                    if (y < minY) {
                        minY = minY + (y - minY) * strength;
                    }
                    if (y > maxY) {
                        maxY = maxY + (y - maxY) * strength;
                    }
                }
            }
            for (let i = 0; i < entities.length; i++) {
                const entity = entities[i];
                if (entity.follow && entity.lastFall.frame > frame - 120) {
                    const x = entity.lastFall.x;
                    const y = entity.lastFall.y;
                    const strength = 1 - Math.pow((frame - entity.lastFall.frame) / 120, 2);
                    if (x < minX) {
                        minX = minX + (x - minX) * strength;
                    }
                    if (x > maxX) {
                        maxX = maxX + (x - maxX) * strength;
                    }
                    if (y < minY) {
                        minY = minY + (y - minY) * strength;
                    }
                    if (y > maxY) {
                        maxY = maxY + (y - maxY) * strength;
                    }
                }
            }
            if (!smooth) {
                smooth = smoothness;
            }
            // panCamera(camX + (maxX - minX), camY + (maxY - minY))
            // console.log(minX, maxX, minY, maxY)
            const x = minX + (maxX - minX) / 2;
            const z = Math.max(50, maxX - minX, maxY - minY);
            const y = minY + (maxY - minY) / 2 - z * 0.005;
            // cameraPan[0] = x
            // cameraPan[1] = y
            // cameraPan[2] = Math.max(50, maxX - minX, maxY - minY)
            pos[0] = x;
            pos[1] = y;
            pos[2] = z;
            const n = Date.now();
            const dx = x - cameraPan[0];
            const dy = y - cameraPan[1];
            const bestSpeed = Math.min(Math.sqrt(dx * dx + dy * dy * 1.5) / 10000, lastSpeed * 1.25 + 0.001);
            lastSpeed = bestSpeed;
            vec3.lerp(cameraPan, cameraPan, pos, Math.min(n - lastRun, 100) * bestSpeed);
            lastRun = n;
            updateCamera();
        };
        return { run };
    })();
    let cameraType = fitOnScreen;
    const stopwatch = (() => {
        const startTimes = [];
        return {
            start: () => {
                startTimes.push(performance.now());
            },
            stop: (message) => {
                if (message) {
                    dbgLog(message + ': ' + (performance.now() - startTimes.pop()));
                }
                else {
                    return performance.now() - startTimes.pop();
                }
            }
        };
    })();
    const Cursor = (() => {
        const cursorConstructor = function (controller, x, y, data) {
            this.x = x;
            this.y = y;
            for (const key of Object.getOwnPropertyNames(data)) {
                if (data[key] instanceof Function) {
                    this[key] = data[key].bind(this);
                }
                else {
                    this[key] = data[key];
                }
            }
            this.controller = controller;
            controller.hook = this;
            this.hide = false;
            this.place();
            this.animation = 'idle';
            this.animations = { idle: {
                    clash: function () { }
                } };
            this.activeAnimation = this.animations['idle'];
            this.setAnimation = function () { };
        };
        cursorConstructor.prototype.act = function () {
            if (this.controller && !this.hide) {
                this.x = this.x + this.controller.hmove * 8;
                this.y = this.y + this.controller.vmove * 8;
                if (this.restrict) {
                    if (this.x > this.restrict[2]) {
                        this.x = this.restrict[2];
                    }
                    if (this.y > this.restrict[3]) {
                        this.y = this.restrict[3];
                    }
                    if (this.x < this.restrict[0]) {
                        this.x = this.restrict[0];
                    }
                    if (this.y < this.restrict[1]) {
                        this.y = this.restrict[1];
                    }
                }
                if (this.spring) {
                    if (this.x > this.spring[2]) {
                        this.x = this.x - (this.x - this.spring[2]) / 8;
                    }
                    if (this.y > this.spring[3]) {
                        this.y = this.y - (this.y - this.spring[3]) / 8;
                    }
                    if (this.x < this.spring[0]) {
                        this.x = this.x - (this.x - this.spring[0]) / 8;
                    }
                    if (this.y < this.spring[1]) {
                        this.y = this.y - (this.y - this.spring[1]) / 8;
                    }
                }
                if (this.controller.specialPress && this.back instanceof Function) {
                    this.back();
                }
                if (this.tick) {
                    this.tick();
                }
                if (this.controller.attackPress) {
                    for (let i = 0; i < uiEntities.length; i++) {
                        const entity = uiEntities[i];
                        if (entity instanceof Button) {
                            if (entity.handlers.press instanceof Function && entity.contains(this.x, this.y)) {
                                entity.handlers.press(this);
                            }
                        }
                        else if (entity instanceof Selection && entity.contains(this.x, this.y)) {
                            entity.press(this);
                        }
                    }
                }
            }
        };
        cursorConstructor.prototype.paint = function () {
            if (!this.hide) {
                ctx.strokeStyle = 'black';
                strokeCircle(this.x, this.y, 18);
                ctx.strokeStyle = 'white';
                fillStyle(this.color);
                drawCircle(this.x, this.y, 16);
                setFontSize(30);
                ctx.strokeStyle = 'black';
                fillStyle(15);
                paintText(this.controller.portNumber + 1 + '', this.x - 10, this.y + 10);
            }
        };
        return cursorConstructor;
    })();
    const Button = (() => {
        const buttonConstructor = function Button(text, x, y, w, h, handlers) {
            let hovered = false;
            let pressed = false;
            const circle = !!(handlers.circle);
            let r = w;
            const dragHandler = handlers.drag;
            const clickHandler = handlers.click;
            let x2 = x + w;
            let y2 = y + h;
            let xOffset = 0;
            let yOffset = 0;
            const checkMouse = (circle ? () => {
                // circle
                return Math.sqrt(Math.pow(mx - x, 2) + Math.pow(my - y, 2)) < r;
            } : () => {
                // rectangle
                return mx > x && my > y && mx < x2 && my < y2;
            });
            const listener = () => {
                if (pressed) {
                    if (mp & 1) {
                        if (dragHandler instanceof Function) {
                            dragHandler(xOffset, yOffset);
                        }
                    }
                    else {
                        if (checkMouse()) {
                            if (clickHandler instanceof Function) {
                                clickHandler(x - mx, y - my);
                            }
                        }
                        pressed = false;
                    }
                }
                else {
                    if (checkMouse()) {
                        if (!hovered) {
                            r = w * 1.25;
                            hovered = true;
                        }
                        if (mp & 2) {
                            pressed = true;
                            xOffset = x - mx;
                            yOffset = y - my;
                        }
                        if (mp & 8) {
                        }
                        if (mp & 32) {
                        }
                    }
                    else if (hovered) {
                        r = w;
                        hovered = false;
                    }
                }
            };
            this.setText = (t) => {
                text = t;
                setFontSize(h);
                w = ctx.measureText(text).width + 4;
                r = w / 2;
                x2 = x + w;
                this.x = x;
                this.y = y;
                this.w = w;
                this.h = h;
                this.r = w;
            };
            this.x = x;
            this.y = y;
            this.w = w;
            this.h = h;
            this.r = w;
            if (w === 0) {
                this.setText(text);
            }
            this.paint = (circle ? () => {
                drawCircle(x, y, r);
                drawText(text, x + 2, y + h * 0.2);
                setFontSize(h);
            } : () => {
                setFontSize(h);
                ctx.fillStyle = 'rgba(0,0,0,0.5)';
                ctx.strokeStyle = '#eee';
                drawRect(x, y, w, h);
                fillRect(x, y, w, h);
                ctx.strokeStyle = 'black';
                fillStyle(15);
                paintText(text, x + 2, y2 - h * 0.2);
            });
            this.contains = (xc, yc) => {
                return xc > x && yc > y && xc < x2 && yc < y2;
            };
            this.mouseListener = listener;
            this.place();
            this.handlers = handlers;
            this.animation = 'idle';
            this.animations = {
                idle: {
                    clash: () => { }
                }
            };
            this.activeAnimation = this.animations['idle'];
            this.setAnimation = () => false;
        };
        return buttonConstructor;
    })();
    const Selection = (() => {
        const selectionConstructor = function Selection(defaultText, x, y, w, rowHeight, showRows, items, handlers) {
            let hovered = false;
            let pressed = false;
            const expandedRows = Math.min(showRows, items.length);
            const eh = rowHeight * (Math.min(expandedRows, items.length) + 1);
            let h = rowHeight;
            const dragHandler = handlers.drag;
            const clickHandler = handlers.click;
            const selectHandler = handlers.select;
            const backHandler = handlers.back;
            let selectedIndex = -1;
            let selected = defaultText;
            let cursor = null;
            let lastScrolled = 0;
            let expanded = false;
            let typedIn = '';
            let scrolling = false;
            let scrollHover = false;
            let changedLast = false;
            let cursorPressed = false;
            let scrollIndex = 0;
            let scrollOffset = 0;
            let x2 = x + w;
            let y2 = y + h;
            let xOffset = 0;
            let yOffset = 0;
            const expand = () => {
                expanded = true;
                h = eh;
                y2 = y + h;
            };
            const retract = () => {
                expanded = false;
                h = rowHeight;
                y2 = y + h;
            };
            const toggle = () => {
                if (expanded) {
                    retract();
                }
                else {
                    expand();
                }
            };
            const checkMouse = () => mx > x && my > y && mx < x2 && my < y2;
            const checkScroll = () => expandedRows < items.length && mx > x2 - 12 && my > y + scrollOffset + rowHeight && mx < x2 + 4 && my < y + scrollOffset + rowHeight * 2;
            const startsWith = str => {
                const l = str.length;
                return item => item.substr(0, l).toLowerCase() === str;
            };
            const listener = () => {
                if (cursor) {
                    if (!expanded) {
                        toggle();
                    }
                    if (cursorPressed && !cursor.controller.attack) {
                        cursorPressed = false;
                    }
                    if (cursor.controller.special) {
                        toggle();
                        backHandler instanceof Function && this.back(cursor);
                        cursor.hide = false;
                        cursor = undefined;
                    }
                    else if (!cursorPressed && cursor.controller.attack && lastScrolled !== frame) {
                        selected = items[selectedIndex];
                        if (selectHandler instanceof Function) {
                            this.select(selected, selectedIndex, cursor);
                        }
                        toggle();
                        cursor.hide = false;
                        cursor = undefined;
                    }
                    else {
                        if (cursor.controller.vmove > 0) {
                            if (frame - lastScrolled > (1.1 - cursor.controller.vmove * cursor.controller.vmove) * 30) {
                                selectedIndex = (selectedIndex + 1) % items.length;
                                if (selectedIndex >= scrollIndex + expandedRows) {
                                    scrollIndex = selectedIndex - expandedRows + 1;
                                }
                                else if (selectedIndex < scrollIndex) {
                                    scrollIndex = selectedIndex;
                                }
                                scrollOffset = scrollIndex / (items.length - expandedRows) * (eh - rowHeight * 2);
                                if (changedLast) {
                                    lastScrolled = frame;
                                }
                                else {
                                    lastScrolled = frame + 12;
                                    changedLast = true;
                                }
                            }
                        }
                        else if (cursor.controller.vmove < 0) {
                            if (frame - lastScrolled > (1.1 - cursor.controller.vmove * cursor.controller.vmove) * 30) {
                                selectedIndex = (selectedIndex > 0) ? selectedIndex - 1 : items.length - 1;
                                if (selectedIndex >= scrollIndex + expandedRows) {
                                    scrollIndex = selectedIndex - expandedRows + 1;
                                }
                                else if (selectedIndex < scrollIndex) {
                                    scrollIndex = selectedIndex;
                                }
                                scrollOffset = scrollIndex / (items.length - expandedRows) * (eh - rowHeight * 2);
                                if (changedLast) {
                                    lastScrolled = frame;
                                }
                                else {
                                    lastScrolled = frame + 12;
                                    changedLast = true;
                                }
                            }
                        }
                        else {
                            changedLast = false;
                            lastScrolled = 0;
                        }
                    }
                }
                else {
                    if (expanded) {
                        if (typed) {
                            if (typedIn.length === 0) {
                                typedIn = typed;
                            }
                            else {
                                typedIn = typedIn + typed;
                            }
                            selected = typedIn;
                            selectedIndex = items.indexOf(items.filter(startsWith(typedIn.toLowerCase()))[0]);
                            scrollIndex = Math.min(Math.max(0, selectedIndex), items.length - expandedRows);
                            scrollOffset = scrollIndex / (items.length - expandedRows) * (eh - rowHeight * 2);
                        }
                        if (backspaced) {
                            typedIn = typedIn.substr(0, typedIn.length - 1);
                            selected = typedIn;
                        }
                        if (entered) {
                            if (selectedIndex >= 0) {
                                selected = items[selectedIndex];
                                if (selectHandler instanceof Function) {
                                    this.select(selected, selectedIndex);
                                }
                            }
                            else {
                                selected = defaultText;
                            }
                            typedIn = '';
                            retract();
                        }
                    }
                    if (mwdy !== 0) {
                        scrollIndex = Math.min(Math.max(0, scrollIndex - mwdy / 40), items.length - expandedRows);
                        scrollOffset = scrollIndex / (items.length - expandedRows) * (eh - rowHeight * 2);
                    }
                    if (scrolling) {
                        if (mp & 1) {
                            scrollOffset = Math.min(Math.max(0, my - yOffset - y), eh - rowHeight * 2);
                            scrollIndex = Math.floor(scrollOffset / (eh - rowHeight * 2) * (items.length - expandedRows));
                        }
                        else {
                            scrolling = false;
                        }
                    }
                    if (pressed) {
                        if (mp & 1) {
                            if (dragHandler instanceof Function) {
                                dragHandler();
                            }
                        }
                        else {
                            if (checkMouse()) {
                                if (clickHandler instanceof Function) {
                                    clickHandler();
                                }
                                if (my - y > rowHeight) {
                                    selectedIndex = Math.floor((my - y - rowHeight) / rowHeight) + scrollIndex;
                                    selected = items[selectedIndex];
                                    if (selectHandler instanceof Function) {
                                        this.select(selected, selectedIndex);
                                    }
                                }
                                toggle();
                            }
                            pressed = false;
                        }
                    }
                    else {
                        if (expanded && scrollHover && !scrolling) {
                            scrollHover = false;
                        }
                        if (expanded && checkScroll()) {
                            scrollHover = true;
                            if (mp & 2) {
                                scrolling = true;
                                yOffset = my - y - scrollOffset;
                            }
                        }
                        else if (checkMouse()) {
                            if (!hovered) {
                                hovered = true;
                            }
                            if (mp & 2) {
                                pressed = true;
                                xOffset = x - mx;
                                yOffset = y - my;
                            }
                            if (mp & 8) {
                            }
                            if (mp & 32) {
                            }
                        }
                        else {
                            if (mp & 2) {
                                retract();
                            }
                            if (hovered) {
                                hovered = false;
                            }
                        }
                    }
                }
            };
            if (w === 0) {
                setFontSize(rowHeight);
                w = ctx.measureText(defaultText).width;
                for (let i = 0; i < items.length; i++) {
                    if (ctx.measureText(items[i]).width > w) {
                        w = ctx.measureText(items[i]).width;
                    }
                }
                w = w + 4;
                x2 = x + w;
            }
            this.select = selectHandler;
            this.back = backHandler;
            this.press = cursoro => {
                if (!cursor) {
                    cursor = cursoro;
                    cursor.hide = true;
                    cursorPressed = true;
                    lastScrolled = frame;
                    if (selectedIndex === -1) {
                        selectedIndex = 0;
                        selected = items[selectedIndex];
                    }
                    toggle();
                }
            };
            this.reset = () => {
                selectedIndex = -1;
                selected = defaultText;
            };
            this.x = x;
            this.y = y;
            this.w = w;
            this.h = h;
            this.r = w;
            this.paint = () => {
                const yOffset = rowHeight * 0.8 + rowHeight;
                setFontSize(rowHeight);
                ctx.fillStyle = 'rgba(0,0,0,0.5)';
                ctx.strokeStyle = '#eee';
                if (expanded) {
                    fillRect(x, y, w, eh);
                    drawLine(x, y + rowHeight, x + w, y + rowHeight);
                    drawRect(x, y, w, eh);
                    if (expandedRows < items.length) {
                        fillRect(x2 - (scrollHover ? 12 : 4), y + rowHeight + scrollOffset, (scrollHover ? 16 : 8), rowHeight);
                        drawRect(x2 - (scrollHover ? 12 : 4), y + rowHeight + scrollOffset, (scrollHover ? 16 : 8), rowHeight);
                    }
                    ctx.strokeStyle = 'black';
                    fillStyle(15);
                    for (let i = 0; i < expandedRows && i + scrollIndex < items.length; i++) {
                        if (i + scrollIndex === selectedIndex) {
                            ctx.strokeStyle = 'white';
                            ctx.fillStyle = '#111';
                            drawRect(x - 4, i * rowHeight + y + rowHeight, ctx.measureText(items[i + scrollIndex]).width + 8, rowHeight);
                            fillRect(x - 4, i * rowHeight + y + rowHeight, ctx.measureText(items[i + scrollIndex]).width + 8, rowHeight);
                            ctx.strokeStyle = 'black';
                            fillStyle(15);
                        }
                        paintText(items[i + scrollIndex], x + 2, i * rowHeight + y + yOffset);
                    }
                }
                else {
                    fillRect(x, y, w, rowHeight);
                    drawRect(x, y, w, rowHeight);
                    fillStyle(15);
                }
                ctx.strokeStyle = 'black';
                fillStyle(15);
                paintText(selected, x + 2, y + rowHeight * 0.8);
            };
            this.contains = (xc, yc) => xc > x && yc > y && xc < x2 && yc < y2;
            this.mouseListener = listener;
            this.place();
        };
        return selectionConstructor;
    })();
    let loseFrames = null;
    let minRate = 0;
    let maxRate = 0;
    const fps = (() => {
        const start = performance.now();
        let last = start;
        let cur = start;
        let diff = 0;
        let lostFrames = 0;
        let timeFrame = 0;
        let frameTime = 60 / 1000;
        const average = [];
        let acrsr = 0;
        const sum = (n1, n2) => n1 + n2;
        const run = () => {
            cur = performance.now();
            diff = cur - last;
            timeFrame = Math.floor((cur - start) * frameTime);
            if (unpaused) {
                frame = timeFrame - lostFrames;
                frameDiff = timeFrame - Math.floor((last - start) * frameTime);
            }
            else {
                frameDiff = 0;
                lostFrames = lostFrames + timeFrame - Math.floor((last - start) * frameTime);
            }
            last = cur;
            average[acrsr] = diff;
            acrsr = (acrsr + 1) % 30;
            frameRate = 1000 / (average.reduce(sum) / average.length);
            maxRate = 1000 / average.reduce((a, b) => Math.min(a, b)) | 0;
            minRate = 1000 / average.reduce((a, b) => Math.max(a, b)) | 0;
            return frameRate; // returns approx fps
        };
        average.length = 30;
        loseFrames = frames => {
            lostFrames = lostFrames + frames;
        };
        return run;
    })();
    const frameTick = (() => {
        const drawStageElement = element => {
            const p1 = vec3.fromValues(element.x, element.y, 10);
            vec3.transformMat4(p1, p1, combined);
            const p2 = vec3.fromValues(element.x2, element.y2, 10);
            vec3.transformMat4(p2, p2, combined);
            const p3 = vec3.fromValues(element.x2, element.y2, -10);
            vec3.transformMat4(p3, p3, combined);
            const p4 = vec3.fromValues(element.x, element.y, -10);
            vec3.transformMat4(p4, p4, combined);
            ctx.beginPath();
            ctx.moveTo(p1[0], p1[1]);
            ctx.lineTo(p2[0], p2[1]);
            ctx.lineTo(p3[0], p3[1]);
            ctx.lineTo(p4[0], p4[1]);
            ctx.closePath();
            ctx.stroke();
            ctx.fill();
            if (element.leftOccupied) {
                fillCircle(element.x, element.y, 8);
            }
            if (element.rightOccupied) {
                fillCircle(element.x2, element.y2, 8);
            }
            if ((element.bottom || element.left || element.right || element.bottomless || (element.top && !element.solid)) && (element.x !== element.x2)) {
                if (unpaused) {
                    element.particles = element.particles + lqrandom() * element.length / 1000;
                    const qty = (element.particles | 0);
                    for (let i = 0; i < qty; i++) {
                        const x = element.x + lqrandom() * (element.w - 12) + 6;
                        Effects.stageBeam(x + lqrandom() * 10 - 5, element.yAt(x) + 3 + lqrandom() * 10 - 5, lqrandom() * 20 - 10, lqrandom() * -30, 6, (lqrandom() * 2 | 0) * 4 + 8);
                    }
                    element.particles = element.particles % 1;
                }
            }
            return;
            // if (element.solid) {
            //   if ((element.top && (yd1f > 0 || yd2f > 0)) || (element.left && (xd1f > 0 || xd2f > 0)) || (element.right && (xd1f < 0 || xd2f < 0)) || (element.bottom && (yd1f < 0 || yd2f < 0))) {
            //     ctx.globalAlpha = 0.7
            //   } else {
            //     ctx.globalAlpha = 0.15
            //   }
            // } else {
            //   ctx.globalAlpha = 0.15
            // }
            // // drawLine(element.x - xd1b, element.y - yd1b, element.x2 - xd2b, element.y2 - yd2b)
            // if (element.drawLeft) {
            //   // drawLine(element.x + xd1f, element.y + yd1f, element.x - xd1b, element.y - yd1b)
            // }
            // if (element.drawRight) {
            //   // drawLine(element.x2 + xd2f, element.y2 + yd2f, element.x2 - xd2b, element.y2 - yd2b)
            // }
            // ctx.globalAlpha = 1
        };
        const drawStageDecor = element => {
            const p1 = vec3.fromValues(element.x, element.y, element.leftDepth1);
            vec3.transformMat4(p1, p1, combined);
            const p2 = vec3.fromValues(element.x2, element.y2, element.rightDepth1);
            vec3.transformMat4(p2, p2, combined);
            const p3 = vec3.fromValues(element.x2, element.y2, -element.rightDepth2);
            vec3.transformMat4(p3, p3, combined);
            const p4 = vec3.fromValues(element.x, element.y, -element.leftDepth2);
            vec3.transformMat4(p4, p4, combined);
            // let p1 = vec4.fromValues(element.x, element.y, element.leftDepth1, 1)
            // vec4.transformMat4(p1, p1, combined)
            // let p2 = vec4.fromValues(element.x2, element.y2, element.rightDepth1, 1)
            // vec4.transformMat4(p2, p2, combined)
            // let p3 = vec4.fromValues(element.x2, element.y2, -element.rightDepth2, 1)
            // vec4.transformMat4(p3, p3, combined)
            // let p4 = vec4.fromValues(element.x, element.y, -element.leftDepth2, 1)
            // vec4.transformMat4(p4, p4, combined)
            ctx.beginPath();
            ctx.moveTo(p1[0], p1[1]);
            ctx.lineTo(p2[0], p2[1]);
            ctx.lineTo(p3[0], p3[1]);
            ctx.lineTo(p4[0], p4[1]);
            ctx.closePath();
            // ctx.stroke()
            ctx.fill();
            return;
            // todo: fix leftDepth1/2/right because it's broken and makes no sense
            // needs separate variables for front/back instead of just mirroring the front variable
            // if (element.drawFront) {
            //   ctx.globalAlpha = element.alpha1
            // }
            // if (element.solid) {
            //   if ((element.top && (yd1f > 0 || yd2f > 0)) || (element.left && (xd1f > 0 || xd2f > 0)) || (element.right && (xd1f < 0 || xd2f < 0)) || (element.bottom && (yd1f < 0 || yd2f < 0))) {
            //     // using "solid [side]" flags should still work for decor for angle-based coloration
            //     // basically overrides any preset alpha4, alphaLeft, alphaRight values
            //     a = 0.7
            //   } else {
            //     a = 0.15
            //   }
            //   element.alpha4 = element.alphaLeft = element.alphaRight = a
            // }
            // if (element.drawBack) {
            //   ctx.globalAlpha = element.alpha4
            //   drawLine(element.x - xd1b, element.y - yd1b, element.x2 - xd2b, element.y2 - yd2b)
            // }
            // if (element.drawLeft) {
            //   ctx.globalAlpha = element.alphaLeft
            //   drawLine(element.x + xd1f, element.y + yd1f, element.x - xd1b, element.y - yd1b)
            // }
            // if (element.drawRight) {
            //   ctx.globalAlpha = element.alphaRight
            //   drawLine(element.x2 + xd2f, element.y2 + yd2f, element.x2 - xd2b, element.y2 - yd2b)
            // }
            // ctx.globalAlpha = 1
        };
        const msFramerate = ms => {
            const time = (ms * 1000 | 0);
            return '00000'.substr(time.toString().length) + time + 'ns,' + ('   ' + (1000 / ms).toFixed(2)).substr(((1000 / ms).toFixed(2) + '').length - 4) + 'fps';
        };
        const backgroundStyle = '#444444';
        const create = controller => {
            connected.push(controller);
            controller.portNumber = connected.indexOf(controller);
            if (activeMode.connect) {
                activeMode.connect(controller);
            }
            netConnect(controller);
        };
        const destroy = controller => {
            const index = connected.indexOf(controller);
            if (index !== -1) {
                connected.splice(index, 1);
                if (activeMode.disconnect) {
                    activeMode.disconnect(controller);
                }
            }
        };
        const fn = controller => {
            connected.push(controller);
            connected.indexOf(controller);
            if (activeMode.connect) {
                activeMode.connect(controller);
            }
        };
        const { netConnect } = ImportNetworking(fn);
        const tick = () => {
            if (halted) {
                halted = false;
                unpaused = true;
            }
            let strokeByte = -1;
            let fillByte = -1;
            stopwatch.start();
            checkConnections(create, destroy);
            /*if (connected.length === 0) {
              dbg.log('Press escape to connect the keyboard as a controller. Press the A button to connect a gamepad.')
            }*/
            fps();
            if (frameDiff > 30) {
                loseFrames(frameDiff);
                frameDiff = 0;
            }
            navigator.getGamepads(); // update gamepads
            ctx.fillStyle = backgroundStyle;
            ctx.fillRect(-width / 2, -height / 2, width, height);
            while (frameDiff > 0) {
                frameDiff--;
                if (engineTick(frame - frameDiff)) {
                    unpaused = false;
                    halted = true;
                    break;
                }
                const l = hitbubbleCount();
                strokeByte = 14;
                strokeStyle(strokeByte);
                // hitbubble particles
                for (let i = 0; i < l; i++) {
                    const hb = hitbubbles[i];
                    const b = hb.bubble;
                    Effects.hitbubble(hb.x, hb.y, hb.x2, hb.y2, 10, b.radius, b.color);
                }
                // hurtbubble particles
                for (let i = 0; i < hurtbubbles.length; i++) {
                    const hb = hurtbubbles[i];
                    const owner = hb.owner;
                    if (!owner.removed && hb.type !== 0 && lqrandom() < 1 / owner.hurtbubbles.length) {
                        let particleByte = owner.color - 2;
                        if (owner.stun > 0 || owner.lag > 0) {
                            particleByte = owner.lighter;
                        }
                        const x = hb.x + owner.x;
                        const y = hb.y + owner.y;
                        const x2 = hb.x2 + owner.x;
                        const y2 = hb.y2 + owner.y;
                        const ra = lqrandom() * 360;
                        const r = lqrandom();
                        const dist = (1 - r * r) * (hb.radius - Math.sqrt(hb.radius));
                        const rp = lqrandom();
                        const cx = rp * (x2 - x) + x;
                        const cy = rp * (y2 - y) + y;
                        let kbx = 0;
                        let kby = 0;
                        if (owner.kb > 0) {
                            const kba = owner.kba + lqrandom() * 18 - 9;
                            kbx = angleX(kba) * owner.kb;
                            kby = angleY(kba) * owner.kb;
                        }
                        hifi && Effects.hurtbubble(cx + angleX(ra) * dist, cy + angleY(ra) * dist, (owner.dx + owner.slide) / 2 + kbx, -owner.dy / 2 - kby, Math.sqrt(hb.radius), particleByte);
                    }
                }
                Effects.tick();
            }
            cameraType.run && cameraType.run();
            // ctx.setTransform(1 / absoluteZ, 0, 0, 1 / absoluteZ, absoluteX / absoluteZ, absoluteY / absoluteZ)
            // ctx.setTransform(1, 0, 0, 1, width / 2, height / 2)
            transform = combined;
            for (let i = 0; i < mouseListeners.length; i++) {
                mouseListeners[i]();
            }
            Effects.renderBottom();
            // fillStyle(163)
            ctx.fillStyle = rgba(32, 32, 32, 0.5);
            if (stage) {
                strokeStyle(15);
                // ctx.globalAlpha = 1
                // stage.decor.forEach(drawStageDecor)
                // ctx.globalAlpha = 1
                if ((dbg.drawStage & 1) !== 0 && stage.prefab) {
                    renderPrefab(stage.prefab);
                }
                if ((dbg.drawStage & 2) !== 0 || !stage.prefab) {
                    stage.elements.forEach(drawStageElement);
                }
            }
            fillStyle(163);
            strokeStyle(15);
            // render blast zone
            drawRect(stage.blastLeft, stage.blastTop, stage.blastRight - stage.blastLeft, stage.blastBottom - stage.blastTop);
            Effects.render();
            strokeStyle(2);
            ctx.lineWidth = 4;
            // draw entity shadows
            for (let i = 0; i < entities.length; i++) {
                const e = entities[i];
                if (e.animation === 'ledgegrab' || e.animation === 'ledgehang') {
                    continue;
                }
                const p = e.airborne ? e.hover : e.platform;
                if (p && e.hurtbubbles.length > 0) {
                    const y = p.yAt(e.x);
                    const a = Math.min(30 / (y - e.y), 0.7);
                    if (a > 0.01) {
                        ctx.globalAlpha = a;
                        let x1 = e.hurtbubbles[0].x;
                        let x2 = e.hurtbubbles[0].x;
                        for (let i = 0; i < e.hurtbubbles.length; i++) {
                            const h = e.hurtbubbles[i];
                            x1 = Math.min(x1, h.x - h.radius, h.x2 - h.radius);
                            x2 = Math.max(x2, h.x + h.radius, h.x2 + h.radius);
                        }
                        x1 = Math.max(e.x + x1 * Math.min(1, a * 2), p.x);
                        x2 = Math.min(e.x + x2 * Math.min(1, a * 2), p.x2);
                        drawLine(x1, p.yAt(x1), x2, p.yAt(x2));
                    }
                }
            }
            ctx.globalAlpha = 1;
            ctx.lineWidth = 2;
            // render hitbubbles
            if (dbg.drawHitbubbles) {
                const l = hitbubbleCount();
                strokeByte = 14;
                strokeStyle(strokeByte);
                for (let i = 0; i < l; i++) {
                    const hb = hitbubbles[i];
                    const b = hb.bubble;
                    const c = b.color;
                    const pa = hb.angle(false, true, 0);
                    if (fillByte !== c) {
                        fillByte = c;
                        fillStyle(c);
                    }
                    fillCapsule(hb.x, hb.y, hb.x2, hb.y2, b.radius);
                    if (b.sakurai) {
                        strokeCircle(hb.x, hb.y, b.radius / 3);
                    }
                    else if (b.knockback > 0) {
                        if (strokeByte !== 14) {
                            strokeByte = 14;
                            strokeStyle(14);
                        }
                        drawLine(hb.x, hb.y, hb.x + b.radius * angleX(pa), hb.y - b.radius * angleY(pa));
                    }
                }
            }
            // render hurtbubbles
            if (dbg.drawHurtbubbles) {
                ctx.lineWidth = 2;
                strokeByte = 15;
                fillByte = 254;
                let ls = strokeByte;
                let lf = fillByte;
                strokeStyle(strokeByte);
                fillStyle(fillByte);
                for (let i = 0; i < hurtbubbles.length; i++) {
                    const hb = hurtbubbles[i];
                    const owner = hb.owner;
                    if (!owner.removed && hb.type !== 0) {
                        strokeByte = 15;
                        fillByte = 254;
                        if (owner.activeAnimation.helpless) {
                            strokeByte = owner.contrast;
                        }
                        if (hb.type === 4) {
                            fillByte = owner.color;
                            strokeByte = 14;
                            if (frame % 12 < 6) {
                                fillByte--;
                                strokeByte--;
                                if (frame % 12 < 3) {
                                    fillByte--;
                                    strokeByte--;
                                }
                            }
                            else if (frame % 12 > 9) {
                                fillByte--;
                                strokeByte--;
                            }
                        }
                        else if (hb.type === 3) {
                            fillByte = owner.color - 2 & 0xff;
                        }
                        else if (hb.type === 5) {
                            fillByte = owner.contrast - 1 & 0xff;
                            strokeByte = owner.color + 1 & 0xff;
                        }
                        else {
                            fillByte = owner.color;
                        }
                        if (owner.flash) {
                            strokeByte = strokeByte - 3;
                            fillByte = fillByte - 2;
                        }
                        else if (owner.stun > 0) {
                            fillByte = fillByte - 1;
                        }
                        else if (hb.type === 6) {
                            fillByte = fillByte - 1;
                            strokeByte = strokeByte - 1;
                        }
                        if (strokeByte !== ls) {
                            strokeStyle(strokeByte);
                            ls = strokeByte;
                        }
                        if (fillByte !== lf) {
                            fillStyle(fillByte);
                            lf = fillByte;
                        }
                        let x = hb.x + owner.x;
                        let y = hb.y + owner.y;
                        let x2 = hb.x2 + owner.x;
                        let y2 = hb.y2 + owner.y;
                        const r = hb.radius;
                        if (owner.lag > 0 && owner.hitlag) {
                            // hitlag twitching/shake
                            x = x + angleX((frame / 4 | 0) % 16 * 33) * (owner.lastInjury.knockback / 4);
                            y = y + angleY((frame / 4 | 0) % 16 * 33) * (owner.lastInjury.knockback / 4);
                            x2 = x2 + angleX((frame / 4 | 0) % 16 * 33) * (owner.lastInjury.knockback / 4);
                            y2 = y2 + angleY((frame / 4 | 0) % 16 * 33) * (owner.lastInjury.knockback / 4);
                            if (owner.lag % 6 < 3) {
                                strokeByte = strokeByte - 3;
                                fillByte = fillByte - 2;
                            }
                            else {
                                strokeByte = strokeByte - 2;
                                fillByte = fillByte - 1;
                            }
                        }
                        if (hb !== owner.headbubble) {
                            drawCapsule(x, y, x2, y2, r);
                        }
                        else {
                            drawCapsule(x, y, x2, y2, r);
                            ctx.lineWidth = 4;
                            pathVerts(headModel, x, y, 0, vec3.fromValues(owner.face * r, r, r));
                            ctx.stroke();
                            ctx.lineWidth = 2;
                        }
                    }
                }
                ctx.lineWidth = 2;
            }
            // render ledge grab boxes
            if (dbg.drawLedgeGrab) {
                for (let i = 0; i < entities.length; i++) {
                    const entity = entities[i];
                    if (!entity.activeAnimation.keyframeData.noLedgeGrab && entity.airborne && (entity.activeAnimation.keyframeData.grabDirections || entity.activeAnimation.grabDirections)) {
                        const directions = entity.activeAnimation.keyframeData.grabDirections || entity.activeAnimation.grabDirections;
                        if (entity.face === 1) {
                            ctx.strokeStyle = 'rgba(200,0,200,0.7)';
                            (directions & 128) && drawRect(entity.x - entity.reverseGrabRange, entity.y - entity.grabStart - entity.grabHeight, entity.reverseGrabRange, entity.grabHeight);
                            ctx.strokeStyle = 'rgba(220,220,64,0.7)';
                            (directions & 64) && drawRect(entity.x, entity.y - entity.grabStart - entity.grabHeight, entity.forwardGrabRange, entity.grabHeight);
                        }
                        else {
                            ctx.strokeStyle = 'rgba(220,220,64,0.7)';
                            (directions & 64) && drawRect(entity.x - entity.forwardGrabRange, entity.y - entity.grabStart - entity.grabHeight, entity.forwardGrabRange, entity.grabHeight);
                            ctx.strokeStyle = 'rgba(200,0,200,0.7)';
                            (directions & 128) && drawRect(entity.x, entity.y - entity.grabStart - entity.grabHeight, entity.reverseGrabRange, entity.grabHeight);
                        }
                    }
                }
            }
            strokeStyle(15);
            fillStyle(15);
            // paint entities
            for (let i = 0; i < entities.length; i++) {
                !entities[i].removed && entities[i].paint && entities[i].paint();
            }
            Effects.renderTop();
            /*if (showControls) {
              dbg.log("keyboard: WASD - move .. OKL; - right-stick .. p, r, space - jump .. j, f - attack .. m - special .. comma, e - grab .. ', q - shield .. 1234 - dpad .. esc - select .. backsp - start")
              dbg.log('numpad: arrows - move .. /789 - right-stick .. 4, 6, * - jump .. 0, 2 - attack .. 1 - special .. 3 - grab .. +, . - shield .. home, pg up, end, pg down - dpad .. ins - select .. del - start')
            }*/
            strokeStyle(15);
            fillStyle(8);
            if (unpaused) {
                // why is this only if unpaused?
                activeMode.paint && activeMode.paint();
            }
            else if (!halted) {
                for (let i = 0; i < connected.length; i++) {
                    connected[i].update();
                }
                activeMode.paintPaused && activeMode.paintPaused();
            }
            fillStyle(15);
            setFontSize(8);
            // render dummy (sandbag) percent displays
            for (let i = 0; i < entities.length; i++) {
                const player = entities[i];
                if (player.dummy) {
                    let x = player.x - 2;
                    let y = player.y + player.height - 20;
                    if (player.lastInjury.frame + 30 > frame) {
                        // damage shake
                        x = x + angleX(frame % 16 * 73) * (player.lastInjury.knockback * 0.15) * ((30 - (frame - player.lastInjury.frame)) * 0.1);
                        y = y + angleY(frame % 16 * 73) * (player.lastInjury.knockback * 0.15) * ((30 - (frame - player.lastInjury.frame)) * 0.1);
                    }
                    y = y - player.damage * 0.04;
                    drawText(Math.ceil(player.damage) + '%', x, y);
                }
            }
            // ctx.setTransform(1, 0, 0, 1, 0, 0)
            transform = ui;
            Effects.renderUI();
            // paint uientities
            for (let i = 0; i < uiEntities.length; i++) {
                !uiEntities[i].removed && uiEntities[i].paint && uiEntities[i].paint();
            }
            activeMode.uiPaint && activeMode.uiPaint();
            // render stock and damage displays
            for (let i = 0; i < players.length; i++) {
                const player = players[i];
                strokeStyle(player.color);
                if (!player.removed) {
                    setFontSize(30);
                    ctx.fillStyle = 'rgb(240, 240, 240)';
                    paintText('ooooooooo'.substr(0, player.stocks + 1), width / players.length * i + width / players.length / 2, height - height * 0.05 - fontSize - 5);
                    ctx.fillStyle = 'rgb(' + ((255 - player.damage / 3) | 0) + ', ' + ((255 - player.damage * 1.5) | 0) + ', ' + ((255 - player.damage * 1.5) | 0) + ')';
                    ctx.strokeStyle = 'rgb(64, 64, 64)';
                    let x = width / players.length * i + width / players.length / 2;
                    let y = height * 0.95;
                    if (player.lastInjury.frame + 30 > frame) {
                        // damage shake
                        x = x + angleX(frame % 16 * 73) * (player.lastInjury.knockback * 0.15) * ((30 - (frame - player.lastInjury.frame)) * 0.1);
                        y = y + angleY(frame % 16 * 73) * (player.lastInjury.knockback * 0.15) * ((30 - (frame - player.lastInjury.frame)) * 0.1);
                    }
                    x = x - player.damage * 0.01;
                    y = y + player.damage * 0.04;
                    setFontSize(Math.floor(40 + player.damage * 0.04));
                    paintText(Math.ceil(player.damage) + '%', x, y);
                }
                else {
                    setFontSize(30);
                    ctx.fillStyle = 'rgb(240, 240, 240)';
                    ctx.strokeStyle = 'black';
                    paintText(':(', width / players.length * i + width / players.length / 2, height - height * 0.1);
                }
            }
            strokeStyle(15);
            fillStyle(15);
            setFontSize(12);
            /*let reader = dbg.reader(ctx)
            let i = 0
            let read = reader()
            while (read) {
              drawText(read, 2, Math.floor(-fontSize * i + dbg.offset + height) - fontSize * 0.2)
              read = reader()
              i++
            }*/
            // render terminal emulator
            renderTick(ctx, -width / 2, -height / 2, width, height - 50);
            drawText('Blastzone (c) 2017 bluehexagons, all rights reserved; press Backspace to connect keyboard', 2, fontSize);
            // write framerates
            drawText(frameRate.toFixed(2) + ' (' + minRate.toString(10) + '-' + maxRate.toString(10) + ')', 2, fontSize * 2);
            drawText(msFramerate(stopwatch.stop()), 2, fontSize * 3);
            if (began !== null || countTo !== null) {
                setFontSize(30);
                began !== null && drawText(timeString(frame - began), width / 2, fontSize * 3);
                countTo !== null && drawText(timeString(countTo - frame), width / 2, fontSize * 3);
            }
            if (mp & 2) {
                mp ^= 2;
            }
            if (mp & 8) {
                mp ^= 8;
            }
            if (mp & 32) {
                mp ^= 32;
            }
            mwdx = 0;
            mwdy = 0;
            if (typed.length > 0) {
                typed = '';
            }
            if (entered) {
                entered = false;
            }
            if (backspaced) {
                backspaced = false;
            }
            requestAnimationFrame(frameTick);
        };
        return tick;
    })();
    const requestAnimationFrame = window.requestAnimationFrame;
    const renderMenu = () => {
        let cursors = 0;
        const ui = [];
        const start = controller => {
            if (controller.hook instanceof Cursor) {
                controller.hook.removed = true;
                controller.hook = controller.hook.entity;
                cursors--;
                if (cursors <= 0) {
                    uiEntities.length = 0;
                }
            }
            else {
                if (cursors <= 0) {
                    uiEntities.push(...ui);
                }
                cursors++;
                // stage.anchors.push(500, -350, 1)
                if (!controller.hook.cursor) {
                    controller.hook.cursor = new Cursor(controller, 0 + 200 * lqrandomSync(), 50 + 50 * lqrandomSync(), {
                        spring: [0, 0, 900, 400],
                        entity: controller.hook,
                        color: controller.hook.color,
                        colorSelectable: true,
                        setColor: function (color) {
                            this.entity.setColor(color);
                            this.color = color;
                        },
                        act: function () {
                            if (!this.controller.grabPress) {
                                this.entity.lag = 1;
                            }
                            Object.getPrototypeOf(this).act.apply(this);
                        },
                        swapCharacter: name => {
                            new Animatable({ type: 0, name: name, important: true, onLoad: e => {
                                    const cursor = controller.hook;
                                    const old = controller.hook.entity;
                                    const entity = e;
                                    entity.setColor(old.color);
                                    entity.stocks = old.stocks;
                                    entity.damage = old.damage;
                                    cursor.entity = entity;
                                    cursor.controller.character = e.name;
                                    entity.cursor = cursor;
                                    entity.controller = controller;
                                    old.removed = true;
                                    players.splice(players.indexOf(old), 1, entity);
                                } });
                        }
                    });
                    ui.push(controller.hook);
                    uiEntities.push(controller.hook);
                }
                else {
                    controller.hook.cursor.removed = false;
                    controller.hook = controller.hook.cursor;
                }
            }
        };
        const connect = controller => {
            const chardude = new Animatable({ type: 0, name: 'Asperagus', important: true });
            chardude.x = stage.entrances[(players.length * 3) % stage.entrances.length];
            chardude.y = stage.entrances[((players.length * 3) % stage.entrances.length) + 1];
            chardude.face = stage.entrances[((players.length * 3) % stage.entrances.length) + 2] ? 1 : -1;
            chardude.stocks = 3;
            chardude.setColor(controller.color || (((lqrandomSync() * 64 | 0) << 2) + 2));
            controller.color = chardude.color;
            controller.team = chardude.team;
            console.log(controller.team);
            controller.hook = chardude;
            controller.character = 'Asperagus';
            chardude.controller = controller;
            chardude.playerNumber = controller.portNumber;
            players.push(chardude);
        };
        setStage(new Stage(stages[0]));
        ui.push(new Button('Sandbag', 600, 50, 0, 50, {
            click: () => {
                new Animatable({ type: 0, name: 'Asperagus', controller: new Controller(null), dummy: true });
            },
            press: () => {
                new Animatable({ type: 0, name: 'Asperagus', controller: new Controller(null), dummy: true });
            }
        }));
        ui.push(new Button('Toggle Lofi', 200, 20, 0, 20, {
            click: () => {
                hifi = !hifi;
            },
            press: () => {
                hifi = !hifi;
            }
        }));
        ui.push(new Button('Toggle Mute', 400, 20, 0, 20, {
            click: () => {
                toggleMute();
            },
            press: () => {
                toggleMute();
            }
        }));
        ui.push(new Button('Toggle Oldsk00l Mode', 550, 20, 0, 20, {
            click: () => {
                toggleConstants();
            },
            press: () => {
                toggleConstants();
            }
        }));
        ui.push(new Selection(stages[0].name, 0, 110, 0, 50, 9, stages.map(val => val.name), {
            select: (selected, index) => {
                // on select
                setStage(new Stage(stages[index]));
                for (let i = 0; i < players.length; i++) {
                    players[i].airborne = true;
                }
                // stage.anchors.push(500, -350, 1)
            }
        }));
        ui.push(new Selection('Swap Character', 400, 110, 0, 50, 9, characters, { select: function (selected, index, cursor) {
                // on selected
                if (cursor) {
                    cursor.swapCharacter && cursor.swapCharacter(selected);
                }
                else {
                    new Animatable({ type: 0, name: selected, controller: new Controller(null), dummy: true });
                }
                this.reset();
            },
            back: function () {
                this.reset();
            } }));
        ui.push(new Button('Versus', 100, 50, 0, 50, {
            click: () => {
                setActiveMode(renderVersusSelect);
            },
            press: () => {
                setActiveMode(renderVersusSelect);
            }
        }));
        cameraType = fitOnScreen;
        began = frame;
        countTo = null;
        return { start, connect, run: () => { }, started: true };
    };
    let stageSelected = 0;
    const renderAnimator = data => {
        const uiPaint = () => {
        };
        cameraType = fixedScreen(0, 0, 600, 450);
        uiEntities.push(new Button('Back', 700, 5, 0, 50, {
            click: () => { setActiveMode(renderMenu); },
            press: () => { setActiveMode(renderMenu); }
        }));
        return { uiPaint, run: () => { }, started: true };
    };
    class Dropper {
        constructor(owner) {
            this.color = 0;
            this.x = 0;
            this.y = 0;
            this.holding = false;
            this.owner = null;
            this.returned = 0;
            this.owner = owner;
            this.x = owner.x;
            this.y = owner.y;
            this.holding = true;
            this.color = owner.color + 1;
            owner.dropper = this;
        }
    }
    const renderVersusSelect = data => {
        const droppers = [];
        const cursors = [];
        const buttonHandlers = val => {
            return {
                click: cursor => {
                    stageSelected = val;
                    start(cursor);
                },
                press: cursor => {
                    stageSelected = val;
                    start(cursor);
                }
            };
        };
        const dropperSpawnBoxes = {};
        for (let i = 0; i < characters.length; i++) {
            const character = characters[i];
            const s = { x: 200, y: 100 + 50 * i, w: ctx.measureText(character).width, h: 50 };
            dropperSpawnBoxes[character] = s;
            uiEntities.push(new Button(character, s.x, s.y, 0, s.h - 5, {
                press: cursor => {
                    if (!cursor.dropper.holding && Math.pow(cursor.dropper.x - cursor.x, 2) + Math.pow(cursor.dropper.y - cursor.y, 2) < Math.pow(20, 2)) {
                        cursor.dropper.holding = true;
                        cursor.dropper.returned = frame;
                    }
                    else {
                        cursor.character(character);
                    }
                }
            }));
        }
        const cursorMap = new WeakMap();
        const disconnect = controller => {
            if (!cursorMap.has(controller)) {
                console.log('not in cursor map');
                return;
            }
            let cursor = cursorMap.get(controller);
            let index = cursors.indexOf(cursor);
            if (index !== -1) {
                console.log(droppers.indexOf(cursor.dropper), uiEntities.indexOf(cursor), index);
                droppers.splice(droppers.indexOf(cursor.dropper), 1);
                cursors.splice(index, 1);
                uiEntities.splice(uiEntities.indexOf(cursor), 1);
                if (teams) {
                    redoTeamColors();
                }
            }
        };
        const connect = controller => {
            const cursor = new Cursor(controller, 100 + 100 * lqrandomSync(), 50 + 100 * lqrandomSync(), {
                back: function () {
                    this.selected = undefined;
                    this.controller.character = undefined;
                    if (!this.dropper.holding) {
                        this.dropper.holding = true;
                        this.dropper.returned = frame;
                    }
                },
                press: () => {
                    console.log('hello');
                },
                select: function (name) {
                    this.selected = name;
                    this.controller.character = name;
                    if (this.dropper) {
                        this.dropper.holding = false;
                        this.dropper.x = this.x;
                        this.dropper.y = this.y;
                    }
                },
                selected: undefined,
                character: function (name) {
                    this.select(name);
                },
                color: controller.color,
                colorSelectable: true,
                setColor: function (color) {
                    this.color = color;
                    this.controller.color = color;
                },
                restrict: [25, 25, 800, 750],
                tick: function () {
                    if (this.controller.jumpPress) {
                        if (teams) {
                            this.controller.team = (this.controller.team + 1) % teamNames.length;
                            redoTeamColors();
                        }
                        else {
                            this.setColor(calcColor(lqrandomSync() * 256, lqrandomSync() * 256, lqrandomSync() * 256, 0.75));
                        }
                    }
                    else if (this.controller.startPress) {
                        start(null);
                    }
                }
            });
            cursorMap.set(controller, cursor);
            if (data) {
                for (let i; i < data.players.length; i++) {
                    if (data.players[i].controller === controller) {
                        cursor.color = controller.color;
                        cursor.select(controller.character);
                    }
                }
            }
            if (!cursor.color) {
                if (controller.color) {
                    cursor.color = controller.color;
                }
                else {
                    controller.color = cursor.color = calcColor(lqrandomSync() * 256, lqrandomSync() * 256, lqrandomSync() * 256, 0.75);
                }
            }
            cursor.character(controller.character || 'Asperagus');
            droppers.push(new Dropper(cursor));
            console.log('connected', cursor, controller.portNumber);
            cursors.push(cursor);
            controller.color = cursor.color;
            if (controller.character) {
                cursor.select(controller.character);
                cursor.dropper.holding = false;
                const s = dropperSpawnBoxes[controller.character];
                cursor.dropper.x = s.x + 5 + lqrandomSync() * (s.w - 10);
                cursor.dropper.y = s.y + 5 + lqrandomSync() * (s.h - 10);
            }
            uiEntities.push(cursor);
            began = null;
            countTo = null;
            if (teams) {
                redoTeamColors();
            }
        };
        const redoTeamColors = () => {
            const teamCounts = [0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (let i = 0; i < cursors.length; i++) {
                const t = cursors[i].controller.team;
                // console.log(t, teamCounts[t], teamColors[t].length, teamColors[t][teamCounts[t] % teamColors[t].length])
                cursors[i].setColor(teamColors[t][teamCounts[t] % teamColors[t].length]);
                teamCounts[t]++;
            }
        };
        const uiPaint = () => {
            // move paint to UI layer
            for (let i = 0; i < droppers.length; i++) {
                const dropper = droppers[i];
                if (dropper.holding) {
                    if (frame - dropper.returned > 30) {
                        dropper.x = dropper.owner.x;
                        dropper.y = dropper.owner.y;
                    }
                    else {
                        dropper.x = dropper.x - (dropper.x - dropper.owner.x) * ((frame - dropper.returned) / 30);
                        dropper.y = dropper.y - (dropper.y - dropper.owner.y) * ((frame - dropper.returned) / 30);
                    }
                }
                ctx.strokeStyle = 'black';
                strokeCircle(dropper.x, dropper.y, dropper.holding ? 13 : 12);
                fillStyle(dropper.holding ? dropper.owner.color - 1 : dropper.owner.color + 1);
                ctx.strokeStyle = 'white';
                drawCircle(dropper.x, dropper.y, dropper.holding ? 12 : 10);
                setFontSize(20);
                ctx.strokeStyle = 'black';
                fillStyle(15);
                paintText(cursors[i].controller.portNumber + 1 + '', dropper.x - 7, dropper.y + 7);
            }
            setFontSize(30);
            for (let i = 0; i < cursors.length; i++) {
                // fillStyle(cursors[i].color)
                // fillCapsule(-10, 80 + i * 30, 10 + ctx.measureText(cursors[i].selected).width * absoluteZ, 80 + i * 30, fontSize * 0.6)
                if (cursors[i].selected) {
                    ctx.strokeStyle = 'black';
                    fillStyle(cursors[i].color);
                    paintText(cursors[i].selected, 30, 120 + i * 60 + fontSize * 0.33);
                }
            }
            // strokeStyle(15)
            // const y = (120 + 50 * characters.length) + 25 * (stageSelected % 5)
            // drawLine(180 + (stageSelected / 5 | 0) * 180, y,
            //   200 + (stageSelected / 5 | 0) * 180, y)
        };
        cameraType = fixedScreen(0, 0, 600, 450);
        uiEntities.push(new Button('Back', 700, 5, 0, 50, {
            click: () => { setActiveMode(renderMenu); },
            press: () => { setActiveMode(renderMenu); }
        }));
        let teams = data ? data.teams : false;
        let timeLimit = data ? data.timeLimit : 28800;
        let stocks = data ? data.stocks : 3;
        const start = controller => {
            setActiveMode(renderBattle, { stageNum: stageSelected, stocks, teams, timeLimit });
        };
        const toggleFFA = controller => {
            teams = !teams;
            if (teams) {
                ffaBtn.setText('Teams');
                redoTeamColors();
            }
            else {
                ffaBtn.setText('FFA');
            }
        };
        const ffaBtn = new Button('FFA', 140, 5, 0, 50, {
            click: toggleFFA,
            press: toggleFFA
        });
        if (teams) {
            ffaBtn.setText('Teams');
            redoTeamColors();
        }
        uiEntities.push(ffaBtn);
        uiEntities.push(new Button('Start Battle', 310, 5, 0, 50, {
            click: start,
            press: start
        }));
        for (let i = 0; i < stages.length; i++) {
            uiEntities.push(new Button(stages[i].name, 200 + (i / 5 | 0) * 180, (100 + 50 * characters.length) + 10 + (i % 5) * 25, 0, 20, buttonHandlers(i)));
        }
        return { start, connect, disconnect, uiPaint, run: () => { }, started: true };
    };
    let queuePaused = 0;
    const teamNames = ['Red', 'Green', 'Blue', 'Grey'];
    const teamColors = [
        [22, 26, 18],
        [98, 90, 82],
        [198, 190, 194],
        [2, 10, 14],
    ];
    const renderBattle = data => {
        let justPaused = 0;
        // replay,
        let timer = 180;
        let timerKind = 0;
        /*stopRecording = player => {
          console.log('stopping', player)
          if (replay && player.controller) {
            replay.players.push({character: player.name, color: player.color, input: player.controller.stop()})
            //console.log('stopped', player, )
          }
        },*/
        const fakeLead = { stocks: -1337, damage: 1337, playerNumber: -1 };
        const run = () => {
            if (timer !== -1) {
                timer--;
                if (timer === 1) {
                    if (timerKind === 0) {
                        o.started = true;
                        if (data.timeLimit) {
                            countTo = frame + data.timeLimit;
                            startGame = frame;
                        }
                    }
                    else if (timerKind === 1) {
                        data.players = players;
                        setActiveMode(renderVersusSelect, data);
                    }
                }
                return;
            }
            for (let i = 0; i < players.length; i++) {
                if (timer < 10 && players[i].controller.startPress) {
                    unpaused = false;
                    justPaused = 12;
                    pause();
                    break;
                }
            }
            if (queuePaused) {
                if (queuePaused === 1) {
                    unpaused = false;
                    justPaused = 12;
                    pause();
                }
                queuePaused--;
            }
            if (countTo !== null && frame === countTo - 660) {
                Effects.countdown(40, 20, 10, 'TIME OUT');
            }
            if (alive <= 1 || (data.teams && teamsAlive <= 1)) {
                for (let i = 0; i < players.length; i++) {
                    let player = players[i];
                    if (player.removed) {
                        continue;
                    }
                    let winMessage = 'Winner: Player ' + (player.playerNumber + 1);
                    if (data.teams) {
                        winMessage = 'Winner: Team ' + teamNames[player.team];
                    }
                    dbgLog(winMessage);
                    timerKind = 1;
                    timer = 240; // 4 seconds
                    Effects.message(40, 0, 230, winMessage);
                    return;
                }
            }
            let dead = 0;
            let undead = null;
            let lead = fakeLead;
            for (let i = 0; i < players.length; i++) {
                if (players[i].stocks < 0) {
                    dead++;
                }
                else {
                    if (players[i].stocks >= lead.stocks && players[i].damage < lead.damage) {
                        lead = players[i];
                    }
                    undead = players[i];
                }
                if (timer < 10 && players[i].controller.startPress) {
                    unpaused = false;
                    justPaused = 12;
                    pause();
                }
            }
            if (dead >= players.length - 1) {
                // make round end a function later
                // replay = {players: [], data}
                // players.forEach(stopRecording)
                // console.log(replay)
                dbgLog('Winner: ' + (undead.playerNumber + 1));
                timerKind = 1;
                timer = 240; // 4 seconds
                Effects.message(40, 0, 230, 'Winner: Player ' + (undead.playerNumber + 1));
            }
            if (frame === countTo) {
                // replay = {players: [], data}
                // players.forEach(stopRecording)
                // console.log(replay)
                dbgLog('Winner: ' + (lead.playerNumber + 1));
                timerKind = 1;
                timer = 240; // 4 seconds
                Effects.message(40, 0, 230, 'Winner: Player ' + (lead.playerNumber + 1));
            }
        };
        Effects.countdown(40, 20, 3, 'GO');
        setStage(new Stage(stages[data.stageNum]));
        let alive = 0;
        const teams = {};
        let teamsAlive = 0;
        const connect = controller => {
            if (!controller.character) {
                return;
            }
            // controller.record() // start replay
            const chardude = new Animatable({ type: 0, name: controller.character, important: true });
            chardude.x = stage.entrances[(players.length * 3) % stage.entrances.length];
            chardude.y = stage.entrances[((players.length * 3) % stage.entrances.length) + 1];
            chardude.face = stage.entrances[((players.length * 3) % stage.entrances.length) + 2] ? 1 : -1;
            chardude.stocks = data.stocks;
            chardude.setColor(typeof controller.color !== undef ? controller.color : calcColor(lqrandomSync() * 256, lqrandomSync() * 256, lqrandomSync() * 256, 0.75));
            chardude.controller = controller;
            chardude.playerNumber = connected.indexOf(controller);
            chardude.controller.hook = chardude;
            chardude.team = controller.team;
            players.push(chardude);
            alive++;
            if (teams[chardude.team]) {
                teams[chardude.team]++;
            }
            else {
                teamsAlive++;
                teams[chardude.team] = 1;
            }
            console.log(teamsAlive, teams);
        };
        const paint = () => { };
        const pause = () => { };
        const paused = () => { };
        const paintPaused = () => {
            for (let i = 0; i < players.length; i++) {
                // problem: these inputs will be fed to the characters
                // still ok for watching animations play out, though
                // could use another controller? Maybe even switch to separate controller states during pause
                if (players[i].controller.grabPress) {
                    dbgLog('frame step');
                    players[i].controller.grabLast = true;
                    players[i].controller.grabPress = false;
                    players[i].controller.grab = 0;
                    queuePaused = 1;
                    unpaused = true;
                    unpause();
                }
                if (players[i].controller.shield) {
                    dbgLog('frame shield', frame, players[i].controller.shield);
                }
            }
            if (!justPaused) {
                for (let i = 0; i < players.length; i++) {
                    if (players[i].controller.startPress) {
                        unpaused = true;
                        unpause();
                    }
                }
            }
            else {
                justPaused--;
            }
        };
        const unpause = () => { };
        const ko = (entity) => {
            if (entity.stocks < 0 && data.stocks >= 0) {
                alive--;
                teams[entity.team]--;
                if (!teams[entity.team]) {
                    teamsAlive--;
                }
                entity.removed = true;
            }
        };
        cameraType = fitOnScreen;
        countTo = null;
        began = null;
        const o = { pause, unpause, paint, paused, paintPaused, run, connect, ko, started: false };
        return o;
    };
    const checkex = /[\w \.\']/;
    window.addEventListener('keydown', e => {
        if (dbgActive()) {
            return;
        }
        if (!e.ctrlKey && !e.metaKey && !e.altKey) {
            // filters using modifiers to allow browser/OS shortcuts to be used on all platforms
            const code = e.keyCode;
            for (let i = 0; i < keyboardGamepads.length; i++) {
                if (keyboardGamepads[i].keydown(code)) {
                    e.preventDefault();
                }
            }
            if (e.key === 'z') {
                if (tasOn) {
                    for (let i = 0; i < connected.length; i++) {
                        connected[i].buffer.push(connected[i].poll());
                    }
                    return;
                }
            }
            if (e.key === 'x') {
                if (!tasOn) {
                    tasOn = true;
                    dbg.log('Recording TAS\n');
                    for (const c of connected) {
                        c.replay = new Replay(c);
                        c.playing = true;
                        c.wait = true;
                    }
                    return;
                }
                tasOn = false;
                dbg.log('Finished TAS\n');
                for (const c of connected) {
                    c.playing = false;
                    c.wait = false;
                }
                return;
            }
            if (checkex.test(String.fromCharCode(e.keyCode))) {
                typed = typed + (e.shiftKey ? String.fromCharCode(e.keyCode) : String.fromCharCode(e.keyCode).toLowerCase());
            }
            else if (e.keyCode === 13) {
                entered = true;
            }
            else if (e.keyCode === 8) {
                backspaced = true;
            }
        }
    }, false);
    window.addEventListener('keyup', e => {
        if (dbgActive()) {
            return;
        }
        if (!e.ctrlKey && !e.metaKey && !e.altKey && e.keyCode !== 91 && e.keyCode !== 18) {
            // 91 is meta, 18 is alt; for some reason, key up events don't seem to have meta/alt flags when releasing those keys
            const code = e.keyCode;
            for (let i = 0; i < keyboardGamepads.length; i++) {
                if (keyboardGamepads[i].keyup(code)) {
                    e.preventDefault();
                }
            }
        }
    }, false);
    const mpos = vec3.create();
    const setMousePos = (x, y) => {
        mpos[0] = x - width * 0.5;
        mpos[1] = y - height * 0.5;
        mpos[2] = 0;
        vec3.transformMat4(mpos, mpos, screenToUI);
        mx = mpos[0];
        my = mpos[1];
        // console.log(mpos[0], mpos[1])
    };
    const initGame = (hostElement) => {
        const refreshCanvasSize = () => {
            const unscaledWidth = hostElement.offsetWidth;
            const unscaledHeight = hostElement.offsetHeight;
            width = unscaledWidth;
            height = unscaledHeight;
            canvas.style.width = unscaledWidth + 'px';
            canvas.style.height = unscaledHeight + 'px';
            canvas.width = unscaledWidth * canvasRatio;
            canvas.height = unscaledHeight * canvasRatio;
            // ctx.scale(canvas.width, canvas.height)
            // ctx.scale(30, 30)
            // ctx.translate(-1, -1)
            ctx.translate(canvas.width * 0.5, canvas.height * 0.5);
            ctx.lineWidth = 2;
            resizeCamera();
        };
        canvas = document.createElement('canvas');
        width = hostElement.offsetWidth;
        height = hostElement.offsetHeight;
        if (!parseInt(hostElement.style.width, 10)) {
            hostElement.style.position = 'absolute';
            hostElement.style.left = '0px';
            hostElement.style.top = '0px';
            hostElement.style.width = '100%';
            hostElement.style.height = '100%';
            window.addEventListener('resize', refreshCanvasSize);
        }
        ctx = canvas.getContext('2d');
        hostElement.appendChild(canvas);
        refreshCanvasSize();
        setTimeout(refreshCanvasSize, 100);
        characters.forEach(name => characterData.load(name));
        setActiveMode(renderMenu);
        canvas.addEventListener('mousemove', e => {
            setMousePos(e.offsetX, e.offsetY);
        }, false);
        canvas.addEventListener('mousedown', e => {
            mp |= (3 << e.button * 2);
            setMousePos(e.offsetX, e.offsetY);
            // dbgLog('mouse', mx | 0, my | 0, !!(mp & 1), !!(mp & 4), !!(mp & 16))
        }, false);
        canvas.addEventListener('mouseup', e => {
            mp ^= (1 << e.button * 2);
            setMousePos(e.offsetX, e.offsetY);
        }, false);
        canvas.addEventListener('contextmenu', e => {
            e.preventDefault();
            return false;
        }, false);
        canvas.addEventListener('mousewheel', e => {
            mwdx = mwdx + e.wheelDeltaX;
            mwdy = mwdy + e.wheelDeltaY;
            if (e.altKey) {
            }
            else {
                if (e.wheelDeltaX || e.wheelDeltaY) {
                }
            }
            e.preventDefault();
            return false;
        }, false);
        initCamera();
        requestAnimationFrame(frameTick);
        readyKeyboardControllers();
    };
    global.connected = connected;
    const map = o => {
        if (!o) {
            return new Map();
        }
        const keys = Object.keys(o);
        const m = new Map();
        for (const key of keys) {
            m.set(key, o[key]);
        }
        return m;
    };
    let replayOn = false;
    let tasOn = false;
    let lastReplay = [];
    addDirToIndex('/', {
        contents: map({
            'bin': {
                contents: map({
                    'replay': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            if (!replayOn) {
                                replayOn = true;
                                stdout.write('Recording replay\n');
                                for (const c of connected) {
                                    c.replay = new Replay(c);
                                    c.recording = true;
                                }
                                return 0;
                            }
                            replayOn = false;
                            stdout.write('Finished recording\n');
                            for (const c of connected) {
                                c.recording = false;
                            }
                            return 0;
                        }
                    },
                    'lag': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            if (!replayOn) {
                                replayOn = true;
                                stdout.write('Lagging replays\n');
                                for (const c of connected) {
                                    c.replay = new Replay(c);
                                    c.replay.buffer = new NetBuffer(12);
                                    c.buffer = c.replay.buffer;
                                    c.recording = true;
                                    c.playing = true;
                                }
                                return 0;
                            }
                            replayOn = false;
                            stdout.write('Finished lagging\n');
                            for (const c of connected) {
                                c.recording = false;
                            }
                            return 0;
                        }
                    },
                    'tas': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            if (!tasOn) {
                                tasOn = true;
                                stdout.write('Recording TAS\n');
                                for (const c of connected) {
                                    c.replay = new Replay(c);
                                    c.playing = true;
                                    c.wait = true;
                                }
                                return 0;
                            }
                            tasOn = false;
                            stdout.write('Finished TAS\n');
                            for (const c of connected) {
                                c.playing = false;
                                c.wait = false;
                            }
                            return 0;
                        }
                    },
                    'play': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            stdout.write('Playing replays\n');
                            for (const c of connected) {
                                c.replay.play();
                            }
                            return 0;
                        }
                    },
                    'pause': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            stdout.write('Pausing replays\n');
                            for (const c of connected) {
                                c.replay.pause();
                            }
                            return 0;
                        }
                    },
                    'dbg': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            if (args.length === 1) {
                                for (const key in dbg) {
                                    if (dbg.hasOwnProperty(key) && typeof dbg[key] !== 'function' && typeof dbg[key] !== 'object') {
                                        stdout.write('dbg.' + key + ' : ' + (typeof dbg[key]) + ' = ' + dbg[key] + '\n');
                                    }
                                }
                                return;
                            }
                            if (args[1] === 'get') {
                                stdout.write('dbg.' + args[2] + ' = ' + dbg[args[2]] + '\n');
                                return 0;
                            }
                            switch (typeof dbg[args[1]]) {
                                case 'string':
                                    dbg[args[1]] = args[2];
                                    break;
                                case 'number':
                                    dbg[args[1]] = parseFloat(args[2]);
                                    break;
                                case 'boolean':
                                    dbg[args[1]] = args[2] === 'true' || args[2] === '1';
                                    break;
                                case 'undefined':
                                    stdout.write('Unknown dbg param: ' + args[1] + '\n');
                                    return 1;
                                default:
                                    stdout.write('Cannot set type of dbg param: ' + args[1] + '\n');
                                    return 1;
                            }
                            stdout.write('Set dbg param ' + args[1] + ' to ' + dbg[args[1]] + '\n');
                            return 0;
                        }
                    },
                })
            }
        })
    });
    return () => ({ Effects, removeMouseListener, mouseListeners, resetMouseListeners, complements, fillStyle, drawCircle, setFontSize, ctx, drawText, drawRect, connected, fillRect, drawLine, init, sync });
})();
const ImportCore = (() => {
    'use strict';
    const { playAudio, toggleMute, playMusic, stopAudio } = ImportAudio();
    const { segIntersects, dist2, distance, absoluteRectangleCollision, capsuleCollision } = ImportCollision();
    const { Stage, StageElement, stages } = ImportStage();
    let _ = new Stage();
    const { radian, angleX, angleY, computeAngle, preciseAngle, lqrandom, lqrandomSync, randomSeek } = ImportMath();
    const { Animation, Hitbubble, Hurtbubble, hurtbubbles, hitbubbles, hitbubbleCount, clearHitbubbles, addHitbubble, flagMap, typeMap, init: initAnimation, Status, statusFactory } = ImportAnimation();
    _ = new Status();
    _ = null;
    const { Effects, removeMouseListener, mouseListeners, resetMouseListeners, complements, fillStyle, drawCircle, setFontSize, ctx, drawText, drawRect, connected, fillRect, drawLine, init: initRendering, sync: syncRendering } = ImportRendering();
    const { getFile, getObj, saveFs, dbg: odbg, dbgStdout, renderTick, addDirToIndex } = ImportTerminal();
    const { pollNetwork } = ImportNetworking();
    const { swapRemoved } = ImportUtils();
    const global = window;
    let activeMode = null;
    let frame = 0;
    let hifi = true;
    const calcColor = (r, g, b, a) => {
        return ((r / 255 * 3 + 0.5 | 0) << 6) + ((g / 255 * 3 + 0.5 | 0) << 4) + ((b / 255 * 3 + 0.5 | 0) << 2) + (a * 3 + 0.5 | 0);
    };
    const map = o => {
        if (!o) {
            return new Map();
        }
        const keys = Object.keys(o);
        const m = new Map();
        for (const key of keys) {
            m.set(key, o[key]);
        }
        return m;
    };
    const modes = {
        default: {
            MODE_FLAG: 'bz',
            KB_DECAY: 0.4,
            AIR_DODGE_OK: true,
            SPOT_DODGE_OK: true,
            METEOR_CANCEL_OK: true,
            WALL_TECH_OK: true,
            WALL_JUMP_OK: true,
            WALL_JUMP_TIMING: 2,
            POWERSHIELD_OK: true,
            SHIELD_STUN_DMG: 4.45,
            SHIELD_STUN_MOD: 1 / 2.235,
            SHIELD_STUN_PLUS: 1,
            SHIELD_LIGHTSTUN_DMG: 0,
            SHIELD_LIGHTSTUN_MOD: 1.62,
            SHIELD_LIGHTSTUN_PLUS: 4,
            KB_STUN_BREAK_MOD: 1,
            LAG_CANCEL_TIMER: 8,
            LAG_CANCEL_WINDOW: 8,
            LAG_CANCEL_OVERLAP: 0,
            V_CANCEL_WINDOW: 20,
            V_CANCEL_MOD: 0.95,
            CROUCH_CANCEL_MOD: 0.7,
            CROUCH_CANCEL_LAG_MOD: 0.7,
            LAG_MOD: 1 / 3,
            LAG_PLUS: 3,
            DI_MOD: 0.1,
            INSTANT_LAG_CANCEL: false,
            TECH_TIMER: 40,
            TECH_WINDOW: 20,
            TECH_OVERLAP: 0,
            FASTFALL_ALWAYS: true,
            SAKURAI_ANGLE: 44,
            SAKURAI_AIR: 45,
            SAKURAI_MIN: 32,
            SAKURAI_MAX: 44,
            DASH_GRAB_OK: true,
            SMASH_SCALE: 1.3671,
            CHARGE_SMASH_OK: true,
            STALE_DAMAGE: true,
            STALE_KNOCKBACK: false,
            STALE_STACK_SIZE: 9,
            STALE_VALUE: 0.01,
            STAR_KO_KB_THRESHOLD: 1,
            JUMP_BUFFER_WINDOW: 20,
            LEDGE_REGRAB_RESTRICT: 14,
        },
        ssb64: {
            MODE_FLAG: '64',
            KB_DECAY: 0.3,
            AIR_DODGE_OK: false,
            SPOT_DODGE_OK: false,
            METEOR_CANCEL_OK: false,
            WALL_TECH_OK: false,
            WALL_JUMP_OK: false,
            WALL_JUMP_TIMING: 0,
            POWERSHIELD_OK: false,
            SHIELD_STUN_DMG: 0,
            SHIELD_STUN_MOD: 1.62,
            SHIELD_STUN_PLUS: 4,
            SHIELD_LIGHTSTUN_DMG: 0,
            SHIELD_LIGHTSTUN_MOD: 1.62,
            SHIELD_LIGHTSTUN_PLUS: 4,
            KB_STUN_BREAK_MOD: 1,
            LAG_CANCEL_TIMER: 11,
            LAG_CANCEL_WINDOW: 11,
            LAG_CANCEL_OVERLAP: 11,
            V_CANCEL_WINDOW: 0,
            V_CANCEL_MOD: 1,
            CROUCH_CANCEL_MOD: 0.7,
            CROUCH_CANCEL_LAG_MOD: 0.7,
            LAG_MOD: 1 / 3,
            LAG_PLUS: 3,
            DI_MOD: 0,
            INSTANT_LAG_CANCEL: true,
            TECH_TIMER: 20,
            TECH_WINDOW: 20,
            TECH_OVERLAP: 20,
            FASTFALL_ALWAYS: false,
            SAKURAI_ANGLE: 42.5,
            SAKURAI_AIR: 43,
            SAKURAI_MIN: 32,
            SAKURAI_MAX: 32,
            DASH_GRAB_OK: false,
            SMASH_SCALE: 0,
            CHARGE_SMASH_OK: false,
            STALE_DAMAGE: true,
            STALE_KNOCKBACK: true,
            STALE_STACK_SIZE: 3,
            STALE_VALUE: 0.03,
            STAR_KO_KB_THRESHOLD: 1,
            JUMP_BUFFER_WINDOW: 20,
            LEDGE_REGRAB_RESTRICT: 14,
        }
    };
    let constants = modes.default;
    const players = [];
    const entities = [];
    const uiEntities = [];
    const removed = [];
    const dbg = (() => {
        const log = [];
        const names = [];
        const times = [];
        const repeat = [];
        const life = 7000;
        let expired = 0;
        const now = Date.now;
        const logFunction = (...args) => {
            odbg(...args);
            /*let l = args.length
            log.unshift(args[0])
            if (l > 1) {
              for (let i = 1; i < l; i++) {
                log[0] = log[0] + ', ' + args[i]
              }
            }
            times.unshift(now())
            names.unshift(args[0])
            repeat.unshift(0)
            let index = names.indexOf(args[0], 1)
            if (index > 0) {
              names.splice(index, 1)
              times.splice(index, 1)
              log.splice(index, 1)
              repeat[0] = repeat[index] + 1
              repeat.splice(index, 1)
            } else {
              dbgObject.offset = dbgObject.offset + 10
            }
            if (repeat[0] > 0) {
              log[0] = log[0] + ' (' + (repeat[0] + 1) + ')'
            }*/
        };
        const dumpFunction = (object, ...names) => {
            if (names.length > 0) {
                for (let i = 0; i < names.length; i++) {
                    dbgObject.log(names[i], object[names[i]]);
                }
            }
            else {
                for (const key of Object.getOwnPropertyNames(object)) {
                    dbgObject.log(key, object[key]);
                }
            }
        };
        const noDisplay = () => { };
        const dbgObject = {
            drawLedgeGrab: false,
            drawHitbubbles: true,
            drawHurtbubbles: true,
            drawStage: 1,
            enabled: true,
            log: logFunction,
            dump: dumpFunction,
            toggle: () => {
                if (dbgObject.enabled) {
                    dbgObject.log = noDisplay;
                    dbgObject.dump = noDisplay;
                }
                else {
                    dbgObject.log = logFunction;
                    dbgObject.dump = dumpFunction;
                }
                dbgObject.enabled = !dbgObject.enabled;
            },
            reader: (ctx) => {
                let cursor = 0;
                const time = now();
                if (expired > 0) {
                    log.length = log.length - expired;
                    times.length = times.length - expired;
                    names.length = names.length - expired;
                    expired = 0;
                }
                if (dbgObject.offset > 0) {
                    dbgObject.offset = dbgObject.offset * 0.75;
                }
                return () => {
                    if (time - times[cursor] > life) {
                        expired++;
                    }
                    cursor++;
                    if (ctx) {
                        ctx.globalAlpha = Math.max(0, 1 - (time - times[cursor]) / life);
                    }
                    return log[cursor - 1];
                };
            },
            offset: 0
        };
        global.dbg = dbgObject;
        return dbgObject;
    })();
    let stage = null;
    const characterData = (() => {
        const addHurtbubbles = (entity, data) => {
            let n = 0;
            for (let i = 0; i < data.length; i = i + 3, n++) {
                const hb = new Hurtbubble(entity, data[i + 1], data[i + 2], data[i].indexOf('foot') !== -1);
                entity.namedbubbles.set(data[i], n);
                entity.hurtbubbles.push(hb);
            }
        };
        const addAnimations = (character, entity) => {
            const anims = character.animations;
            for (let i = 0; i < anims.length; i++) {
                const animation = new Animation(entity, anims[i]);
                entity.animations[animation.name] = animation;
            }
        };
        const characters = {};
        const copyAttributes = (character, entity) => {
            addHurtbubbles(entity, character.hurtbubbles);
            addAnimations(character, entity);
            dbg.log('animations loaded ' + character.name, Object.getOwnPropertyNames(entity.animations).length);
            entity.setColor(!isNaN(entity.color) ? entity.color : !isNaN(character.color) ? character.color : 0);
            entity.maxFallSpeed = character.maxFallSpeed;
            entity.hurtbubbleCount = entity.hurtbubbles.length;
            entity.headbubble = entity.hurtbubbles[character.headbubble];
            entity.carryMomentum = character.carryMomentum;
            entity.arcSpeed = character.arcSpeed;
            entity.fallSpeed = character.fallSpeed;
            entity.fastfallSpeed = character.fastfallSpeed;
            entity.initialFallSpeed = character.initialFallSpeed;
            entity.walkSpeed = character.walkSpeed;
            entity.aerodynamics = character.aerodynamics;
            entity.fallFriction = character.fallFriction;
            entity.arcWeight = character.arcWeight;
            entity.weight = character.weight;
            entity.width = character.width;
            entity.height = -character.height;
            entity.airAcceleration = character.airAcceleration;
            entity.airSpeed = character.airSpeed;
            entity.friction = character.friction;
            entity.kbFriction = character.kbFriction;
            entity.slideFriction = character.slideFriction;
            entity.name = character.name;
            entity.phasing = !!character.phasing;
            entity.face = 1;
            entity.phase = false;
            entity.team = 0;
            entity.shieldMultiplier = character.shieldMultiplier;
            entity.shieldMinSize = character.shieldMinSize;
            entity.shieldGrowth = character.shieldGrowth;
            entity.lightShieldGrowth = character.lightShieldGrowth;
            entity.shieldMobility = character.shieldMobility;
            entity.powershieldSize = character.powershieldSize;
            entity.shieldRegen = character.shieldRegen;
            entity.shieldDecay = character.shieldDecay;
            entity.shieldX = character.shieldX;
            entity.shieldY = character.shieldY;
            entity.shieldX2 = character.shieldX2;
            entity.shieldY2 = character.shieldY2;
            entity.permadeath = !!character.permadeath;
            entity.floating = !!character.floating;
            entity.moonwalk = character.moonwalk;
            entity.defaultAnimation = character.defaultAnimation;
            entity.landingAudio = character.landingAudio;
            entity.heavyLandingAudio = character.heavyLandingAudio;
            entity.lagCancelAudio = character.lagCancelAudio;
            entity.backdrop = (character.backdrop || null) && character.backdrop;
            entity.backdropFollow = character.backdropFollow;
            entity.launchResistance = character.launchResistance * character.launchResistance;
            entity.flinchThreshold = character.flinchThreshold;
            entity.softland = character.softland;
            entity.di = 0;
            entity.sdi = character.sdi;
            entity.asdi = character.asdi;
            entity.kbDecay = 0;
            entity.slideDecay = character.slideDecay;
            entity.kbDecayMod = character.kbDecayMod;
            entity.stunMod = character.stunMod;
            entity.stunBreak = character.stunBreak;
            entity.reverseGrabRange = character.reverseGrabRange;
            entity.forwardGrabRange = character.forwardGrabRange;
            entity.grabStart = character.grabStart;
            entity.grabHeight = character.grabHeight;
            entity.chooseAnimation = character.chooseAnimation || null;
            entity.stun = 0;
            entity.shieldstun = 0;
            entity.shield = 1;
            entity.wallJump = 0;
            entity.wallJumpSize = '';
            entity.shieldReset = character.shieldReset;
            entity.kb = 0;
            entity.okb = 0;
            entity.kbx = 0;
            entity.kby = 0;
            entity.kba = 0;
            entity.kbf = 0;
            entity.lastHb = [];
            entity.lastframe = entity.animations.idle && entity.animations.idle.keyframes[0].hurtbubbles;
            entity.currentframe = entity.lastframe;
            entity.animation = entity.defaultAnimation || 'idle';
            entity.activeAnimation = entity.animations[entity.animation];
            // console.log(entity.animation, entity.activeAnimation, entity.animations)
            entity.setAnimation(entity.animation, true);
            entity.defaultData = character.data || null;
            console.log('setting data...', entity.defaultData);
            if (character.onCreate) {
                character.onCreate(entity);
            }
            entity.reset();
            entities.push(entity);
        };
        let queue = [];
        let listeners = [];
        const prepareCharacter = (name, entity) => {
            const data = characters[name]();
            if (data.backdrop) {
                data.backdrop.reverse();
            }
            Animation.prepareAnimationData(data.animations);
            copyAttributes(data, entity);
            return entity;
        };
        window.addEventListener('characterloaded', (e) => {
            if (e.characterData) {
                const dryRun = e.characterData();
                const name = dryRun.name;
                characters[dryRun.name] = e.characterData;
                // for each entity in the queue with the same name as the loaded character, copy the attributes
                queue.filter(item => item.name === name).forEach(item => {
                    // change this to not bother copying attributes... copy in other direction or something? maaaybe?
                    // this entire loading process is terrible. terrible terrible terrible
                    // TODO: FUTURE ME FIX THIS NIGHTMARE PLEASE
                    prepareCharacter(name, item.entity);
                });
                // remove the entities from the queue with the same name as the loaded character
                queue = queue.filter(item => item.name !== name);
                // for each listener matching the name of the loaded character, execute the onLoad function
                listeners.filter(item => item.name === name).forEach(item => {
                    item.onLoad instanceof Function && item.onLoad(item);
                });
                // then remove..
                listeners = listeners.filter(item => item.name !== name);
            }
            else {
                throw new Error('Character data not found.');
            }
        }, false);
        window.addEventListener('selectstart', e => {
            e.preventDefault();
        }, false);
        return {
            // loads a character, and spawns an entity when finished
            load: (name, entity, data) => {
                if (entity && characters.hasOwnProperty(name)) {
                    prepareCharacter(name, entity);
                    if (data.onLoad) {
                        data.onLoad(entity);
                    }
                }
                else {
                    if (listeners.filter(n => n === name).length === 0) {
                        const scriptElement = document.createElement('script');
                        scriptElement.src = 'characters/' + name.toLowerCase().replace(' ', '') + '.js?' + lqrandom();
                        document.head.appendChild(scriptElement);
                    }
                    if (entity) {
                        queue.push({ name: name, entity: entity });
                    }
                    if (data) {
                        listeners.push(data);
                    }
                }
            },
            characters: characters
        };
    })();
    const Entity = (() => {
        const entityConstructor = function () { };
        const blacklist = ['name', 'x', 'y', 'dx'];
        entityConstructor.prototype.remove = function () {
            this.removed = true;
            this.mouseListener && removeMouseListener(this.mouseListener);
            this.onRemove && this.onRemove();
        };
        entityConstructor.prototype.place = function () {
            this.removed = false;
            this.mouseListener && mouseListeners.push(this.mouseListener);
            this.onPlace && this.onPlace();
        };
        entityConstructor.prototype.spawn = function (spawn) {
            const owner = this;
            spawnAnimatable({ type: spawn.type || 0, name: spawn.name, recycle: true, airborne: true, onLoad: function (entity) {
                    for (const key of Object.getOwnPropertyNames(spawn)) {
                        if (blacklist.indexOf(key) === -1) {
                            entity[key] = spawn[key];
                        }
                    }
                    entity.lastx = owner.x;
                    entity.x = owner.x + owner.face * spawn.x;
                    entity.y = owner.y - spawn.y;
                    if (spawn.dx) {
                        entity.dx = owner.face * spawn.dx;
                    }
                    if (!spawn.neutral) {
                        entity.friendly = owner;
                    }
                    if (!spawn.singleFacing) {
                        entity.face = owner.face;
                    }
                    if (spawn.stale) {
                        entity.staleAs = owner;
                    }
                } });
        };
        return entityConstructor;
    })();
    const importPrototype = (from, to, ...properties) => {
        for (let i = 0; i < properties.length; i++) {
            to.prototype[properties[i]] = from.prototype[properties[i]];
        }
    };
    const Animatable = (() => {
        const defaultControl = function () {
            const controller = this.controller;
            if (controller.debugging) {
                if (controller.dup || controller.dleft || controller.dright || controller.ddown && controller.startPress) {
                    controller.debugging = false;
                    return;
                }
                if (controller.dup) {
                    if (controller.attackPress) {
                        dbg.drawStage = (dbg.drawStage + 1) & 3;
                        dbg.log('Drawing stage:', (dbg.drawStage & 1) !== 0 ? 'on' : 'off', '; colliders:', (dbg.drawStage & 2) !== -1 ? 'on' : 'off');
                    }
                    return;
                }
                if (controller.dleft) {
                    return;
                }
                if (controller.dright) {
                    if (controller.attackPress && this instanceof Animatable) {
                        this.reset();
                        this.stocks = 3;
                        dbg.log('Reset player ' + (this.playerNumber + 1));
                    }
                    return;
                }
                if (controller.ddown) {
                    // if (controller.ddownPress && this.colorSelectable) {
                    //   Effects.colorChooser(this.x - 100, this.y, 200, 200, this)
                    // }
                    /*if (this.dupPress) {
                      // doesn't work in browser, requestFullScreen can only be called from a user event handler
                      dbg.log('Requesting fullscreen')
                      canvas.requestFullScreen && canvas.requestFullScreen() ||
                      canvas.mozRequestFullScreen && canvas.mozRequestFullScreen() ||
                      canvas.webkitRequestFullScreen && canvas.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT)
                    }*/
                    if (controller.jumpPress) {
                        controller.noTapJump = !controller.noTapJump;
                        dbg.log('Tap jump for p' + (this.playerNumber + 1), controller.noTapJump ? 'off' : 'on');
                    }
                    if (controller.shieldPress) {
                        dbg.enabled && dbg.log('Debug text', 'disabled');
                        dbg.toggle();
                        dbg.enabled && dbg.log('Debug text', 'enabled');
                    }
                    if (controller.grabPress) {
                        dbg.drawLedgeGrab = !dbg.drawLedgeGrab;
                        dbg.log('Draw ledge grab data', dbg.drawLedgeGrab ? 'on' : 'off');
                    }
                    if (controller.specialPress) {
                        dbg.drawHurtbubbles = !dbg.drawHurtbubbles;
                        dbg.log('Draw hurtbubbles', dbg.drawHurtbubbles ? 'on' : 'off');
                    }
                    if (controller.attackPress) {
                        dbg.drawHitbubbles = !dbg.drawHitbubbles;
                        dbg.log('Draw hitbubbles', dbg.drawHitbubbles ? 'on' : 'off');
                    }
                    return;
                }
            }
            else {
                if (controller.ddown && controller.attack && controller.special) {
                    controller.debugging = true;
                    dbg.log('Debug mode enabled for player ', this.playerNumber + 1);
                    dbg.log('^A - stage drawing; >A - reset character; vY - toggle tap jump; vL - debug text; vZ - ledge grab; vB - hurtbubbles; vA - hitbubbles');
                }
            }
            if (controller.startPress) {
                activeMode.start && activeMode.start(controller, this);
            }
            if (!(this instanceof Animatable)) {
                return;
            }
            if (this.activeAnimation &&
                this.activeAnimation.reversible &&
                this.activeAnimation.frame < 8 &&
                ((this.face === 1 && controller.left === 2) || (this.face === -1 && controller.right === 2))) {
                // b-reverse
                this.face = -this.face;
                if (this.activeAnimation.reverse) {
                    this.setAnimation(this.activeAnimation.reverse, true);
                }
            }
            if (controller.shieldHardPress && (this.teched <= constants.TECH_OVERLAP)) {
                this.teched = constants.TECH_TIMER;
            }
            if ((this.face === 1 && controller.hardleft) || (this.face === -1 && controller.hardright)) {
                controller.reversible = 8;
            }
            else if (controller.reversible > 0) {
                controller.reversible--;
            }
            if (this.airborne) {
                if (this.wallJump && this.animation !== 'walljump' && this.animations.walljump && ((this.wallJumpSide === 'right' && controller.hardleft === 6) || (this.wallJumpSide === 'left' && controller.hardright === 6)) && this.setAnimation('walljump')) {
                    this.wallJump = 0;
                    Effects.airjump(this.x, this.y, this.lighter);
                    this.fastfall = false;
                    this.face = this.wallJumpSide === 'left' ? 1 : -1;
                    this.pseudojumps++;
                }
                else if (controller.jumpPress || (!controller.noTapJump && controller.hardup === 6)) {
                    if ((this.animations.airjumpN && this.animations.airjumpN.jumps > this.airjumps && this.setAnimation('airjumpN')) || (this.animations['airjump' + this.airjumps] && this.setAnimation('airjump' + this.airjumps))) {
                        Effects.airjump(this.x, this.y, this.lighter);
                        this.fastfall = false;
                    }
                }
                if (constants.AIR_DODGE_OK && controller.shieldHardPress) {
                    this.animations['airdodge'].bufferAngle = controller.radians();
                    this.setAnimation('airdodge');
                }
                this.di = controller.hmove * this.airAcceleration;
                if (controller.grabPress && this.animations.zair && this.setAnimation('zair')) {
                }
                else if (controller.specialPress) {
                    if (controller.left) {
                        if (this.setAnimation('airsidespecial')) {
                            this.face = -1;
                        }
                    }
                    else if (controller.right) {
                        if (this.setAnimation('airsidespecial')) {
                            this.face = 1;
                        }
                    }
                    else if (controller.up) {
                        if (this.setAnimation('airupspecial')) {
                            if (controller.hmove !== 0) {
                                if ((this.face === 1 && controller.hmove < -0.2) || (this.face === -1 && controller.hmove > 0.2)) {
                                    this.face = -this.face;
                                }
                            }
                        }
                    }
                    else if (controller.down) {
                        this.setAnimation('airdownspecial');
                    }
                    else if (this.setAnimation('airspecial') && controller.reversible) {
                        this.face = -this.face;
                    }
                }
                else if (controller.attackPress || controller.grabPress) {
                    if (controller.shield && this.animations.zair && this.setAnimation('zair')) {
                    }
                    else if (controller.up) {
                        this.setAnimation('uair');
                    }
                    else if (controller.down) {
                        this.setAnimation('dair');
                    }
                    else if (this.face === 1) {
                        if (controller.hmove < -0.3) {
                            this.setAnimation('bair');
                        }
                        else if (controller.hmove > 0.3) {
                            this.setAnimation('fair');
                        }
                        else {
                            this.setAnimation('nair');
                        }
                    }
                    else {
                        if (controller.left) {
                            this.setAnimation('fair');
                        }
                        else if (controller.right) {
                            this.setAnimation('bair');
                        }
                        else {
                            this.setAnimation('nair');
                        }
                    }
                }
                if (controller.rup === 2) {
                    this.setAnimation('uair');
                }
                else if (controller.rdown === 2) {
                    this.setAnimation('dair');
                }
                else if (this.face === 1) {
                    if (controller.rleft === 2) {
                        this.setAnimation('bair');
                    }
                    else if (controller.rright === 2) {
                        this.setAnimation('fair');
                    }
                }
                else {
                    if (controller.rleft === 2) {
                        this.setAnimation('fair');
                    }
                    else if (controller.rright === 2) {
                        this.setAnimation('bair');
                    }
                }
                if (controller.harddown && ((this.dy < 5 && this.activeAnimation.type === 2) || (this.dy <= 0 && !this.activeAnimation.noFastfall && !this.activeAnimation.keyframeData.noFastfall))) {
                    if (constants.FASTFALL_ALWAYS || this.activeAnimation.type === 0) {
                        this.fastfall = true;
                    }
                }
                if ((controller.shieldPress || controller.grabPress) && this.lagCancel <= constants.LAG_CANCEL_OVERLAP) {
                    this.lagCancel = constants.LAG_CANCEL_TIMER;
                }
            }
            else {
                if (controller.ddownPress) {
                    this.setAnimation('dtaunt');
                }
                if (controller.dleftPress || controller.drightPress) {
                    this.setAnimation('staunt');
                }
                if (controller.dupPress) {
                    this.setAnimation('utaunt');
                }
                if (controller.shield > 0.1 || (controller.grab && !controller.grabPress)) {
                    this.setAnimation('shieldup');
                }
                if (this.animation === 'run') {
                }
                else if (this.animation === 'dash') {
                }
                else if (controller.down && this.animation !== 'crouch' && this.animation !== 'crouched') {
                    this.setAnimation('crouch');
                }
                else if (Math.abs(controller.hmove) > 0.3) {
                    if (controller.hardleft === 6 || controller.hardright === 6) {
                        if (this.animation !== 'dash') {
                            if (((this.face === Math.sign(controller.hmove)) && this.setAnimation('dash')) || ((this.face !== Math.sign(controller.hmove)) && this.setAnimation('pivot'))) {
                                this.face = controller.hmove >= 0 ? 1 : -1;
                            }
                        }
                        if (this.animation === 'skid') {
                            if ((this.face === 1 && controller.left) || (this.face === -1 && controller.right)) {
                                this.setAnimation('turnaround', true);
                            }
                        }
                    }
                }
                else {
                    if (this.animation === 'walk' || this.animation === 'stride') {
                        this.setAnimation('idle');
                    }
                }
                if ((controller.jumpPress || (!controller.noTapJump && controller.hardup)) && this.setAnimation('hop')) {
                    this.px = this.dx;
                    this.animations['hop'].tapJumped = !controller.jumpPress;
                }
                if (controller.specialPress) {
                    if (controller.left) {
                        if (this.setAnimation('sidespecial')) {
                            this.face = -1;
                        }
                    }
                    else if (controller.right) {
                        if (this.setAnimation('sidespecial')) {
                            this.face = 1;
                        }
                    }
                    else if (controller.up) {
                        this.setAnimation('upspecial');
                    }
                    else if (controller.down) {
                        this.setAnimation('downspecial');
                    }
                    else {
                        this.setAnimation('groundspecial');
                    }
                }
                else if (controller.rup === 2) {
                    this.setAnimation('usmash');
                }
                else if (controller.rdown === 2) {
                    this.setAnimation('dsmash');
                }
                else if (controller.rleft === 2 || controller.rright === 2) {
                    const face = (controller.rright > 0 ? 1 : -1);
                    if (this.face !== face) {
                        if (this.setAnimation('fsmashpivot')) {
                            this.face = face;
                        }
                    }
                    else {
                        this.setAnimation('fsmash');
                    }
                }
                else if (controller.grabPress && this.setAnimation('grab')) {
                }
                else if (controller.attackPress || controller.grabPress) {
                    let turn = false;
                    if (this.animation.type === 4) {
                        this.setAnimation('grab');
                    }
                    else if (controller.hardup) {
                        turn = this.setAnimation('usmash');
                    }
                    else if (controller.up) {
                        turn = this.setAnimation('utilt');
                    }
                    else if (controller.harddown) {
                        turn = this.setAnimation('dsmash');
                    }
                    else if (controller.down) {
                        turn = this.setAnimation('dtilt');
                    }
                    else if (controller.hardleft || controller.hardright) {
                        turn = this.setAnimation('fsmash');
                    }
                    else if (controller.left || controller.right) {
                        if (this.setAnimation('ftilt')) {
                            this.face = Math.sign(controller.hmove);
                        }
                    }
                    else {
                        turn = this.setAnimation('jab');
                    }
                    if (turn) {
                        if (controller.hmove > 0.33) {
                            this.face = 1;
                        }
                        else if (controller.hmove < -0.33) {
                            this.face = -1;
                        }
                    }
                }
            }
        };
        const animatableConstructor = function Animatable(entityData) {
            this.namedbubbles = new Map();
            this.hurtbubbles = [];
            this.animation = entityData && (!entityData.airborne ? 'idle' : 'airborne');
            this.airborne = entityData && !!entityData.airborne;
            this.controller = entityData && entityData.controller;
            this.scheduledAnimation = [null, false, false];
            this.animations = {};
            this.lastInjury = { lastFrame: false, entity: undefined, damage: 0, knockback: 0, angle: 0, flags: 0, frame: 0, lag: 0, landedSince: false, stale: 0 };
            this.lastShield = { lastFrame: false, entity: undefined, damage: 0, knockback: 0, angle: 0, flags: 0, frame: 0 };
            this.lastCollision = { lastFrame: false, type: 0, entity: undefined, damage: 0, knockback: 0, angle: 0, flags: 0, frame: 0, stale: 0 };
            this.lastClash = { lastFrame: false, type: 0, entity: undefined, damage: 0, knockback: 0, angle: 0, flags: 0, frame: 0 };
            this.data = new Map();
            this.defaultData = null;
            this.chooseAnimation = null;
            this.playerNumber = -1;
            this.launched = false;
            this.status = new Set();
            this.invincible = 0;
            this.intangible = 0;
            this.flash = 0;
            this.buffertime = 0;
            this.lagCancel = 0;
            this.teched = 0;
            this.stun = 0;
            this.color = 0;
            this.contrast = 0;
            this.darker = 0;
            this.lighter = 0;
            this.team = 0;
            this.x = 0;
            this.lastFall = { x: 0, y: 0, frame: -200 };
            this.dx = 0;
            this.px = 0;
            this.lag = 0;
            this.hitlag = false;
            this.dummy = !!entityData.dummy;
            this.important = !!entityData.important;
            this.slide = 0;
            this.y = 0;
            this.dy = 0;
            this.damage = 0;
            this.stocks = 0;
            this.stale = { moves: [], cursor: 0 };
            this.staleAs = null;
            this.collided = [];
            this.fastfall = false;
            this.airjumps = 0;
            this.pseudojumps = 0;
            this.face = 1;
            this.onRemove = false;
            this.follow = true;
            this.buffer = '';
            this.activeAnimation = null;
            this.ledgeHang = false; // direction of hanging from the ledge
            this.ledgeReleased = 10;
            this.friendly = this;
            this.control = defaultControl;
            this.lastframe = null;
            this.currentframe = null;
            this.ecbTx = 0;
            this.ecbTy = 0;
            this.ecbRx = 0;
            this.ecbRy = 0;
            this.ecbLx = 0;
            this.ecbLy = 0;
            this.ecbBx = 0;
            this.ecbBy = 0;
            this.stats = {
                damage: 0,
                damageTaken: 0,
                damageAbsorbed: 0,
                knockbackAbsorbed: 0,
                hits: 0,
                shieldHits: 0,
                hurts: 0,
                shieldHurts: 0,
                falls: 0,
                sds: 0,
                kos: 0,
                blocked: 0,
                shieldDamage: 0,
                fallpct: 0,
                kopct: 0,
                sdpct: 0,
                groundFrames: 0,
                airFrames: 0,
                lagCancels: 0,
                heavyLands: 0,
                ledgeGrabs: 0,
                hangtime: 0,
                walltech: 0,
                walltechmiss: 0,
                techmiss: 0,
                techin: 0,
                techout: 0,
                tech: 0,
                staleMoves: 0,
                veryStaleMoves: 0,
            };
            this.shieldBubble = Hitbubble.from(this, {
                type: 'shield',
            });
            if (entityData) {
                ((data, entity) => {
                    if (data.type === 0) {
                        characterData.load(data.name, entity, data);
                    }
                })(entityData, this);
            }
        };
        animatableConstructor.prototype.schedule = function (name, force, interruptInterrupt) {
            if (this.scheduledAnimation[0] === null || force) {
                this.scheduledAnimation[0] = name;
                this.scheduledAnimation[1] = force;
                this.scheduledAnimation[2] = interruptInterrupt;
            }
        };
        animatableConstructor.prototype.addHitbubble = function (bubble) {
            addHitbubble(this, // entity
            bubble, this.x + this.face * bubble.x, this.y - bubble.y, this.x + this.face * bubble.x2, this.y - bubble.y2);
        };
        animatableConstructor.prototype.addStatus = function (kind, source, duration = -1) {
            const s = statusFactory(kind);
            s.apply(this, source, duration === -1 ? s.defaultDuration : duration);
            this.status.add(s);
            return s;
        };
        animatableConstructor.prototype.setAnimation = function (animationName, force, interruptInterrupt) {
            const activeAnimation = this.activeAnimation;
            if (this.animations.hasOwnProperty(constants.MODE_FLAG + ':' + animationName)) {
                animationName = constants.MODE_FLAG + ':' + animationName;
            }
            let targetAnimation = this.animations[animationName];
            if (!targetAnimation) {
                console.log('Animation not found (early):', animationName);
                return false;
            }
            // cannotCancel: if this is specifically prevented from cancelling (overrides canCancel)
            const cannotCancel = activeAnimation.noCancel && activeAnimation.noCancel.indexOf(animationName) !== -1;
            // canInterrupt: if animation has iasa frames and animation is within that
            const canInterrupt = (activeAnimation.iasa && !targetAnimation.noiasa && activeAnimation.duration - activeAnimation.iasa <= activeAnimation.frame)
                && (animationName !== 'crouch' || (this.animation !== 'dtilt' && this.animation !== 'dsmash'));
            // canCancel: if cancellable rules allow cancelling
            const canCancel = (activeAnimation.keyframeData.cancellable && (activeAnimation.keyframeData.cancellable === 'all' || activeAnimation.keyframeData.cancellable.indexOf(animationName) !== -1))
                || (activeAnimation.cancellable === 'all' || activeAnimation.cancellable.indexOf(animationName) !== -1)
                || activeAnimation.keyframeData.redirect && activeAnimation.keyframeData.redirect[animationName];
            if (!force && !canInterrupt && (cannotCancel || !canCancel)) {
                const bufferable = activeAnimation && ((activeAnimation.keyframeData && activeAnimation.keyframeData.buffer) || activeAnimation.buffer);
                if (bufferable && !activeAnimation.unbufferable && (bufferable === 'all' || bufferable.indexOf(animationName) !== -1)) {
                    this.buffer = animationName;
                    this.buffertime = activeAnimation.buffertime || 8;
                }
                return false;
            }
            if (this.chooseAnimation) {
                animationName = this.chooseAnimation(animationName);
            }
            this.lastframe = this.currentframe;
            if (!interruptInterrupt && activeAnimation.interrupted && activeAnimation.transition !== animationName && (force || !activeAnimation.noCancelInterrupt)) {
                const name = activeAnimation.interrupted(this);
                if (name) {
                    animationName = name;
                }
            }
            if (activeAnimation.cancellable.indexOf(animationName) !== -1) {
                activeAnimation.canceled && activeAnimation.canceled(this, this.controller, animationName);
            }
            if (this.buffertime > 0) {
                this.buffertime = 0;
                this.buffer = '';
            }
            activeAnimation.reset();
            if (activeAnimation.keyframeData.redirect && activeAnimation.keyframeData.redirect[animationName]) {
                animationName = activeAnimation.keyframeData.redirect[animationName];
            }
            else if (activeAnimation.redirect && activeAnimation.redirect[animationName]) {
                animationName = activeAnimation.redirect[animationName];
            }
            if (animationName === 'dashgrab' && !constants.DASH_GRAB_OK) {
                animationName = 'grab';
            }
            this.animation = animationName;
            this.activeAnimation = this.animations[animationName];
            if (!this.activeAnimation) {
                dbg.log('animation error: ' + animationName);
                console.log('Animation not found:', this, animationName);
            }
            this.activeAnimation.continued = (activeAnimation.transition === activeAnimation.name && activeAnimation.name === animationName);
            if (this.activeAnimation.refresh) {
                this.activeAnimation.step();
            }
            if (this.activeAnimation.start) {
                const transition = this.activeAnimation.start(this, this.controller, this.activeAnimation);
                if (transition) {
                    this.setAnimation(transition, true);
                }
            }
            // dbg.log('p' + this.playerNumber + ': ' + this.animation)
            return true;
        };
        animatableConstructor.prototype.reset = function () {
            this.collided.length = 0;
            this.x = 0;
            this.y = 0;
            this.dx = 0;
            this.dy = 0;
            this.kbx = 0;
            this.kby = 0;
            this.kba = 0;
            this.kb = 0;
            this.okb = 0;
            this.kbf = 0;
            this.slide = 0;
            this.lag = 0;
            this.hitlag = false;
            this.stun = 0;
            this.shieldstun = 0;
            this.status.clear();
            if (this.stale.moves) {
                this.stale.moves.length = 0;
                this.stale.cursor = 0;
            }
            if (this.defaultData !== null) {
                for (let k of Object.getOwnPropertyNames(this.defaultData)) {
                    this.data.set(k, this.defaultData[k]);
                }
            }
            this.invincible = 0;
            this.intangible = 0;
            this.staleAs = null;
            this.buffer = '';
            this.buffertime = 0;
            this.fastfall = false;
            this.airjumps = 0;
            this.pseudojumps = 0;
            this.lagCancel = 0;
            this.teched = 0;
            this.face = 1;
            this.lastCollision.lastFrame = false;
            this.lastShield.lastFrame = false;
            this.lastInjury.lastFrame = false;
            this.lastClash.lastFrame = false;
            this.activeAnimation.reset();
        };
        animatableConstructor.prototype.setColor = function (color) {
            this.color = color;
            this.shieldBubble.color = this.color - 2,
                this.darker = (color >> 4) << 4;
            this.lighter = ((color >> 4) << 4) + 9;
            this.contrast = complements[color];
        };
        importPrototype(Entity, animatableConstructor, 'remove', 'place', 'spawn');
        return animatableConstructor;
    })();
    const spawnAnimatable = entityData => {
        if (entityData.recycle) {
            for (let i = removed.length - 1; i >= 0; i--) {
                if (removed[i].removed && removed[i].name === entityData.name) {
                    removed[i].removed = false;
                    removed[i].reset();
                    entityData.onLoad(removed[i], removed[i]);
                    return removed[i];
                }
            }
        }
        // if not recycling, or none is found
        return new Animatable(entityData);
    };
    const tempHitMap = new Map();
    const testHitBubbleCollisions = () => {
        const l = hitbubbleCount();
        for (let i = 0; i < l; i++) {
            let hb = hitbubbles[i];
            let b = hb.bubble;
            let owner = hb.entity;
            if (!owner) {
                continue;
            }
            let type = b.type;
            const x = hb.x;
            const y = hb.y;
            const x2 = hb.x2;
            const y2 = hb.y2;
            const radius = b.radius;
            if (type === 5 || type === 8) {
                // phasing, force don't act on other hitbubbles
                continue;
            }
            for (let hi = i + 1; hi < l; hi++) {
                let thb = hitbubbles[hi];
                const tb = thb.bubble;
                const htype = tb.type;
                if (htype === 7 && type === 7) {
                    // both hitbubbles were shields
                    continue;
                }
                if ((htype === 7 && type === 6) || (htype === 7 && type === 6)) {
                    // grab collided with a shield
                    continue;
                }
                if (htype === 5 || htype === 8) {
                    // phasing or force
                    continue;
                }
                if (!((htype !== 2 && type !== 2) || (htype === 2 && type === 7) || (type === 2 && htype === 7))) {
                    // air hitbubbles don't collide with non-shield
                    if (htype !== 4 && type !== 4) {
                        // unless it's an object
                        continue;
                    }
                }
                if (!((type === 6 && htype === 6) || (type !== 6 && htype !== 6))) {
                    // grabs only collide with other grabs
                    continue;
                }
                let hitbubbleOwner = thb.entity;
                if (!hitbubbleOwner) {
                    // hitbubble owner doesn't exist
                    continue;
                }
                if (owner === hitbubbleOwner) {
                    // own hitbubble
                    continue;
                }
                if (owner.friendly === hitbubbleOwner || owner.friendly === hitbubbleOwner.friendly) {
                    // friendly hitbubble
                    continue;
                }
                let collideAs = owner.collided;
                if (b.flags & 2) {
                    if (!tempHitMap.has(hb)) {
                        tempHitMap.set(hb, []);
                    }
                    collideAs = tempHitMap.get(hb);
                }
                if (collideAs.indexOf(hitbubbleOwner) !== -1) {
                    // already collided
                    continue;
                }
                const hx = thb.x;
                const hy = thb.y;
                const hx2 = thb.x2;
                const hy2 = thb.y2;
                if (!capsuleCollision(x, y, x2, y2, radius, hx, hy, hx2, hy2, tb.radius)) {
                    // no collision
                    // console.log('no collision', x, y, x2, y2, radius, hx, hy, hx2, hy2, tb.radius)
                    continue;
                }
                // console.log('collided')
                // determine the winner of the clash
                let d1 = b.damage;
                const d2 = tb.damage;
                let k1 = b.knockback;
                const k2 = tb.knockback;
                let c1 = false;
                let c2 = false;
                if (htype === 7 || type === 7) {
                    // hitbox hit a shield
                    let flags = b.flags;
                    if (type === 7) {
                        // shield hit a hitbox
                        // reverse the logic so this only has to be here once and it doesn't have to be made into a function
                        const h = owner;
                        owner = hitbubbleOwner;
                        hitbubbleOwner = h;
                        d1 = d2;
                        k1 = k2;
                        const tempb = hb;
                        hb = thb;
                        thb = tempb;
                        b = tb;
                        type = htype;
                        flags = tb.flags;
                        collideAs = owner.collided;
                        if (b.flags & 2) {
                            if (!tempHitMap.has(hb)) {
                                tempHitMap.set(hb, []);
                            }
                            collideAs = tempHitMap.get(hb);
                        }
                        if (collideAs.indexOf(hitbubbleOwner) !== -1) {
                            // already collided
                            continue;
                        }
                    }
                    if (b.data.has('shieldDamage')) {
                        d1 = d1 + b.data.get('shieldDamage');
                    }
                    collideAs.push(hitbubbleOwner);
                    owner.lag = (d1 / 3 + 3) | 0;
                    let angle = 0;
                    let kx = 0;
                    angle = hb.angle(((flags & 128) === 0) &&
                        ((owner.face === 1 && owner.x > hitbubbleOwner.x) || (owner.face === -1 && owner.x < hitbubbleOwner.x)), hitbubbleOwner.airborne, hitbubbleOwner.damage);
                    kx = angleX(angle) * k1 * (1 - hitbubbleOwner.shieldVal * 0.9);
                    if (owner.activeAnimation.charged) {
                        const scale = owner.activeAnimation.charged * (owner.activeAnimation.hasOwnProperty('scale') ? owner.activeAnimation.scale : constants.SMASH_SCALE);
                        d1 = d1 + d1 * scale;
                    }
                    hitbubbleOwner.stun = ((d1 + constants.SHIELD_STUN_DMG) * constants.SHIELD_STUN_MOD + constants.SHIELD_STUN_PLUS) | 0; // heavy stun
                    hitbubbleOwner.shieldstun = ((d1 + constants.SHIELD_LIGHTSTUN_DMG) * constants.SHIELD_LIGHTSTUN_MOD + constants.SHIELD_LIGHTSTUN_PLUS) | 0; // light stun
                    if (~flags & 1024) {
                        hitbubbleOwner.lag = owner.lag;
                    }
                    hitbubbleOwner.lastShield.frame = frame;
                    hitbubbleOwner.lastShield.lastFrame = true;
                    hitbubbleOwner.lastShield.entity = owner;
                    hitbubbleOwner.lastShield.damage = d1;
                    hitbubbleOwner.lastShield.knockback = k1;
                    hitbubbleOwner.lastShield.angle = angle;
                    hitbubbleOwner.lastShield.type = type;
                    hitbubbleOwner.lastShield.stun = hitbubbleOwner.stun;
                    hitbubbleOwner.lastShield.flags = flags;
                    hitbubbleOwner.stats.blocked = hitbubbleOwner.stats.blocked + d1;
                    hitbubbleOwner.stats.shieldHurts++;
                    hitbubbleOwner.shield = hitbubbleOwner.shield - (d1 / 100);
                    owner.stats.shieldDamage = owner.stats.shieldDamage + d1;
                    owner.stats.shieldHits++;
                    if (Math.abs(kx) > 0.01) {
                        hitbubbleOwner.kbDecay = constants.KB_DECAY * hitbubbleOwner.kbDecayMod;
                        hitbubbleOwner.okb = kx;
                        hitbubbleOwner.kb = kx;
                        hitbubbleOwner.kbx = kx;
                        hitbubbleOwner.kby = 0;
                        hitbubbleOwner.kba = kx >= 0 ? 0 : 180;
                    }
                    if (b.data.has('onBlocked')) {
                        b.data.get('onBlocked')(hb, thb);
                    }
                    if (owner.activeAnimation && owner.activeAnimation.blocked) {
                        owner.activeAnimation.blocked(owner);
                    }
                    if (owner.activeAnimation && owner.activeAnimation.keyframeData.blocked) {
                        owner.activeAnimation.keyframeData.blocked(owner);
                    }
                    // playAudio('clash')
                    continue;
                }
                else if (Math.abs(d1 - d2) < 32 || Math.abs(k1 - k2) < 32) {
                    // tie
                    c1 = true;
                    c2 = true;
                    playAudio('clash');
                }
                else if (d1 + k1 > d2 + k2) {
                    // initiator won clash
                    c1 = false;
                    c2 = true;
                }
                else {
                    // recipient won clash
                    c1 = true;
                    c2 = false;
                }
                if (c1) {
                    let collideAs = owner.collided;
                    if (b.flags & 2) {
                        if (tempHitMap.has(hb)) {
                            tempHitMap.set(hb, []);
                        }
                        collideAs = tempHitMap.get(hb);
                    }
                    collideAs.push(hitbubbleOwner);
                    owner.lastClash.lastFrame = true;
                    owner.lastClash.entity = hitbubbleOwner;
                    if (owner.activeAnimation.clashed) {
                        owner.activeAnimation.clashed(owner, owner.controller);
                    }
                    if ((owner.activeAnimation.type === 1 || owner.activeAnimation.recoil) && owner.activeAnimation.recoil !== 'none') {
                        owner.schedule(owner.activeAnimation.recoil || 'recoil', true);
                    }
                    owner.lag = ((d1 + d2) / 6 + 3) | 0;
                    hitbubbleOwner.lag = hitbubbleOwner.lag + owner.lag;
                }
                if (c2) {
                    let collideAs = hitbubbleOwner.collided;
                    if (tb.flags & 2) {
                        if (tempHitMap.has(thb)) {
                            tempHitMap.set(thb, []);
                        }
                        collideAs = tempHitMap.get(thb);
                    }
                    collideAs && collideAs.push(owner);
                    hitbubbleOwner.lastClash.lastFrame = true;
                    hitbubbleOwner.lastClash.entity = owner;
                    if (hitbubbleOwner.activeAnimation.clashed) {
                        hitbubbleOwner.activeAnimation.clashed(hitbubbleOwner, hitbubbleOwner.controller);
                    }
                    if ((hitbubbleOwner.activeAnimation.type === 1 || hitbubbleOwner.activeAnimation.recoil) && hitbubbleOwner.activeAnimation.recoil !== 'none') {
                        hitbubbleOwner.schedule(hitbubbleOwner.activeAnimation.recoil || 'recoil', true);
                    }
                    owner.lag = ((d1 + d2) / 6 + 3) | 0;
                    hitbubbleOwner.lag = hitbubbleOwner.lag + owner.lag;
                }
            }
        }
    };
    const testCollisions = () => {
        const l = hitbubbleCount();
        for (let i = 0; i < l; i++) {
            const hb = hitbubbles[i];
            const b = hb.bubble;
            const hx = hb.x;
            const hy = hb.y;
            const hx2 = hb.x2;
            const hy2 = hb.y2;
            const type = b.type;
            const flags = b.flags;
            if (type === 7) {
                // shield hitbubble
                continue;
            }
            for (let j = 0; j < hurtbubbles.length; j++) {
                const hurtbubble = hurtbubbles[j];
                if (hurtbubble.owner.removed || hurtbubble.type === 0 || hurtbubble.type === 5 || hurtbubble.type === 11) {
                    continue;
                }
                const x = hurtbubble.x + hurtbubble.owner.x;
                const y = hurtbubble.y + hurtbubble.owner.y;
                const x2 = hurtbubble.x2 + hurtbubble.owner.x;
                const y2 = hurtbubble.y2 + hurtbubble.owner.y;
                const radius = hurtbubble.radius;
                if (hurtbubble.type === 6 && type !== 6) {
                    // protected hurtbubble, non-grab hitbubble
                    continue;
                }
                if ((flags & 8) === 1 && hurtbubble.owner.airborne) {
                    // ground-only hitbubble
                    continue;
                }
                if (((flags & 16) === 1 && !hurtbubble.owner.airborne)) {
                    // air-only hitbubble
                    continue;
                }
                const hitbubbleOwner = hb.entity;
                if (!hitbubbleOwner) {
                    continue;
                }
                if (hurtbubble.owner === hitbubbleOwner) {
                    continue;
                }
                if (hitbubbleOwner.friendly === hurtbubble.owner) {
                    continue;
                }
                let collideAs = hitbubbleOwner.collided;
                if (b.flags & 2) {
                    if (!tempHitMap.has(hb)) {
                        tempHitMap.set(hb, []);
                    }
                    collideAs = tempHitMap.get(hb);
                }
                if (collideAs.indexOf(hurtbubble.owner) !== -1) {
                    // already collided without reset
                    continue;
                }
                if (hurtbubble.owner.activeAnimation.ungrabbable && type === 6) {
                    // ungrabbable, hitbubble is grab
                    continue;
                }
                if (b.data.has('hitTest') && !b.data.get('hitTest')(b, hurtbubble)) {
                    // so far unused
                    continue;
                }
                if (!capsuleCollision(x, y, x2, y2, radius, hx, hy, hx2, hy2, b.radius)) {
                    // did not collide
                    // console.log('not colliding', i, x, y, x2, y2, radius, hx, hy, hx2, hy2, b.radius)
                    continue;
                }
                // hurtbubble.hitBy(i)
                // if (hitbubbleOwner.hit instanceof Function) {
                //   hitbubbleOwner.hit(hurtbubble, i)
                // }
                // console.log('collided', i, hb, hx, hy, hx2, hy2, b.radius)
                if (b.data.has('onHit')) {
                    b.data.get('onHit')(hb, hurtbubble);
                }
                const kbbase = b.knockback;
                let baseDamage = b.damage;
                let damage = baseDamage;
                let charge = 1;
                if (hitbubbleOwner.activeAnimation.charged) {
                    charge = hitbubbleOwner.activeAnimation.charged * ((hitbubbleOwner.activeAnimation.hasOwnProperty('scale') ? hitbubbleOwner.activeAnimation.scale : constants.SMASH_SCALE) - 1);
                    baseDamage = damage = damage + damage * charge;
                }
                collideAs.push(hurtbubble.owner);
                if (!hitbubbleOwner.activeAnimation.hit && (~flags & 512)) {
                    const staled = !hitbubbleOwner.staleAs ? hitbubbleOwner.stale : hitbubbleOwner.staleAs.stale;
                    let stale = 0;
                    const staleName = !b.data.has('staleAs') ? hitbubbleOwner.animation : b.data.get('staleAs');
                    for (let i = 0; i < staled.moves.length; i++) {
                        const index = (staled.cursor - 1 - i + constants.STALE_STACK_SIZE) % constants.STALE_STACK_SIZE;
                        if (staled.moves[index] === staleName) {
                            stale = stale + (constants.STALE_VALUE * constants.STALE_STACK_SIZE) - i * constants.STALE_VALUE;
                        }
                    }
                    hitbubbleOwner.activeAnimation.staled = stale;
                    staled.moves[staled.cursor] = staleName;
                    staled.cursor = (staled.cursor + 1) % constants.STALE_STACK_SIZE;
                    hitbubbleOwner.activeAnimation.hit = true;
                }
                const stale = (~flags & 512) ? hitbubbleOwner.activeAnimation.staled : 0;
                // dbg.log('staled at ' + stale)
                if (constants.STALE_DAMAGE) {
                    damage = damage * (1 - stale);
                }
                let kbstale = 1;
                if (constants.STALE_KNOCKBACK) {
                    kbstale = 1 - stale;
                }
                if (hurtbubble.type === 4) {
                    if (~flags & 64 /* wind flag */) {
                        if (~flags & 1024) {
                            hitbubbleOwner.lag = hitbubbleOwner.lag + (damage / 3 + 3) | 0;
                        }
                    }
                    continue;
                }
                // if hurtbubble was not invincible
                let kbcancel = 1;
                if (hurtbubble.owner.animation === 'crouched' || hurtbubble.owner.animation === 'crouch') {
                    // crouch canceling
                    kbcancel = kbcancel * constants.CROUCH_CANCEL_MOD;
                }
                if (hurtbubble.owner.teched > constants.V_CANCEL_WINDOW && hurtbubble.owner.airborne && (hurtbubble.owner.activeAnimation.type === 0 || hurtbubble.owner.activeAnimation.type === 4)) {
                    // v-cancelling
                    kbcancel = kbcancel * constants.V_CANCEL_MOD;
                }
                const kbgrowth = b.growth;
                const knockback = (kbgrowth * (0.014 * ((baseDamage + 2) * (damage * 2 + hurtbubble.owner.damage) / 20) * hurtbubble.owner.weight + 0.18) + kbbase) * kbcancel;
                // gotta do angle flip here now
                const angle = hb.angle(((flags & 128) === 0) &&
                    ((hitbubbleOwner.face === 1 && hitbubbleOwner.x > hurtbubble.owner.x) || (hitbubbleOwner.face === -1 && hitbubbleOwner.x < hurtbubble.owner.x)), hurtbubble.owner.airborne, hurtbubble.owner.damage);
                // if hitbubble's angle should be reflected vertically
                const kx = angleX(angle) * knockback;
                let ky = angleY(angle) * knockback;
                if (ky < 0.001 && ky > -0.001) {
                    ky = 0;
                }
                if (hurtbubble.owner.stun > 0) {
                    Effects.combo(hx - (hx - x) / 2, hy - (hy - y) / 2, kx, ky, hurtbubble.owner.lag);
                }
                if (b.data.has('audio')) {
                    const sfx = b.data.get('audio');
                    if (sfx !== '') {
                        playAudio(sfx);
                    }
                }
                else if (hitbubbleOwner.activeAnimation.keyframeData.hitAudio) {
                    playAudio(hitbubbleOwner.activeAnimation.keyframeData.hitAudio);
                }
                else if (type === 6) {
                    playAudio('grab');
                }
                else if (type === 1 || type === 2 || type === 3) {
                    playAudio('hit');
                }
                if (type === 1 || type === 2 || type === 3) {
                    if (hurtbubble.owner.stun <= 0) {
                        Effects.hit(hx, hy, kx, ky, hurtbubble.owner.lag);
                    }
                }
                hurtbubble.owner.kbf = flags;
                let stun = 0;
                const windbox = ((flags & 64 /* wind flag */) !== 0);
                if (hurtbubble.type !== 3) {
                    if (!windbox) {
                        hurtbubble.owner.face = hurtbubble.owner.x < hitbubbleOwner.x ? 1 : -1;
                        hurtbubble.owner.dx = 0;
                        hurtbubble.owner.dy = 0;
                        hurtbubble.owner.slide = 0;
                    }
                    hurtbubble.owner.kb = knockback;
                    hurtbubble.owner.okb = knockback;
                    // dbg.log('applied knockback: ' + knockback)
                    hurtbubble.owner.kbx = kx;
                    hurtbubble.owner.kby = ky;
                    hurtbubble.owner.kba = angle;
                    if (b.data.has('addVelocity')) {
                        hurtbubble.owner.kbx = hurtbubble.owner.kbx + hitbubbleOwner.dx * b.data.get('addVelocity');
                        hurtbubble.owner.kby = hurtbubble.owner.kby + hitbubbleOwner.dy * b.data.get('addVelocity');
                    }
                    hurtbubble.owner.kbDecay = constants.KB_DECAY * hurtbubble.owner.kbDecayMod;
                    if (!windbox) {
                        stun = Math.max(0, Math.ceil(knockback / hurtbubble.owner.kbDecay * hurtbubble.owner.stunMod));
                        hurtbubble.owner.stun = stun;
                        hurtbubble.owner.launched = true;
                    }
                    else if (ky > 0 && !hurtbubble.owner.airborne) {
                        if (hurtbubble.owner.animation === 'ledgehang') {
                            hurtbubble.owner.ledgeReleased = 0;
                        }
                        hurtbubble.owner.airborne = true;
                        hurtbubble.owner.schedule('airborne', true);
                    }
                }
                else {
                    hurtbubble.owner.stats.damageAbsorbed = hurtbubble.owner.stats.damageAbsorbed + damage;
                    hurtbubble.owner.stats.knockbackAbsorbed = hurtbubble.owner.stats.knockbackAbsorbed + knockback;
                }
                if (!windbox) {
                    if (~flags & 1024) {
                        hitbubbleOwner.lag = hitbubbleOwner.lag + (damage / 3 + 3) | 0;
                    }
                    hurtbubble.owner.lag = Math.ceil(damage * (hurtbubble.owner.animation === 'crouched' ? constants.CROUCH_CANCEL_LAG_MOD : 1) * constants.LAG_MOD + constants.LAG_PLUS);
                }
                if (b.data.has('lag')) {
                    hitbubbleOwner.lag = hitbubbleOwner.lag + b.data.get('lag');
                    hurtbubble.owner.lag = hurtbubble.owner.lag + b.data.get('lag');
                }
                if (hurtbubble.owner.lag > 0) {
                    hurtbubble.owner.hitlag = true;
                }
                // dbg.log('kb' + knockback, kx, ky, angle)
                // todo: include stun value in equation?
                hurtbubble.owner.damage = hurtbubble.owner.damage + damage;
                Effects.fadingText(damage.toFixed(1) + '%', 200, 128, 128, hurtbubble.owner, hurtbubble.owner.height - 30);
                hurtbubble.owner.lastInjury.frame = frame;
                hurtbubble.owner.lastInjury.lastFrame = true;
                hurtbubble.owner.lastInjury.entity = hitbubbleOwner.friendly;
                hurtbubble.owner.lastInjury.damage = damage;
                hurtbubble.owner.lastInjury.knockback = knockback;
                hurtbubble.owner.lastInjury.angle = angle;
                hurtbubble.owner.lastInjury.type = type;
                hurtbubble.owner.lastInjury.stun = stun;
                hurtbubble.owner.lastInjury.lag = hurtbubble.owner.lag;
                hurtbubble.owner.lastInjury.flags = flags;
                hurtbubble.owner.lastInjury.landedSince = false;
                hurtbubble.owner.lastInjury.stale = stale;
                hurtbubble.owner.stats.damageTaken = hurtbubble.owner.stats.damageTaken + damage;
                hurtbubble.owner.stats.hurts++;
                hitbubbleOwner.lastCollision.frame = frame;
                hitbubbleOwner.lastCollision.lastFrame = true;
                hitbubbleOwner.lastCollision.entity = hurtbubble.owner;
                hitbubbleOwner.lastCollision.damage = damage;
                hitbubbleOwner.lastCollision.knockback = knockback;
                hitbubbleOwner.lastCollision.angle = angle;
                hitbubbleOwner.lastCollision.type = type;
                hitbubbleOwner.lastCollision.stun = stun;
                hitbubbleOwner.lastCollision.flags = flags;
                hitbubbleOwner.lastCollision.stale = stale;
                hitbubbleOwner.stats.damage = hitbubbleOwner.stats.damage + damage;
                hitbubbleOwner.stats.hits++;
                if (stale > 0) {
                    hitbubbleOwner.stats.staleMoves++;
                    if (stale > 0.25) {
                        hitbubbleOwner.stats.veryStaleMoves++;
                    }
                }
            }
        }
    };
    const entityAnimate = entity => {
        let landed = false;
        let clipLeft = null;
        let clipRight = null;
        if (entity.removed || (entity.act && entity.act()) || !(entity instanceof Animatable)) {
            return;
        }
        entity.ly = entity.y;
        entity.lx = entity.x;
        if (entity.airborne) {
            if (!entity.lag) {
                entity.y = entity.y - entity.dy;
                entity.y = entity.y - entity.kby;
                if (entity.dy > -entity.maxFallSpeed) {
                    if (entity.dy <= 0 && entity.dy > -entity.initialFallSpeed) {
                        entity.dy = -entity.initialFallSpeed * (!isNaN(entity.activeAnimation.gravity) ? entity.activeAnimation.gravity : !isNaN(entity.activeAnimation.keyframeData.gravity) ? (entity.activeAnimation.keyframeData.gravity) : 1);
                    }
                    if (!entity.stun) {
                        entity.dy = entity.dy - (!isNaN(entity.activeAnimation.gravity) ? entity.activeAnimation.gravity : !isNaN(entity.activeAnimation.keyframeData.gravity) ? (entity.activeAnimation.keyframeData.gravity) : entity.fallSpeed);
                    }
                    else {
                        entity.dy = entity.dy - (!isNaN(entity.activeAnimation.gravity) ? entity.activeAnimation.gravity : !isNaN(entity.activeAnimation.keyframeData.gravity) ? (entity.activeAnimation.keyframeData.gravity) : entity.arcSpeed);
                    }
                    if (entity.dy < -entity.maxFallSpeed) {
                        entity.dy = -entity.maxFallSpeed;
                    }
                }
                if (entity.fastfall && entity.dy < 0) {
                    // probably should account for animation gravity settings
                    entity.dy = -entity.fastfallSpeed;
                }
            }
            if (!entity.lag) {
                entity.x = entity.x + entity.dx + entity.kbx;
                entity.dx = entity.dx * (entity.activeAnimation.aerodynamics || entity.aerodynamics);
                if (entity.dy < 0) {
                    entity.dy = entity.dy * (entity.activeAnimation.fallFriction || entity.fallFriction);
                }
                if (entity.activeAnimation.aerodynamics) {
                    entity.dy = entity.dy * (entity.activeAnimation.aerodynamics);
                }
            }
        }
        else {
            if (!entity.lag) {
                entity.x = entity.x + entity.dx + entity.kbx;
                if (entity.slide !== 0) {
                    entity.x = entity.x + entity.slide;
                    if (entity.activeAnimation.slideFriction) {
                        entity.slide = entity.slide * entity.activeAnimation.slideFriction;
                    }
                    else {
                        if (entity.slide > 0) {
                            entity.slide = Math.max(0, entity.slide - entity.slideDecay);
                        }
                        else {
                            entity.slide = Math.min(0, entity.slide + entity.slideDecay);
                        }
                    }
                }
                if (entity.activeAnimation.friction) {
                    entity.dx = entity.dx * entity.activeAnimation.friction;
                }
                else {
                    entity.dx = entity.dx * entity.friction;
                }
            }
        }
        if (!entity.phasing && !entity.phase) {
            if (entity.airborne) {
                const traceDown = stage.traceDown(entity);
                if (traceDown !== null) {
                    entity.y = traceDown;
                    landed = true;
                }
            }
            else if (entity.animation !== 'airhit' && entity.animation !== 'jugglehit' && entity.animation !== 'meteorhit') {
                let slid = 0;
                if (entity.platform) {
                    // if the entity is on a platform
                    if (entity.platform.dx) {
                        // if the entity's platform is moving, move the entity
                        entity.x = entity.x + entity.platform.dx;
                    }
                    do {
                        if (entity.x >= entity.platform.x && entity.x <= entity.platform.x2) {
                            // if in the middle of the platform, set its y value to the height of the platform
                            entity.y = entity.platform.yAt(entity.x);
                            slid = 0;
                        }
                        else if (entity.x > entity.platform.x2) {
                            // if the entity moved right off its platform
                            if (stage.findPlatformLeft(entity.platform.x2, entity.platform.y2)) {
                                // if there is a platform whose left edge is attached to this platform's right edge, move to that one
                                entity.platform = stage.findPlatformLeft(entity.platform.x2, entity.platform.y2);
                                entity.hover = entity.platform;
                                slid = 1;
                            }
                            else {
                                // fell off the right side of a platform
                                slid = 2;
                            }
                        }
                        else if (entity.x < entity.platform.x) {
                            // if the entity moved left off its platform
                            if (stage.findPlatformRight(entity.platform.x, entity.platform.y)) {
                                // if there is a platform whose right edge is attached to this platform's left edge, move to that one
                                entity.platform = stage.findPlatformRight(entity.platform.x, entity.platform.y);
                                entity.hover = entity.platform;
                                slid = 1;
                            }
                            else {
                                // fell off the left side of a platform
                                slid = 3;
                            }
                        }
                    } while (slid === 1);
                    if (slid === 1) {
                        // above, 1 was used temporarily for sliding between platforms
                        entity.y = entity.platform.yAt(entity.x);
                        slid = 0;
                    }
                }
                else {
                    // if the entity is not airborne but doesn't have a platform, it should be airborne
                    slid = 1;
                }
                if (slid !== 0) {
                    // checking to see if entity slid off the platform or was stopped by its animation
                    if (entity.activeAnimation.slid === 'stop' || entity.activeAnimation.slid === 'cancel' || (entity.activeAnimation.type !== 0 && entity.activeAnimation.type !== 5 && entity.activeAnimation.type !== 4 && !entity.activeAnimation.slid)) {
                        // case for this?
                        if (entity.activeAnimation.slid === 'cancel') {
                            slid = entity.face === 1 ? 4 : 5;
                        }
                    }
                    else if (slid === 2) {
                        // check right
                        if (entity.face === 1) {
                            if (entity.dx > 2) {
                                slid = 1;
                            }
                            else {
                                slid = 4;
                            }
                        }
                        else {
                            slid = 1;
                        }
                        slid = 1;
                    }
                    else if (slid === 3) {
                        // check left
                        if (entity.face === -1) {
                            if (entity.dx < 2) {
                                slid = 1;
                            }
                            else {
                                slid = 5;
                            }
                        }
                        else {
                            slid = 1;
                        }
                        slid = 1;
                    }
                    // snapping
                    if (slid === 2 || slid === 4) {
                        // snap right
                        clipRight = entity.platform.x2;
                        entity.x = entity.platform.x2;
                        entity.y = entity.platform.yAt(entity.x);
                        entity.dx = 0;
                        entity.slide = 0;
                    }
                    else if (slid === 3 || slid === 5) {
                        // snap left
                        clipLeft = entity.platform.x;
                        entity.x = entity.platform.x;
                        entity.y = entity.platform.yAt(entity.x);
                        entity.dx = 0;
                        entity.slide = 0;
                    }
                    if (slid === 1) {
                        // if the platform was, indeed, left
                        entity.airborne = true;
                        // entity.dx += entity.slide
                        // NOTE: it counts as 'sliding' when getting knocked off of a ledge..
                        entity.dx = entity.dx + entity.slide * 0.25;
                        entity.kbx = entity.kbx * 0.5;
                        // entity.kb = Math.sqrt(entity.kbx * entity.kbx + entity.kby * entity.kby)
                        entity.slide = 0;
                        if (entity.activeAnimation.slid !== 'continue') {
                            entity.dy = 0;
                            if (entity.platform) {
                                entity.dx = entity.dx + entity.platform.dx;
                                entity.dy = entity.dy + entity.platform.dy;
                            }
                            if (entity.activeAnimation.slid && entity.activeAnimation.slid !== 'stop' && entity.activeAnimation.slid !== 'slide') {
                                entity.setAnimation(entity.activeAnimation.slid, true);
                            }
                            else {
                                if (entity.activeAnimation.type === 0) {
                                    entity.setAnimation('airborne', true);
                                }
                                else {
                                    entity.setAnimation('airborne-slid', true);
                                }
                            }
                        }
                    }
                    else if (slid === 4 || slid === 5) {
                        // the platform was not left, but we should cancel the animation
                        if (entity.activeAnimation.cancel) {
                            entity.setAnimation(entity.activeAnimation.cancel);
                        }
                        else {
                            entity.setAnimation(entity.defaultAnimation || 'idle', true);
                        }
                    }
                }
            }
            const traceLeft = stage.traceLeft(entity);
            if (traceLeft !== false) {
                entity.x = traceLeft;
                entity.dx = entity.dx * 0.8;
                // console.log('wall hit left', entity.animation)
                entity.wallJump = constants.WALL_JUMP_TIMING;
                entity.wallJumpSide = 'left';
            }
            const traceRight = stage.traceRight(entity);
            if (traceRight !== false) {
                entity.x = traceRight;
                entity.dx = entity.dx * 0.8;
                // console.log('wall hit right', entity.animation)
                entity.wallJump = constants.WALL_JUMP_TIMING;
                entity.wallJumpSide = 'right';
            }
        }
        if (landed && !entity.lag) {
            entity.dy = 0;
            entity.dx = entity.dx * 0.5;
            if (entity.activeAnimation.type === 0) {
                entity.slide = entity.dx;
                entity.dx = 0;
            }
            else {
                entity.slide = 0;
            }
            entity.airjumps = 0;
            entity.pseudojumps = 0;
            entity.airborne = false;
            entity.fastfall = false;
            if (entity.slide >= 0) {
                entity.slide = entity.slide - entity.platform.dx;
                if (entity.slide < 0) {
                    entity.dx = entity.dx + entity.slide;
                    entity.slide = 0;
                }
            }
            else {
                entity.slide = entity.slide - entity.platform.dx;
                if (entity.slide > 0) {
                    entity.dx = entity.dx + entity.slide;
                    entity.slide = 0;
                }
            }
            entity.setAnimation('airborne-cancel', true);
            entity.landingAudio && playAudio(entity.landingAudio);
            Effects.airjump(entity.x, entity.y - 3, entity.lighter);
        }
        const thmove = entity.controller.hmove;
        entity.controller.hmove = 0;
        entity.activeAnimation.step();
        entity.hurtbubbles.length && entity.calculateECB && entity.calculateECB();
        entity.controller.hmove = thmove;
    };
    const entityAct = entity => {
        const controller = entity.controller;
        controller && entity.control && entity.control(controller);
        let landed = false;
        let clipLeft = null;
        let clipRight = null;
        if (entity.removed || (entity.act && entity.act()) || !(entity instanceof Animatable)) {
            return;
        }
        entity.ly = entity.y;
        entity.lx = entity.x;
        if (entity.scheduledAnimation[0] !== null) {
            entity.setAnimation(entity.scheduledAnimation[0], entity.scheduledAnimation[1], entity.scheduledAnimation[2]);
            entity.scheduledAnimation[0] = null;
        }
        if (entity.lastCollision.lastFrame) {
            if (entity.activeAnimation.grabbed && entity.lastCollision.type === 6) {
                entity.activeAnimation.grabbed(entity, controller, entity.activeAnimation);
            }
            if (entity.activeAnimation.collided) {
                entity.activeAnimation.collided(entity, controller, entity.activeAnimation);
            }
        }
        if (entity.lastInjury.lastFrame && entity.activeAnimation.injured) {
            entity.activeAnimation.injured(entity, controller);
        }
        if (entity.lastShield.lastFrame && entity.activeAnimation.shielded) {
            entity.activeAnimation.shielded(entity, controller, entity.lastShield);
        }
        if (entity.hitlag && entity.stun && controller) {
            // dbg.log('in hitlag')
            // # smashdi sdi smash di asdi
            if (controller.hardleft === 6 || controller.hardright === 6 || controller.hardup === 6 || controller.harddown === 6) {
                const a = controller.angle();
                entity.x = entity.x - entity.sdi * angleX(a);
                entity.y = entity.y - entity.sdi * angleY(a);
            }
            if (controller.rleft === 2 || controller.rright === 2 || controller.rup === 2 || controller.rdown === 2) {
                const a = controller.rangle();
                entity.x = entity.x - entity.sdi * angleX(a);
                entity.y = entity.y - entity.sdi * angleY(a);
            }
            if (entity.lag <= 0) {
                // dbg.log('out of hitlag')
                if (Math.abs(controller.hright) > 0.2 || Math.abs(controller.vright) > 0.2) {
                    entity.x = entity.x + entity.asdi * controller.hright * (entity.lastInjury.knockback / 4);
                    entity.y = entity.y + entity.asdi * controller.vright * (entity.lastInjury.knockback / 4);
                }
                else {
                    entity.x = entity.x + entity.asdi * controller.hmove * (entity.lastInjury.knockback / 4);
                    entity.y = entity.y + entity.asdi * controller.vmove * (entity.lastInjury.knockback / 4);
                }
                if (((entity.kbf & 4) === 0 /* if hitbubble's angle is not fixed */) && controller && (Math.abs(controller.hmove) >= 0.1 || Math.abs(controller.vmove) >= 0.1)) {
                    // apply directional influence
                    // todo: improve this? necessary?
                    // there's probably a much cleaner way to do this... this is hideous
                    let computedAngle = computeAngle(-controller.hmove, controller.vmove);
                    let angle = entity.kba;
                    if (computedAngle >= angle) {
                        computedAngle = computedAngle - angle;
                        if (360 - computedAngle < computedAngle) {
                            computedAngle = -(360 - computedAngle);
                        }
                    }
                    else {
                        computedAngle = angle - computedAngle;
                        if (360 - computedAngle < computedAngle) {
                            computedAngle = 360 - computedAngle;
                        }
                        else {
                            computedAngle = -computedAngle;
                        }
                    }
                    if (Math.abs(computedAngle) > 90) {
                        if (computedAngle >= 0) {
                            computedAngle = 180 - computedAngle;
                        }
                        else {
                            computedAngle = -180 - computedAngle;
                        }
                    }
                    // DI modifiers, like hitbubble's DI modifier or DI staling
                    let diModifier = constants.DI_MOD;
                    if (entity.kbf & 256) {
                        diModifier = diModifier / (1 - entity.lastInjury.stale);
                    }
                    angle = angle + (diModifier * computedAngle | 0);
                    angle = angle % 360;
                    while (angle < 0) {
                        angle = 360 + angle;
                    }
                    entity.kbx = angleX(angle) * entity.kb;
                    entity.kby = angleY(angle) * entity.kb;
                }
                if (entity.kb > 0) {
                    let leftGround = false;
                    if (entity.kby > 0.01 && !entity.airborne) {
                        entity.airborne = true;
                    }
                    if (!entity.airborne) {
                        leftGround = true;
                    }
                    if (leftGround && entity.airborne) {
                        entity.dx = entity.dx + entity.platform.dx;
                        entity.dy = entity.dy + entity.platform.dy;
                    }
                }
            }
        }
        if (entity.hitlag && entity.lag <= 0) {
            entity.hitlag = false;
        }
        if (entity.launched) {
            entity.ledgeReleased = 0;
            if (entity.airborne || entity.animation === 'ledgegrab' || entity.animation === 'ledgehang') {
                if (!constants.METEOR_CANCEL_OK || (~entity.lastInjury.flags & 32)) {
                    entity.setAnimation(entity.okb <= entity.softland ? 'weakairhit' : (Math.abs(entity.kba - 90) < 25 ? 'jugglehit' : 'airhit'), true);
                }
                else {
                    entity.setAnimation('meteorhit', true);
                }
            }
            else {
                // console.log(entity.kby, entity.launchResistance, Math.abs(entity.kbx * entity.kbx + entity.kby * entity.kby))
                if (entity.kby < 0 && Math.abs(entity.kbx * entity.kbx + entity.kby * entity.kby) > entity.launchResistance) {
                    entity.setAnimation('bounced', true);
                    entity.airborne = true;
                    entity.kby = -entity.kby * 0.8;
                    entity.kba = computeAngle(entity.kbx, -entity.kby);
                }
                else {
                    if (entity.okb < entity.softland && (entity.animation === 'fallen' || entity.animation === 'fall')) {
                        entity.stun = 0;
                        entity.setAnimation('reset', true);
                    }
                    else {
                        entity.setAnimation(entity.okb > entity.softland ? 'hit' : 'weakhit', true);
                    }
                }
            }
            entity.launched = false;
        }
        if (entity.airborne) {
            if (!entity.lag) {
                entity.y = entity.y - entity.dy;
                entity.y = entity.y - entity.kby;
                if (entity.dy > -entity.maxFallSpeed) {
                    if (entity.dy <= 0 && entity.dy > -entity.initialFallSpeed) {
                        entity.dy = -entity.initialFallSpeed * (!isNaN(entity.activeAnimation.gravity) ? entity.activeAnimation.gravity : !isNaN(entity.activeAnimation.keyframeData.gravity) ? (entity.activeAnimation.keyframeData.gravity) : 1);
                    }
                    if (!entity.stun) {
                        entity.dy = entity.dy - (!isNaN(entity.activeAnimation.gravity) ? entity.activeAnimation.gravity : !isNaN(entity.activeAnimation.keyframeData.gravity) ? (entity.activeAnimation.keyframeData.gravity) : entity.fallSpeed);
                    }
                    else {
                        entity.dy = entity.dy - (!isNaN(entity.activeAnimation.gravity) ? entity.activeAnimation.gravity : !isNaN(entity.activeAnimation.keyframeData.gravity) ? (entity.activeAnimation.keyframeData.gravity) : entity.arcSpeed);
                    }
                    if (entity.dy < -entity.maxFallSpeed) {
                        entity.dy = -entity.maxFallSpeed;
                    }
                }
                if (entity.fastfall && entity.dy < 0) {
                    // probably should account for animation gravity settings
                    entity.dy = -entity.fastfallSpeed;
                }
            }
            if (entity.activeAnimation.nodi !== true && entity.activeAnimation.keyframeData.nodi !== true) {
                // airspeed
                if (entity.di) {
                    if (entity.activeAnimation.diScale) {
                        entity.di = entity.di * entity.activeAnimation.diScale;
                    }
                    let speedDiff = 0;
                    if (entity.di > 0 !== entity.dx > 0) {
                        speedDiff = entity.di * 1.5;
                    }
                    else {
                        speedDiff = entity.di;
                    }
                    if (speedDiff > 0 && entity.airSpeed > entity.dx) {
                        entity.dx = Math.min(speedDiff + entity.dx, entity.airSpeed);
                    }
                    if (speedDiff < 0 && -entity.airSpeed < entity.dx) {
                        entity.dx = Math.max(speedDiff + entity.dx, -entity.airSpeed);
                    }
                }
            }
            if (!entity.lag) {
                entity.x = entity.x + entity.dx + entity.kbx;
                entity.dx = entity.dx * (entity.activeAnimation.aerodynamics || entity.aerodynamics);
                if (entity.dy < 0) {
                    entity.dy = entity.dy * (entity.activeAnimation.fallFriction || entity.fallFriction);
                }
                if (entity.activeAnimation.aerodynamics) {
                    entity.dy = entity.dy * (entity.activeAnimation.aerodynamics);
                }
            }
        }
        else {
            if (!entity.lag) {
                if (controller.harddown || entity.platformDrop) {
                    if (!entity.platform.solid && entity.animation !== 'platformdrop' && entity.setAnimation('platformdrop', entity.platformDrop)) {
                        entity.fastfall = false;
                        controller.harddown = 0;
                    }
                    entity.platformDrop = false;
                }
                entity.x = entity.x + entity.dx + entity.kbx;
                if (entity.slide !== 0) {
                    entity.x = entity.x + entity.slide;
                    if (entity.activeAnimation.slideFriction) {
                        entity.slide = entity.slide * entity.activeAnimation.slideFriction;
                    }
                    else {
                        if (entity.slide > 0) {
                            entity.slide = Math.max(0, entity.slide - entity.slideDecay);
                        }
                        else {
                            entity.slide = Math.min(0, entity.slide + entity.slideDecay);
                        }
                    }
                }
                if (entity.activeAnimation.friction) {
                    entity.dx = entity.dx * entity.activeAnimation.friction;
                }
                else {
                    entity.dx = entity.dx * entity.friction;
                }
                if (entity.animation !== 'ledgegrab' && entity.animation !== 'ledgehang') {
                    for (let i = 0; i < entities.length; i++) {
                        const e = entities[i];
                        if (e !== entity && !e.airborne && !e.lag && e.animation !== 'ledgegrab' && e.animation !== 'ledgehang') {
                            if (Math.abs(e.x - entity.x) < e.width + entity.width && Math.abs((e.y + e.height / 2) - (entity.y + entity.height / 2)) < (-e.height - entity.height) / 2) {
                                // console.log(e.y - e.height / 2, entity.y - entity.height / 2, Math.abs((e.y - e.height / 2) - (entity.y - entity.height / 2)), (-e.height - entity.height) / 2)
                                entity.dx = entity.dx + (e.x === entity.x ? lqrandomSync() * 0.1 - 0.05 : e.x > entity.x ? -0.05 : 0.05);
                                e.dx = e.dx + (e.x === entity.x ? lqrandomSync() * 0.1 - 0.05 : e.x < entity.x ? -0.05 : 0.05);
                            }
                        }
                    }
                }
            }
        }
        if (!entity.phasing && !entity.phase) {
            if (entity.airborne) {
                const traceDown = stage.traceDown(entity);
                if (traceDown !== null) {
                    if (entity.platform.solid || !entity.activeAnimation.platformDroppable || controller.vmove < 0.5) {
                        entity.y = traceDown;
                        landed = true;
                    }
                }
            }
            else if (entity.animation !== 'airhit' && entity.animation !== 'jugglehit' && entity.animation !== 'meteorhit') {
                let slid = 0;
                if (entity.platform) {
                    // if the entity is on a platform
                    if (entity.platform.dx) {
                        // if the entity's platform is moving, move the entity
                        entity.x = entity.x + entity.platform.dx;
                    }
                    do {
                        if (entity.x >= entity.platform.x && entity.x <= entity.platform.x2) {
                            // if in the middle of the platform, set its y value to the height of the platform
                            entity.y = entity.platform.yAt(entity.x);
                            slid = 0;
                        }
                        else if (entity.x > entity.platform.x2) {
                            // if the entity moved right off its platform
                            if (stage.findPlatformLeft(entity.platform.x2, entity.platform.y2)) {
                                // if there is a platform whose left edge is attached to this platform's right edge, move to that one
                                entity.platform = stage.findPlatformLeft(entity.platform.x2, entity.platform.y2);
                                entity.hover = entity.platform;
                                slid = 1;
                            }
                            else {
                                // fell off the right side of a platform
                                slid = 2;
                            }
                        }
                        else if (entity.x < entity.platform.x) {
                            // if the entity moved left off its platform
                            if (stage.findPlatformRight(entity.platform.x, entity.platform.y)) {
                                // if there is a platform whose right edge is attached to this platform's left edge, move to that one
                                entity.platform = stage.findPlatformRight(entity.platform.x, entity.platform.y);
                                entity.hover = entity.platform;
                                slid = 1;
                            }
                            else {
                                // fell off the left side of a platform
                                slid = 3;
                            }
                        }
                    } while (slid === 1);
                    if (slid === 1) {
                        // above, 1 was used temporarily for sliding between platforms
                        entity.y = entity.platform.yAt(entity.x);
                        slid = 0;
                    }
                }
                else {
                    // if the entity is not airborne but doesn't have a platform, it should be airborne
                    slid = 1;
                }
                if (slid !== 0) {
                    // checking to see if entity slid off the platform or was stopped by its animation
                    if (entity.activeAnimation.slid === 'stop' || entity.activeAnimation.slid === 'cancel' || (entity.activeAnimation.type !== 0 && entity.activeAnimation.type !== 5 && entity.activeAnimation.type !== 4 && !entity.activeAnimation.slid)) {
                        // case for this?
                        if (entity.activeAnimation.slid === 'cancel') {
                            slid = entity.face === 1 ? 4 : 5;
                        }
                    }
                    else if (slid === 2) {
                        // check right
                        if (entity.face === 1) {
                            if (controller.hmove > 0.6 || entity.dx > 2) {
                                slid = 1;
                            }
                            else {
                                slid = 4;
                            }
                        }
                        else {
                            slid = 1;
                        }
                        slid = 1;
                    }
                    else if (slid === 3) {
                        // check left
                        if (entity.face === -1) {
                            if (controller.hmove < -0.6 || entity.dx < 2) {
                                slid = 1;
                            }
                            else {
                                slid = 5;
                            }
                        }
                        else {
                            slid = 1;
                        }
                        slid = 1;
                    }
                    // snapping
                    if (slid === 2 || slid === 4) {
                        // snap right
                        clipRight = entity.platform.x2;
                        entity.x = entity.platform.x2;
                        entity.y = entity.platform.yAt(entity.x);
                        entity.dx = 0;
                        entity.slide = 0;
                    }
                    else if (slid === 3 || slid === 5) {
                        // snap left
                        clipLeft = entity.platform.x;
                        entity.x = entity.platform.x;
                        entity.y = entity.platform.yAt(entity.x);
                        entity.dx = 0;
                        entity.slide = 0;
                    }
                    if (slid === 1) {
                        // if the platform was, indeed, left
                        entity.airborne = true;
                        // entity.dx += entity.slide
                        // NOTE: it counts as 'sliding' when getting knocked off of a ledge..
                        entity.dx = entity.dx + entity.slide * 0.25;
                        entity.kbx = entity.kbx * 0.5;
                        // entity.kb = Math.sqrt(entity.kbx * entity.kbx + entity.kby * entity.kby)
                        entity.slide = 0;
                        if (entity.activeAnimation.slid !== 'continue') {
                            entity.dy = 0;
                            if (entity.platform) {
                                entity.dx = entity.dx + entity.platform.dx;
                                entity.dy = entity.dy + entity.platform.dy;
                            }
                            if (entity.activeAnimation.slid && entity.activeAnimation.slid !== 'stop' && entity.activeAnimation.slid !== 'slide') {
                                entity.setAnimation(entity.activeAnimation.slid, true);
                            }
                            else {
                                if (entity.activeAnimation.type === 0) {
                                    entity.setAnimation('airborne', true);
                                }
                                else {
                                    entity.setAnimation('airborne-slid', true);
                                }
                            }
                        }
                    }
                    else if (slid === 4 || slid === 5) {
                        // the platform was not left, but we should cancel the animation
                        if (entity.activeAnimation.cancel) {
                            entity.setAnimation(entity.activeAnimation.cancel);
                        }
                        else {
                            entity.setAnimation(entity.defaultAnimation || 'idle', true);
                        }
                    }
                }
            }
            if (!entity.lag) {
                const traceLeft = stage.traceLeft(entity);
                if (traceLeft !== false) {
                    entity.x = traceLeft;
                    entity.dx = entity.dx * 0.8;
                    // console.log('wall hit left', entity.animation)
                    entity.wallJump = constants.WALL_JUMP_TIMING;
                    entity.wallJumpSide = 'left';
                    if (entity.activeAnimation.techable) {
                        if (constants.WALL_TECH_OK && entity.teched > (constants.TECH_TIMER - constants.TECH_WINDOW)) {
                            if (entity.playerNumber >= 0) {
                                entity.stats.walltech++;
                            }
                            entity.dx = 0;
                            entity.dy = 0;
                            entity.kbx = 0;
                            entity.kby = 0;
                            entity.kb = 0;
                            entity.stun = 0;
                            entity.face = 1;
                            entity.setAnimation('walltech');
                            entity.activeAnimation.tech && entity.activeAnimation.tech(entity, 2);
                        }
                        else {
                            if (entity.playerNumber >= 0) {
                                entity.stats.walltechmiss++;
                            }
                            entity.kbx = -entity.kbx;
                            entity.kby = entity.kby < 0 ? entity.kby : -entity.kby;
                            entity.stun = Math.round(entity.stun * 0.25);
                            entity.kb = entity.kb * 0.25;
                            entity.kbx = entity.kbx * 0.25;
                            entity.kby = entity.kby * 0.25;
                            entity.lag = 8;
                            entity.activeAnimation.missedtech && entity.activeAnimation.missedtech(entity, 2);
                        }
                    }
                }
                const traceRight = stage.traceRight(entity);
                if (traceRight !== false) {
                    entity.x = traceRight;
                    entity.dx = entity.dx * 0.8;
                    // console.log('wall hit right', entity.animation)
                    entity.wallJump = constants.WALL_JUMP_TIMING;
                    entity.wallJumpSide = 'right';
                    if (entity.activeAnimation.techable) {
                        if (constants.WALL_TECH_OK && entity.teched > (constants.TECH_TIMER - constants.TECH_WINDOW)) {
                            if (entity.playerNumber >= 0) {
                                entity.stats.walltech++;
                            }
                            entity.dx = 0;
                            entity.dy = 0;
                            entity.kbx = 0;
                            entity.kby = 0;
                            entity.kb = 0;
                            entity.stun = 0;
                            entity.face = 1;
                            entity.setAnimation('walltech');
                            entity.activeAnimation.tech && entity.activeAnimation.tech(entity, 4);
                        }
                        else {
                            if (entity.playerNumber >= 0) {
                                entity.stats.walltechmiss++;
                            }
                            entity.kbx = -entity.kbx;
                            entity.kby = entity.kby < 0 ? entity.kby : -entity.kby;
                            entity.stun = Math.round(entity.stun * 0.25);
                            entity.kb = entity.kb * 0.25;
                            entity.kbx = entity.kbx * 0.25;
                            entity.kby = entity.kby * 0.25;
                            entity.lag = 8;
                            entity.activeAnimation.missedtech && entity.activeAnimation.missedtech(entity, 4);
                        }
                    }
                }
                if (entity.airborne) {
                    const traceUp = stage.traceUp(entity);
                    if (traceUp !== false) {
                        entity.y = traceUp - entity.height + 1;
                        // entity.dy = entity.dy * 0.8
                        if (entity.activeAnimation.techable) {
                            if (constants.WALL_TECH_OK && entity.teched > (constants.TECH_TIMER - constants.TECH_WINDOW)) {
                                if (entity.playerNumber >= 0) {
                                    entity.stats.walltech++;
                                }
                                entity.dx = 0;
                                entity.dy = 0;
                                entity.kbx = 0;
                                entity.kby = 0;
                                entity.kb = 0;
                                entity.stun = 0;
                                entity.setAnimation('rooftech');
                                entity.activeAnimation.tech && entity.activeAnimation.tech(entity, 1);
                            }
                            else {
                                if (entity.playerNumber >= 0) {
                                    entity.stats.walltechmiss++;
                                }
                                entity.kby = entity.kby < 0 ? entity.kby : -entity.kby;
                                entity.stun = Math.round(entity.stun * 0.25);
                                entity.kb = entity.kb * 0.25;
                                entity.kbx = entity.kbx * 0.25;
                                entity.kby = entity.kby * 0.25;
                                entity.lag = 8;
                                entity.activeAnimation.missedtech && entity.activeAnimation.missedtech(entity, 1);
                            }
                        }
                    }
                }
            }
        }
        if (landed && !entity.lag) {
            entity.dy = 0;
            entity.dx = entity.dx * 0.5;
            if (entity.activeAnimation.type === 0) {
                entity.slide = entity.dx;
                entity.dx = 0;
            }
            else {
                entity.slide = 0;
            }
            entity.airjumps = 0;
            entity.pseudojumps = 0;
            let landingAudio = entity.landingAudio;
            entity.airborne = false;
            entity.fastfall = false;
            if (entity.slide >= 0) {
                entity.slide = entity.slide - entity.platform.dx;
                if (entity.slide < 0) {
                    entity.dx = entity.dx + entity.slide;
                    entity.slide = 0;
                }
            }
            else {
                entity.slide = entity.slide - entity.platform.dx;
                if (entity.slide > 0) {
                    entity.dx = entity.dx + entity.slide;
                    entity.slide = 0;
                }
            }
            if (entity.activeAnimation.early && entity.activeAnimation.frame < entity.activeAnimation.early || entity.activeAnimation.late && entity.activeAnimation.frame > entity.activeAnimation.duration - entity.activeAnimation.late) {
                entity.setAnimation('airborne-cancel', true);
            }
            else if (entity.activeAnimation.lag || entity.activeAnimation.keyframeData.lag || entity.activeAnimation.cancel || entity.activeAnimation.keyframeData.cancel) {
                if (entity.activeAnimation.techable && entity.teched > (constants.TECH_TIMER - constants.TECH_WINDOW)) {
                    if (controller.left) {
                        if (entity.face === -1) {
                            entity.setAnimation('techforward', true);
                        }
                        else {
                            entity.setAnimation('techbackward', true);
                        }
                    }
                    else if (controller.right) {
                        if (entity.face === 1) {
                            entity.setAnimation('techforward', true);
                        }
                        else {
                            entity.setAnimation('techbackward', true);
                        }
                    }
                    else {
                        entity.setAnimation('tech', true);
                    }
                    if (entity.playerNumber >= 0) {
                        // do in/out later when less irritated
                        entity.stats.tech++;
                    }
                    entity.stun = 0;
                    entity.teched = 0;
                    entity.activeAnimation.tech && entity.activeAnimation.tech(entity, 3);
                }
                else {
                    entity.activeAnimation.missedtech && entity.activeAnimation.missedtech(entity, 3);
                    if (entity.activeAnimation.techable && entity.playerNumber >= 0) {
                        entity.stats.techmiss++;
                    }
                    const oldAnimation = entity.activeAnimation;
                    const cancelAnimation = entity.activeAnimation.keyframeData.cancel || entity.activeAnimation.cancel || 'cancel';
                    if (cancelAnimation !== 'continue') {
                        if (cancelAnimation === 'cancel') {
                            // TODO: wut? is this ok?
                            entity.animations['cancel'].duration = entity.activeAnimation.keyframeData.lag || entity.activeAnimation.lag;
                            entity.animations['cancel'].keyframes[0].duration = entity.activeAnimation.keyframeData.lag || entity.activeAnimation.lag;
                        }
                        entity.setAnimation(cancelAnimation, true);
                    }
                    if ((oldAnimation.type === 2 || oldAnimation.lagCancellable) && entity.lagCancel > constants.LAG_CANCEL_TIMER - constants.LAG_CANCEL_WINDOW) {
                        if (entity.playerNumber >= 0) {
                            entity.stats.lagCancels++;
                        }
                        if (constants.INSTANT_LAG_CANCEL) {
                            entity.setAnimation('airborne-cancel', true);
                            entity.flash = 8;
                        }
                        else {
                            entity.lagCancel = 0;
                            if (entity.lagCancelAudio) {
                                landingAudio = entity.lagCancelAudio;
                                entity.flash = 8;
                            }
                            entity.activeAnimation.ticks = 2;
                        }
                    }
                    else if (oldAnimation.type === 2 && !oldAnimation.noLCancel) {
                        landingAudio = entity.heavyLandingAudio;
                        if (entity.playerNumber >= 0) {
                            entity.stats.heavyLands++;
                        }
                    }
                }
            }
            else {
                entity.setAnimation('airborne-cancel', true);
            }
            landingAudio && playAudio(landingAudio);
            Effects.airjump(entity.x, entity.y - 3, entity.lighter);
        }
        if (entity.buffertime > 0 && entity.buffer) {
            if (entity.setAnimation(entity.buffer)) {
                entity.buffertime = 0;
                entity.buffer = '';
            }
            else {
                entity.buffertime--;
            }
        }
        if (entity.lagCancel > 0) {
            entity.lagCancel--;
        }
        if (entity.flash > 0) {
            entity.flash--;
        }
        if (entity.stun > 0 && !entity.lag) {
            entity.stun--;
        }
        if (entity.shieldstun > 0 && !entity.lag) {
            entity.shieldstun--;
        }
        if (entity.shield < 1 && entity.lag <= 0) {
            entity.shield = entity.shield + entity.shieldRegen;
            if (entity.shield > 1) {
                entity.shield = 1;
            }
        }
        if (!entity.airborne) {
            if (clipRight !== null && entity.x > clipRight) {
                entity.x = clipRight;
                entity.activeAnimation.resetBubbles();
            }
            if (clipLeft !== null && entity.x < clipLeft) {
                entity.x = clipLeft;
                entity.activeAnimation.resetBubbles();
            }
        }
        let grab = 0;
        let ledgegrabbed = null;
        if (entity.ledgeReleased > constants.LEDGE_REGRAB_RESTRICT && !entity.lag && !entity.activeAnimation.keyframeData.noLedgeGrab && entity.airborne && (!controller || controller.vmove < 0.5) && (entity.activeAnimation.keyframeData.grabDirections || entity.activeAnimation.grabDirections)) {
            const directions = entity.activeAnimation.keyframeData.grabDirections || entity.activeAnimation.grabDirections;
            if ((directions & 192 && entity.dy <= 0) ||
                (directions & 1 && entity.dy >= 0) ||
                (directions & 2 && entity.dx <= 0) ||
                (directions & 4 && entity.dy <= 0) ||
                (directions & 8 && entity.dx >= 0)) {
                for (let i = 0; i < stage.elements.length; i++) {
                    grab = stage.elements[i].testLedgeGrab(entity, directions);
                    if (grab > 0) {
                        ledgegrabbed = stage.elements[i];
                        break;
                    }
                }
            }
        }
        if (ledgegrabbed) {
            entity.airborne = false;
            entity.dx = 0;
            entity.dy = 0;
            entity.kb = 0;
            entity.kbx = 0;
            entity.kby = 0;
            entity.airjumps = 0;
            entity.slide = 0;
            entity.fastfall = false;
            entity.platform = ledgegrabbed;
            entity.hover = entity.platform;
            if (grab === 1) {
                entity.x = ledgegrabbed.x;
                entity.y = ledgegrabbed.y;
                entity.face = 1;
            }
            else if (grab === 2) {
                entity.x = ledgegrabbed.x2;
                entity.y = ledgegrabbed.y2;
                entity.face = -1;
            }
            Effects.ledgegrab(entity.x, entity.y, entity.color + 1);
            if (!entity.activeAnimation.ledgestall) {
                entity.intangible = 37;
            }
            else {
                // if it's a ledge stall, reduce intangibility by # of pseudojumps made
                entity.intangible = (37 / Math.max(entity.pseudojumps, 1)) | 0;
            }
            entity.grabbedOn = frame;
            playAudio('ledgegrab');
            entity.ledgeHang = entity.face === 1;
            if (entity.ledgeHang) {
                entity.platform.leftOccupied = 2;
            }
            else {
                entity.platform.rightOccupied = 2;
            }
            entity.setAnimation(entity.activeAnimation.ledgeGrab ? entity.activeAnimation.ledgeGrab : 'ledgegrab', true);
            if (entity.playerNumber >= 0) {
                entity.stats.ledgeGrabs++;
            }
        }
        if (entity.kb === 0 && (entity.kbx !== 0 || entity.kby !== 0)) {
            console.error('kb was set to 0, kbx and kby were not', entity.kbx, entity.kby, entity.kbDecay);
            entity.kbx = 0;
            entity.kby = 0;
        }
        if (!entity.lag && entity.kb) {
            if (!entity.airborne && entity.kby !== 0) {
                // console.log('zeroed kby')
                entity.slide = entity.kbx;
                entity.kb = 0;
                entity.kbx = 0;
                entity.kby = 0;
            }
            else {
                let ratio = 0;
                if (entity.kbDecay < entity.kb) {
                    ratio = 1 - Math.min(1, entity.kbDecay / entity.kb);
                }
                entity.kb = entity.kb * ratio;
                entity.kbx = entity.kbx * ratio;
                if (!entity.airborne) {
                    entity.kbx = entity.kbx * entity.kbFriction;
                }
                // console.log('reducing kby', entity.kby, 'to', entity.kby * ratio)
                entity.kby = entity.kby * ratio;
            }
        }
        if (entity.phase) {
            entity.phase = false;
        }
        entity.activeAnimation.step();
        entity.hurtbubbles.length && entity.calculateECB && entity.calculateECB();
        if (entity.intangible) {
            entity.intangible--;
            for (let i = 0; i < entity.hurtbubbles.length; i++) {
                entity.hurtbubbles[i].type = 5;
            }
            if (entity.invincible) {
                entity.invincible--;
            }
        }
        else if (entity.invincible) {
            entity.invincible--;
            for (let i = 0; i < entity.hurtbubbles.length; i++) {
                if (entity.hurtbubbles[i].type !== 5) {
                    entity.hurtbubbles[i].type = 4;
                }
            }
        }
        if (entity.teched > 0) {
            entity.teched--;
        }
        if (entity.lag <= 0) {
            entity.ledgeReleased++;
            if (entity.wallJump > 0) {
                entity.wallJump--;
            }
            for (let s of entity.status) {
                s.tick(entity);
            }
        }
        if (entity.lag > 0) {
            entity.lag--;
        }
        if (entity.x < stage.blastLeft || entity.x > stage.blastRight || (entity.y < stage.blastTop && (!entity.activeAnimation || entity.activeAnimation.starKO) && entity.kb > constants.STAR_KO_KB_THRESHOLD) || entity.y > stage.blastBottom) {
            // koed
            if (entity.important) {
                entity.lastFall.x = entity.x;
                entity.lastFall.y = entity.y;
                entity.lastFall.frame = frame;
                if (entity.x < stage.blastLeft) {
                    // panCamera(1000, 0)
                    for (let i = 0; i < 140; i++) {
                        const inward = lqrandom() * 100 - 50;
                        Effects.beam(entity.x - lqrandom() * 400, entity.y + entity.height - inward, 50 + lqrandom() * 20, inward / 20, Math.random() > 0.5 ? entity.lighter : 15);
                    }
                }
                if (entity.x > stage.blastRight) {
                    // panCamera(-1000, 0)
                    for (let i = 0; i < 140; i++) {
                        const inward = lqrandom() * 100 - 50;
                        Effects.beam(entity.x + lqrandom() * 400, entity.y + entity.height - inward, -50 - lqrandom() * 20, inward / 20, Math.random() > 0.5 ? entity.lighter : 15);
                    }
                }
                if (entity.y < stage.blastTop) {
                    // panCamera(0, 1000)
                    for (let i = 0; i < 140; i++) {
                        const inward = lqrandom() * 100 - 50;
                        Effects.beam(entity.x - inward, entity.y - lqrandom() * 400, inward / 20, 50 + lqrandom() * 20, Math.random() > 0.5 ? entity.lighter : 15);
                    }
                }
                if (entity.y > stage.blastBottom) {
                    // panCamera(0, -1000)
                    for (let i = 0; i < 140; i++) {
                        const inward = lqrandom() * 100 - 50;
                        Effects.beam(entity.x - inward, entity.y + lqrandom() * 400, inward / 20, -50 - lqrandom() * 20, Math.random() > 0.5 ? entity.lighter : 15);
                    }
                }
                if (entity.playerNumber >= 0) {
                    if (entity.lastInjury.entity && frame - (entity.lastInjury.frame + entity.lastInjury.frame + entity.lastInjury.lag) < 300) {
                        // koed by someone
                        entity.stats.falls++;
                        entity.stats.fallpct = entity.stats.fallpct + entity.damage;
                        const e = entity.lastInjury.entity.friendly;
                        e.stats.kos++;
                        e.stats.kopct = e.stats.kopct + entity.damage;
                    }
                    else {
                        entity.stats.sds++;
                        entity.stats.sdpct = entity.stats.fallpct + entity.damage;
                    }
                }
            }
            entity.damage = 0;
            entity.stocks--;
            entity.points--;
            entity.reset();
            entity.x = stage.spawns[0];
            entity.y = stage.spawns[1];
            if (entity.permadeath) {
                entity.removed = true;
            }
            else {
                playAudio('blastzoned');
                activeMode.ko && activeMode.ko(entity);
                if (!entity.removed) {
                    entity.setAnimation('respawn', true);
                    entity.animations['respawn'].step();
                }
            }
        }
        if (entity.lastCollision.lastFrame || entity.lastInjury.lastFrame || entity.lastClash.lastFrame || entity.lastShield.lastFrame) {
            entity.lastCollision.lastFrame = entity.lastInjury.lastFrame = entity.lastClash.lastFrame = entity.lastShield.lastFrame = false;
        }
        if (entity.playerNumber >= 0) {
            if (entity.airborne) {
                entity.stats.airFrames++;
            }
            else {
                entity.stats.groundFrames++;
            }
        }
    };
    const setActiveMode = (mode, data = null) => {
        stopAudio();
        entities.forEach(entity => {
            entity.remove();
        });
        playMusic('allMusic');
        entities.length = 0;
        uiEntities.length = 0;
        resetMouseListeners();
        players.length = 0;
        hurtbubbles.length = 0;
        Effects.reset();
        stage = new Stage();
        activeMode = mode(data);
        connected.forEach(controller => {
            controller.hook = undefined;
            activeMode.connect(controller);
        });
    };
    global.BZ = {
        dbg: dbg
    };
    const toggleConstants = () => {
        constants = constants === modes.default ? modes.ssb64 : modes.default;
        initAnimation(dbg, Effects, constants, () => frame);
    };
    const engineTick = (_frame) => {
        if (pollNetwork(_frame)) {
            return true;
        }
        for (let i = 0; i < connected.length; i++) {
            if (connected[i].waiting()) {
                // dbg.log('waiting for input')
                return true;
            }
        }
        for (let i = 0; i < connected.length; i++) {
            connected[i].update();
        }
        clearHitbubbles();
        activeMode.run();
        stage.act();
        if (activeMode.started) {
            entities.forEach(entityAct);
        }
        else {
            entities.forEach(entityAnimate);
        }
        uiEntities.forEach(entityAct);
        tempHitMap.clear();
        testHitBubbleCollisions();
        testCollisions();
        // hurtbubbles.forEach(testCollisions)
        frame = _frame;
        syncRendering(stage, hifi, activeMode);
        swapRemoved(entities, removed, true);
        swapRemoved(removed, entities, false);
    };
    initAnimation(dbg, Effects, constants, () => frame);
    initRendering(entities, uiEntities, players, dbg, engineTick, Animatable, setActiveMode, characterData, calcColor, toggleConstants, Entity, _stage => { stage = _stage; });
    syncRendering(stage, hifi, activeMode);
    addDirToIndex('/', {
        contents: map({
            'bin': {
                contents: map({
                    'sb-dmg': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            let dmg = parseFloat(args[1]);
                            for (let i = 0; i < entities.length; i++) {
                                if (entities[i].dummy) {
                                    entities[i].damage = dmg;
                                }
                            }
                            return 0;
                        }
                    },
                    'unstale': {
                        mode: 0b001,
                        exec: (args, stdin, stdout, stderr, wd, env) => {
                            for (let i = 0; i < entities.length; i++) {
                                if (entities[i].stale && entities[i].stale.moves) {
                                    entities[i].stale.moves.length = 0;
                                    entities[i].stale.cursor = 0;
                                }
                            }
                            return 0;
                        }
                    }
                })
            }
        })
    });
    global.calcColor = calcColor;
    global.dumpHitbubbles = () => hitbubbles;
    global.dumpEntities = () => entities;
    return () => ({ entities });
})();
//# sourceMappingURL=blastzone.js.map